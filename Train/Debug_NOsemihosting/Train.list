
Train.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002094  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08002154  08002154  00012154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021a0  080021a0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  080021a0  080021a0  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021a0  080021a0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021a0  080021a0  000121a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021a4  080021a4  000121a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080021a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000001c  080021c4  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  080021c4  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002a5d  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000809  00000000  00000000  00022aa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000300  00000000  00000000  000232b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002a8  00000000  00000000  000235b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000186a  00000000  00000000  00023858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002cc6  00000000  00000000  000250c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000aa6e  00000000  00000000  00027d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000327f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a68  00000000  00000000  00032848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000001c 	.word	0x2000001c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800213c 	.word	0x0800213c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000020 	.word	0x20000020
 8000104:	0800213c 	.word	0x0800213c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr

08000116 <delay>:
	return length;
}
*/

void delay(uint32_t timeDelayed)
{
 8000116:	b580      	push	{r7, lr}
 8000118:	b084      	sub	sp, #16
 800011a:	af00      	add	r7, sp, #0
 800011c:	6078      	str	r0, [r7, #4]
	// some delay for the debouncing of the buttons
	for(uint32_t i = 0 ; i < timeDelayed ; i ++);//SPI,GPIO too?: 300000/2 working in old PC. in new PC, so far 1000000/2 mostly
 800011e:	2300      	movs	r3, #0
 8000120:	60fb      	str	r3, [r7, #12]
 8000122:	e002      	b.n	800012a <delay+0x14>
 8000124:	68fb      	ldr	r3, [r7, #12]
 8000126:	3301      	adds	r3, #1
 8000128:	60fb      	str	r3, [r7, #12]
 800012a:	68fa      	ldr	r2, [r7, #12]
 800012c:	687b      	ldr	r3, [r7, #4]
 800012e:	429a      	cmp	r2, r3
 8000130:	d3f8      	bcc.n	8000124 <delay+0xe>
}
 8000132:	46c0      	nop			; (mov r8, r8)
 8000134:	46c0      	nop			; (mov r8, r8)
 8000136:	46bd      	mov	sp, r7
 8000138:	b004      	add	sp, #16
 800013a:	bd80      	pop	{r7, pc}

0800013c <main>:
//configure ADS1115 registers
void configureADS1115(I2C_Handle_t *pI2Chandle);

/**********************************************START MAIN********************************************************************/
int main(void)
{
 800013c:	b580      	push	{r7, lr}
 800013e:	af00      	add	r7, sp, #0
	//initialise_monitor_handles(); //for debugging in IDE
	//printf("THIS STARTS\n");

	//initialize structures to 0 to avoid garbage values
	memset(&buttons,0,sizeof(buttons));
 8000140:	4b53      	ldr	r3, [pc, #332]	; (8000290 <main+0x154>)
 8000142:	220c      	movs	r2, #12
 8000144:	2100      	movs	r1, #0
 8000146:	0018      	movs	r0, r3
 8000148:	f001 ffb4 	bl	80020b4 <memset>
	memset(&leds,0,sizeof(leds));
 800014c:	4b51      	ldr	r3, [pc, #324]	; (8000294 <main+0x158>)
 800014e:	220c      	movs	r2, #12
 8000150:	2100      	movs	r1, #0
 8000152:	0018      	movs	r0, r3
 8000154:	f001 ffae 	bl	80020b4 <memset>

	/*GPIOs for the SPI handled by spiGPIO -->SPI1 PA4:NSS PA4:SCK PA4:MISO PA4:MOSI. sp1 is the handle for SPI1*/
	memset(&spiGPIOs,0,sizeof(spiGPIOs));
 8000158:	4b4f      	ldr	r3, [pc, #316]	; (8000298 <main+0x15c>)
 800015a:	220c      	movs	r2, #12
 800015c:	2100      	movs	r1, #0
 800015e:	0018      	movs	r0, r3
 8000160:	f001 ffa8 	bl	80020b4 <memset>
	memset(&spi1,0,sizeof(spi1));
 8000164:	4b4d      	ldr	r3, [pc, #308]	; (800029c <main+0x160>)
 8000166:	2224      	movs	r2, #36	; 0x24
 8000168:	2100      	movs	r1, #0
 800016a:	0018      	movs	r0, r3
 800016c:	f001 ffa2 	bl	80020b4 <memset>

	/*GPIOs for the I2C handled by i2cGPIOs-->PB6,9 i2c1 is the handle for I2C1*/
	memset(&i2cGPIOs,0,sizeof(i2cGPIOs));
 8000170:	4b4b      	ldr	r3, [pc, #300]	; (80002a0 <main+0x164>)
 8000172:	220c      	movs	r2, #12
 8000174:	2100      	movs	r1, #0
 8000176:	0018      	movs	r0, r3
 8000178:	f001 ff9c 	bl	80020b4 <memset>
	memset(&i2c1,0,sizeof(i2c1));
 800017c:	4b49      	ldr	r3, [pc, #292]	; (80002a4 <main+0x168>)
 800017e:	2224      	movs	r2, #36	; 0x24
 8000180:	2100      	movs	r1, #0
 8000182:	0018      	movs	r0, r3
 8000184:	f001 ff96 	bl	80020b4 <memset>

	//initialize timer structures to avoid garbage values
	memset(&timer7,0,sizeof(timer7));
 8000188:	4b47      	ldr	r3, [pc, #284]	; (80002a8 <main+0x16c>)
 800018a:	220c      	movs	r2, #12
 800018c:	2100      	movs	r1, #0
 800018e:	0018      	movs	r0, r3
 8000190:	f001 ff90 	bl	80020b4 <memset>

	//Configurations and initilizations
	peripheral_Config_Ini();
 8000194:	f000 f9e2 	bl	800055c <peripheral_Config_Ini>

	/*configure interrupts (without priorities atm)*/
	//Button OnOff (GPIOB0)
	GPIO_IRQ_EnableDisable(IRQ_EXTI2_3, ENABLE);
 8000198:	2101      	movs	r1, #1
 800019a:	2006      	movs	r0, #6
 800019c:	f001 f930 	bl	8001400 <GPIO_IRQ_EnableDisable>
	//Button Emergency (GPIOB2)
	GPIO_IRQ_EnableDisable(IRQ_EXTI4_15, ENABLE);
 80001a0:	2101      	movs	r1, #1
 80001a2:	2007      	movs	r0, #7
 80001a4:	f001 f92c 	bl	8001400 <GPIO_IRQ_EnableDisable>
	//SPI1
	SPI_IRQ_EnableDisable(IRQ_SPI1, ENABLE);
 80001a8:	2101      	movs	r1, #1
 80001aa:	2019      	movs	r0, #25
 80001ac:	f001 fe02 	bl	8001db4 <SPI_IRQ_EnableDisable>
	//I2C1
	I2C_IRQ_EnableDisable(IRQ_I2C1, ENABLE);
 80001b0:	2101      	movs	r1, #1
 80001b2:	2017      	movs	r0, #23
 80001b4:	f001 f9f0 	bl	8001598 <I2C_IRQ_EnableDisable>
	//Timer 7
	BasicTimer_IRQ_EnableDisable(TIM7, ENABLE);
 80001b8:	2101      	movs	r1, #1
 80001ba:	2012      	movs	r0, #18
 80001bc:	f000 fde6 	bl	8000d8c <BasicTimer_IRQ_EnableDisable>

	//Start timer counter
	BasicTimer_RestartCounter(&timer7);
 80001c0:	4b39      	ldr	r3, [pc, #228]	; (80002a8 <main+0x16c>)
 80001c2:	0018      	movs	r0, r3
 80001c4:	f000 fdd1 	bl	8000d6a <BasicTimer_RestartCounter>
	/* Loop forever */
	while (1){
		//Send information to display in LCD via SPI through Arduino when there is a state change or new station (virtual basic timer update)
		//Variable flagSPI to know if spi_appComm has not finished (included in the second if)
		//if emergency/off,virtual timer !=ACTIVE--> FUNCTION_NOT_ACCESSIBLE
		if (VirtualBasicTimer_Elapsed(&train_virtualTimer) == VIRTUAL_BASIC_TIMER_ELAPSED){
 80001c8:	4b38      	ldr	r3, [pc, #224]	; (80002ac <main+0x170>)
 80001ca:	0018      	movs	r0, r3
 80001cc:	f000 fe2e 	bl	8000e2c <VirtualBasicTimer_Elapsed>
 80001d0:	0003      	movs	r3, r0
 80001d2:	2b01      	cmp	r3, #1
 80001d4:	d12e      	bne.n	8000234 <main+0xf8>
			switch(trainDirection){
 80001d6:	4b36      	ldr	r3, [pc, #216]	; (80002b0 <main+0x174>)
 80001d8:	781b      	ldrb	r3, [r3, #0]
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d00f      	beq.n	80001fe <main+0xc2>
 80001de:	2b01      	cmp	r3, #1
 80001e0:	d11b      	bne.n	800021a <main+0xde>
				case RIGHT:
					trainStation++;
 80001e2:	4b34      	ldr	r3, [pc, #208]	; (80002b4 <main+0x178>)
 80001e4:	781b      	ldrb	r3, [r3, #0]
 80001e6:	3301      	adds	r3, #1
 80001e8:	b2da      	uxtb	r2, r3
 80001ea:	4b32      	ldr	r3, [pc, #200]	; (80002b4 <main+0x178>)
 80001ec:	701a      	strb	r2, [r3, #0]
					if (trainStation >= TRAIN_STATIONS) {
 80001ee:	4b31      	ldr	r3, [pc, #196]	; (80002b4 <main+0x178>)
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	2b18      	cmp	r3, #24
 80001f4:	d913      	bls.n	800021e <main+0xe2>
						trainDirection = LEFT;
 80001f6:	4b2e      	ldr	r3, [pc, #184]	; (80002b0 <main+0x174>)
 80001f8:	2200      	movs	r2, #0
 80001fa:	701a      	strb	r2, [r3, #0]
					}
					break;
 80001fc:	e00f      	b.n	800021e <main+0xe2>
				case LEFT:
					trainStation--;
 80001fe:	4b2d      	ldr	r3, [pc, #180]	; (80002b4 <main+0x178>)
 8000200:	781b      	ldrb	r3, [r3, #0]
 8000202:	3b01      	subs	r3, #1
 8000204:	b2da      	uxtb	r2, r3
 8000206:	4b2b      	ldr	r3, [pc, #172]	; (80002b4 <main+0x178>)
 8000208:	701a      	strb	r2, [r3, #0]
					if (trainStation <= 0) {
 800020a:	4b2a      	ldr	r3, [pc, #168]	; (80002b4 <main+0x178>)
 800020c:	781b      	ldrb	r3, [r3, #0]
 800020e:	2b00      	cmp	r3, #0
 8000210:	d107      	bne.n	8000222 <main+0xe6>
						trainDirection = RIGHT;
 8000212:	4b27      	ldr	r3, [pc, #156]	; (80002b0 <main+0x174>)
 8000214:	2201      	movs	r2, #1
 8000216:	701a      	strb	r2, [r3, #0]
					}
					break;
 8000218:	e003      	b.n	8000222 <main+0xe6>
				default:
					//error
					break;
 800021a:	46c0      	nop			; (mov r8, r8)
 800021c:	e002      	b.n	8000224 <main+0xe8>
					break;
 800021e:	46c0      	nop			; (mov r8, r8)
 8000220:	e000      	b.n	8000224 <main+0xe8>
					break;
 8000222:	46c0      	nop			; (mov r8, r8)
			}
			spi_appComm(&message_spi);
 8000224:	4b24      	ldr	r3, [pc, #144]	; (80002b8 <main+0x17c>)
 8000226:	0018      	movs	r0, r3
 8000228:	f000 fb4a 	bl	80008c0 <spi_appComm>
			VirtualBasicTimer_StartCounter(&train_virtualTimer); //improve protection in case emergency/off states happened during function?
 800022c:	4b1f      	ldr	r3, [pc, #124]	; (80002ac <main+0x170>)
 800022e:	0018      	movs	r0, r3
 8000230:	f000 fe53 	bl	8000eda <VirtualBasicTimer_StartCounter>
		}
		if ((stateChanged) || (flagSPI != SEND_PRINT)){
 8000234:	4b21      	ldr	r3, [pc, #132]	; (80002bc <main+0x180>)
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	2b00      	cmp	r3, #0
 800023a:	d103      	bne.n	8000244 <main+0x108>
 800023c:	4b20      	ldr	r3, [pc, #128]	; (80002c0 <main+0x184>)
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d003      	beq.n	800024c <main+0x110>
			//restart spi if stateChanged happens during spi comm due to elapsed station?Atm,let's assume it's fast enough to do both things in a row
			spi_appComm(&message_spi);
 8000244:	4b1c      	ldr	r3, [pc, #112]	; (80002b8 <main+0x17c>)
 8000246:	0018      	movs	r0, r3
 8000248:	f000 fb3a 	bl	80008c0 <spi_appComm>
		}

		//Read temperature sensor via I2C at every timer counter update (restart_I2C==1)
		if (restart_I2C || (flagADS1115 != ADS1115_NOT_STARTED)){
 800024c:	4b1d      	ldr	r3, [pc, #116]	; (80002c4 <main+0x188>)
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d103      	bne.n	800025c <main+0x120>
 8000254:	4b1c      	ldr	r3, [pc, #112]	; (80002c8 <main+0x18c>)
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d0b5      	beq.n	80001c8 <main+0x8c>
			restart_I2C = 0;
 800025c:	4b19      	ldr	r3, [pc, #100]	; (80002c4 <main+0x188>)
 800025e:	2200      	movs	r2, #0
 8000260:	701a      	strb	r2, [r3, #0]
			configureADS1115(&i2c1);
 8000262:	4b10      	ldr	r3, [pc, #64]	; (80002a4 <main+0x168>)
 8000264:	0018      	movs	r0, r3
 8000266:	f000 faf1 	bl	800084c <configureADS1115>
			if ((flagADS1115 == ADS1115_CONFIGURED) && !startRX) {
 800026a:	4b17      	ldr	r3, [pc, #92]	; (80002c8 <main+0x18c>)
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	2b04      	cmp	r3, #4
 8000270:	d1aa      	bne.n	80001c8 <main+0x8c>
 8000272:	4b16      	ldr	r3, [pc, #88]	; (80002cc <main+0x190>)
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	2b00      	cmp	r3, #0
 8000278:	d1a6      	bne.n	80001c8 <main+0x8c>
				//I2C_EnableDisable(&i2c1,ENABLE);
				I2C_Master_Receiver(&i2c1, ADS1115_CONVERSION_REGISTER_BYTES, 1, bytes_from_ADS1115);//1st byte read(MSB of Conversion register)+2nd byte read(LSB)
 800027a:	4b15      	ldr	r3, [pc, #84]	; (80002d0 <main+0x194>)
 800027c:	4809      	ldr	r0, [pc, #36]	; (80002a4 <main+0x168>)
 800027e:	2201      	movs	r2, #1
 8000280:	2102      	movs	r1, #2
 8000282:	f001 fae3 	bl	800184c <I2C_Master_Receiver>
				startRX = 1;
 8000286:	4b11      	ldr	r3, [pc, #68]	; (80002cc <main+0x190>)
 8000288:	2201      	movs	r2, #1
 800028a:	701a      	strb	r2, [r3, #0]
		if (VirtualBasicTimer_Elapsed(&train_virtualTimer) == VIRTUAL_BASIC_TIMER_ELAPSED){
 800028c:	e79c      	b.n	80001c8 <main+0x8c>
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	20000038 	.word	0x20000038
 8000294:	20000044 	.word	0x20000044
 8000298:	20000050 	.word	0x20000050
 800029c:	20000068 	.word	0x20000068
 80002a0:	2000005c 	.word	0x2000005c
 80002a4:	20000090 	.word	0x20000090
 80002a8:	200000c0 	.word	0x200000c0
 80002ac:	200000cc 	.word	0x200000cc
 80002b0:	20000002 	.word	0x20000002
 80002b4:	200000e6 	.word	0x200000e6
 80002b8:	200000e8 	.word	0x200000e8
 80002bc:	200000e5 	.word	0x200000e5
 80002c0:	2000008d 	.word	0x2000008d
 80002c4:	20000001 	.word	0x20000001
 80002c8:	200000be 	.word	0x200000be
 80002cc:	200000bf 	.word	0x200000bf
 80002d0:	200000bc 	.word	0x200000bc

080002d4 <EXTI2_3_IRQHandler>:
	}
}
/**********************************************END MAIN********************************************************************/

/***********************************************ISR handlers****************************************************************/
void EXTI2_3_IRQHandler(void){ //when button on-off
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
	delay(500000);
 80002d8:	4b32      	ldr	r3, [pc, #200]	; (80003a4 <EXTI2_3_IRQHandler+0xd0>)
 80002da:	0018      	movs	r0, r3
 80002dc:	f7ff ff1b 	bl	8000116 <delay>
	GPIO_IRQ_Handling(PIN_BUTTON_OFFON);
 80002e0:	2003      	movs	r0, #3
 80002e2:	f001 f8b9 	bl	8001458 <GPIO_IRQ_Handling>
	if (currentState == OFF){
 80002e6:	4b30      	ldr	r3, [pc, #192]	; (80003a8 <EXTI2_3_IRQHandler+0xd4>)
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d12b      	bne.n	8000346 <EXTI2_3_IRQHandler+0x72>
		currentState = ON;
 80002ee:	4b2e      	ldr	r3, [pc, #184]	; (80003a8 <EXTI2_3_IRQHandler+0xd4>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	701a      	strb	r2, [r3, #0]
		stateChanged = 1;
 80002f4:	4b2d      	ldr	r3, [pc, #180]	; (80003ac <EXTI2_3_IRQHandler+0xd8>)
 80002f6:	2201      	movs	r2, #1
 80002f8:	701a      	strb	r2, [r3, #0]
		//start or resume the virtual timer as if the train started/resumed movement
		VirtualBasicTimer_EnableDisable(&train_virtualTimer,ENABLE);
 80002fa:	4b2d      	ldr	r3, [pc, #180]	; (80003b0 <EXTI2_3_IRQHandler+0xdc>)
 80002fc:	2101      	movs	r1, #1
 80002fe:	0018      	movs	r0, r3
 8000300:	f000 fdd5 	bl	8000eae <VirtualBasicTimer_EnableDisable>
		VirtualBasicTimer_StartCounter(&train_virtualTimer);
 8000304:	4b2a      	ldr	r3, [pc, #168]	; (80003b0 <EXTI2_3_IRQHandler+0xdc>)
 8000306:	0018      	movs	r0, r3
 8000308:	f000 fde7 	bl	8000eda <VirtualBasicTimer_StartCounter>
		GPIO_WritePin(GPIOA,PIN_LED0,0);
 800030c:	2390      	movs	r3, #144	; 0x90
 800030e:	05db      	lsls	r3, r3, #23
 8000310:	2200      	movs	r2, #0
 8000312:	2100      	movs	r1, #0
 8000314:	0018      	movs	r0, r3
 8000316:	f001 f849 	bl	80013ac <GPIO_WritePin>
		GPIO_WritePin(GPIOA,PIN_LED1,1);
 800031a:	2390      	movs	r3, #144	; 0x90
 800031c:	05db      	lsls	r3, r3, #23
 800031e:	2201      	movs	r2, #1
 8000320:	2101      	movs	r1, #1
 8000322:	0018      	movs	r0, r3
 8000324:	f001 f842 	bl	80013ac <GPIO_WritePin>
		GPIO_WritePin(GPIOA,PIN_LED2,1);
 8000328:	2390      	movs	r3, #144	; 0x90
 800032a:	05db      	lsls	r3, r3, #23
 800032c:	2201      	movs	r2, #1
 800032e:	2109      	movs	r1, #9
 8000330:	0018      	movs	r0, r3
 8000332:	f001 f83b 	bl	80013ac <GPIO_WritePin>
		GPIO_WritePin(GPIOA,PIN_LED3,0);
 8000336:	2390      	movs	r3, #144	; 0x90
 8000338:	05db      	lsls	r3, r3, #23
 800033a:	2200      	movs	r2, #0
 800033c:	210a      	movs	r1, #10
 800033e:	0018      	movs	r0, r3
 8000340:	f001 f834 	bl	80013ac <GPIO_WritePin>
		GPIO_WritePin(GPIOA,PIN_LED1,0);
		GPIO_WritePin(GPIOA,PIN_LED2,0);
		GPIO_WritePin(GPIOA,PIN_LED3,0);
	}
	//printf("%d\n",currentState);
}
 8000344:	e02a      	b.n	800039c <EXTI2_3_IRQHandler+0xc8>
		currentState = OFF;
 8000346:	4b18      	ldr	r3, [pc, #96]	; (80003a8 <EXTI2_3_IRQHandler+0xd4>)
 8000348:	2200      	movs	r2, #0
 800034a:	701a      	strb	r2, [r3, #0]
		stateChanged = 1;
 800034c:	4b17      	ldr	r3, [pc, #92]	; (80003ac <EXTI2_3_IRQHandler+0xd8>)
 800034e:	2201      	movs	r2, #1
 8000350:	701a      	strb	r2, [r3, #0]
		VirtualBasicTimer_StopCounter(&train_virtualTimer);
 8000352:	4b17      	ldr	r3, [pc, #92]	; (80003b0 <EXTI2_3_IRQHandler+0xdc>)
 8000354:	0018      	movs	r0, r3
 8000356:	f000 fdd4 	bl	8000f02 <VirtualBasicTimer_StopCounter>
		VirtualBasicTimer_EnableDisable(&train_virtualTimer,DISABLE);
 800035a:	4b15      	ldr	r3, [pc, #84]	; (80003b0 <EXTI2_3_IRQHandler+0xdc>)
 800035c:	2100      	movs	r1, #0
 800035e:	0018      	movs	r0, r3
 8000360:	f000 fda5 	bl	8000eae <VirtualBasicTimer_EnableDisable>
		GPIO_WritePin(GPIOA,PIN_LED0,0);
 8000364:	2390      	movs	r3, #144	; 0x90
 8000366:	05db      	lsls	r3, r3, #23
 8000368:	2200      	movs	r2, #0
 800036a:	2100      	movs	r1, #0
 800036c:	0018      	movs	r0, r3
 800036e:	f001 f81d 	bl	80013ac <GPIO_WritePin>
		GPIO_WritePin(GPIOA,PIN_LED1,0);
 8000372:	2390      	movs	r3, #144	; 0x90
 8000374:	05db      	lsls	r3, r3, #23
 8000376:	2200      	movs	r2, #0
 8000378:	2101      	movs	r1, #1
 800037a:	0018      	movs	r0, r3
 800037c:	f001 f816 	bl	80013ac <GPIO_WritePin>
		GPIO_WritePin(GPIOA,PIN_LED2,0);
 8000380:	2390      	movs	r3, #144	; 0x90
 8000382:	05db      	lsls	r3, r3, #23
 8000384:	2200      	movs	r2, #0
 8000386:	2109      	movs	r1, #9
 8000388:	0018      	movs	r0, r3
 800038a:	f001 f80f 	bl	80013ac <GPIO_WritePin>
		GPIO_WritePin(GPIOA,PIN_LED3,0);
 800038e:	2390      	movs	r3, #144	; 0x90
 8000390:	05db      	lsls	r3, r3, #23
 8000392:	2200      	movs	r2, #0
 8000394:	210a      	movs	r1, #10
 8000396:	0018      	movs	r0, r3
 8000398:	f001 f808 	bl	80013ac <GPIO_WritePin>
}
 800039c:	46c0      	nop			; (mov r8, r8)
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	46c0      	nop			; (mov r8, r8)
 80003a4:	0007a120 	.word	0x0007a120
 80003a8:	200000e4 	.word	0x200000e4
 80003ac:	200000e5 	.word	0x200000e5
 80003b0:	200000cc 	.word	0x200000cc

080003b4 <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler(void){
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
	delay(500000);
 80003b8:	4b1c      	ldr	r3, [pc, #112]	; (800042c <EXTI4_15_IRQHandler+0x78>)
 80003ba:	0018      	movs	r0, r3
 80003bc:	f7ff feab 	bl	8000116 <delay>
	GPIO_IRQ_Handling(PIN_BUTTON_EMERGENCY);
 80003c0:	2005      	movs	r0, #5
 80003c2:	f001 f849 	bl	8001458 <GPIO_IRQ_Handling>
	if (currentState != EMERGENCY){
 80003c6:	4b1a      	ldr	r3, [pc, #104]	; (8000430 <EXTI4_15_IRQHandler+0x7c>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	2b02      	cmp	r3, #2
 80003cc:	d002      	beq.n	80003d4 <EXTI4_15_IRQHandler+0x20>
		stateChanged = 1;
 80003ce:	4b19      	ldr	r3, [pc, #100]	; (8000434 <EXTI4_15_IRQHandler+0x80>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	701a      	strb	r2, [r3, #0]
	}
	currentState = EMERGENCY;
 80003d4:	4b16      	ldr	r3, [pc, #88]	; (8000430 <EXTI4_15_IRQHandler+0x7c>)
 80003d6:	2202      	movs	r2, #2
 80003d8:	701a      	strb	r2, [r3, #0]
	//stop the virtual timer as if the train had stopped
	VirtualBasicTimer_StopCounter(&train_virtualTimer);
 80003da:	4b17      	ldr	r3, [pc, #92]	; (8000438 <EXTI4_15_IRQHandler+0x84>)
 80003dc:	0018      	movs	r0, r3
 80003de:	f000 fd90 	bl	8000f02 <VirtualBasicTimer_StopCounter>
	VirtualBasicTimer_EnableDisable(&train_virtualTimer,DISABLE);
 80003e2:	4b15      	ldr	r3, [pc, #84]	; (8000438 <EXTI4_15_IRQHandler+0x84>)
 80003e4:	2100      	movs	r1, #0
 80003e6:	0018      	movs	r0, r3
 80003e8:	f000 fd61 	bl	8000eae <VirtualBasicTimer_EnableDisable>
	//printf("%d\n",currentState);
	GPIO_WritePin(GPIOA,PIN_LED0,1);
 80003ec:	2390      	movs	r3, #144	; 0x90
 80003ee:	05db      	lsls	r3, r3, #23
 80003f0:	2201      	movs	r2, #1
 80003f2:	2100      	movs	r1, #0
 80003f4:	0018      	movs	r0, r3
 80003f6:	f000 ffd9 	bl	80013ac <GPIO_WritePin>
	GPIO_WritePin(GPIOA,PIN_LED1,1);
 80003fa:	2390      	movs	r3, #144	; 0x90
 80003fc:	05db      	lsls	r3, r3, #23
 80003fe:	2201      	movs	r2, #1
 8000400:	2101      	movs	r1, #1
 8000402:	0018      	movs	r0, r3
 8000404:	f000 ffd2 	bl	80013ac <GPIO_WritePin>
	GPIO_WritePin(GPIOA,PIN_LED2,1);
 8000408:	2390      	movs	r3, #144	; 0x90
 800040a:	05db      	lsls	r3, r3, #23
 800040c:	2201      	movs	r2, #1
 800040e:	2109      	movs	r1, #9
 8000410:	0018      	movs	r0, r3
 8000412:	f000 ffcb 	bl	80013ac <GPIO_WritePin>
	GPIO_WritePin(GPIOA,PIN_LED3,1);
 8000416:	2390      	movs	r3, #144	; 0x90
 8000418:	05db      	lsls	r3, r3, #23
 800041a:	2201      	movs	r2, #1
 800041c:	210a      	movs	r1, #10
 800041e:	0018      	movs	r0, r3
 8000420:	f000 ffc4 	bl	80013ac <GPIO_WritePin>

}
 8000424:	46c0      	nop			; (mov r8, r8)
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	0007a120 	.word	0x0007a120
 8000430:	200000e4 	.word	0x200000e4
 8000434:	200000e5 	.word	0x200000e5
 8000438:	200000cc 	.word	0x200000cc

0800043c <SPI1_IRQHandler>:

//SPI IRQ handler for SPI1. declared in startup_stm32f091rctx.s
void SPI1_IRQHandler(void){
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
	SPI_IRQ_Handling(&spi1);
 8000440:	4b03      	ldr	r3, [pc, #12]	; (8000450 <SPI1_IRQHandler+0x14>)
 8000442:	0018      	movs	r0, r3
 8000444:	f001 fce2 	bl	8001e0c <SPI_IRQ_Handling>
}
 8000448:	46c0      	nop			; (mov r8, r8)
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	20000068 	.word	0x20000068

08000454 <I2C1_IRQHandler>:
	//NOT NECESSARY SO FAR BECAUSE I'M USING if WITH RX/TX STATE == READY (it's volatile)
}*/

//I2C
//I2C1 IRQ handler, from startup_stm32f091rctx.s
void I2C1_IRQHandler(void){
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
	I2C_IRQ_Handling(&i2c1);
 8000458:	4b03      	ldr	r3, [pc, #12]	; (8000468 <I2C1_IRQHandler+0x14>)
 800045a:	0018      	movs	r0, r3
 800045c:	f001 f8c8 	bl	80015f0 <I2C_IRQ_Handling>
}
 8000460:	46c0      	nop			; (mov r8, r8)
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	20000090 	.word	0x20000090

0800046c <I2C_App_Callback>:
//callback
void I2C_App_Callback(I2C_Handle_t *pI2Chandle,uint8_t Event){
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
 8000474:	000a      	movs	r2, r1
 8000476:	1cfb      	adds	r3, r7, #3
 8000478:	701a      	strb	r2, [r3, #0]
	if (Event == I2C_FINISHED){
 800047a:	1cfb      	adds	r3, r7, #3
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	2b02      	cmp	r3, #2
 8000480:	d118      	bne.n	80004b4 <I2C_App_Callback+0x48>
		//if ADS1115 not configured yet,focus on that:
		if (flagADS1115 != ADS1115_CONFIGURED){
 8000482:	4b22      	ldr	r3, [pc, #136]	; (800050c <I2C_App_Callback+0xa0>)
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	2b04      	cmp	r3, #4
 8000488:	d00e      	beq.n	80004a8 <I2C_App_Callback+0x3c>
			switch (flagADS1115){
 800048a:	4b20      	ldr	r3, [pc, #128]	; (800050c <I2C_App_Callback+0xa0>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b01      	cmp	r3, #1
 8000490:	d002      	beq.n	8000498 <I2C_App_Callback+0x2c>
 8000492:	2b03      	cmp	r3, #3
 8000494:	d004      	beq.n	80004a0 <I2C_App_Callback+0x34>
			case ADS1115_2ND_DURING:
				flagADS1115 = ADS1115_CONFIGURED;
				break;

			default:
				break;
 8000496:	e035      	b.n	8000504 <I2C_App_Callback+0x98>
				flagADS1115 = ADS1115_1ST_DONE;
 8000498:	4b1c      	ldr	r3, [pc, #112]	; (800050c <I2C_App_Callback+0xa0>)
 800049a:	2202      	movs	r2, #2
 800049c:	701a      	strb	r2, [r3, #0]
				break;
 800049e:	e031      	b.n	8000504 <I2C_App_Callback+0x98>
				flagADS1115 = ADS1115_CONFIGURED;
 80004a0:	4b1a      	ldr	r3, [pc, #104]	; (800050c <I2C_App_Callback+0xa0>)
 80004a2:	2204      	movs	r2, #4
 80004a4:	701a      	strb	r2, [r3, #0]
				break;
 80004a6:	e02d      	b.n	8000504 <I2C_App_Callback+0x98>
			}
		}
		else{ //if ADS1115 has already been configured and a STOPF happens, disable I2C
			I2C_EnableDisable(&i2c1,DISABLE);
 80004a8:	4b19      	ldr	r3, [pc, #100]	; (8000510 <I2C_App_Callback+0xa4>)
 80004aa:	2100      	movs	r1, #0
 80004ac:	0018      	movs	r0, r3
 80004ae:	f001 f84f 	bl	8001550 <I2C_EnableDisable>
		//restart_I2C = 1; //now called from BasicTimer_App_Callback
		startRX = 0;
		//testCounter_measurements++; //TESTING
	}

}
 80004b2:	e027      	b.n	8000504 <I2C_App_Callback+0x98>
	else if (Event == I2C_NEW_READING){ //here when RX length == 0
 80004b4:	1cfb      	adds	r3, r7, #3
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	2b04      	cmp	r3, #4
 80004ba:	d123      	bne.n	8000504 <I2C_App_Callback+0x98>
		lastADS1115_raw = (bytes_from_ADS1115[0] << 8)|(bytes_from_ADS1115[1]); //byteRead is LSB and firstByteRead is MSB
 80004bc:	4b15      	ldr	r3, [pc, #84]	; (8000514 <I2C_App_Callback+0xa8>)
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	021b      	lsls	r3, r3, #8
 80004c2:	b21a      	sxth	r2, r3
 80004c4:	4b13      	ldr	r3, [pc, #76]	; (8000514 <I2C_App_Callback+0xa8>)
 80004c6:	785b      	ldrb	r3, [r3, #1]
 80004c8:	b21b      	sxth	r3, r3
 80004ca:	4313      	orrs	r3, r2
 80004cc:	b21b      	sxth	r3, r3
 80004ce:	b29a      	uxth	r2, r3
 80004d0:	4b11      	ldr	r3, [pc, #68]	; (8000518 <I2C_App_Callback+0xac>)
 80004d2:	801a      	strh	r2, [r3, #0]
		lastADS1115_mV = lastADS1115_raw * ADS1115_GAIN/ADS1115_MAX;
 80004d4:	4b10      	ldr	r3, [pc, #64]	; (8000518 <I2C_App_Callback+0xac>)
 80004d6:	881b      	ldrh	r3, [r3, #0]
 80004d8:	001a      	movs	r2, r3
 80004da:	0013      	movs	r3, r2
 80004dc:	021b      	lsls	r3, r3, #8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	009b      	lsls	r3, r3, #2
 80004e2:	1a9b      	subs	r3, r3, r2
 80004e4:	009b      	lsls	r3, r3, #2
 80004e6:	d502      	bpl.n	80004ee <I2C_App_Callback+0x82>
 80004e8:	4a0c      	ldr	r2, [pc, #48]	; (800051c <I2C_App_Callback+0xb0>)
 80004ea:	4694      	mov	ip, r2
 80004ec:	4463      	add	r3, ip
 80004ee:	13db      	asrs	r3, r3, #15
 80004f0:	b29a      	uxth	r2, r3
 80004f2:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <I2C_App_Callback+0xb4>)
 80004f4:	801a      	strh	r2, [r3, #0]
		flagADS1115 = ADS1115_NOT_STARTED;
 80004f6:	4b05      	ldr	r3, [pc, #20]	; (800050c <I2C_App_Callback+0xa0>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	701a      	strb	r2, [r3, #0]
		startRX = 0;
 80004fc:	4b09      	ldr	r3, [pc, #36]	; (8000524 <I2C_App_Callback+0xb8>)
 80004fe:	2200      	movs	r2, #0
 8000500:	701a      	strb	r2, [r3, #0]
}
 8000502:	e7ff      	b.n	8000504 <I2C_App_Callback+0x98>
 8000504:	46c0      	nop			; (mov r8, r8)
 8000506:	46bd      	mov	sp, r7
 8000508:	b002      	add	sp, #8
 800050a:	bd80      	pop	{r7, pc}
 800050c:	200000be 	.word	0x200000be
 8000510:	20000090 	.word	0x20000090
 8000514:	200000bc 	.word	0x200000bc
 8000518:	200000b4 	.word	0x200000b4
 800051c:	00007fff 	.word	0x00007fff
 8000520:	200000b6 	.word	0x200000b6
 8000524:	200000bf 	.word	0x200000bf

08000528 <TIM7_IRQHandler>:

//TIMERS
void TIM7_IRQHandler (void){
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	BasicTimer_IRQ_Handling(&timer7);
 800052c:	4b03      	ldr	r3, [pc, #12]	; (800053c <TIM7_IRQHandler+0x14>)
 800052e:	0018      	movs	r0, r3
 8000530:	f000 fc58 	bl	8000de4 <BasicTimer_IRQ_Handling>
}
 8000534:	46c0      	nop			; (mov r8, r8)
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	200000c0 	.word	0x200000c0

08000540 <BasicTimer_App_Callback>:

void BasicTimer_App_Callback(BasicTimer_Handle_t *pBasicTimerhandle){
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
    //disable the interrupt during callback just in case?
    //BasicTimer_EnableDisable(&timer7, DISABLE);

    //Overflow counter, let everything based on the timer know it
	restart_I2C = 1; //start I2C reading in the main loop
 8000548:	4b03      	ldr	r3, [pc, #12]	; (8000558 <BasicTimer_App_Callback+0x18>)
 800054a:	2201      	movs	r2, #1
 800054c:	701a      	strb	r2, [r3, #0]

    //enable the interrupt again if disabled previously
    //BasicTimer_EnableDisable(&timer7, ENABLE);
}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	46bd      	mov	sp, r7
 8000552:	b002      	add	sp, #8
 8000554:	bd80      	pop	{r7, pc}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	20000001 	.word	0x20000001

0800055c <peripheral_Config_Ini>:

/**********************************************END IRQ********************************************************************/

/*****************************Configurations and initializations************************************************************/
void peripheral_Config_Ini(void){
 800055c:	b590      	push	{r4, r7, lr}
 800055e:	b085      	sub	sp, #20
 8000560:	af02      	add	r7, sp, #8

	//local variables
	uint8_t param1, param2, param3, param4, param5;
	/**********************LEDS***********************************************/
	//LED0. PA0
	leds.pGPIO = GPIOA;
 8000562:	4bab      	ldr	r3, [pc, #684]	; (8000810 <peripheral_Config_Ini+0x2b4>)
 8000564:	2290      	movs	r2, #144	; 0x90
 8000566:	05d2      	lsls	r2, r2, #23
 8000568:	601a      	str	r2, [r3, #0]
	leds.GPIO_PinConfig.GPIO_PinNumber = PIN_LED0;
 800056a:	4ba9      	ldr	r3, [pc, #676]	; (8000810 <peripheral_Config_Ini+0x2b4>)
 800056c:	2200      	movs	r2, #0
 800056e:	711a      	strb	r2, [r3, #4]
	leds.GPIO_PinConfig.GPIO_PinMode = GPIO_OUT;
 8000570:	4ba7      	ldr	r3, [pc, #668]	; (8000810 <peripheral_Config_Ini+0x2b4>)
 8000572:	2201      	movs	r2, #1
 8000574:	715a      	strb	r2, [r3, #5]
	leds.GPIO_PinConfig.GPIO_PinOutType = GPIO_PUSHPULL;
 8000576:	4ba6      	ldr	r3, [pc, #664]	; (8000810 <peripheral_Config_Ini+0x2b4>)
 8000578:	2200      	movs	r2, #0
 800057a:	719a      	strb	r2, [r3, #6]
	leds.GPIO_PinConfig.GPIO_PinOutSpeed = GPIO_SLOWSPEED; //GPIO_MEDIUMSPEED
 800057c:	4ba4      	ldr	r3, [pc, #656]	; (8000810 <peripheral_Config_Ini+0x2b4>)
 800057e:	2200      	movs	r2, #0
 8000580:	71da      	strb	r2, [r3, #7]
	leds.GPIO_PinConfig.GPIO_PinPullUpDown = GPIO_NOPULL;
 8000582:	4ba3      	ldr	r3, [pc, #652]	; (8000810 <peripheral_Config_Ini+0x2b4>)
 8000584:	2200      	movs	r2, #0
 8000586:	721a      	strb	r2, [r3, #8]
	//Initialization LED0
	GPIO_PinInit(&leds);
 8000588:	4ba1      	ldr	r3, [pc, #644]	; (8000810 <peripheral_Config_Ini+0x2b4>)
 800058a:	0018      	movs	r0, r3
 800058c:	f000 fd80 	bl	8001090 <GPIO_PinInit>

	//LED1.PA1.Port,Mode,OutType,OutSpeed and PullUpDown same as LED0
	leds.GPIO_PinConfig.GPIO_PinNumber = PIN_LED1;
 8000590:	4b9f      	ldr	r3, [pc, #636]	; (8000810 <peripheral_Config_Ini+0x2b4>)
 8000592:	2201      	movs	r2, #1
 8000594:	711a      	strb	r2, [r3, #4]
	//Initialization LED1
	GPIO_PinInit(&leds);
 8000596:	4b9e      	ldr	r3, [pc, #632]	; (8000810 <peripheral_Config_Ini+0x2b4>)
 8000598:	0018      	movs	r0, r3
 800059a:	f000 fd79 	bl	8001090 <GPIO_PinInit>

	//LED2.PA9.Port,Mode,OutType,OutSpeed and PullUpDown same as LED0
	leds.GPIO_PinConfig.GPIO_PinNumber = PIN_LED2;
 800059e:	4b9c      	ldr	r3, [pc, #624]	; (8000810 <peripheral_Config_Ini+0x2b4>)
 80005a0:	2209      	movs	r2, #9
 80005a2:	711a      	strb	r2, [r3, #4]
	//Initialization LED2
	GPIO_PinInit(&leds);
 80005a4:	4b9a      	ldr	r3, [pc, #616]	; (8000810 <peripheral_Config_Ini+0x2b4>)
 80005a6:	0018      	movs	r0, r3
 80005a8:	f000 fd72 	bl	8001090 <GPIO_PinInit>

	//LED3.PA10.Port,Mode,OutType,OutSpeed and PullUpDown same as LED0
	leds.GPIO_PinConfig.GPIO_PinNumber = PIN_LED3;
 80005ac:	4b98      	ldr	r3, [pc, #608]	; (8000810 <peripheral_Config_Ini+0x2b4>)
 80005ae:	220a      	movs	r2, #10
 80005b0:	711a      	strb	r2, [r3, #4]
	//Initialization LED3
	GPIO_PinInit(&leds);
 80005b2:	4b97      	ldr	r3, [pc, #604]	; (8000810 <peripheral_Config_Ini+0x2b4>)
 80005b4:	0018      	movs	r0, r3
 80005b6:	f000 fd6b 	bl	8001090 <GPIO_PinInit>

	//LEDs OFF
	GPIO_WritePin(GPIOA,PIN_LED0,1);
 80005ba:	2390      	movs	r3, #144	; 0x90
 80005bc:	05db      	lsls	r3, r3, #23
 80005be:	2201      	movs	r2, #1
 80005c0:	2100      	movs	r1, #0
 80005c2:	0018      	movs	r0, r3
 80005c4:	f000 fef2 	bl	80013ac <GPIO_WritePin>
	GPIO_WritePin(GPIOA,PIN_LED1,0);
 80005c8:	2390      	movs	r3, #144	; 0x90
 80005ca:	05db      	lsls	r3, r3, #23
 80005cc:	2200      	movs	r2, #0
 80005ce:	2101      	movs	r1, #1
 80005d0:	0018      	movs	r0, r3
 80005d2:	f000 feeb 	bl	80013ac <GPIO_WritePin>
	GPIO_WritePin(GPIOA,PIN_LED2,0);
 80005d6:	2390      	movs	r3, #144	; 0x90
 80005d8:	05db      	lsls	r3, r3, #23
 80005da:	2200      	movs	r2, #0
 80005dc:	2109      	movs	r1, #9
 80005de:	0018      	movs	r0, r3
 80005e0:	f000 fee4 	bl	80013ac <GPIO_WritePin>
	GPIO_WritePin(GPIOA,PIN_LED3,1);
 80005e4:	2390      	movs	r3, #144	; 0x90
 80005e6:	05db      	lsls	r3, r3, #23
 80005e8:	2201      	movs	r2, #1
 80005ea:	210a      	movs	r1, #10
 80005ec:	0018      	movs	r0, r3
 80005ee:	f000 fedd 	bl	80013ac <GPIO_WritePin>

	/***************************************BUTTONS********************************/
	//BUTTON ON-OFF. PB3
	buttons.pGPIO = GPIOB;
 80005f2:	4b88      	ldr	r3, [pc, #544]	; (8000814 <peripheral_Config_Ini+0x2b8>)
 80005f4:	4a88      	ldr	r2, [pc, #544]	; (8000818 <peripheral_Config_Ini+0x2bc>)
 80005f6:	601a      	str	r2, [r3, #0]
	buttons.GPIO_PinConfig.GPIO_PinNumber = PIN_BUTTON_OFFON;
 80005f8:	4b86      	ldr	r3, [pc, #536]	; (8000814 <peripheral_Config_Ini+0x2b8>)
 80005fa:	2203      	movs	r2, #3
 80005fc:	711a      	strb	r2, [r3, #4]
	buttons.GPIO_PinConfig.GPIO_PinMode = GPIO_FALL_TRIG; //interrupt falling edge
 80005fe:	4b85      	ldr	r3, [pc, #532]	; (8000814 <peripheral_Config_Ini+0x2b8>)
 8000600:	2204      	movs	r2, #4
 8000602:	715a      	strb	r2, [r3, #5]
	buttons.GPIO_PinConfig.GPIO_PinPullUpDown = GPIO_PULLUP; //pull up (3.3 by default)
 8000604:	4b83      	ldr	r3, [pc, #524]	; (8000814 <peripheral_Config_Ini+0x2b8>)
 8000606:	2201      	movs	r2, #1
 8000608:	721a      	strb	r2, [r3, #8]
	//initialization button on-off
	GPIO_PinInit(&buttons);
 800060a:	4b82      	ldr	r3, [pc, #520]	; (8000814 <peripheral_Config_Ini+0x2b8>)
 800060c:	0018      	movs	r0, r3
 800060e:	f000 fd3f 	bl	8001090 <GPIO_PinInit>

	//EMERGENCY BUTTON. PB5
	buttons.pGPIO = GPIOB;
 8000612:	4b80      	ldr	r3, [pc, #512]	; (8000814 <peripheral_Config_Ini+0x2b8>)
 8000614:	4a80      	ldr	r2, [pc, #512]	; (8000818 <peripheral_Config_Ini+0x2bc>)
 8000616:	601a      	str	r2, [r3, #0]
	buttons.GPIO_PinConfig.GPIO_PinNumber = PIN_BUTTON_EMERGENCY;
 8000618:	4b7e      	ldr	r3, [pc, #504]	; (8000814 <peripheral_Config_Ini+0x2b8>)
 800061a:	2205      	movs	r2, #5
 800061c:	711a      	strb	r2, [r3, #4]
	buttons.GPIO_PinConfig.GPIO_PinMode = GPIO_FALL_TRIG;
 800061e:	4b7d      	ldr	r3, [pc, #500]	; (8000814 <peripheral_Config_Ini+0x2b8>)
 8000620:	2204      	movs	r2, #4
 8000622:	715a      	strb	r2, [r3, #5]
	buttons.GPIO_PinConfig.GPIO_PinPullUpDown = GPIO_PULLUP;
 8000624:	4b7b      	ldr	r3, [pc, #492]	; (8000814 <peripheral_Config_Ini+0x2b8>)
 8000626:	2201      	movs	r2, #1
 8000628:	721a      	strb	r2, [r3, #8]
	//initialization emergency button
	GPIO_PinInit(&buttons);
 800062a:	4b7a      	ldr	r3, [pc, #488]	; (8000814 <peripheral_Config_Ini+0x2b8>)
 800062c:	0018      	movs	r0, r3
 800062e:	f000 fd2f 	bl	8001090 <GPIO_PinInit>

	/**************************************SPI***********************************/
	//GPIOs for SPI: SPI1 PA4:NSS PA5:SCK PA6:MISO PA7:MOSI. Alternate function AF0
	spiGPIOs.pGPIO = GPIOA;
 8000632:	4b7a      	ldr	r3, [pc, #488]	; (800081c <peripheral_Config_Ini+0x2c0>)
 8000634:	2290      	movs	r2, #144	; 0x90
 8000636:	05d2      	lsls	r2, r2, #23
 8000638:	601a      	str	r2, [r3, #0]
	spiGPIOs.GPIO_PinConfig.GPIO_PinMode = GPIO_ALTFUN;
 800063a:	4b78      	ldr	r3, [pc, #480]	; (800081c <peripheral_Config_Ini+0x2c0>)
 800063c:	2202      	movs	r2, #2
 800063e:	715a      	strb	r2, [r3, #5]
	spiGPIOs.GPIO_PinConfig.GPIO_PinAlterFunc = GPIO_AF0;
 8000640:	4b76      	ldr	r3, [pc, #472]	; (800081c <peripheral_Config_Ini+0x2c0>)
 8000642:	2200      	movs	r2, #0
 8000644:	725a      	strb	r2, [r3, #9]
	spiGPIOs.GPIO_PinConfig.GPIO_PinOutType = GPIO_PUSHPULL;
 8000646:	4b75      	ldr	r3, [pc, #468]	; (800081c <peripheral_Config_Ini+0x2c0>)
 8000648:	2200      	movs	r2, #0
 800064a:	719a      	strb	r2, [r3, #6]
	spiGPIOs.GPIO_PinConfig.GPIO_PinOutSpeed = GPIO_HIGHSPEED; //FAST SPEED
 800064c:	4b73      	ldr	r3, [pc, #460]	; (800081c <peripheral_Config_Ini+0x2c0>)
 800064e:	2203      	movs	r2, #3
 8000650:	71da      	strb	r2, [r3, #7]
	spiGPIOs.GPIO_PinConfig.GPIO_PinPullUpDown = GPIO_NOPULL;
 8000652:	4b72      	ldr	r3, [pc, #456]	; (800081c <peripheral_Config_Ini+0x2c0>)
 8000654:	2200      	movs	r2, #0
 8000656:	721a      	strb	r2, [r3, #8]
	//SCK
	spiGPIOs.GPIO_PinConfig.GPIO_PinNumber = PIN_SPI1_SCK;//SCK
 8000658:	4b70      	ldr	r3, [pc, #448]	; (800081c <peripheral_Config_Ini+0x2c0>)
 800065a:	2205      	movs	r2, #5
 800065c:	711a      	strb	r2, [r3, #4]
	GPIO_PinInit(&spiGPIOs);
 800065e:	4b6f      	ldr	r3, [pc, #444]	; (800081c <peripheral_Config_Ini+0x2c0>)
 8000660:	0018      	movs	r0, r3
 8000662:	f000 fd15 	bl	8001090 <GPIO_PinInit>

	spiGPIOs.GPIO_PinConfig.GPIO_PinPullUpDown = GPIO_PULLUP;
 8000666:	4b6d      	ldr	r3, [pc, #436]	; (800081c <peripheral_Config_Ini+0x2c0>)
 8000668:	2201      	movs	r2, #1
 800066a:	721a      	strb	r2, [r3, #8]
	//NSS
	spiGPIOs.GPIO_PinConfig.GPIO_PinNumber = PIN_SPI1_NSS;//NSS
 800066c:	4b6b      	ldr	r3, [pc, #428]	; (800081c <peripheral_Config_Ini+0x2c0>)
 800066e:	2204      	movs	r2, #4
 8000670:	711a      	strb	r2, [r3, #4]
	GPIO_PinInit(&spiGPIOs);
 8000672:	4b6a      	ldr	r3, [pc, #424]	; (800081c <peripheral_Config_Ini+0x2c0>)
 8000674:	0018      	movs	r0, r3
 8000676:	f000 fd0b 	bl	8001090 <GPIO_PinInit>
	//MISO
	spiGPIOs.GPIO_PinConfig.GPIO_PinNumber = PIN_SPI1_MISO;//MISO
 800067a:	4b68      	ldr	r3, [pc, #416]	; (800081c <peripheral_Config_Ini+0x2c0>)
 800067c:	2206      	movs	r2, #6
 800067e:	711a      	strb	r2, [r3, #4]
	GPIO_PinInit(&spiGPIOs);
 8000680:	4b66      	ldr	r3, [pc, #408]	; (800081c <peripheral_Config_Ini+0x2c0>)
 8000682:	0018      	movs	r0, r3
 8000684:	f000 fd04 	bl	8001090 <GPIO_PinInit>
	//MOSI
	spiGPIOs.GPIO_PinConfig.GPIO_PinNumber = PIN_SPI1_MOSI;//MOSI
 8000688:	4b64      	ldr	r3, [pc, #400]	; (800081c <peripheral_Config_Ini+0x2c0>)
 800068a:	2207      	movs	r2, #7
 800068c:	711a      	strb	r2, [r3, #4]
	GPIO_PinInit(&spiGPIOs);
 800068e:	4b63      	ldr	r3, [pc, #396]	; (800081c <peripheral_Config_Ini+0x2c0>)
 8000690:	0018      	movs	r0, r3
 8000692:	f000 fcfd 	bl	8001090 <GPIO_PinInit>

	/*SPI handle configuration and initialization*/
	//SPI configuration
	spi1.pSPI = SPI1_I2S1;
 8000696:	4b62      	ldr	r3, [pc, #392]	; (8000820 <peripheral_Config_Ini+0x2c4>)
 8000698:	4a62      	ldr	r2, [pc, #392]	; (8000824 <peripheral_Config_Ini+0x2c8>)
 800069a:	601a      	str	r2, [r3, #0]
	spi1.SPI_Config.SPI_Mode = SPI_MASTER;
 800069c:	4b60      	ldr	r3, [pc, #384]	; (8000820 <peripheral_Config_Ini+0x2c4>)
 800069e:	2201      	movs	r2, #1
 80006a0:	711a      	strb	r2, [r3, #4]
	spi1.SPI_Config.SPI_Speed = SPI_SPEED_2;
 80006a2:	4b5f      	ldr	r3, [pc, #380]	; (8000820 <peripheral_Config_Ini+0x2c4>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	715a      	strb	r2, [r3, #5]
	spi1.SPI_Config.SPI_CommType = SPI_FULLDUPLEX;
 80006a8:	4b5d      	ldr	r3, [pc, #372]	; (8000820 <peripheral_Config_Ini+0x2c4>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	719a      	strb	r2, [r3, #6]
	spi1.SPI_Config.SPI_DataSize = SPI_8BIT;
 80006ae:	4b5c      	ldr	r3, [pc, #368]	; (8000820 <peripheral_Config_Ini+0x2c4>)
 80006b0:	2207      	movs	r2, #7
 80006b2:	71da      	strb	r2, [r3, #7]
	spi1.SPI_Config.SPI_SWslave = SPI_HW_MGMT;
 80006b4:	4b5a      	ldr	r3, [pc, #360]	; (8000820 <peripheral_Config_Ini+0x2c4>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	721a      	strb	r2, [r3, #8]
	spi1.SPI_Config.SPI_Pol = SPI_CLK_IDLE_0;
 80006ba:	4b59      	ldr	r3, [pc, #356]	; (8000820 <peripheral_Config_Ini+0x2c4>)
 80006bc:	2200      	movs	r2, #0
 80006be:	725a      	strb	r2, [r3, #9]
	spi1.SPI_Config.SPI_Phase = SPI_CLK_CAPT_FIRST;
 80006c0:	4b57      	ldr	r3, [pc, #348]	; (8000820 <peripheral_Config_Ini+0x2c4>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	729a      	strb	r2, [r3, #10]

	//SPI initialization
	SPI_Init(&spi1);
 80006c6:	4b56      	ldr	r3, [pc, #344]	; (8000820 <peripheral_Config_Ini+0x2c4>)
 80006c8:	0018      	movs	r0, r3
 80006ca:	f001 fa8d 	bl	8001be8 <SPI_Init>

	//Set SSOE to 1 to make NSS output enable
	SPI_SSOE(&spi1,ENABLE);
 80006ce:	4b54      	ldr	r3, [pc, #336]	; (8000820 <peripheral_Config_Ini+0x2c4>)
 80006d0:	2101      	movs	r1, #1
 80006d2:	0018      	movs	r0, r3
 80006d4:	f001 fb4e 	bl	8001d74 <SPI_SSOE>

	//Enable SPI peripheral
	SPI_EnableDisable(&spi1,ENABLE);
 80006d8:	4b51      	ldr	r3, [pc, #324]	; (8000820 <peripheral_Config_Ini+0x2c4>)
 80006da:	2101      	movs	r1, #1
 80006dc:	0018      	movs	r0, r3
 80006de:	f001 fb29 	bl	8001d34 <SPI_EnableDisable>

	/**********************************I2C*****************************************/
	//GPIOs for I2C: PB6(SCL), PB9(SDA).Alternate function AF1!
	i2cGPIOs.pGPIO = GPIOB;
 80006e2:	4b51      	ldr	r3, [pc, #324]	; (8000828 <peripheral_Config_Ini+0x2cc>)
 80006e4:	4a4c      	ldr	r2, [pc, #304]	; (8000818 <peripheral_Config_Ini+0x2bc>)
 80006e6:	601a      	str	r2, [r3, #0]
	i2cGPIOs.GPIO_PinConfig.GPIO_PinMode = GPIO_ALTFUN;
 80006e8:	4b4f      	ldr	r3, [pc, #316]	; (8000828 <peripheral_Config_Ini+0x2cc>)
 80006ea:	2202      	movs	r2, #2
 80006ec:	715a      	strb	r2, [r3, #5]
	i2cGPIOs.GPIO_PinConfig.GPIO_PinAlterFunc = GPIO_AF1;
 80006ee:	4b4e      	ldr	r3, [pc, #312]	; (8000828 <peripheral_Config_Ini+0x2cc>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	725a      	strb	r2, [r3, #9]
	i2cGPIOs.GPIO_PinConfig.GPIO_PinOutType = GPIO_PUSHPULL;
 80006f4:	4b4c      	ldr	r3, [pc, #304]	; (8000828 <peripheral_Config_Ini+0x2cc>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	719a      	strb	r2, [r3, #6]
	i2cGPIOs.GPIO_PinConfig.GPIO_PinOutSpeed = GPIO_HIGHSPEED; //FAST SPEED
 80006fa:	4b4b      	ldr	r3, [pc, #300]	; (8000828 <peripheral_Config_Ini+0x2cc>)
 80006fc:	2203      	movs	r2, #3
 80006fe:	71da      	strb	r2, [r3, #7]
	i2cGPIOs.GPIO_PinConfig.GPIO_PinPullUpDown = GPIO_PULLUP; //internal pull up
 8000700:	4b49      	ldr	r3, [pc, #292]	; (8000828 <peripheral_Config_Ini+0x2cc>)
 8000702:	2201      	movs	r2, #1
 8000704:	721a      	strb	r2, [r3, #8]
	//SCL
	i2cGPIOs.GPIO_PinConfig.GPIO_PinNumber = PIN_I2C1_SCL;//SCL
 8000706:	4b48      	ldr	r3, [pc, #288]	; (8000828 <peripheral_Config_Ini+0x2cc>)
 8000708:	2206      	movs	r2, #6
 800070a:	711a      	strb	r2, [r3, #4]
	GPIO_PinInit(&i2cGPIOs);
 800070c:	4b46      	ldr	r3, [pc, #280]	; (8000828 <peripheral_Config_Ini+0x2cc>)
 800070e:	0018      	movs	r0, r3
 8000710:	f000 fcbe 	bl	8001090 <GPIO_PinInit>
	//SDA
	i2cGPIOs.GPIO_PinConfig.GPIO_PinNumber = PIN_I2C1_SDA;//SDA
 8000714:	4b44      	ldr	r3, [pc, #272]	; (8000828 <peripheral_Config_Ini+0x2cc>)
 8000716:	2209      	movs	r2, #9
 8000718:	711a      	strb	r2, [r3, #4]
	GPIO_PinInit(&i2cGPIOs);
 800071a:	4b43      	ldr	r3, [pc, #268]	; (8000828 <peripheral_Config_Ini+0x2cc>)
 800071c:	0018      	movs	r0, r3
 800071e:	f000 fcb7 	bl	8001090 <GPIO_PinInit>

	/*I2C configuration*/
	i2c1.pI2C = I2C1;
 8000722:	4b42      	ldr	r3, [pc, #264]	; (800082c <peripheral_Config_Ini+0x2d0>)
 8000724:	4a42      	ldr	r2, [pc, #264]	; (8000830 <peripheral_Config_Ini+0x2d4>)
 8000726:	601a      	str	r2, [r3, #0]
	//timing according to table for 100kHz I2C,8MHz clock
	param1 = 0x01;//PRESC
 8000728:	1dfb      	adds	r3, r7, #7
 800072a:	2201      	movs	r2, #1
 800072c:	701a      	strb	r2, [r3, #0]
	param2 = 0x04;//SCLDEL
 800072e:	1dbb      	adds	r3, r7, #6
 8000730:	2204      	movs	r2, #4
 8000732:	701a      	strb	r2, [r3, #0]
	param3 = 0x02;//SDADEL
 8000734:	1d7b      	adds	r3, r7, #5
 8000736:	2202      	movs	r2, #2
 8000738:	701a      	strb	r2, [r3, #0]
	param4 = 0x0F;//SCLH
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	220f      	movs	r2, #15
 800073e:	701a      	strb	r2, [r3, #0]
	param5 = 0x13;//SCLL
 8000740:	1cfb      	adds	r3, r7, #3
 8000742:	2213      	movs	r2, #19
 8000744:	701a      	strb	r2, [r3, #0]
	I2C_Master_TimingR(&i2c1, param1, param2, param3, param4, param5);
 8000746:	1d7b      	adds	r3, r7, #5
 8000748:	781c      	ldrb	r4, [r3, #0]
 800074a:	1dbb      	adds	r3, r7, #6
 800074c:	781a      	ldrb	r2, [r3, #0]
 800074e:	1dfb      	adds	r3, r7, #7
 8000750:	7819      	ldrb	r1, [r3, #0]
 8000752:	4836      	ldr	r0, [pc, #216]	; (800082c <peripheral_Config_Ini+0x2d0>)
 8000754:	1cfb      	adds	r3, r7, #3
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	9301      	str	r3, [sp, #4]
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	9300      	str	r3, [sp, #0]
 8000760:	0023      	movs	r3, r4
 8000762:	f001 f9b2 	bl	8001aca <I2C_Master_TimingR>
	i2c1.I2C_Config.I2C_AddressMode = I2C_ADDRESS_MODE_7BIT;
 8000766:	4b31      	ldr	r3, [pc, #196]	; (800082c <peripheral_Config_Ini+0x2d0>)
 8000768:	2200      	movs	r2, #0
 800076a:	715a      	strb	r2, [r3, #5]
	i2c1.I2C_Comm_t.I2C_SlaveAddress = ADS1115_ADDRESS; //ADS1115 address
 800076c:	4b2f      	ldr	r3, [pc, #188]	; (800082c <peripheral_Config_Ini+0x2d0>)
 800076e:	2248      	movs	r2, #72	; 0x48
 8000770:	841a      	strh	r2, [r3, #32]
	i2c1.I2C_Comm_t.I2C_Nbytes = 1;
 8000772:	4b2e      	ldr	r3, [pc, #184]	; (800082c <peripheral_Config_Ini+0x2d0>)
 8000774:	2201      	movs	r2, #1
 8000776:	779a      	strb	r2, [r3, #30]
	i2c1.I2C_Comm_t.RX_length = 1;
 8000778:	4b2c      	ldr	r3, [pc, #176]	; (800082c <peripheral_Config_Ini+0x2d0>)
 800077a:	2201      	movs	r2, #1
 800077c:	615a      	str	r2, [r3, #20]
	i2c1.I2C_Comm_t.I2C_RepeatStart = I2C_AUTOEND;
 800077e:	4b2b      	ldr	r3, [pc, #172]	; (800082c <peripheral_Config_Ini+0x2d0>)
 8000780:	2200      	movs	r2, #0
 8000782:	775a      	strb	r2, [r3, #29]

	//I2C initialization
	I2C_Init(&i2c1);
 8000784:	4b29      	ldr	r3, [pc, #164]	; (800082c <peripheral_Config_Ini+0x2d0>)
 8000786:	0018      	movs	r0, r3
 8000788:	f000 fed0 	bl	800152c <I2C_Init>
	//Enable I2C peripheral
	I2C_EnableDisable(&i2c1,ENABLE);
 800078c:	4b27      	ldr	r3, [pc, #156]	; (800082c <peripheral_Config_Ini+0x2d0>)
 800078e:	2101      	movs	r1, #1
 8000790:	0018      	movs	r0, r3
 8000792:	f000 fedd 	bl	8001550 <I2C_EnableDisable>

	/********************************TIMERS******************************************/
	//Timer 7 configuration
	timer7.pBasicTimer = BASIC_TIMER_7;
 8000796:	4b27      	ldr	r3, [pc, #156]	; (8000834 <peripheral_Config_Ini+0x2d8>)
 8000798:	4a27      	ldr	r2, [pc, #156]	; (8000838 <peripheral_Config_Ini+0x2dc>)
 800079a:	601a      	str	r2, [r3, #0]
	timer7.BasicTimer_Config.BasicTimer_arpe = DISABLE; //0: autoreload ARR updated if changed
 800079c:	4b25      	ldr	r3, [pc, #148]	; (8000834 <peripheral_Config_Ini+0x2d8>)
 800079e:	2200      	movs	r2, #0
 80007a0:	711a      	strb	r2, [r3, #4]
	timer7.BasicTimer_Config.BasicTimer_opm = DISABLE; //0: counter not stopped at update event
 80007a2:	4b24      	ldr	r3, [pc, #144]	; (8000834 <peripheral_Config_Ini+0x2d8>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	715a      	strb	r2, [r3, #5]
	timer7.BasicTimer_Config.BasicTimer_urs = ENABLE; //1: only overflow for interrupts
 80007a8:	4b22      	ldr	r3, [pc, #136]	; (8000834 <peripheral_Config_Ini+0x2d8>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	719a      	strb	r2, [r3, #6]
	timer7.BasicTimer_Config.BasicTimer_udis = DISABLE;
 80007ae:	4b21      	ldr	r3, [pc, #132]	; (8000834 <peripheral_Config_Ini+0x2d8>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	71da      	strb	r2, [r3, #7]
	//freq:8MHz.I2C meas/20s(real app:1min).Train stations/5s(simulation;reality with motor.timer tick:150Hz(min:8MHz/FFFF=133).arr:20s
	timer7.BasicTimer_Config.BasicTimer_prescaler = 53332; //prescaler=(clock_freq/timerTick_freq)-1=53332 (0xD054)
 80007b4:	4b1f      	ldr	r3, [pc, #124]	; (8000834 <peripheral_Config_Ini+0x2d8>)
 80007b6:	4a21      	ldr	r2, [pc, #132]	; (800083c <peripheral_Config_Ini+0x2e0>)
 80007b8:	811a      	strh	r2, [r3, #8]
	timer7.BasicTimer_Config.BasicTimer_autoreload = 3000; //max value. 20s/(1/150)=3000 (0xBB8)
 80007ba:	4b1e      	ldr	r3, [pc, #120]	; (8000834 <peripheral_Config_Ini+0x2d8>)
 80007bc:	4a20      	ldr	r2, [pc, #128]	; (8000840 <peripheral_Config_Ini+0x2e4>)
 80007be:	815a      	strh	r2, [r3, #10]

	//Timer 7 initialization
	BasicTimer_Init(&timer7);
 80007c0:	4b1c      	ldr	r3, [pc, #112]	; (8000834 <peripheral_Config_Ini+0x2d8>)
 80007c2:	0018      	movs	r0, r3
 80007c4:	f000 fa4e 	bl	8000c64 <BasicTimer_Init>
	//Enable timer 7
	BasicTimer_EnableDisable(&timer7, ENABLE);
 80007c8:	4b1a      	ldr	r3, [pc, #104]	; (8000834 <peripheral_Config_Ini+0x2d8>)
 80007ca:	2101      	movs	r1, #1
 80007cc:	0018      	movs	r0, r3
 80007ce:	f000 fa90 	bl	8000cf2 <BasicTimer_EnableDisable>

	//Virtual timer configuration, here used for
	train_virtualTimer.realTimer = timer7;
 80007d2:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <peripheral_Config_Ini+0x2e8>)
 80007d4:	4a17      	ldr	r2, [pc, #92]	; (8000834 <peripheral_Config_Ini+0x2d8>)
 80007d6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007d8:	c313      	stmia	r3!, {r0, r1, r4}
	train_virtualTimer.configured_counter_value = (train_virtualTimer.realTimer.BasicTimer_Config.BasicTimer_autoreload/4);
 80007da:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <peripheral_Config_Ini+0x2e8>)
 80007dc:	895b      	ldrh	r3, [r3, #10]
 80007de:	089b      	lsrs	r3, r3, #2
 80007e0:	b29a      	uxth	r2, r3
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <peripheral_Config_Ini+0x2e8>)
 80007e4:	819a      	strh	r2, [r3, #12]
	train_virtualTimer.counter_value_preStop = 0;
 80007e6:	4b17      	ldr	r3, [pc, #92]	; (8000844 <peripheral_Config_Ini+0x2e8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	825a      	strh	r2, [r3, #18]
	if (currentState == ON){
 80007ec:	4b16      	ldr	r3, [pc, #88]	; (8000848 <peripheral_Config_Ini+0x2ec>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d108      	bne.n	8000806 <peripheral_Config_Ini+0x2aa>
		VirtualBasicTimer_EnableDisable(&train_virtualTimer, ENABLE); //it does not start the virtual timer yet
 80007f4:	4b13      	ldr	r3, [pc, #76]	; (8000844 <peripheral_Config_Ini+0x2e8>)
 80007f6:	2101      	movs	r1, #1
 80007f8:	0018      	movs	r0, r3
 80007fa:	f000 fb58 	bl	8000eae <VirtualBasicTimer_EnableDisable>
		VirtualBasicTimer_StartCounter(&train_virtualTimer); //virtual timer starts
 80007fe:	4b11      	ldr	r3, [pc, #68]	; (8000844 <peripheral_Config_Ini+0x2e8>)
 8000800:	0018      	movs	r0, r3
 8000802:	f000 fb6a 	bl	8000eda <VirtualBasicTimer_StartCounter>
	}

}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	46bd      	mov	sp, r7
 800080a:	b003      	add	sp, #12
 800080c:	bd90      	pop	{r4, r7, pc}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	20000044 	.word	0x20000044
 8000814:	20000038 	.word	0x20000038
 8000818:	48000400 	.word	0x48000400
 800081c:	20000050 	.word	0x20000050
 8000820:	20000068 	.word	0x20000068
 8000824:	40013000 	.word	0x40013000
 8000828:	2000005c 	.word	0x2000005c
 800082c:	20000090 	.word	0x20000090
 8000830:	40005400 	.word	0x40005400
 8000834:	200000c0 	.word	0x200000c0
 8000838:	40001400 	.word	0x40001400
 800083c:	ffffd054 	.word	0xffffd054
 8000840:	00000bb8 	.word	0x00000bb8
 8000844:	200000cc 	.word	0x200000cc
 8000848:	200000e4 	.word	0x200000e4

0800084c <configureADS1115>:
/*********************************CONFIGURE ADS1115**********************************************/
void configureADS1115(I2C_Handle_t *pI2Chandle){
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	//https://cdn-shop.adafruit.com/datasheets/ads1115.pdf
	if (flagADS1115 < ADS1115_1ST_DURING){
 8000854:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <configureADS1115+0x68>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d116      	bne.n	800088a <configureADS1115+0x3e>
		//continuous mode
		/*1-write to config reg. bit 8 mode(0:continuous;1:single-shot,default);bits 9-11:gain amplifier.bit 15 set to 1 starts single shot
		*bits 14-12:multiplexor configuration
		*transmiter:address+0x01(points to config reg)+0b10000100(MSB:start shot+default gain+continuous)+0b10000011(LSB:default rate+no comparator)*/
		bytes_to_ADS1115_reg[0] = 0x01; //0x01(points to config reg)
 800085c:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <configureADS1115+0x6c>)
 800085e:	2201      	movs	r2, #1
 8000860:	701a      	strb	r2, [r3, #0]

		//for continuous mode. +-4.076V, 128 sps, bits 14-12 110: AINp=AIN0 and AInn=GND (single ended measurement for A0).
		//bytes_to_ADS1115_reg[1] = 0xC2; //0b11000010 (MSB)
		//bytes_to_ADS1115_reg[2] = 0x83; //0b10000011 (LSB)
		//for single-shot. bit 15: begin single conversion. bit 8: 1-single shot
		bytes_to_ADS1115_reg[1] = 0xC3; //0b11000011 (MSB)
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <configureADS1115+0x6c>)
 8000864:	22c3      	movs	r2, #195	; 0xc3
 8000866:	705a      	strb	r2, [r3, #1]
		bytes_to_ADS1115_reg[2] = 0x83; //0b10000011 (LSB)
 8000868:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <configureADS1115+0x6c>)
 800086a:	2283      	movs	r2, #131	; 0x83
 800086c:	709a      	strb	r2, [r3, #2]

		//pI2Chandle->I2C_Comm_t.TX_buffer = bytes_to_ADS1115_reg; //buffer pointing to bytes_to_ADS1115_reg
		flagADS1115 = ADS1115_1ST_DURING;
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <configureADS1115+0x68>)
 8000870:	2201      	movs	r2, #1
 8000872:	701a      	strb	r2, [r3, #0]
		I2C_EnableDisable(&i2c1,ENABLE);
 8000874:	4b11      	ldr	r3, [pc, #68]	; (80008bc <configureADS1115+0x70>)
 8000876:	2101      	movs	r1, #1
 8000878:	0018      	movs	r0, r3
 800087a:	f000 fe69 	bl	8001550 <I2C_EnableDisable>
		I2C_Master_Transmitter(pI2Chandle, 3, 1, bytes_to_ADS1115_reg);
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <configureADS1115+0x6c>)
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	2103      	movs	r1, #3
 8000886:	f000 ff47 	bl	8001718 <I2C_Master_Transmitter>
		//I2C_Start(pI2Chandle); //triggered directly in I2C_Master_Transmitter;in case of problems,do it from here and comment in I2C_Master_Transmitter
	}


	if (flagADS1115 == ADS1115_1ST_DONE){
 800088a:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <configureADS1115+0x68>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	2b02      	cmp	r3, #2
 8000890:	d10b      	bne.n	80008aa <configureADS1115+0x5e>
		//2-select the conversion register by writing to pointer reg(0x00:conversion reg;0x01:config reg)
		//transmitter:address+0x00(points to conversion register)
		bytes_to_ADS1115_reg[0] = 0x00; //0x00(points to conversion register)
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <configureADS1115+0x6c>)
 8000894:	2200      	movs	r2, #0
 8000896:	701a      	strb	r2, [r3, #0]
		//pI2Chandle->I2C_Comm_t.TX_buffer = bytes_to_ADS1115_reg; //buffer pointing to bytes_to_ADS1115_reg
		flagADS1115 = ADS1115_2ND_DURING;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <configureADS1115+0x68>)
 800089a:	2203      	movs	r2, #3
 800089c:	701a      	strb	r2, [r3, #0]
		//I2C_EnableDisable(&i2c1,ENABLE);
		I2C_Master_Transmitter(pI2Chandle, 1, 1, bytes_to_ADS1115_reg);
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <configureADS1115+0x6c>)
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	2201      	movs	r2, #1
 80008a4:	2101      	movs	r1, #1
 80008a6:	f000 ff37 	bl	8001718 <I2C_Master_Transmitter>
		//I2C_Start(pI2Chandle); //triggered directly in I2C_Master_Transmitter;in case of problems,do it from here and comment in I2C_Master_Transmitter
	}

}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	46bd      	mov	sp, r7
 80008ae:	b002      	add	sp, #8
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	200000be 	.word	0x200000be
 80008b8:	200000b8 	.word	0x200000b8
 80008bc:	20000090 	.word	0x20000090

080008c0 <spi_appComm>:

/************************************SPI COMMUNICATION STM32-ARDUINO************************************/
void spi_appComm(){
 80008c0:	b5b0      	push	{r4, r5, r7, lr}
 80008c2:	af00      	add	r7, sp, #0
	//switch-case instead of while (TX/RXstate != READ) to avoid blocking
	switch (flagSPI){ //{SEND_PRINT,READ_PRINT,DUMMY_ACK,READ_ACK,SEND_LENGTH,READ_LENGTH,SEND_STATE,READ_STATE}
 80008c4:	4ba1      	ldr	r3, [pc, #644]	; (8000b4c <spi_appComm+0x28c>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2b08      	cmp	r3, #8
 80008ca:	d900      	bls.n	80008ce <spi_appComm+0xe>
 80008cc:	e129      	b.n	8000b22 <spi_appComm+0x262>
 80008ce:	009a      	lsls	r2, r3, #2
 80008d0:	4b9f      	ldr	r3, [pc, #636]	; (8000b50 <spi_appComm+0x290>)
 80008d2:	18d3      	adds	r3, r2, r3
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	469f      	mov	pc, r3
	case SEND_PRINT:
		//create the message (alternative:create it in case SEND_LENGTH,but maybe modify the startCounter placement)
	    station_char = trainStation+'0';
 80008d8:	4b9e      	ldr	r3, [pc, #632]	; (8000b54 <spi_appComm+0x294>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	3330      	adds	r3, #48	; 0x30
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	4b9d      	ldr	r3, [pc, #628]	; (8000b58 <spi_appComm+0x298>)
 80008e2:	701a      	strb	r2, [r3, #0]
	    //state_name = state_string_names[currentState];
	    //message_spi[0] = '\0';//to clear the array,since '\0' represents the last element of a char array
	    strlcpy(message_spi,station_string,strlen(station_string));
 80008e4:	4b9d      	ldr	r3, [pc, #628]	; (8000b5c <spi_appComm+0x29c>)
 80008e6:	681c      	ldr	r4, [r3, #0]
 80008e8:	4b9c      	ldr	r3, [pc, #624]	; (8000b5c <spi_appComm+0x29c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	0018      	movs	r0, r3
 80008ee:	f7ff fc0b 	bl	8000108 <strlen>
 80008f2:	0002      	movs	r2, r0
 80008f4:	4b9a      	ldr	r3, [pc, #616]	; (8000b60 <spi_appComm+0x2a0>)
 80008f6:	0021      	movs	r1, r4
 80008f8:	0018      	movs	r0, r3
 80008fa:	f001 fbe3 	bl	80020c4 <strlcpy>
	    strncat(message_spi,&station_char,strlen(&station_char));
 80008fe:	4b96      	ldr	r3, [pc, #600]	; (8000b58 <spi_appComm+0x298>)
 8000900:	0018      	movs	r0, r3
 8000902:	f7ff fc01 	bl	8000108 <strlen>
 8000906:	0002      	movs	r2, r0
 8000908:	4993      	ldr	r1, [pc, #588]	; (8000b58 <spi_appComm+0x298>)
 800090a:	4b95      	ldr	r3, [pc, #596]	; (8000b60 <spi_appComm+0x2a0>)
 800090c:	0018      	movs	r0, r3
 800090e:	f001 fbff 	bl	8002110 <strncat>
	    strncat(message_spi,state_string,strlen(state_string));
 8000912:	4b94      	ldr	r3, [pc, #592]	; (8000b64 <spi_appComm+0x2a4>)
 8000914:	681c      	ldr	r4, [r3, #0]
 8000916:	4b93      	ldr	r3, [pc, #588]	; (8000b64 <spi_appComm+0x2a4>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	0018      	movs	r0, r3
 800091c:	f7ff fbf4 	bl	8000108 <strlen>
 8000920:	0002      	movs	r2, r0
 8000922:	4b8f      	ldr	r3, [pc, #572]	; (8000b60 <spi_appComm+0x2a0>)
 8000924:	0021      	movs	r1, r4
 8000926:	0018      	movs	r0, r3
 8000928:	f001 fbf2 	bl	8002110 <strncat>
	    strncat(message_spi,state_string_names[currentState],strlen(state_string_names[currentState]));
 800092c:	4b8e      	ldr	r3, [pc, #568]	; (8000b68 <spi_appComm+0x2a8>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	001a      	movs	r2, r3
 8000932:	4b8e      	ldr	r3, [pc, #568]	; (8000b6c <spi_appComm+0x2ac>)
 8000934:	0092      	lsls	r2, r2, #2
 8000936:	58d4      	ldr	r4, [r2, r3]
 8000938:	4b8b      	ldr	r3, [pc, #556]	; (8000b68 <spi_appComm+0x2a8>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	001a      	movs	r2, r3
 800093e:	4b8b      	ldr	r3, [pc, #556]	; (8000b6c <spi_appComm+0x2ac>)
 8000940:	0092      	lsls	r2, r2, #2
 8000942:	58d3      	ldr	r3, [r2, r3]
 8000944:	0018      	movs	r0, r3
 8000946:	f7ff fbdf 	bl	8000108 <strlen>
 800094a:	0002      	movs	r2, r0
 800094c:	4b84      	ldr	r3, [pc, #528]	; (8000b60 <spi_appComm+0x2a0>)
 800094e:	0021      	movs	r1, r4
 8000950:	0018      	movs	r0, r3
 8000952:	f001 fbdd 	bl	8002110 <strncat>
	    message_spi_length = strlen(station_string)+strlen(&station_char)+strlen(state_string)+strlen(state_string_names[currentState])-2;
 8000956:	4b81      	ldr	r3, [pc, #516]	; (8000b5c <spi_appComm+0x29c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	0018      	movs	r0, r3
 800095c:	f7ff fbd4 	bl	8000108 <strlen>
 8000960:	0003      	movs	r3, r0
 8000962:	b2dc      	uxtb	r4, r3
 8000964:	4b7c      	ldr	r3, [pc, #496]	; (8000b58 <spi_appComm+0x298>)
 8000966:	0018      	movs	r0, r3
 8000968:	f7ff fbce 	bl	8000108 <strlen>
 800096c:	0003      	movs	r3, r0
 800096e:	b2db      	uxtb	r3, r3
 8000970:	18e3      	adds	r3, r4, r3
 8000972:	b2dc      	uxtb	r4, r3
 8000974:	4b7b      	ldr	r3, [pc, #492]	; (8000b64 <spi_appComm+0x2a4>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	0018      	movs	r0, r3
 800097a:	f7ff fbc5 	bl	8000108 <strlen>
 800097e:	0003      	movs	r3, r0
 8000980:	b2db      	uxtb	r3, r3
 8000982:	18e3      	adds	r3, r4, r3
 8000984:	b2dc      	uxtb	r4, r3
 8000986:	4b78      	ldr	r3, [pc, #480]	; (8000b68 <spi_appComm+0x2a8>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	001a      	movs	r2, r3
 800098c:	4b77      	ldr	r3, [pc, #476]	; (8000b6c <spi_appComm+0x2ac>)
 800098e:	0092      	lsls	r2, r2, #2
 8000990:	58d3      	ldr	r3, [r2, r3]
 8000992:	0018      	movs	r0, r3
 8000994:	f7ff fbb8 	bl	8000108 <strlen>
 8000998:	0003      	movs	r3, r0
 800099a:	b2db      	uxtb	r3, r3
 800099c:	18e3      	adds	r3, r4, r3
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	3b02      	subs	r3, #2
 80009a2:	b2da      	uxtb	r2, r3
 80009a4:	4b72      	ldr	r3, [pc, #456]	; (8000b70 <spi_appComm+0x2b0>)
 80009a6:	701a      	strb	r2, [r3, #0]

		//enable SPI and disable it at the end
		SPI_EnableDisable(&spi1,ENABLE);
 80009a8:	4b72      	ldr	r3, [pc, #456]	; (8000b74 <spi_appComm+0x2b4>)
 80009aa:	2101      	movs	r1, #1
 80009ac:	0018      	movs	r0, r3
 80009ae:	f001 f9c1 	bl	8001d34 <SPI_EnableDisable>
		//Reading data register to flush previous data (previously it had been working without this)
		//NOT IMPLEMENTED;IF NECESSARY,COPY FROM debugSemihosting: flushDR(&spi1, &myRXbuffer, 1);

		//Send print command.Ard should store it in its RX buffer and put ACK in TX.Master should receive garbage in shift reg.
		TX_byte = SPI_COMMAND_PRINT;
 80009b2:	4b71      	ldr	r3, [pc, #452]	; (8000b78 <spi_appComm+0x2b8>)
 80009b4:	2250      	movs	r2, #80	; 0x50
 80009b6:	701a      	strb	r2, [r3, #0]
		SPI_Send(&spi1, &TX_byte, 1); //SPI_Send(&spi1, (uint8_t*)SPI_COMMAND_PRINT, 1);
 80009b8:	496f      	ldr	r1, [pc, #444]	; (8000b78 <spi_appComm+0x2b8>)
 80009ba:	4b6e      	ldr	r3, [pc, #440]	; (8000b74 <spi_appComm+0x2b4>)
 80009bc:	2201      	movs	r2, #1
 80009be:	0018      	movs	r0, r3
 80009c0:	f001 fb09 	bl	8001fd6 <SPI_Send>
		flagSPI = READ_PRINT;
 80009c4:	4b61      	ldr	r3, [pc, #388]	; (8000b4c <spi_appComm+0x28c>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	701a      	strb	r2, [r3, #0]
		break;
 80009ca:	e0bb      	b.n	8000b44 <spi_appComm+0x284>

	case READ_PRINT://Read master RX to clear the RX buffer for the next reading of ACK
		if (spi1.SPI_Comm.TX_state == SPI_READY){
 80009cc:	4b69      	ldr	r3, [pc, #420]	; (8000b74 <spi_appComm+0x2b4>)
 80009ce:	7d1b      	ldrb	r3, [r3, #20]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d000      	beq.n	80009d6 <spi_appComm+0x116>
 80009d4:	e0a7      	b.n	8000b26 <spi_appComm+0x266>
			delay(500000);
 80009d6:	4b69      	ldr	r3, [pc, #420]	; (8000b7c <spi_appComm+0x2bc>)
 80009d8:	0018      	movs	r0, r3
 80009da:	f7ff fb9c 	bl	8000116 <delay>
			SPI_Read(&spi1, &myRXbuffer, 1); //1 byte to be read
 80009de:	4968      	ldr	r1, [pc, #416]	; (8000b80 <spi_appComm+0x2c0>)
 80009e0:	4b64      	ldr	r3, [pc, #400]	; (8000b74 <spi_appComm+0x2b4>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	0018      	movs	r0, r3
 80009e6:	f001 fb15 	bl	8002014 <SPI_Read>
			flagSPI = DUMMY_ACK;
 80009ea:	4b58      	ldr	r3, [pc, #352]	; (8000b4c <spi_appComm+0x28c>)
 80009ec:	2202      	movs	r2, #2
 80009ee:	701a      	strb	r2, [r3, #0]
		}
		break;
 80009f0:	e099      	b.n	8000b26 <spi_appComm+0x266>

	case DUMMY_ACK://Send dummy data to Ard so that master receives ACK/NACK
		if (spi1.SPI_Comm.RX_state == SPI_READY){
 80009f2:	4b60      	ldr	r3, [pc, #384]	; (8000b74 <spi_appComm+0x2b4>)
 80009f4:	2220      	movs	r2, #32
 80009f6:	5c9b      	ldrb	r3, [r3, r2]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d000      	beq.n	80009fe <spi_appComm+0x13e>
 80009fc:	e095      	b.n	8000b2a <spi_appComm+0x26a>
			delay(500000);
 80009fe:	4b5f      	ldr	r3, [pc, #380]	; (8000b7c <spi_appComm+0x2bc>)
 8000a00:	0018      	movs	r0, r3
 8000a02:	f7ff fb88 	bl	8000116 <delay>
			TX_byte = SPI_ARD_DUMMY;
 8000a06:	4b5c      	ldr	r3, [pc, #368]	; (8000b78 <spi_appComm+0x2b8>)
 8000a08:	22c1      	movs	r2, #193	; 0xc1
 8000a0a:	701a      	strb	r2, [r3, #0]
			SPI_Send(&spi1, &TX_byte, 1); //length 1 byte
 8000a0c:	495a      	ldr	r1, [pc, #360]	; (8000b78 <spi_appComm+0x2b8>)
 8000a0e:	4b59      	ldr	r3, [pc, #356]	; (8000b74 <spi_appComm+0x2b4>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	0018      	movs	r0, r3
 8000a14:	f001 fadf 	bl	8001fd6 <SPI_Send>
			flagSPI = READ_ACK;
 8000a18:	4b4c      	ldr	r3, [pc, #304]	; (8000b4c <spi_appComm+0x28c>)
 8000a1a:	2203      	movs	r2, #3
 8000a1c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000a1e:	e084      	b.n	8000b2a <spi_appComm+0x26a>

	case READ_ACK://Read master RX to get ACK/NACK
		if (spi1.SPI_Comm.TX_state == SPI_READY){
 8000a20:	4b54      	ldr	r3, [pc, #336]	; (8000b74 <spi_appComm+0x2b4>)
 8000a22:	7d1b      	ldrb	r3, [r3, #20]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d000      	beq.n	8000a2a <spi_appComm+0x16a>
 8000a28:	e081      	b.n	8000b2e <spi_appComm+0x26e>
			delay(500000);
 8000a2a:	4b54      	ldr	r3, [pc, #336]	; (8000b7c <spi_appComm+0x2bc>)
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f7ff fb72 	bl	8000116 <delay>
			SPI_Read(&spi1, &myRXbuffer, 1); //1 byte to be read
 8000a32:	4953      	ldr	r1, [pc, #332]	; (8000b80 <spi_appComm+0x2c0>)
 8000a34:	4b4f      	ldr	r3, [pc, #316]	; (8000b74 <spi_appComm+0x2b4>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f001 faeb 	bl	8002014 <SPI_Read>
			flagSPI = SEND_LENGTH;
 8000a3e:	4b43      	ldr	r3, [pc, #268]	; (8000b4c <spi_appComm+0x28c>)
 8000a40:	2204      	movs	r2, #4
 8000a42:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000a44:	e073      	b.n	8000b2e <spi_appComm+0x26e>

	case SEND_LENGTH://if ACK, send length+currentState and receive response;otherwise,send it again
		if (spi1.SPI_Comm.RX_state == SPI_READY){
 8000a46:	4b4b      	ldr	r3, [pc, #300]	; (8000b74 <spi_appComm+0x2b4>)
 8000a48:	2220      	movs	r2, #32
 8000a4a:	5c9b      	ldrb	r3, [r3, r2]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d000      	beq.n	8000a52 <spi_appComm+0x192>
 8000a50:	e06f      	b.n	8000b32 <spi_appComm+0x272>
			delay(500000);
 8000a52:	4b4a      	ldr	r3, [pc, #296]	; (8000b7c <spi_appComm+0x2bc>)
 8000a54:	0018      	movs	r0, r3
 8000a56:	f7ff fb5e 	bl	8000116 <delay>
			if (myRXbuffer == SPI_ARD_ACK){
 8000a5a:	4b49      	ldr	r3, [pc, #292]	; (8000b80 <spi_appComm+0x2c0>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2ba1      	cmp	r3, #161	; 0xa1
 8000a60:	d10d      	bne.n	8000a7e <spi_appComm+0x1be>
				TX_byte = message_spi_length; //in bytes. test: 0x01
 8000a62:	4b43      	ldr	r3, [pc, #268]	; (8000b70 <spi_appComm+0x2b0>)
 8000a64:	781a      	ldrb	r2, [r3, #0]
 8000a66:	4b44      	ldr	r3, [pc, #272]	; (8000b78 <spi_appComm+0x2b8>)
 8000a68:	701a      	strb	r2, [r3, #0]
				SPI_Send(&spi1, &TX_byte, 1);
 8000a6a:	4943      	ldr	r1, [pc, #268]	; (8000b78 <spi_appComm+0x2b8>)
 8000a6c:	4b41      	ldr	r3, [pc, #260]	; (8000b74 <spi_appComm+0x2b4>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	0018      	movs	r0, r3
 8000a72:	f001 fab0 	bl	8001fd6 <SPI_Send>
				flagSPI = READ_LENGTH;
 8000a76:	4b35      	ldr	r3, [pc, #212]	; (8000b4c <spi_appComm+0x28c>)
 8000a78:	2205      	movs	r2, #5
 8000a7a:	701a      	strb	r2, [r3, #0]
			else {
				//try to send it again
				flagSPI = SEND_PRINT;
			}
		}
		break;
 8000a7c:	e059      	b.n	8000b32 <spi_appComm+0x272>
				flagSPI = SEND_PRINT;
 8000a7e:	4b33      	ldr	r3, [pc, #204]	; (8000b4c <spi_appComm+0x28c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	701a      	strb	r2, [r3, #0]
		break;
 8000a84:	e055      	b.n	8000b32 <spi_appComm+0x272>

	case READ_LENGTH://Read master RX
		if (spi1.SPI_Comm.TX_state == SPI_READY){
 8000a86:	4b3b      	ldr	r3, [pc, #236]	; (8000b74 <spi_appComm+0x2b4>)
 8000a88:	7d1b      	ldrb	r3, [r3, #20]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d153      	bne.n	8000b36 <spi_appComm+0x276>
			delay(500000);
 8000a8e:	4b3b      	ldr	r3, [pc, #236]	; (8000b7c <spi_appComm+0x2bc>)
 8000a90:	0018      	movs	r0, r3
 8000a92:	f7ff fb40 	bl	8000116 <delay>
			SPI_Read(&spi1, &myRXbuffer, 1); //1 byte to be read
 8000a96:	493a      	ldr	r1, [pc, #232]	; (8000b80 <spi_appComm+0x2c0>)
 8000a98:	4b36      	ldr	r3, [pc, #216]	; (8000b74 <spi_appComm+0x2b4>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f001 fab9 	bl	8002014 <SPI_Read>
			flagSPI = SEND_STATE;
 8000aa2:	4b2a      	ldr	r3, [pc, #168]	; (8000b4c <spi_appComm+0x28c>)
 8000aa4:	2206      	movs	r2, #6
 8000aa6:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000aa8:	e045      	b.n	8000b36 <spi_appComm+0x276>

	case SEND_STATE: //send the state+station
		if (spi1.SPI_Comm.RX_state == SPI_READY){
 8000aaa:	4b32      	ldr	r3, [pc, #200]	; (8000b74 <spi_appComm+0x2b4>)
 8000aac:	2220      	movs	r2, #32
 8000aae:	5c9b      	ldrb	r3, [r3, r2]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d142      	bne.n	8000b3a <spi_appComm+0x27a>
			delay(500000);
 8000ab4:	4b31      	ldr	r3, [pc, #196]	; (8000b7c <spi_appComm+0x2bc>)
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f7ff fb2d 	bl	8000116 <delay>
			SPI_Send(&spi1, message_spi, message_spi_length);
 8000abc:	4b2c      	ldr	r3, [pc, #176]	; (8000b70 <spi_appComm+0x2b0>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	001a      	movs	r2, r3
 8000ac2:	4927      	ldr	r1, [pc, #156]	; (8000b60 <spi_appComm+0x2a0>)
 8000ac4:	4b2b      	ldr	r3, [pc, #172]	; (8000b74 <spi_appComm+0x2b4>)
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f001 fa85 	bl	8001fd6 <SPI_Send>
			flagSPI = READ_STATE;
 8000acc:	4b1f      	ldr	r3, [pc, #124]	; (8000b4c <spi_appComm+0x28c>)
 8000ace:	2207      	movs	r2, #7
 8000ad0:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000ad2:	e032      	b.n	8000b3a <spi_appComm+0x27a>

	case READ_STATE: //read RXNE to clear it off to avoid overrun
		if (spi1.SPI_Comm.TX_state == SPI_READY){
 8000ad4:	4b27      	ldr	r3, [pc, #156]	; (8000b74 <spi_appComm+0x2b4>)
 8000ad6:	7d1b      	ldrb	r3, [r3, #20]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d130      	bne.n	8000b3e <spi_appComm+0x27e>
			delay(500000);
 8000adc:	4b27      	ldr	r3, [pc, #156]	; (8000b7c <spi_appComm+0x2bc>)
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f7ff fb19 	bl	8000116 <delay>
			SPI_Read(&spi1, &myRXbuffer, 1); //1 byte to be read (dummy read).
 8000ae4:	4926      	ldr	r1, [pc, #152]	; (8000b80 <spi_appComm+0x2c0>)
 8000ae6:	4b23      	ldr	r3, [pc, #140]	; (8000b74 <spi_appComm+0x2b4>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	0018      	movs	r0, r3
 8000aec:	f001 fa92 	bl	8002014 <SPI_Read>
			flagSPI = WAIT_END;
 8000af0:	4b16      	ldr	r3, [pc, #88]	; (8000b4c <spi_appComm+0x28c>)
 8000af2:	2208      	movs	r2, #8
 8000af4:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000af6:	e022      	b.n	8000b3e <spi_appComm+0x27e>

	case WAIT_END:
		if (spi1.SPI_Comm.RX_state == SPI_READY){
 8000af8:	4b1e      	ldr	r3, [pc, #120]	; (8000b74 <spi_appComm+0x2b4>)
 8000afa:	2220      	movs	r2, #32
 8000afc:	5c9b      	ldrb	r3, [r3, r2]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d11f      	bne.n	8000b42 <spi_appComm+0x282>
			delay(500000);
 8000b02:	4b1e      	ldr	r3, [pc, #120]	; (8000b7c <spi_appComm+0x2bc>)
 8000b04:	0018      	movs	r0, r3
 8000b06:	f7ff fb06 	bl	8000116 <delay>
			//clear the flag of current state in order to capture state changes
			stateChanged = 0;
 8000b0a:	4b1e      	ldr	r3, [pc, #120]	; (8000b84 <spi_appComm+0x2c4>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
			//Disable SPI
			SPI_EnableDisable(&spi1,DISABLE);
 8000b10:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <spi_appComm+0x2b4>)
 8000b12:	2100      	movs	r1, #0
 8000b14:	0018      	movs	r0, r3
 8000b16:	f001 f90d 	bl	8001d34 <SPI_EnableDisable>
			//get ready for the next state change
			flagSPI = SEND_PRINT;
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <spi_appComm+0x28c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000b20:	e00f      	b.n	8000b42 <spi_appComm+0x282>
	default:
		//error. print it in semihosting
		break;
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	e00e      	b.n	8000b44 <spi_appComm+0x284>
		break;
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	e00c      	b.n	8000b44 <spi_appComm+0x284>
		break;
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	e00a      	b.n	8000b44 <spi_appComm+0x284>
		break;
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	e008      	b.n	8000b44 <spi_appComm+0x284>
		break;
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	e006      	b.n	8000b44 <spi_appComm+0x284>
		break;
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	e004      	b.n	8000b44 <spi_appComm+0x284>
		break;
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	e002      	b.n	8000b44 <spi_appComm+0x284>
		break;
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	e000      	b.n	8000b44 <spi_appComm+0x284>
		break;
 8000b42:	46c0      	nop			; (mov r8, r8)

	}
}
 8000b44:	46c0      	nop			; (mov r8, r8)
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bdb0      	pop	{r4, r5, r7, pc}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	2000008d 	.word	0x2000008d
 8000b50:	0800217c 	.word	0x0800217c
 8000b54:	200000e6 	.word	0x200000e6
 8000b58:	20000108 	.word	0x20000108
 8000b5c:	20000004 	.word	0x20000004
 8000b60:	200000e8 	.word	0x200000e8
 8000b64:	20000008 	.word	0x20000008
 8000b68:	200000e4 	.word	0x200000e4
 8000b6c:	2000000c 	.word	0x2000000c
 8000b70:	20000018 	.word	0x20000018
 8000b74:	20000068 	.word	0x20000068
 8000b78:	20000000 	.word	0x20000000
 8000b7c:	0007a120 	.word	0x0007a120
 8000b80:	2000008c 	.word	0x2000008c
 8000b84:	200000e5 	.word	0x200000e5

08000b88 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b88:	480d      	ldr	r0, [pc, #52]	; (8000bc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b8a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b8c:	e000      	b.n	8000b90 <Reset_Handler+0x8>
 8000b8e:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b90:	480c      	ldr	r0, [pc, #48]	; (8000bc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b92:	490d      	ldr	r1, [pc, #52]	; (8000bc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b94:	4a0d      	ldr	r2, [pc, #52]	; (8000bcc <LoopForever+0xe>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b98:	e002      	b.n	8000ba0 <LoopCopyDataInit>

08000b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9e:	3304      	adds	r3, #4

08000ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba4:	d3f9      	bcc.n	8000b9a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba8:	4c0a      	ldr	r4, [pc, #40]	; (8000bd4 <LoopForever+0x16>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bac:	e001      	b.n	8000bb2 <LoopFillZerobss>

08000bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb0:	3204      	adds	r2, #4

08000bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb4:	d3fb      	bcc.n	8000bae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bb6:	f001 fa59 	bl	800206c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bba:	f7ff fabf 	bl	800013c <main>

08000bbe <LoopForever>:

LoopForever:
    b LoopForever
 8000bbe:	e7fe      	b.n	8000bbe <LoopForever>
  ldr   r0, =_estack
 8000bc0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000bcc:	080021a8 	.word	0x080021a8
  ldr r2, =_sbss
 8000bd0:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000bd4:	2000010c 	.word	0x2000010c

08000bd8 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bd8:	e7fe      	b.n	8000bd8 <ADC_COMP_IRQHandler>
	...

08000bdc <BasicTimer_ClockControl>:
 */

#include "basicTimers.h"

/*Enable or disable BasicTimer peripheral clock*/
void BasicTimer_ClockControl(BasicTimer_Handle_t *pBasicTimerhandle, uint8_t EnableDisable){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	000a      	movs	r2, r1
 8000be6:	1cfb      	adds	r3, r7, #3
 8000be8:	701a      	strb	r2, [r3, #0]
	if (EnableDisable == ENABLE) {
 8000bea:	1cfb      	adds	r3, r7, #3
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d117      	bne.n	8000c22 <BasicTimer_ClockControl+0x46>
		if (pBasicTimerhandle->pBasicTimer == BASIC_TIMER_6){
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a18      	ldr	r2, [pc, #96]	; (8000c58 <BasicTimer_ClockControl+0x7c>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d106      	bne.n	8000c0a <BasicTimer_ClockControl+0x2e>
			BasicTimer_6_Clock_Enable();
 8000bfc:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <BasicTimer_ClockControl+0x80>)
 8000bfe:	69da      	ldr	r2, [r3, #28]
 8000c00:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <BasicTimer_ClockControl+0x80>)
 8000c02:	2110      	movs	r1, #16
 8000c04:	430a      	orrs	r2, r1
 8000c06:	61da      	str	r2, [r3, #28]
		}
		else if (pBasicTimerhandle->pBasicTimer == BASIC_TIMER_7){
			BasicTimer_7_Clock_Disable();
		}
	}
}
 8000c08:	e022      	b.n	8000c50 <BasicTimer_ClockControl+0x74>
		else if (pBasicTimerhandle->pBasicTimer == BASIC_TIMER_7){
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a14      	ldr	r2, [pc, #80]	; (8000c60 <BasicTimer_ClockControl+0x84>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d11d      	bne.n	8000c50 <BasicTimer_ClockControl+0x74>
			BasicTimer_7_Clock_Enable();
 8000c14:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <BasicTimer_ClockControl+0x80>)
 8000c16:	69da      	ldr	r2, [r3, #28]
 8000c18:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <BasicTimer_ClockControl+0x80>)
 8000c1a:	2120      	movs	r1, #32
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	61da      	str	r2, [r3, #28]
}
 8000c20:	e016      	b.n	8000c50 <BasicTimer_ClockControl+0x74>
		if (pBasicTimerhandle->pBasicTimer == BASIC_TIMER_6){
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a0c      	ldr	r2, [pc, #48]	; (8000c58 <BasicTimer_ClockControl+0x7c>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d106      	bne.n	8000c3a <BasicTimer_ClockControl+0x5e>
			BasicTimer_6_Clock_Disable();
 8000c2c:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <BasicTimer_ClockControl+0x80>)
 8000c2e:	69da      	ldr	r2, [r3, #28]
 8000c30:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <BasicTimer_ClockControl+0x80>)
 8000c32:	2110      	movs	r1, #16
 8000c34:	438a      	bics	r2, r1
 8000c36:	61da      	str	r2, [r3, #28]
}
 8000c38:	e00a      	b.n	8000c50 <BasicTimer_ClockControl+0x74>
		else if (pBasicTimerhandle->pBasicTimer == BASIC_TIMER_7){
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a08      	ldr	r2, [pc, #32]	; (8000c60 <BasicTimer_ClockControl+0x84>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d105      	bne.n	8000c50 <BasicTimer_ClockControl+0x74>
			BasicTimer_7_Clock_Disable();
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <BasicTimer_ClockControl+0x80>)
 8000c46:	69da      	ldr	r2, [r3, #28]
 8000c48:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <BasicTimer_ClockControl+0x80>)
 8000c4a:	2120      	movs	r1, #32
 8000c4c:	438a      	bics	r2, r1
 8000c4e:	61da      	str	r2, [r3, #28]
}
 8000c50:	46c0      	nop			; (mov r8, r8)
 8000c52:	46bd      	mov	sp, r7
 8000c54:	b002      	add	sp, #8
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40001000 	.word	0x40001000
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	40001400 	.word	0x40001400

08000c64 <BasicTimer_Init>:

/*BasicTimer initialization*/
void BasicTimer_Init(BasicTimer_Handle_t *pBasicTimerhandle){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
	//enable the clock
	BasicTimer_ClockControl(pBasicTimerhandle,ENABLE);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2101      	movs	r1, #1
 8000c70:	0018      	movs	r0, r3
 8000c72:	f7ff ffb3 	bl	8000bdc <BasicTimer_ClockControl>
    //first,CR1 can be reset completely as it is not related to other parts (it might be reset with memset in the app,too)
	pBasicTimerhandle->pBasicTimer->TIM_CR1 = 0; //this allows avoiding if(enable)-else and instead do |=
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
	//ARR is 0xFFFF is reset value
    pBasicTimerhandle->pBasicTimer->TIM_CR1 |= (pBasicTimerhandle->BasicTimer_Config.BasicTimer_arpe << TIM_CR1_ARPE);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	791b      	ldrb	r3, [r3, #4]
 8000c88:	01db      	lsls	r3, r3, #7
 8000c8a:	0019      	movs	r1, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	430a      	orrs	r2, r1
 8000c92:	601a      	str	r2, [r3, #0]
    pBasicTimerhandle->pBasicTimer->TIM_CR1 |= (pBasicTimerhandle->BasicTimer_Config.BasicTimer_opm << TIM_CR1_OPM);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	795b      	ldrb	r3, [r3, #5]
 8000c9e:	00db      	lsls	r3, r3, #3
 8000ca0:	0019      	movs	r1, r3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	601a      	str	r2, [r3, #0]
    pBasicTimerhandle->pBasicTimer->TIM_CR1 |= (pBasicTimerhandle->BasicTimer_Config.BasicTimer_urs << TIM_CR1_URS);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	799b      	ldrb	r3, [r3, #6]
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	0019      	movs	r1, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	601a      	str	r2, [r3, #0]
    pBasicTimerhandle->pBasicTimer->TIM_CR1 |= (pBasicTimerhandle->BasicTimer_Config.BasicTimer_udis << TIM_CR1_UDIS);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	79db      	ldrb	r3, [r3, #7]
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	0019      	movs	r1, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	601a      	str	r2, [r3, #0]
    pBasicTimerhandle->pBasicTimer->TIM_PSC = pBasicTimerhandle->BasicTimer_Config.BasicTimer_prescaler;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	891a      	ldrh	r2, [r3, #8]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	629a      	str	r2, [r3, #40]	; 0x28
    pBasicTimerhandle->pBasicTimer->TIM_ARR = pBasicTimerhandle->BasicTimer_Config.BasicTimer_autoreload;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	895a      	ldrh	r2, [r3, #10]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	46bd      	mov	sp, r7
 8000cee:	b002      	add	sp, #8
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <BasicTimer_EnableDisable>:

/*BasicTimer control: enable/disable --> CEN */
void BasicTimer_EnableDisable(BasicTimer_Handle_t *pBasicTimerhandle, uint8_t EnableDisable){
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
 8000cfa:	000a      	movs	r2, r1
 8000cfc:	1cfb      	adds	r3, r7, #3
 8000cfe:	701a      	strb	r2, [r3, #0]
    if (EnableDisable == ENABLE){
 8000d00:	1cfb      	adds	r3, r7, #3
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d110      	bne.n	8000d2a <BasicTimer_EnableDisable+0x38>
        pBasicTimerhandle->pBasicTimer->TIM_CR1 |= (1<<TIM_CR1_CEN); //enable counter
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2101      	movs	r1, #1
 8000d14:	430a      	orrs	r2, r1
 8000d16:	601a      	str	r2, [r3, #0]
        pBasicTimerhandle->pBasicTimer->TIM_DIER |= (1<<TIM_DIER_UIE); //enable interrupts
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	68da      	ldr	r2, [r3, #12]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2101      	movs	r1, #1
 8000d24:	430a      	orrs	r2, r1
 8000d26:	60da      	str	r2, [r3, #12]
    }
    else{
        pBasicTimerhandle->pBasicTimer->TIM_CR1 &= ~(1<<TIM_CR1_CEN);
        pBasicTimerhandle->pBasicTimer->TIM_DIER &= ~(1<<TIM_DIER_UIE);
    }
}
 8000d28:	e00f      	b.n	8000d4a <BasicTimer_EnableDisable+0x58>
        pBasicTimerhandle->pBasicTimer->TIM_CR1 &= ~(1<<TIM_CR1_CEN);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2101      	movs	r1, #1
 8000d36:	438a      	bics	r2, r1
 8000d38:	601a      	str	r2, [r3, #0]
        pBasicTimerhandle->pBasicTimer->TIM_DIER &= ~(1<<TIM_DIER_UIE);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	68da      	ldr	r2, [r3, #12]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2101      	movs	r1, #1
 8000d46:	438a      	bics	r2, r1
 8000d48:	60da      	str	r2, [r3, #12]
}
 8000d4a:	46c0      	nop			; (mov r8, r8)
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	b002      	add	sp, #8
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <BasicTimer_GetCounter>:
        BasicTimer_7_Clock_Reset();
    }
}

/*Get the counter value*/
uint16_t BasicTimer_GetCounter(BasicTimer_Handle_t *pBasicTimerhandle){
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b082      	sub	sp, #8
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
    return pBasicTimerhandle->pBasicTimer->TIM_CNT;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d60:	b29b      	uxth	r3, r3
}
 8000d62:	0018      	movs	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	b002      	add	sp, #8
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <BasicTimer_RestartCounter>:

/*Restart counter*/
void BasicTimer_RestartCounter(BasicTimer_Handle_t *pBasicTimerhandle){
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
    pBasicTimerhandle->pBasicTimer->TIM_EGR |= (1<<TIM_EGR_UG);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	695a      	ldr	r2, [r3, #20]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	430a      	orrs	r2, r1
 8000d80:	615a      	str	r2, [r3, #20]
}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	46bd      	mov	sp, r7
 8000d86:	b002      	add	sp, #8
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <BasicTimer_IRQ_EnableDisable>:

/*IRQ Configuration and ISR handling*/
void BasicTimer_IRQ_EnableDisable(uint8_t IRQ_Number, uint8_t EnableDisable){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	0002      	movs	r2, r0
 8000d94:	1dfb      	adds	r3, r7, #7
 8000d96:	701a      	strb	r2, [r3, #0]
 8000d98:	1dbb      	adds	r3, r7, #6
 8000d9a:	1c0a      	adds	r2, r1, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
	if(EnableDisable == ENABLE){ //enable by means of ISER
 8000d9e:	1dbb      	adds	r3, r7, #6
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d10b      	bne.n	8000dbe <BasicTimer_IRQ_EnableDisable+0x32>
		*NVIC_ISER |= ( 1 << IRQ_Number);
 8000da6:	4b0d      	ldr	r3, [pc, #52]	; (8000ddc <BasicTimer_IRQ_EnableDisable+0x50>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	1dfb      	adds	r3, r7, #7
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2101      	movs	r1, #1
 8000db0:	4099      	lsls	r1, r3
 8000db2:	000b      	movs	r3, r1
 8000db4:	0019      	movs	r1, r3
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <BasicTimer_IRQ_EnableDisable+0x50>)
 8000db8:	430a      	orrs	r2, r1
 8000dba:	601a      	str	r2, [r3, #0]
	}
	else { //disable by means of ICER
		*NVIC_ICER |= ( 1 << IRQ_Number);
	}
}
 8000dbc:	e00a      	b.n	8000dd4 <BasicTimer_IRQ_EnableDisable+0x48>
		*NVIC_ICER |= ( 1 << IRQ_Number);
 8000dbe:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <BasicTimer_IRQ_EnableDisable+0x54>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	1dfb      	adds	r3, r7, #7
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	4099      	lsls	r1, r3
 8000dca:	000b      	movs	r3, r1
 8000dcc:	0019      	movs	r1, r3
 8000dce:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <BasicTimer_IRQ_EnableDisable+0x54>)
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	601a      	str	r2, [r3, #0]
}
 8000dd4:	46c0      	nop			; (mov r8, r8)
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	b002      	add	sp, #8
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	e000e100 	.word	0xe000e100
 8000de0:	e000e180 	.word	0xe000e180

08000de4 <BasicTimer_IRQ_Handling>:
	//Clear the block and set. Better if I use intermediate variables instead of modifying many times the IPR
	uint32_t tempIPR = ((*(NVIC_IPR_BASE + numberIPR))&~(0xFF<<blockIPR));
	tempIPR |= (IRQ_Priority<<(8*blockIPR+6)); //6 is because bits 0-5 are not editable, only bits 6-7 count.
	*(NVIC_IPR_BASE + numberIPR) = tempIPR;
}
void BasicTimer_IRQ_Handling(BasicTimer_Handle_t *pBasicTimerhandle){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
    if ((pBasicTimerhandle->pBasicTimer->TIM_DIER |= (1<<TIM_DIER_UIE)) && (pBasicTimerhandle->pBasicTimer->TIM_SR |= (1<<TIM_SR_UIF))){
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	68da      	ldr	r2, [r3, #12]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2101      	movs	r1, #1
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	60da      	str	r2, [r3, #12]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	691a      	ldr	r2, [r3, #16]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2101      	movs	r1, #1
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	611a      	str	r2, [r3, #16]
        //NOT NEEDED AS THERE IS ONLY ONE INTERRUPT BIT Not BasicTimer_UpdateInterruptFlag_handler(pBasicTimerhandle);
        BasicTimer_App_Callback(pBasicTimerhandle); //callback to execute operations related to timer interrupt
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f7ff fb96 	bl	8000540 <BasicTimer_App_Callback>
        pBasicTimerhandle->pBasicTimer->TIM_SR &= ~(1<<TIM_SR_UIF); //clear the update interrupt flag
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	691a      	ldr	r2, [r3, #16]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2101      	movs	r1, #1
 8000e20:	438a      	bics	r2, r1
 8000e22:	611a      	str	r2, [r3, #16]
    }
}
 8000e24:	46c0      	nop			; (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	b002      	add	sp, #8
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <VirtualBasicTimer_Elapsed>:
        pBasicTimerhandle->pBasicTimer->TIM_CR1 &= ~(1<<TIM_CR1_UDIS);
    }
}

/*Virtual basic timer functions*/
enum VirtualBasicTimer_IntervalStatus VirtualBasicTimer_Elapsed(VirtualBasicTimer_t *pVirtualBasicTimerhandle){
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
    if (pVirtualBasicTimerhandle->status == VIRTUAL_BASIC_TIMER_ACTIVE){
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	7d1b      	ldrb	r3, [r3, #20]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d133      	bne.n	8000ea4 <VirtualBasicTimer_Elapsed+0x78>
		pVirtualBasicTimerhandle->elapsed_counter_value = BasicTimer_GetCounter(&pVirtualBasicTimerhandle->realTimer)-pVirtualBasicTimerhandle->start_counter_value;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f7ff ff87 	bl	8000d52 <BasicTimer_GetCounter>
 8000e44:	0003      	movs	r3, r0
 8000e46:	001a      	movs	r2, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	89db      	ldrh	r3, [r3, #14]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	b21a      	sxth	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	821a      	strh	r2, [r3, #16]
		//if the counter is lower than start_counter_value, that's because an overflow has happened! take this into account
		if (pVirtualBasicTimerhandle->elapsed_counter_value < 0){
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2210      	movs	r2, #16
 8000e5a:	5e9b      	ldrsh	r3, [r3, r2]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	da0a      	bge.n	8000e76 <VirtualBasicTimer_Elapsed+0x4a>
			pVirtualBasicTimerhandle->elapsed_counter_value = pVirtualBasicTimerhandle->realTimer.BasicTimer_Config.BasicTimer_autoreload + pVirtualBasicTimerhandle->elapsed_counter_value;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	895a      	ldrh	r2, [r3, #10]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2110      	movs	r1, #16
 8000e68:	5e5b      	ldrsh	r3, [r3, r1]
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	18d3      	adds	r3, r2, r3
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	b21a      	sxth	r2, r3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	821a      	strh	r2, [r3, #16]
		}
		//take into account the timer value before stopped
		pVirtualBasicTimerhandle->elapsed_counter_value += pVirtualBasicTimerhandle->counter_value_preStop;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2210      	movs	r2, #16
 8000e7a:	5e9b      	ldrsh	r3, [r3, r2]
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	8a5b      	ldrh	r3, [r3, #18]
 8000e82:	18d3      	adds	r3, r2, r3
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	b21a      	sxth	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	821a      	strh	r2, [r3, #16]
		if (pVirtualBasicTimerhandle->elapsed_counter_value >= pVirtualBasicTimerhandle->configured_counter_value){
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2210      	movs	r2, #16
 8000e90:	5e9b      	ldrsh	r3, [r3, r2]
 8000e92:	001a      	movs	r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	899b      	ldrh	r3, [r3, #12]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	db01      	blt.n	8000ea0 <VirtualBasicTimer_Elapsed+0x74>
			//VirtualBasicTimer_App_Callback(pVirtualBasicTimerhandle); //let the main app know
			//VirtualBasicTimer_StartCounter(pVirtualBasicTimerhandle); //restart the counter
			return VIRTUAL_BASIC_TIMER_ELAPSED;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e002      	b.n	8000ea6 <VirtualBasicTimer_Elapsed+0x7a>
		}
		else{
			return VIRTUAL_BASIC_TIMER_NOT_ELAPSED;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	e000      	b.n	8000ea6 <VirtualBasicTimer_Elapsed+0x7a>
		}
    }
    //else
    return FUNCTION_NOT_ACCESSIBLE;
 8000ea4:	2302      	movs	r3, #2

}
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	b002      	add	sp, #8
 8000eac:	bd80      	pop	{r7, pc}

08000eae <VirtualBasicTimer_EnableDisable>:
void VirtualBasicTimer_EnableDisable(VirtualBasicTimer_t *pVirtualBasicTimerhandle, uint8_t EnableDisable){
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
 8000eb6:	000a      	movs	r2, r1
 8000eb8:	1cfb      	adds	r3, r7, #3
 8000eba:	701a      	strb	r2, [r3, #0]
    if (EnableDisable == ENABLE){
 8000ebc:	1cfb      	adds	r3, r7, #3
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d103      	bne.n	8000ecc <VirtualBasicTimer_EnableDisable+0x1e>
       pVirtualBasicTimerhandle->status = VIRTUAL_BASIC_TIMER_ACTIVE;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	751a      	strb	r2, [r3, #20]
    }
    else{
        pVirtualBasicTimerhandle->status = VIRTUAL_BASIC_TIMER_INACTIVE;
    }
}
 8000eca:	e002      	b.n	8000ed2 <VirtualBasicTimer_EnableDisable+0x24>
        pVirtualBasicTimerhandle->status = VIRTUAL_BASIC_TIMER_INACTIVE;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	751a      	strb	r2, [r3, #20]
}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	b002      	add	sp, #8
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <VirtualBasicTimer_StartCounter>:
void VirtualBasicTimer_StartCounter(VirtualBasicTimer_t *pVirtualBasicTimerhandle){
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
	if (pVirtualBasicTimerhandle->status == VIRTUAL_BASIC_TIMER_ACTIVE){
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	7d1b      	ldrb	r3, [r3, #20]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d107      	bne.n	8000efa <VirtualBasicTimer_StartCounter+0x20>
		pVirtualBasicTimerhandle->start_counter_value = BasicTimer_GetCounter(&pVirtualBasicTimerhandle->realTimer);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	0018      	movs	r0, r3
 8000eee:	f7ff ff30 	bl	8000d52 <BasicTimer_GetCounter>
 8000ef2:	0003      	movs	r3, r0
 8000ef4:	001a      	movs	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	81da      	strh	r2, [r3, #14]
	}
}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	46bd      	mov	sp, r7
 8000efe:	b002      	add	sp, #8
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <VirtualBasicTimer_StopCounter>:
void VirtualBasicTimer_StopCounter(VirtualBasicTimer_t *pVirtualBasicTimerhandle){
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
	VirtualBasicTimer_Elapsed(pVirtualBasicTimerhandle);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	f7ff ff8d 	bl	8000e2c <VirtualBasicTimer_Elapsed>
	pVirtualBasicTimerhandle->counter_value_preStop = pVirtualBasicTimerhandle->elapsed_counter_value;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2210      	movs	r2, #16
 8000f16:	5e9b      	ldrsh	r3, [r3, r2]
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	825a      	strh	r2, [r3, #18]
	pVirtualBasicTimerhandle->status = VIRTUAL_BASIC_TIMER_STOPPED;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2202      	movs	r2, #2
 8000f22:	751a      	strb	r2, [r3, #20]
}
 8000f24:	46c0      	nop			; (mov r8, r8)
 8000f26:	46bd      	mov	sp, r7
 8000f28:	b002      	add	sp, #8
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <GPIO_ClockControl>:
 *      Author: danim
 */

#include "gpio.h"
/*********GPIO clock control***************/
void GPIO_ClockControl(GPIO_RegStruct_t *pGPIO, uint8_t EnableDisable){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	000a      	movs	r2, r1
 8000f36:	1cfb      	adds	r3, r7, #3
 8000f38:	701a      	strb	r2, [r3, #0]

	if (EnableDisable == ENABLE) {
 8000f3a:	1cfb      	adds	r3, r7, #3
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d148      	bne.n	8000fd4 <GPIO_ClockControl+0xa8>
		if (pGPIO==GPIOA) { //I can't do switch-case with pointers! that's why I use if
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	2390      	movs	r3, #144	; 0x90
 8000f46:	05db      	lsls	r3, r3, #23
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d107      	bne.n	8000f5c <GPIO_ClockControl+0x30>
			GPIOA_EnableClock();
 8000f4c:	4b44      	ldr	r3, [pc, #272]	; (8001060 <GPIO_ClockControl+0x134>)
 8000f4e:	695a      	ldr	r2, [r3, #20]
 8000f50:	4b43      	ldr	r3, [pc, #268]	; (8001060 <GPIO_ClockControl+0x134>)
 8000f52:	2180      	movs	r1, #128	; 0x80
 8000f54:	0289      	lsls	r1, r1, #10
 8000f56:	430a      	orrs	r2, r1
 8000f58:	615a      	str	r2, [r3, #20]
		}
		else if (pGPIO==GPIOF){
			GPIOF_DisableClock();
		}
	}
}
 8000f5a:	e07d      	b.n	8001058 <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOB){
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a41      	ldr	r2, [pc, #260]	; (8001064 <GPIO_ClockControl+0x138>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d107      	bne.n	8000f74 <GPIO_ClockControl+0x48>
			GPIOB_EnableClock();
 8000f64:	4b3e      	ldr	r3, [pc, #248]	; (8001060 <GPIO_ClockControl+0x134>)
 8000f66:	695a      	ldr	r2, [r3, #20]
 8000f68:	4b3d      	ldr	r3, [pc, #244]	; (8001060 <GPIO_ClockControl+0x134>)
 8000f6a:	2180      	movs	r1, #128	; 0x80
 8000f6c:	02c9      	lsls	r1, r1, #11
 8000f6e:	430a      	orrs	r2, r1
 8000f70:	615a      	str	r2, [r3, #20]
}
 8000f72:	e071      	b.n	8001058 <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOC){
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a3c      	ldr	r2, [pc, #240]	; (8001068 <GPIO_ClockControl+0x13c>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d107      	bne.n	8000f8c <GPIO_ClockControl+0x60>
			GPIOC_EnableClock();
 8000f7c:	4b38      	ldr	r3, [pc, #224]	; (8001060 <GPIO_ClockControl+0x134>)
 8000f7e:	695a      	ldr	r2, [r3, #20]
 8000f80:	4b37      	ldr	r3, [pc, #220]	; (8001060 <GPIO_ClockControl+0x134>)
 8000f82:	2180      	movs	r1, #128	; 0x80
 8000f84:	0309      	lsls	r1, r1, #12
 8000f86:	430a      	orrs	r2, r1
 8000f88:	615a      	str	r2, [r3, #20]
}
 8000f8a:	e065      	b.n	8001058 <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOD){
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a37      	ldr	r2, [pc, #220]	; (800106c <GPIO_ClockControl+0x140>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d107      	bne.n	8000fa4 <GPIO_ClockControl+0x78>
			GPIOD_EnableClock();
 8000f94:	4b32      	ldr	r3, [pc, #200]	; (8001060 <GPIO_ClockControl+0x134>)
 8000f96:	695a      	ldr	r2, [r3, #20]
 8000f98:	4b31      	ldr	r3, [pc, #196]	; (8001060 <GPIO_ClockControl+0x134>)
 8000f9a:	2180      	movs	r1, #128	; 0x80
 8000f9c:	0349      	lsls	r1, r1, #13
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	615a      	str	r2, [r3, #20]
}
 8000fa2:	e059      	b.n	8001058 <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOE){
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4a32      	ldr	r2, [pc, #200]	; (8001070 <GPIO_ClockControl+0x144>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d107      	bne.n	8000fbc <GPIO_ClockControl+0x90>
			GPIOE_EnableClock();
 8000fac:	4b2c      	ldr	r3, [pc, #176]	; (8001060 <GPIO_ClockControl+0x134>)
 8000fae:	695a      	ldr	r2, [r3, #20]
 8000fb0:	4b2b      	ldr	r3, [pc, #172]	; (8001060 <GPIO_ClockControl+0x134>)
 8000fb2:	2180      	movs	r1, #128	; 0x80
 8000fb4:	0389      	lsls	r1, r1, #14
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	615a      	str	r2, [r3, #20]
}
 8000fba:	e04d      	b.n	8001058 <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOF){
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a2d      	ldr	r2, [pc, #180]	; (8001074 <GPIO_ClockControl+0x148>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d149      	bne.n	8001058 <GPIO_ClockControl+0x12c>
			GPIOF_EnableClock();
 8000fc4:	4b26      	ldr	r3, [pc, #152]	; (8001060 <GPIO_ClockControl+0x134>)
 8000fc6:	695a      	ldr	r2, [r3, #20]
 8000fc8:	4b25      	ldr	r3, [pc, #148]	; (8001060 <GPIO_ClockControl+0x134>)
 8000fca:	2180      	movs	r1, #128	; 0x80
 8000fcc:	03c9      	lsls	r1, r1, #15
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	615a      	str	r2, [r3, #20]
}
 8000fd2:	e041      	b.n	8001058 <GPIO_ClockControl+0x12c>
		if (pGPIO==GPIOA) { //I can't do switch-case with pointers! that's why I use if
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	2390      	movs	r3, #144	; 0x90
 8000fd8:	05db      	lsls	r3, r3, #23
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d106      	bne.n	8000fec <GPIO_ClockControl+0xc0>
			GPIOA_DisableClock();
 8000fde:	4b20      	ldr	r3, [pc, #128]	; (8001060 <GPIO_ClockControl+0x134>)
 8000fe0:	695a      	ldr	r2, [r3, #20]
 8000fe2:	4b1f      	ldr	r3, [pc, #124]	; (8001060 <GPIO_ClockControl+0x134>)
 8000fe4:	4924      	ldr	r1, [pc, #144]	; (8001078 <GPIO_ClockControl+0x14c>)
 8000fe6:	400a      	ands	r2, r1
 8000fe8:	615a      	str	r2, [r3, #20]
}
 8000fea:	e035      	b.n	8001058 <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOB){
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a1d      	ldr	r2, [pc, #116]	; (8001064 <GPIO_ClockControl+0x138>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d106      	bne.n	8001002 <GPIO_ClockControl+0xd6>
			GPIOB_DisableClock();
 8000ff4:	4b1a      	ldr	r3, [pc, #104]	; (8001060 <GPIO_ClockControl+0x134>)
 8000ff6:	695a      	ldr	r2, [r3, #20]
 8000ff8:	4b19      	ldr	r3, [pc, #100]	; (8001060 <GPIO_ClockControl+0x134>)
 8000ffa:	4920      	ldr	r1, [pc, #128]	; (800107c <GPIO_ClockControl+0x150>)
 8000ffc:	400a      	ands	r2, r1
 8000ffe:	615a      	str	r2, [r3, #20]
}
 8001000:	e02a      	b.n	8001058 <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOC){
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a18      	ldr	r2, [pc, #96]	; (8001068 <GPIO_ClockControl+0x13c>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d106      	bne.n	8001018 <GPIO_ClockControl+0xec>
			GPIOC_DisableClock();
 800100a:	4b15      	ldr	r3, [pc, #84]	; (8001060 <GPIO_ClockControl+0x134>)
 800100c:	695a      	ldr	r2, [r3, #20]
 800100e:	4b14      	ldr	r3, [pc, #80]	; (8001060 <GPIO_ClockControl+0x134>)
 8001010:	491b      	ldr	r1, [pc, #108]	; (8001080 <GPIO_ClockControl+0x154>)
 8001012:	400a      	ands	r2, r1
 8001014:	615a      	str	r2, [r3, #20]
}
 8001016:	e01f      	b.n	8001058 <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOD){
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a14      	ldr	r2, [pc, #80]	; (800106c <GPIO_ClockControl+0x140>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d106      	bne.n	800102e <GPIO_ClockControl+0x102>
			GPIOD_DisableClock();
 8001020:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <GPIO_ClockControl+0x134>)
 8001022:	695a      	ldr	r2, [r3, #20]
 8001024:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <GPIO_ClockControl+0x134>)
 8001026:	4917      	ldr	r1, [pc, #92]	; (8001084 <GPIO_ClockControl+0x158>)
 8001028:	400a      	ands	r2, r1
 800102a:	615a      	str	r2, [r3, #20]
}
 800102c:	e014      	b.n	8001058 <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOE){
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a0f      	ldr	r2, [pc, #60]	; (8001070 <GPIO_ClockControl+0x144>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d106      	bne.n	8001044 <GPIO_ClockControl+0x118>
			GPIOE_DisableClock();
 8001036:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <GPIO_ClockControl+0x134>)
 8001038:	695a      	ldr	r2, [r3, #20]
 800103a:	4b09      	ldr	r3, [pc, #36]	; (8001060 <GPIO_ClockControl+0x134>)
 800103c:	4912      	ldr	r1, [pc, #72]	; (8001088 <GPIO_ClockControl+0x15c>)
 800103e:	400a      	ands	r2, r1
 8001040:	615a      	str	r2, [r3, #20]
}
 8001042:	e009      	b.n	8001058 <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOF){
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4a0b      	ldr	r2, [pc, #44]	; (8001074 <GPIO_ClockControl+0x148>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d105      	bne.n	8001058 <GPIO_ClockControl+0x12c>
			GPIOF_DisableClock();
 800104c:	4b04      	ldr	r3, [pc, #16]	; (8001060 <GPIO_ClockControl+0x134>)
 800104e:	695a      	ldr	r2, [r3, #20]
 8001050:	4b03      	ldr	r3, [pc, #12]	; (8001060 <GPIO_ClockControl+0x134>)
 8001052:	490e      	ldr	r1, [pc, #56]	; (800108c <GPIO_ClockControl+0x160>)
 8001054:	400a      	ands	r2, r1
 8001056:	615a      	str	r2, [r3, #20]
}
 8001058:	46c0      	nop			; (mov r8, r8)
 800105a:	46bd      	mov	sp, r7
 800105c:	b002      	add	sp, #8
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40021000 	.word	0x40021000
 8001064:	48000400 	.word	0x48000400
 8001068:	48000800 	.word	0x48000800
 800106c:	48000c00 	.word	0x48000c00
 8001070:	48001000 	.word	0x48001000
 8001074:	48001400 	.word	0x48001400
 8001078:	fffdffff 	.word	0xfffdffff
 800107c:	fffbffff 	.word	0xfffbffff
 8001080:	fff7ffff 	.word	0xfff7ffff
 8001084:	ffefffff 	.word	0xffefffff
 8001088:	ffdfffff 	.word	0xffdfffff
 800108c:	ffbfffff 	.word	0xffbfffff

08001090 <GPIO_PinInit>:
/*********GPIO pin initialization*************/
void GPIO_PinInit(GPIO_PinHandle_t *GPIO_PinHandle){
 8001090:	b5b0      	push	{r4, r5, r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	//local variables used for temporary values in operations
	uint8_t temp1;
	uint8_t temp2;

	//enable GPIO port clock
	GPIO_ClockControl(GPIO_PinHandle->pGPIO,ENABLE);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2101      	movs	r1, #1
 800109e:	0018      	movs	r0, r3
 80010a0:	f7ff ff44 	bl	8000f2c <GPIO_ClockControl>

	//configure MODE: if not interrupt, mode is input/output/analog/alternate function
	if ((GPIO_PinHandle->GPIO_PinConfig.GPIO_PinMode)<=GPIO_ANA){
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	795b      	ldrb	r3, [r3, #5]
 80010a8:	2b03      	cmp	r3, #3
 80010aa:	d81f      	bhi.n	80010ec <GPIO_PinInit+0x5c>
		// first,reset the 2 bits related to pin.ex:pin number 1 is for MODER bits 2 and 3. 3<<2*pin is 3<<2 aka 1100b.so MODER&=(~1100)=x..x00xx
		GPIO_PinHandle->pGPIO->MODER &= (~(3<<(2*GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber))); //I guess I can use 3 instead of 0x3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	791b      	ldrb	r3, [r3, #4]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	2103      	movs	r1, #3
 80010ba:	4099      	lsls	r1, r3
 80010bc:	000b      	movs	r3, r1
 80010be:	43db      	mvns	r3, r3
 80010c0:	0019      	movs	r1, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	400a      	ands	r2, r1
 80010c8:	601a      	str	r2, [r3, #0]
		//now set
		GPIO_PinHandle->pGPIO->MODER |= (GPIO_PinHandle->GPIO_PinConfig.GPIO_PinMode<<(2*GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber));
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	795b      	ldrb	r3, [r3, #5]
 80010d4:	0019      	movs	r1, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	791b      	ldrb	r3, [r3, #4]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	4099      	lsls	r1, r3
 80010de:	000b      	movs	r3, r1
 80010e0:	0019      	movs	r1, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	430a      	orrs	r2, r1
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	e0af      	b.n	800124c <GPIO_PinInit+0x1bc>
	}
	else{ //interrupts
		//Configure the edge trigger (EXTI FTSR and RTSR). EXTI line "y" is for pins "y"; example, EXTI15 is for GPIOA15..GPIOF15
		if ((GPIO_PinHandle->GPIO_PinConfig.GPIO_PinMode)==GPIO_FALL_TRIG){
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	795b      	ldrb	r3, [r3, #5]
 80010f0:	2b04      	cmp	r3, #4
 80010f2:	d117      	bne.n	8001124 <GPIO_PinInit+0x94>
			//set falling edge trigger
			EXTI->FTSR |= (1<<GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010f4:	4ba5      	ldr	r3, [pc, #660]	; (800138c <GPIO_PinInit+0x2fc>)
 80010f6:	68da      	ldr	r2, [r3, #12]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	791b      	ldrb	r3, [r3, #4]
 80010fc:	0019      	movs	r1, r3
 80010fe:	2301      	movs	r3, #1
 8001100:	408b      	lsls	r3, r1
 8001102:	0019      	movs	r1, r3
 8001104:	4ba1      	ldr	r3, [pc, #644]	; (800138c <GPIO_PinInit+0x2fc>)
 8001106:	430a      	orrs	r2, r1
 8001108:	60da      	str	r2, [r3, #12]
			//clear rising edge trigger!
			EXTI->RTSR &= ~(1<<GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber);
 800110a:	4ba0      	ldr	r3, [pc, #640]	; (800138c <GPIO_PinInit+0x2fc>)
 800110c:	689a      	ldr	r2, [r3, #8]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	791b      	ldrb	r3, [r3, #4]
 8001112:	0019      	movs	r1, r3
 8001114:	2301      	movs	r3, #1
 8001116:	408b      	lsls	r3, r1
 8001118:	43db      	mvns	r3, r3
 800111a:	0019      	movs	r1, r3
 800111c:	4b9b      	ldr	r3, [pc, #620]	; (800138c <GPIO_PinInit+0x2fc>)
 800111e:	400a      	ands	r2, r1
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	e035      	b.n	8001190 <GPIO_PinInit+0x100>
		}
		else if ((GPIO_PinHandle->GPIO_PinConfig.GPIO_PinMode)==GPIO_RISE_TRIG){
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	795b      	ldrb	r3, [r3, #5]
 8001128:	2b05      	cmp	r3, #5
 800112a:	d117      	bne.n	800115c <GPIO_PinInit+0xcc>
			//set rising edge trigger
			EXTI->RTSR |= (1<<GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber);
 800112c:	4b97      	ldr	r3, [pc, #604]	; (800138c <GPIO_PinInit+0x2fc>)
 800112e:	689a      	ldr	r2, [r3, #8]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	791b      	ldrb	r3, [r3, #4]
 8001134:	0019      	movs	r1, r3
 8001136:	2301      	movs	r3, #1
 8001138:	408b      	lsls	r3, r1
 800113a:	0019      	movs	r1, r3
 800113c:	4b93      	ldr	r3, [pc, #588]	; (800138c <GPIO_PinInit+0x2fc>)
 800113e:	430a      	orrs	r2, r1
 8001140:	609a      	str	r2, [r3, #8]
			//clear falling edge trigger!
			EXTI->FTSR &= ~(1<<GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001142:	4b92      	ldr	r3, [pc, #584]	; (800138c <GPIO_PinInit+0x2fc>)
 8001144:	68da      	ldr	r2, [r3, #12]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	791b      	ldrb	r3, [r3, #4]
 800114a:	0019      	movs	r1, r3
 800114c:	2301      	movs	r3, #1
 800114e:	408b      	lsls	r3, r1
 8001150:	43db      	mvns	r3, r3
 8001152:	0019      	movs	r1, r3
 8001154:	4b8d      	ldr	r3, [pc, #564]	; (800138c <GPIO_PinInit+0x2fc>)
 8001156:	400a      	ands	r2, r1
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	e019      	b.n	8001190 <GPIO_PinInit+0x100>
		}
		else if ((GPIO_PinHandle->GPIO_PinConfig.GPIO_PinMode)==GPIO_FALLRISE_TRIG){
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	795b      	ldrb	r3, [r3, #5]
 8001160:	2b06      	cmp	r3, #6
 8001162:	d115      	bne.n	8001190 <GPIO_PinInit+0x100>
			//set both falling and rising edge triggers
			EXTI->FTSR |= (1<<GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001164:	4b89      	ldr	r3, [pc, #548]	; (800138c <GPIO_PinInit+0x2fc>)
 8001166:	68da      	ldr	r2, [r3, #12]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	791b      	ldrb	r3, [r3, #4]
 800116c:	0019      	movs	r1, r3
 800116e:	2301      	movs	r3, #1
 8001170:	408b      	lsls	r3, r1
 8001172:	0019      	movs	r1, r3
 8001174:	4b85      	ldr	r3, [pc, #532]	; (800138c <GPIO_PinInit+0x2fc>)
 8001176:	430a      	orrs	r2, r1
 8001178:	60da      	str	r2, [r3, #12]
			EXTI->RTSR |= (1<<GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber);
 800117a:	4b84      	ldr	r3, [pc, #528]	; (800138c <GPIO_PinInit+0x2fc>)
 800117c:	689a      	ldr	r2, [r3, #8]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	791b      	ldrb	r3, [r3, #4]
 8001182:	0019      	movs	r1, r3
 8001184:	2301      	movs	r3, #1
 8001186:	408b      	lsls	r3, r1
 8001188:	0019      	movs	r1, r3
 800118a:	4b80      	ldr	r3, [pc, #512]	; (800138c <GPIO_PinInit+0x2fc>)
 800118c:	430a      	orrs	r2, r1
 800118e:	609a      	str	r2, [r3, #8]
		}

		//EXTICR: select the GPIO for the interruption on corresponding EXTI line through EXTICR registers (every allows just one, so it's a decision)
		//EXTICR0:for GPIO pins 0-3. Blocks of 4 bits to select A-F.EXTICR1: for GPIO pins 4-7. Blocks of 4 bits to select A-F. And so on
		//if GPIOD10-->EXTICR3 (block1,that is,from bit4) because EXTICR1 is for pins 0-3, CR2 pins 4-7 and so on. GPIOD--> 010
		temp1 = GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber/4; //to know which EXTICR
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	791a      	ldrb	r2, [r3, #4]
 8001194:	200f      	movs	r0, #15
 8001196:	183b      	adds	r3, r7, r0
 8001198:	0892      	lsrs	r2, r2, #2
 800119a:	701a      	strb	r2, [r3, #0]
		temp2 = GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber%4;//to know the block within EXTICR
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	791a      	ldrb	r2, [r3, #4]
 80011a0:	230e      	movs	r3, #14
 80011a2:	18fb      	adds	r3, r7, r3
 80011a4:	2103      	movs	r1, #3
 80011a6:	400a      	ands	r2, r1
 80011a8:	701a      	strb	r2, [r3, #0]
		//enable SYSCFG clock and configure the correspondingEXTICR
		SYSCFG_EnableClock();
 80011aa:	4b79      	ldr	r3, [pc, #484]	; (8001390 <GPIO_PinInit+0x300>)
 80011ac:	699a      	ldr	r2, [r3, #24]
 80011ae:	4b78      	ldr	r3, [pc, #480]	; (8001390 <GPIO_PinInit+0x300>)
 80011b0:	2101      	movs	r1, #1
 80011b2:	430a      	orrs	r2, r1
 80011b4:	619a      	str	r2, [r3, #24]
		SYSCFG->EXTICR[temp1] |= ((GPIO_PORT_TO_NUMBER(GPIO_PinHandle->pGPIO))<< (4*temp2) );
 80011b6:	4a77      	ldr	r2, [pc, #476]	; (8001394 <GPIO_PinInit+0x304>)
 80011b8:	183b      	adds	r3, r7, r0
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	3302      	adds	r3, #2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	589a      	ldr	r2, [r3, r2]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6819      	ldr	r1, [r3, #0]
 80011c6:	2390      	movs	r3, #144	; 0x90
 80011c8:	05db      	lsls	r3, r3, #23
 80011ca:	4299      	cmp	r1, r3
 80011cc:	d024      	beq.n	8001218 <GPIO_PinInit+0x188>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4971      	ldr	r1, [pc, #452]	; (8001398 <GPIO_PinInit+0x308>)
 80011d4:	428b      	cmp	r3, r1
 80011d6:	d01d      	beq.n	8001214 <GPIO_PinInit+0x184>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	496f      	ldr	r1, [pc, #444]	; (800139c <GPIO_PinInit+0x30c>)
 80011de:	428b      	cmp	r3, r1
 80011e0:	d016      	beq.n	8001210 <GPIO_PinInit+0x180>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	496e      	ldr	r1, [pc, #440]	; (80013a0 <GPIO_PinInit+0x310>)
 80011e8:	428b      	cmp	r3, r1
 80011ea:	d00f      	beq.n	800120c <GPIO_PinInit+0x17c>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	496c      	ldr	r1, [pc, #432]	; (80013a4 <GPIO_PinInit+0x314>)
 80011f2:	428b      	cmp	r3, r1
 80011f4:	d008      	beq.n	8001208 <GPIO_PinInit+0x178>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	496b      	ldr	r1, [pc, #428]	; (80013a8 <GPIO_PinInit+0x318>)
 80011fc:	428b      	cmp	r3, r1
 80011fe:	d101      	bne.n	8001204 <GPIO_PinInit+0x174>
 8001200:	2305      	movs	r3, #5
 8001202:	e00a      	b.n	800121a <GPIO_PinInit+0x18a>
 8001204:	2300      	movs	r3, #0
 8001206:	e008      	b.n	800121a <GPIO_PinInit+0x18a>
 8001208:	2304      	movs	r3, #4
 800120a:	e006      	b.n	800121a <GPIO_PinInit+0x18a>
 800120c:	2303      	movs	r3, #3
 800120e:	e004      	b.n	800121a <GPIO_PinInit+0x18a>
 8001210:	2302      	movs	r3, #2
 8001212:	e002      	b.n	800121a <GPIO_PinInit+0x18a>
 8001214:	2301      	movs	r3, #1
 8001216:	e000      	b.n	800121a <GPIO_PinInit+0x18a>
 8001218:	2300      	movs	r3, #0
 800121a:	210e      	movs	r1, #14
 800121c:	1879      	adds	r1, r7, r1
 800121e:	7809      	ldrb	r1, [r1, #0]
 8001220:	0089      	lsls	r1, r1, #2
 8001222:	408b      	lsls	r3, r1
 8001224:	0018      	movs	r0, r3
 8001226:	495b      	ldr	r1, [pc, #364]	; (8001394 <GPIO_PinInit+0x304>)
 8001228:	230f      	movs	r3, #15
 800122a:	18fb      	adds	r3, r7, r3
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	4302      	orrs	r2, r0
 8001230:	3302      	adds	r3, #2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	505a      	str	r2, [r3, r1]

		//ENABLE EXTI interrupt by means of interrupt mask register
		EXTI->IMR |= (1<<GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001236:	4b55      	ldr	r3, [pc, #340]	; (800138c <GPIO_PinInit+0x2fc>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	791b      	ldrb	r3, [r3, #4]
 800123e:	0019      	movs	r1, r3
 8001240:	2301      	movs	r3, #1
 8001242:	408b      	lsls	r3, r1
 8001244:	0019      	movs	r1, r3
 8001246:	4b51      	ldr	r3, [pc, #324]	; (800138c <GPIO_PinInit+0x2fc>)
 8001248:	430a      	orrs	r2, r1
 800124a:	601a      	str	r2, [r3, #0]
		/*Check specific functions for the configuration on processor side: NVIC (nested vector interrupt controller)*/
	}

	//OUTPUT TYPE. TBD:don't do if !=output mode?
	// first,reset the related bit
	GPIO_PinHandle->pGPIO->OTYPER &= (~(1<<GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber));
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	685a      	ldr	r2, [r3, #4]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	791b      	ldrb	r3, [r3, #4]
 8001256:	0019      	movs	r1, r3
 8001258:	2301      	movs	r3, #1
 800125a:	408b      	lsls	r3, r1
 800125c:	43db      	mvns	r3, r3
 800125e:	0019      	movs	r1, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	400a      	ands	r2, r1
 8001266:	605a      	str	r2, [r3, #4]
	//now set
	GPIO_PinHandle->pGPIO->OTYPER |= (GPIO_PinHandle->GPIO_PinConfig.GPIO_PinOutType<<(GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	685a      	ldr	r2, [r3, #4]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	799b      	ldrb	r3, [r3, #6]
 8001272:	0019      	movs	r1, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	791b      	ldrb	r3, [r3, #4]
 8001278:	4099      	lsls	r1, r3
 800127a:	000b      	movs	r3, r1
 800127c:	0019      	movs	r1, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	430a      	orrs	r2, r1
 8001284:	605a      	str	r2, [r3, #4]

	//OUTPUT SPEED. TBD:don't do if !=output mode?
	// first,reset the related bits
	GPIO_PinHandle->pGPIO->OSPEEDR &= (~(3<<(2*GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber)));
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	689a      	ldr	r2, [r3, #8]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	791b      	ldrb	r3, [r3, #4]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	2103      	movs	r1, #3
 8001294:	4099      	lsls	r1, r3
 8001296:	000b      	movs	r3, r1
 8001298:	43db      	mvns	r3, r3
 800129a:	0019      	movs	r1, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	400a      	ands	r2, r1
 80012a2:	609a      	str	r2, [r3, #8]
	//now set
	GPIO_PinHandle->pGPIO->OSPEEDR |= (GPIO_PinHandle->GPIO_PinConfig.GPIO_PinOutSpeed<<(2*GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	689a      	ldr	r2, [r3, #8]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	79db      	ldrb	r3, [r3, #7]
 80012ae:	0019      	movs	r1, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	791b      	ldrb	r3, [r3, #4]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	4099      	lsls	r1, r3
 80012b8:	000b      	movs	r3, r1
 80012ba:	0019      	movs	r1, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	430a      	orrs	r2, r1
 80012c2:	609a      	str	r2, [r3, #8]

	//PULL UP/DOWN
	// first,reset the related bits
	GPIO_PinHandle->pGPIO->PUPDR &= (~(3<<(2*GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber)));
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	68da      	ldr	r2, [r3, #12]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	791b      	ldrb	r3, [r3, #4]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	2103      	movs	r1, #3
 80012d2:	4099      	lsls	r1, r3
 80012d4:	000b      	movs	r3, r1
 80012d6:	43db      	mvns	r3, r3
 80012d8:	0019      	movs	r1, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	400a      	ands	r2, r1
 80012e0:	60da      	str	r2, [r3, #12]
	//now set
	GPIO_PinHandle->pGPIO->PUPDR |= (GPIO_PinHandle->GPIO_PinConfig.GPIO_PinPullUpDown<<(2*GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber));
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	68da      	ldr	r2, [r3, #12]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	7a1b      	ldrb	r3, [r3, #8]
 80012ec:	0019      	movs	r1, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	791b      	ldrb	r3, [r3, #4]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	4099      	lsls	r1, r3
 80012f6:	000b      	movs	r3, r1
 80012f8:	0019      	movs	r1, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	430a      	orrs	r2, r1
 8001300:	60da      	str	r2, [r3, #12]

	//ALTERNATE FUNCTION
	if (GPIO_PinHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_ALTFUN){
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	795b      	ldrb	r3, [r3, #5]
 8001306:	2b02      	cmp	r3, #2
 8001308:	d13b      	bne.n	8001382 <GPIO_PinInit+0x2f2>
		//as there are 2 registers, low is for pins 0-7 and high for 8-15.in our struct,AFR[2].We need to know where to actuate
		temp1 = GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber / 8 ; //ex: pin 7-->reg 0,byte=7(last);pin12 --> reg1, byte=4
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	791a      	ldrb	r2, [r3, #4]
 800130e:	240f      	movs	r4, #15
 8001310:	193b      	adds	r3, r7, r4
 8001312:	08d2      	lsrs	r2, r2, #3
 8001314:	701a      	strb	r2, [r3, #0]
		temp2 = GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	791a      	ldrb	r2, [r3, #4]
 800131a:	250e      	movs	r5, #14
 800131c:	197b      	adds	r3, r7, r5
 800131e:	2107      	movs	r1, #7
 8001320:	400a      	ands	r2, r1
 8001322:	701a      	strb	r2, [r3, #0]
		// first,reset the related bits. in this case, 4. ~1111 is ~0x0F
		GPIO_PinHandle->pGPIO->AFR[temp1] &= (~(0xF<<(4*temp2)));
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	193a      	adds	r2, r7, r4
 800132a:	7812      	ldrb	r2, [r2, #0]
 800132c:	3208      	adds	r2, #8
 800132e:	0092      	lsls	r2, r2, #2
 8001330:	58d1      	ldr	r1, [r2, r3]
 8001332:	197b      	adds	r3, r7, r5
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	220f      	movs	r2, #15
 800133a:	409a      	lsls	r2, r3
 800133c:	0013      	movs	r3, r2
 800133e:	43db      	mvns	r3, r3
 8001340:	0018      	movs	r0, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	193a      	adds	r2, r7, r4
 8001348:	7812      	ldrb	r2, [r2, #0]
 800134a:	4001      	ands	r1, r0
 800134c:	3208      	adds	r2, #8
 800134e:	0092      	lsls	r2, r2, #2
 8001350:	50d1      	str	r1, [r2, r3]
		//now set
		GPIO_PinHandle->pGPIO->AFR[temp1] |= (GPIO_PinHandle->GPIO_PinConfig.GPIO_PinAlterFunc<<(4*temp2));
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	193a      	adds	r2, r7, r4
 8001358:	7812      	ldrb	r2, [r2, #0]
 800135a:	3208      	adds	r2, #8
 800135c:	0092      	lsls	r2, r2, #2
 800135e:	58d1      	ldr	r1, [r2, r3]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	7a5b      	ldrb	r3, [r3, #9]
 8001364:	001a      	movs	r2, r3
 8001366:	197b      	adds	r3, r7, r5
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	409a      	lsls	r2, r3
 800136e:	0013      	movs	r3, r2
 8001370:	0018      	movs	r0, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	193a      	adds	r2, r7, r4
 8001378:	7812      	ldrb	r2, [r2, #0]
 800137a:	4301      	orrs	r1, r0
 800137c:	3208      	adds	r2, #8
 800137e:	0092      	lsls	r2, r2, #2
 8001380:	50d1      	str	r1, [r2, r3]
	}
}
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	46bd      	mov	sp, r7
 8001386:	b004      	add	sp, #16
 8001388:	bdb0      	pop	{r4, r5, r7, pc}
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	40010400 	.word	0x40010400
 8001390:	40021000 	.word	0x40021000
 8001394:	40010000 	.word	0x40010000
 8001398:	48000400 	.word	0x48000400
 800139c:	48000800 	.word	0x48000800
 80013a0:	48000c00 	.word	0x48000c00
 80013a4:	48001000 	.word	0x48001000
 80013a8:	48001400 	.word	0x48001400

080013ac <GPIO_WritePin>:
uint16_t GPIO_ReadPort(GPIO_RegStruct_t *pGPIO){
	return (uint16_t)pGPIO->IDR;
}

/**************************Write to output (pin or port)************************/
void GPIO_WritePin(GPIO_RegStruct_t *pGPIO, uint8_t pin, uint8_t output){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	0008      	movs	r0, r1
 80013b6:	0011      	movs	r1, r2
 80013b8:	1cfb      	adds	r3, r7, #3
 80013ba:	1c02      	adds	r2, r0, #0
 80013bc:	701a      	strb	r2, [r3, #0]
 80013be:	1cbb      	adds	r3, r7, #2
 80013c0:	1c0a      	adds	r2, r1, #0
 80013c2:	701a      	strb	r2, [r3, #0]
	//do not do first clear the related bit and then set.we don't want to modify the output
	//I prefer to do an if statement than using intermediate variables to clear and set
	if (output==1){
 80013c4:	1cbb      	adds	r3, r7, #2
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d10a      	bne.n	80013e2 <GPIO_WritePin+0x36>
		pGPIO->ODR |= (1<<pin);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	695b      	ldr	r3, [r3, #20]
 80013d0:	1cfa      	adds	r2, r7, #3
 80013d2:	7812      	ldrb	r2, [r2, #0]
 80013d4:	2101      	movs	r1, #1
 80013d6:	4091      	lsls	r1, r2
 80013d8:	000a      	movs	r2, r1
 80013da:	431a      	orrs	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	615a      	str	r2, [r3, #20]
	}
	else { //0
		pGPIO->ODR &= (~(1<<pin));
	}

}
 80013e0:	e00a      	b.n	80013f8 <GPIO_WritePin+0x4c>
		pGPIO->ODR &= (~(1<<pin));
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	1cfa      	adds	r2, r7, #3
 80013e8:	7812      	ldrb	r2, [r2, #0]
 80013ea:	2101      	movs	r1, #1
 80013ec:	4091      	lsls	r1, r2
 80013ee:	000a      	movs	r2, r1
 80013f0:	43d2      	mvns	r2, r2
 80013f2:	401a      	ands	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	615a      	str	r2, [r3, #20]
}
 80013f8:	46c0      	nop			; (mov r8, r8)
 80013fa:	46bd      	mov	sp, r7
 80013fc:	b002      	add	sp, #8
 80013fe:	bd80      	pop	{r7, pc}

08001400 <GPIO_IRQ_EnableDisable>:
	pGPIO->ODR ^= (1<<pin); //^ is XOR. 1^0=0;0^1=1;1^1=0;0^0=0. So x^1 = !x
}

/*************************NVIC functions for IRQ*****************************************/
/*Enable or disable an IRQ*/
void GPIO_IRQ_EnableDisable(uint8_t IRQ_Number, uint8_t EnableDisable){
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	0002      	movs	r2, r0
 8001408:	1dfb      	adds	r3, r7, #7
 800140a:	701a      	strb	r2, [r3, #0]
 800140c:	1dbb      	adds	r3, r7, #6
 800140e:	1c0a      	adds	r2, r1, #0
 8001410:	701a      	strb	r2, [r3, #0]
	if(EnableDisable == ENABLE){ //enable by means of ISER
 8001412:	1dbb      	adds	r3, r7, #6
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d10b      	bne.n	8001432 <GPIO_IRQ_EnableDisable+0x32>
		*NVIC_ISER |= ( 1 << IRQ_Number);
 800141a:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <GPIO_IRQ_EnableDisable+0x50>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	1dfb      	adds	r3, r7, #7
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2101      	movs	r1, #1
 8001424:	4099      	lsls	r1, r3
 8001426:	000b      	movs	r3, r1
 8001428:	0019      	movs	r1, r3
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <GPIO_IRQ_EnableDisable+0x50>)
 800142c:	430a      	orrs	r2, r1
 800142e:	601a      	str	r2, [r3, #0]
	}
	else { //disable by means of ICER
		*NVIC_ICER |= ( 1 << IRQ_Number);
	}

}
 8001430:	e00a      	b.n	8001448 <GPIO_IRQ_EnableDisable+0x48>
		*NVIC_ICER |= ( 1 << IRQ_Number);
 8001432:	4b08      	ldr	r3, [pc, #32]	; (8001454 <GPIO_IRQ_EnableDisable+0x54>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	1dfb      	adds	r3, r7, #7
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2101      	movs	r1, #1
 800143c:	4099      	lsls	r1, r3
 800143e:	000b      	movs	r3, r1
 8001440:	0019      	movs	r1, r3
 8001442:	4b04      	ldr	r3, [pc, #16]	; (8001454 <GPIO_IRQ_EnableDisable+0x54>)
 8001444:	430a      	orrs	r2, r1
 8001446:	601a      	str	r2, [r3, #0]
}
 8001448:	46c0      	nop			; (mov r8, r8)
 800144a:	46bd      	mov	sp, r7
 800144c:	b002      	add	sp, #8
 800144e:	bd80      	pop	{r7, pc}
 8001450:	e000e100 	.word	0xe000e100
 8001454:	e000e180 	.word	0xe000e180

08001458 <GPIO_IRQ_Handling>:
	//Clear the block and set. Better if I use intermediate variables instead of modifying many times the IPR
	uint32_t tempIPR = ((*(NVIC_IPR_BASE + numberIPR))&~(0xFF<<blockIPR));
	tempIPR |= (IRQ_Priority<<(8*blockIPR+6)); //6 is because bits 0-5 are not editable, only bits 6-7 count.
	*(NVIC_IPR_BASE + numberIPR) = tempIPR;
}
void GPIO_IRQ_Handling(uint8_t pin){
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	0002      	movs	r2, r0
 8001460:	1dfb      	adds	r3, r7, #7
 8001462:	701a      	strb	r2, [r3, #0]
	/*ISRs (handlers) are actually application specific and implement/override(weak) handlers defined in startup*/
	/*GPIO_IRQ_Handling will be called inside the ISR handler.*/
	//Clear the pending register of the EXTI(interrupt handling depends upon the peripheral).PR of processor is automatically cleared (I think)
	if ((EXTI->PR) & (1<<pin)){ //if PR[pin]==1
 8001464:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <GPIO_IRQ_Handling+0x3c>)
 8001466:	695b      	ldr	r3, [r3, #20]
 8001468:	1dfa      	adds	r2, r7, #7
 800146a:	7812      	ldrb	r2, [r2, #0]
 800146c:	2101      	movs	r1, #1
 800146e:	4091      	lsls	r1, r2
 8001470:	000a      	movs	r2, r1
 8001472:	4013      	ands	r3, r2
 8001474:	d00a      	beq.n	800148c <GPIO_IRQ_Handling+0x34>
		(EXTI->PR) |= (1<<pin); //write 1 to clear the pending register
 8001476:	4b07      	ldr	r3, [pc, #28]	; (8001494 <GPIO_IRQ_Handling+0x3c>)
 8001478:	695a      	ldr	r2, [r3, #20]
 800147a:	1dfb      	adds	r3, r7, #7
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2101      	movs	r1, #1
 8001480:	4099      	lsls	r1, r3
 8001482:	000b      	movs	r3, r1
 8001484:	0019      	movs	r1, r3
 8001486:	4b03      	ldr	r3, [pc, #12]	; (8001494 <GPIO_IRQ_Handling+0x3c>)
 8001488:	430a      	orrs	r2, r1
 800148a:	615a      	str	r2, [r3, #20]
	}

}
 800148c:	46c0      	nop			; (mov r8, r8)
 800148e:	46bd      	mov	sp, r7
 8001490:	b002      	add	sp, #8
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40010400 	.word	0x40010400

08001498 <I2C_ClockControl>:
static void I2C_TCR_handler(I2C_Handle_t *pI2Chandle); //when NBYTES>255

static void I2C_SlaveAddress(I2C_Handle_t *pI2Chandle); //set slave address

/*Enable or disable I2C peripheral clock*/
void I2C_ClockControl(I2C_Handle_t *pI2Chandle, uint8_t EnableDisable){
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	000a      	movs	r2, r1
 80014a2:	1cfb      	adds	r3, r7, #3
 80014a4:	701a      	strb	r2, [r3, #0]
	if (EnableDisable == ENABLE) {
 80014a6:	1cfb      	adds	r3, r7, #3
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d119      	bne.n	80014e2 <I2C_ClockControl+0x4a>
		if (pI2Chandle->pI2C == I2C1){
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a19      	ldr	r2, [pc, #100]	; (8001518 <I2C_ClockControl+0x80>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d107      	bne.n	80014c8 <I2C_ClockControl+0x30>
			I2C1_EnableClock();
 80014b8:	4b18      	ldr	r3, [pc, #96]	; (800151c <I2C_ClockControl+0x84>)
 80014ba:	69da      	ldr	r2, [r3, #28]
 80014bc:	4b17      	ldr	r3, [pc, #92]	; (800151c <I2C_ClockControl+0x84>)
 80014be:	2180      	movs	r1, #128	; 0x80
 80014c0:	0389      	lsls	r1, r1, #14
 80014c2:	430a      	orrs	r2, r1
 80014c4:	61da      	str	r2, [r3, #28]
		}
		else if (pI2Chandle->pI2C == I2C2){
			I2C2_DisableClock();
		}
	}
}
 80014c6:	e023      	b.n	8001510 <I2C_ClockControl+0x78>
		else if (pI2Chandle->pI2C == I2C2){
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a14      	ldr	r2, [pc, #80]	; (8001520 <I2C_ClockControl+0x88>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d11e      	bne.n	8001510 <I2C_ClockControl+0x78>
			I2C2_EnableClock();
 80014d2:	4b12      	ldr	r3, [pc, #72]	; (800151c <I2C_ClockControl+0x84>)
 80014d4:	69da      	ldr	r2, [r3, #28]
 80014d6:	4b11      	ldr	r3, [pc, #68]	; (800151c <I2C_ClockControl+0x84>)
 80014d8:	2180      	movs	r1, #128	; 0x80
 80014da:	03c9      	lsls	r1, r1, #15
 80014dc:	430a      	orrs	r2, r1
 80014de:	61da      	str	r2, [r3, #28]
}
 80014e0:	e016      	b.n	8001510 <I2C_ClockControl+0x78>
		if (pI2Chandle->pI2C == I2C1){
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a0c      	ldr	r2, [pc, #48]	; (8001518 <I2C_ClockControl+0x80>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d106      	bne.n	80014fa <I2C_ClockControl+0x62>
			I2C1_DisableClock();
 80014ec:	4b0b      	ldr	r3, [pc, #44]	; (800151c <I2C_ClockControl+0x84>)
 80014ee:	69da      	ldr	r2, [r3, #28]
 80014f0:	4b0a      	ldr	r3, [pc, #40]	; (800151c <I2C_ClockControl+0x84>)
 80014f2:	490c      	ldr	r1, [pc, #48]	; (8001524 <I2C_ClockControl+0x8c>)
 80014f4:	400a      	ands	r2, r1
 80014f6:	61da      	str	r2, [r3, #28]
}
 80014f8:	e00a      	b.n	8001510 <I2C_ClockControl+0x78>
		else if (pI2Chandle->pI2C == I2C2){
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a08      	ldr	r2, [pc, #32]	; (8001520 <I2C_ClockControl+0x88>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d105      	bne.n	8001510 <I2C_ClockControl+0x78>
			I2C2_DisableClock();
 8001504:	4b05      	ldr	r3, [pc, #20]	; (800151c <I2C_ClockControl+0x84>)
 8001506:	69da      	ldr	r2, [r3, #28]
 8001508:	4b04      	ldr	r3, [pc, #16]	; (800151c <I2C_ClockControl+0x84>)
 800150a:	4907      	ldr	r1, [pc, #28]	; (8001528 <I2C_ClockControl+0x90>)
 800150c:	400a      	ands	r2, r1
 800150e:	61da      	str	r2, [r3, #28]
}
 8001510:	46c0      	nop			; (mov r8, r8)
 8001512:	46bd      	mov	sp, r7
 8001514:	b002      	add	sp, #8
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40005400 	.word	0x40005400
 800151c:	40021000 	.word	0x40021000
 8001520:	40005800 	.word	0x40005800
 8001524:	ffdfffff 	.word	0xffdfffff
 8001528:	ffbfffff 	.word	0xffbfffff

0800152c <I2C_Init>:

/*Initialization, which enables clock but not the peripheral yet(this is done by I2C_EnableDisable)*/
void I2C_Init(I2C_Handle_t *pI2Chandle){
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	//enable I2C peripheral clock
	I2C_ClockControl(pI2Chandle,ENABLE);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2101      	movs	r1, #1
 8001538:	0018      	movs	r0, r3
 800153a:	f7ff ffad 	bl	8001498 <I2C_ClockControl>
	/*Configure TIMINGR. Use I2C_Timing_Config_Tool_Vx.y.z.xls or check out values in 26.4.11
	 * I2C_TIMINGR register configuration examples.
	 * This includes clock speed, I2C mode (standard,fast...)
	 * In case of knowing PRESC,SCLDEL,SDADEL,SCLH and SCLL: use my I2C_Master_TimingR
	 */
	pI2Chandle->pI2C->I2C_TIMINGR = pI2Chandle->I2C_Config.I2C_Timing;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	6892      	ldr	r2, [r2, #8]
 8001546:	611a      	str	r2, [r3, #16]

	/*//TX buffer as a dynamic array
	pI2Chandle->I2C_Comm_t.TX_buffer = malloc(pI2Chandle->I2C_Comm_t.TX_length);*/
}
 8001548:	46c0      	nop			; (mov r8, r8)
 800154a:	46bd      	mov	sp, r7
 800154c:	b002      	add	sp, #8
 800154e:	bd80      	pop	{r7, pc}

08001550 <I2C_EnableDisable>:

/*I2C control: enable/disable */
void I2C_EnableDisable(I2C_Handle_t *pI2Chandle, uint8_t EnableDisable){
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	000a      	movs	r2, r1
 800155a:	1cfb      	adds	r3, r7, #3
 800155c:	701a      	strb	r2, [r3, #0]
	if (EnableDisable == ENABLE){
 800155e:	1cfb      	adds	r3, r7, #3
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d10b      	bne.n	800157e <I2C_EnableDisable+0x2e>
		pI2Chandle->pI2C->I2C_CR1 |= (1<<I2C_CR1_PE);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2101      	movs	r1, #1
 8001572:	430a      	orrs	r2, r1
 8001574:	601a      	str	r2, [r3, #0]
		pI2Chandle->I2C_Comm_t.communication_state = I2C_READY;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	771a      	strb	r2, [r3, #28]
	}
	else { //0
		pI2Chandle->pI2C->I2C_CR1 &= ~(1<<I2C_CR1_PE);
	}
}
 800157c:	e007      	b.n	800158e <I2C_EnableDisable+0x3e>
		pI2Chandle->pI2C->I2C_CR1 &= ~(1<<I2C_CR1_PE);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2101      	movs	r1, #1
 800158a:	438a      	bics	r2, r1
 800158c:	601a      	str	r2, [r3, #0]
}
 800158e:	46c0      	nop			; (mov r8, r8)
 8001590:	46bd      	mov	sp, r7
 8001592:	b002      	add	sp, #8
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <I2C_IRQ_EnableDisable>:
	}
	pI2Chandle->pI2C->I2C_CR1 |= (1<<I2C_CR1_PE);
}

/*IRQ Configuration and ISR handling*/
void I2C_IRQ_EnableDisable(uint8_t IRQ_Number, uint8_t EnableDisable){ //IRQ_I2C1(combined with eXTI line23)/IRQ_I2C2
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	0002      	movs	r2, r0
 80015a0:	1dfb      	adds	r3, r7, #7
 80015a2:	701a      	strb	r2, [r3, #0]
 80015a4:	1dbb      	adds	r3, r7, #6
 80015a6:	1c0a      	adds	r2, r1, #0
 80015a8:	701a      	strb	r2, [r3, #0]
	if(EnableDisable == ENABLE){ //enable by means of ISER
 80015aa:	1dbb      	adds	r3, r7, #6
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d10b      	bne.n	80015ca <I2C_IRQ_EnableDisable+0x32>
		*NVIC_ISER |= ( 1 << IRQ_Number);
 80015b2:	4b0d      	ldr	r3, [pc, #52]	; (80015e8 <I2C_IRQ_EnableDisable+0x50>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	1dfb      	adds	r3, r7, #7
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2101      	movs	r1, #1
 80015bc:	4099      	lsls	r1, r3
 80015be:	000b      	movs	r3, r1
 80015c0:	0019      	movs	r1, r3
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <I2C_IRQ_EnableDisable+0x50>)
 80015c4:	430a      	orrs	r2, r1
 80015c6:	601a      	str	r2, [r3, #0]
	}
	else { //disable by means of ICER
		*NVIC_ICER |= ( 1 << IRQ_Number);
	}
}
 80015c8:	e00a      	b.n	80015e0 <I2C_IRQ_EnableDisable+0x48>
		*NVIC_ICER |= ( 1 << IRQ_Number);
 80015ca:	4b08      	ldr	r3, [pc, #32]	; (80015ec <I2C_IRQ_EnableDisable+0x54>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	1dfb      	adds	r3, r7, #7
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2101      	movs	r1, #1
 80015d4:	4099      	lsls	r1, r3
 80015d6:	000b      	movs	r3, r1
 80015d8:	0019      	movs	r1, r3
 80015da:	4b04      	ldr	r3, [pc, #16]	; (80015ec <I2C_IRQ_EnableDisable+0x54>)
 80015dc:	430a      	orrs	r2, r1
 80015de:	601a      	str	r2, [r3, #0]
}
 80015e0:	46c0      	nop			; (mov r8, r8)
 80015e2:	46bd      	mov	sp, r7
 80015e4:	b002      	add	sp, #8
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	e000e100 	.word	0xe000e100
 80015ec:	e000e180 	.word	0xe000e180

080015f0 <I2C_IRQ_Handling>:
	uint32_t tempIPR = ((*(NVIC_IPR_BASE + numberIPR))&~(0xFF<<blockIPR));
	tempIPR |= (IRQ_Priority<<(8*blockIPR+6)); //6 is because bits 0-5 are not editable, only bits 6-7 count.
	*(NVIC_IPR_BASE + numberIPR) = tempIPR;
}

void I2C_IRQ_Handling(I2C_Handle_t *pI2Chandle){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	//Call the handler related to the interrupt if register is true as long as it is enabled
	//STOP: Stop detection Interrupt.Place it first to disable I2C soon (especially not to overrun RX).
	if ( (pI2Chandle->pI2C->I2C_CR1 & (1<<I2C_CR1_STOPIE)) && (pI2Chandle->pI2C->I2C_ISR & (1<<I2C_ISR_STOPF)) ){
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2220      	movs	r2, #32
 8001600:	4013      	ands	r3, r2
 8001602:	d00a      	beq.n	800161a <I2C_IRQ_Handling+0x2a>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	2220      	movs	r2, #32
 800160c:	4013      	ands	r3, r2
 800160e:	d004      	beq.n	800161a <I2C_IRQ_Handling+0x2a>
		I2C_STOP_handler(pI2Chandle);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	0018      	movs	r0, r3
 8001614:	f000 fa19 	bl	8001a4a <I2C_STOP_handler>
		return;
 8001618:	e055      	b.n	80016c6 <I2C_IRQ_Handling+0xd6>
	}
	//TXIS: Transmit Interrupt Status
	if ( (pI2Chandle->pI2C->I2C_CR1 & (1<<I2C_CR1_TXIE)) && (pI2Chandle->pI2C->I2C_ISR & (1<<I2C_ISR_TXIS)) ){
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2202      	movs	r2, #2
 8001622:	4013      	ands	r3, r2
 8001624:	d00a      	beq.n	800163c <I2C_IRQ_Handling+0x4c>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	2202      	movs	r2, #2
 800162e:	4013      	ands	r3, r2
 8001630:	d004      	beq.n	800163c <I2C_IRQ_Handling+0x4c>
		I2C_TXIS_handler(pI2Chandle);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	0018      	movs	r0, r3
 8001636:	f000 f9a1 	bl	800197c <I2C_TXIS_handler>
		return;
 800163a:	e044      	b.n	80016c6 <I2C_IRQ_Handling+0xd6>
	}
	//RXNE: Receive data register not empty
	if ( (pI2Chandle->pI2C->I2C_CR1 & (1<<I2C_CR1_RXIE)) && (pI2Chandle->pI2C->I2C_ISR & (1<<I2C_ISR_RXNE)) ){
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2204      	movs	r2, #4
 8001644:	4013      	ands	r3, r2
 8001646:	d00a      	beq.n	800165e <I2C_IRQ_Handling+0x6e>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	2204      	movs	r2, #4
 8001650:	4013      	ands	r3, r2
 8001652:	d004      	beq.n	800165e <I2C_IRQ_Handling+0x6e>
		I2C_RXNE_handler(pI2Chandle);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	0018      	movs	r0, r3
 8001658:	f000 f9b3 	bl	80019c2 <I2C_RXNE_handler>
		return;
 800165c:	e033      	b.n	80016c6 <I2C_IRQ_Handling+0xd6>
	}
	//BERR: bus error
	if ( (pI2Chandle->pI2C->I2C_CR1 & (1<<I2C_CR1_ERRIE)) && (pI2Chandle->pI2C->I2C_ISR & (1<<I2C_ISR_BERR)) ){
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2280      	movs	r2, #128	; 0x80
 8001666:	4013      	ands	r3, r2
 8001668:	d00b      	beq.n	8001682 <I2C_IRQ_Handling+0x92>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	699a      	ldr	r2, [r3, #24]
 8001670:	2380      	movs	r3, #128	; 0x80
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	4013      	ands	r3, r2
 8001676:	d004      	beq.n	8001682 <I2C_IRQ_Handling+0x92>
		I2C_BERR_handler(pI2Chandle);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	0018      	movs	r0, r3
 800167c:	f000 f9ca 	bl	8001a14 <I2C_BERR_handler>
		return;
 8001680:	e021      	b.n	80016c6 <I2C_IRQ_Handling+0xd6>
	}
	//TC: Transfer complete interrupt
	if ( (pI2Chandle->pI2C->I2C_CR1 & (1<<I2C_CR1_TCIE)) && (pI2Chandle->pI2C->I2C_ISR & (1<<I2C_ISR_TC)) ){
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2240      	movs	r2, #64	; 0x40
 800168a:	4013      	ands	r3, r2
 800168c:	d00a      	beq.n	80016a4 <I2C_IRQ_Handling+0xb4>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	2240      	movs	r2, #64	; 0x40
 8001696:	4013      	ands	r3, r2
 8001698:	d004      	beq.n	80016a4 <I2C_IRQ_Handling+0xb4>
		I2C_TC_handler(pI2Chandle);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	0018      	movs	r0, r3
 800169e:	f000 f9ec 	bl	8001a7a <I2C_TC_handler>
		return;
 80016a2:	e010      	b.n	80016c6 <I2C_IRQ_Handling+0xd6>
	}
	//TCR: Transfer complete reload (enabled by TCIE too)
	if ( (pI2Chandle->pI2C->I2C_CR1 & (1<<I2C_CR1_TCIE)) && (pI2Chandle->pI2C->I2C_ISR & (1<<I2C_ISR_TCR)) ){
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2240      	movs	r2, #64	; 0x40
 80016ac:	4013      	ands	r3, r2
 80016ae:	d00a      	beq.n	80016c6 <I2C_IRQ_Handling+0xd6>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	2280      	movs	r2, #128	; 0x80
 80016b8:	4013      	ands	r3, r2
 80016ba:	d004      	beq.n	80016c6 <I2C_IRQ_Handling+0xd6>
		I2C_TCR_handler(pI2Chandle);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	0018      	movs	r0, r3
 80016c0:	f000 f9ef 	bl	8001aa2 <I2C_TCR_handler>
		return;
 80016c4:	46c0      	nop			; (mov r8, r8)
	}

}
 80016c6:	46bd      	mov	sp, r7
 80016c8:	b002      	add	sp, #8
 80016ca:	bd80      	pop	{r7, pc}

080016cc <I2C_SlaveAddress>:

static void I2C_SlaveAddress(I2C_Handle_t *pI2Chandle){
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	//slave address (7-bit or 10-bit)
	if (pI2Chandle->I2C_Config.I2C_AddressMode == I2C_ADDRESS_MODE_7BIT){ //7-bit
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	795b      	ldrb	r3, [r3, #5]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d10d      	bne.n	80016f8 <I2C_SlaveAddress+0x2c>
		//mask to 7 bits, move 1 bit to left (7-bits, so from b1 to b7) and set
		pI2Chandle->pI2C->I2C_CR2 |= ((pI2Chandle->I2C_Comm_t.I2C_SlaveAddress & 0x7F)<<1);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6859      	ldr	r1, [r3, #4]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	8c1b      	ldrh	r3, [r3, #32]
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	001a      	movs	r2, r3
 80016ea:	23ff      	movs	r3, #255	; 0xff
 80016ec:	401a      	ands	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	430a      	orrs	r2, r1
 80016f4:	605a      	str	r2, [r3, #4]
	}
	else { //10-bit
		//mask to 10 bits and set
		pI2Chandle->pI2C->I2C_CR2 |= (pI2Chandle->I2C_Comm_t.I2C_SlaveAddress & 0x3FF);
	}
}
 80016f6:	e00a      	b.n	800170e <I2C_SlaveAddress+0x42>
		pI2Chandle->pI2C->I2C_CR2 |= (pI2Chandle->I2C_Comm_t.I2C_SlaveAddress & 0x3FF);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6859      	ldr	r1, [r3, #4]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	8c1b      	ldrh	r3, [r3, #32]
 8001702:	059b      	lsls	r3, r3, #22
 8001704:	0d9a      	lsrs	r2, r3, #22
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	430a      	orrs	r2, r1
 800170c:	605a      	str	r2, [r3, #4]
}
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	46bd      	mov	sp, r7
 8001712:	b002      	add	sp, #8
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <I2C_Master_Transmitter>:

void I2C_Start(I2C_Handle_t *pI2Chandle){
	pI2Chandle->pI2C->I2C_CR2 |= (1<<I2C_CR2_START);
}

void I2C_Master_Transmitter(I2C_Handle_t *pI2Chandle, uint8_t exp_bytes, uint8_t autoend, uint8_t* appTxBuffer){
 8001718:	b5b0      	push	{r4, r5, r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	0008      	movs	r0, r1
 8001722:	0011      	movs	r1, r2
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	240b      	movs	r4, #11
 8001728:	193b      	adds	r3, r7, r4
 800172a:	1c02      	adds	r2, r0, #0
 800172c:	701a      	strb	r2, [r3, #0]
 800172e:	250a      	movs	r5, #10
 8001730:	197b      	adds	r3, r7, r5
 8001732:	1c0a      	adds	r2, r1, #0
 8001734:	701a      	strb	r2, [r3, #0]
	//TX state busy + configure transmission(including interrupts) + start&address
	if (pI2Chandle->I2C_Comm_t.communication_state != (I2C_DURING_TX || I2C_DURING_RX)){
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	7f1b      	ldrb	r3, [r3, #28]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d079      	beq.n	8001832 <I2C_Master_Transmitter+0x11a>
		//start transmission (start+slave address) if I2C_READY,I2C_RESTART_STOP or I2C_RELOAD
		//transfer direction: master requests a write transfer (0)
		pI2Chandle->pI2C->I2C_CR2 &= ~(1<<I2C_CR2_RDWRN);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	685a      	ldr	r2, [r3, #4]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	493c      	ldr	r1, [pc, #240]	; (800183c <I2C_Master_Transmitter+0x124>)
 800174a:	400a      	ands	r2, r1
 800174c:	605a      	str	r2, [r3, #4]
		//slave address (7-bit or 10-bit)
		I2C_SlaveAddress(pI2Chandle);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	0018      	movs	r0, r3
 8001752:	f7ff ffbb 	bl	80016cc <I2C_SlaveAddress>
		//enable TXIE,necessary for TXIS
		pI2Chandle->pI2C->I2C_CR1 |= (1<<I2C_CR1_TXIE);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2102      	movs	r1, #2
 8001762:	430a      	orrs	r2, r1
 8001764:	601a      	str	r2, [r3, #0]
		pI2Chandle->I2C_Comm_t.I2C_Nbytes = exp_bytes;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	193a      	adds	r2, r7, r4
 800176a:	7812      	ldrb	r2, [r2, #0]
 800176c:	779a      	strb	r2, [r3, #30]
			pI2Chandle->pI2C->I2C_CR2 |= (1<<I2C_CR2_RELOAD);
			pI2Chandle->pI2C->I2C_CR1 |= (1<<I2C_CR1_TCIE); //TCIE is for both TC and TCR
		}
		else{
			//writing NBYTES clears TCR by the way.first reset NBYTES (important,8bits!) and then set them
			pI2Chandle->pI2C->I2C_CR2 &= ~(255<<I2C_CR2_NBYTES);//reset NBYTES. 0xFF=1..1
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4931      	ldr	r1, [pc, #196]	; (8001840 <I2C_Master_Transmitter+0x128>)
 800177a:	400a      	ands	r2, r1
 800177c:	605a      	str	r2, [r3, #4]
			pI2Chandle->pI2C->I2C_CR2 |= (exp_bytes<<I2C_CR2_NBYTES); //set NBYTES
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	193b      	adds	r3, r7, r4
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	041b      	lsls	r3, r3, #16
 800178a:	0019      	movs	r1, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	430a      	orrs	r2, r1
 8001792:	605a      	str	r2, [r3, #4]
			pI2Chandle->I2C_Comm_t.TX_length = exp_bytes;
 8001794:	193b      	adds	r3, r7, r4
 8001796:	781a      	ldrb	r2, [r3, #0]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	60da      	str	r2, [r3, #12]
			pI2Chandle->pI2C->I2C_CR2 &= ~(1<<I2C_CR2_RELOAD); //disable RELOAD
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	685a      	ldr	r2, [r3, #4]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4927      	ldr	r1, [pc, #156]	; (8001844 <I2C_Master_Transmitter+0x12c>)
 80017a8:	400a      	ands	r2, r1
 80017aa:	605a      	str	r2, [r3, #4]
			 *0: software end mode: TC flag is set when NBYTES data are transferred, stretching SCL low.
			 *1: Automatic end mode: a STOP condition is automatically sent when NBYTES data are
			 *transferred.
			 *Note: This bit has no effect in slave mode or when the RELOAD bit is set.
			 */
			if (autoend){ //automatic end mode
 80017ac:	197b      	adds	r3, r7, r5
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d01c      	beq.n	80017ee <I2C_Master_Transmitter+0xd6>
				pI2Chandle->I2C_Comm_t.I2C_RepeatStart = I2C_AUTOEND;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2200      	movs	r2, #0
 80017b8:	775a      	strb	r2, [r3, #29]
				pI2Chandle->pI2C->I2C_CR2 |= (1<<I2C_CR2_AUTOEND);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2180      	movs	r1, #128	; 0x80
 80017c6:	0489      	lsls	r1, r1, #18
 80017c8:	430a      	orrs	r2, r1
 80017ca:	605a      	str	r2, [r3, #4]
				pI2Chandle->pI2C->I2C_CR1 |= (1<<I2C_CR1_TCIE); //to enable TC (TCIE is for both TC and TCR)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2140      	movs	r1, #64	; 0x40
 80017d8:	430a      	orrs	r2, r1
 80017da:	601a      	str	r2, [r3, #0]
				pI2Chandle->pI2C->I2C_CR1 |= (1<<I2C_CR1_STOPIE); //to enable STOP detection
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2120      	movs	r1, #32
 80017e8:	430a      	orrs	r2, r1
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	e012      	b.n	8001814 <I2C_Master_Transmitter+0xfc>
			}
			else{ //software end mode
				pI2Chandle->I2C_Comm_t.I2C_RepeatStart = I2C_REPEAT_START;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2201      	movs	r2, #1
 80017f2:	775a      	strb	r2, [r3, #29]
				pI2Chandle->pI2C->I2C_CR2 &= ~(1<<I2C_CR2_AUTOEND);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	685a      	ldr	r2, [r3, #4]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4912      	ldr	r1, [pc, #72]	; (8001848 <I2C_Master_Transmitter+0x130>)
 8001800:	400a      	ands	r2, r1
 8001802:	605a      	str	r2, [r3, #4]
				pI2Chandle->pI2C->I2C_CR1 &= ~(1<<I2C_CR1_TCIE); //to disable TC
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2140      	movs	r1, #64	; 0x40
 8001810:	438a      	bics	r2, r1
 8001812:	601a      	str	r2, [r3, #0]
		}
		else if (pI2Chandle->I2C_Comm_t.communication_state == (I2C_READY || I2C_RESTART_STOP)){
			//do something extra?
		}
		*/
		pI2Chandle->I2C_Comm_t.TX_buffer = appTxBuffer; //I2C TX buffer pointing to app's TX buffer
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	611a      	str	r2, [r3, #16]
		pI2Chandle->I2C_Comm_t.communication_state = I2C_DURING_TX;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2201      	movs	r2, #1
 800181e:	771a      	strb	r2, [r3, #28]
		//start + address. this would clear TC if it had been set (RESTART_STOP)
		//This bit is set by SW and cleared by HW after Start followed by address sequence is sent
		//in case of problems, trigger START from the app
		pI2Chandle->pI2C->I2C_CR2 |= (1<<I2C_CR2_START);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2180      	movs	r1, #128	; 0x80
 800182c:	0189      	lsls	r1, r1, #6
 800182e:	430a      	orrs	r2, r1
 8001830:	605a      	str	r2, [r3, #4]
	}

}
 8001832:	46c0      	nop			; (mov r8, r8)
 8001834:	46bd      	mov	sp, r7
 8001836:	b004      	add	sp, #16
 8001838:	bdb0      	pop	{r4, r5, r7, pc}
 800183a:	46c0      	nop			; (mov r8, r8)
 800183c:	fffffbff 	.word	0xfffffbff
 8001840:	ff00ffff 	.word	0xff00ffff
 8001844:	feffffff 	.word	0xfeffffff
 8001848:	fdffffff 	.word	0xfdffffff

0800184c <I2C_Master_Receiver>:

void I2C_Master_Receiver(I2C_Handle_t *pI2Chandle, uint8_t exp_bytes, uint8_t autoend, uint8_t* appRxBuffer){
 800184c:	b5b0      	push	{r4, r5, r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	0008      	movs	r0, r1
 8001856:	0011      	movs	r1, r2
 8001858:	607b      	str	r3, [r7, #4]
 800185a:	240b      	movs	r4, #11
 800185c:	193b      	adds	r3, r7, r4
 800185e:	1c02      	adds	r2, r0, #0
 8001860:	701a      	strb	r2, [r3, #0]
 8001862:	250a      	movs	r5, #10
 8001864:	197b      	adds	r3, r7, r5
 8001866:	1c0a      	adds	r2, r1, #0
 8001868:	701a      	strb	r2, [r3, #0]
	//RX state busy + configure reception(including interrupts) + start&address
	if (pI2Chandle->I2C_Comm_t.communication_state != (I2C_DURING_TX || I2C_DURING_RX)){
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	7f1b      	ldrb	r3, [r3, #28]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d07a      	beq.n	8001968 <I2C_Master_Receiver+0x11c>
		//start transmission (start+slave address) if I2C_READY,I2C_RESTART_STOP or I2C_RELOAD
		//transfer direction: master requests a read transfer (1)
		pI2Chandle->pI2C->I2C_CR2 |= (1<<I2C_CR2_RDWRN);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2180      	movs	r1, #128	; 0x80
 800187e:	00c9      	lsls	r1, r1, #3
 8001880:	430a      	orrs	r2, r1
 8001882:	605a      	str	r2, [r3, #4]
		//slave address (7-bit or 10-bit)
		I2C_SlaveAddress(pI2Chandle);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	0018      	movs	r0, r3
 8001888:	f7ff ff20 	bl	80016cc <I2C_SlaveAddress>
		//enable RXIE,necessary for RXNE
		pI2Chandle->pI2C->I2C_CR1 |= (1<<I2C_CR1_RXIE);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2104      	movs	r1, #4
 8001898:	430a      	orrs	r2, r1
 800189a:	601a      	str	r2, [r3, #0]
		pI2Chandle->I2C_Comm_t.I2C_Nbytes = exp_bytes;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	193a      	adds	r2, r7, r4
 80018a0:	7812      	ldrb	r2, [r2, #0]
 80018a2:	779a      	strb	r2, [r3, #30]
			pI2Chandle->pI2C->I2C_CR2 |= (1<<I2C_CR2_RELOAD);
			pI2Chandle->pI2C->I2C_CR1 |= (1<<I2C_CR1_TCIE); //TCIE is for both TC and TCR
		}
		else{
			//writing NBYTES clears TCR by the way.first reset NBYTES (important,8bits!) and then set them
			pI2Chandle->pI2C->I2C_CR2 &= ~(255<<I2C_CR2_NBYTES);//reset NBYTES. 0xFF=1..1
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4930      	ldr	r1, [pc, #192]	; (8001970 <I2C_Master_Receiver+0x124>)
 80018b0:	400a      	ands	r2, r1
 80018b2:	605a      	str	r2, [r3, #4]
			pI2Chandle->pI2C->I2C_CR2 |= (exp_bytes<<I2C_CR2_NBYTES); //set NBYTES
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	193b      	adds	r3, r7, r4
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	041b      	lsls	r3, r3, #16
 80018c0:	0019      	movs	r1, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	430a      	orrs	r2, r1
 80018c8:	605a      	str	r2, [r3, #4]
			pI2Chandle->I2C_Comm_t.RX_length = exp_bytes;
 80018ca:	193b      	adds	r3, r7, r4
 80018cc:	781a      	ldrb	r2, [r3, #0]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	615a      	str	r2, [r3, #20]
			pI2Chandle->pI2C->I2C_CR2 &= ~(1<<I2C_CR2_RELOAD); //disable RELOAD
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4925      	ldr	r1, [pc, #148]	; (8001974 <I2C_Master_Receiver+0x128>)
 80018de:	400a      	ands	r2, r1
 80018e0:	605a      	str	r2, [r3, #4]
			 *0: software end mode: TC flag is set when NBYTES data are transferred, stretching SCL low.
			 *1: Automatic end mode: a STOP condition is automatically sent when NBYTES data are
			 *transferred.
			 *Note: This bit has no effect in slave mode or when the RELOAD bit is set.
			 */
			if (autoend){ //automatic end mode
 80018e2:	197b      	adds	r3, r7, r5
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d01c      	beq.n	8001924 <I2C_Master_Receiver+0xd8>
				pI2Chandle->I2C_Comm_t.I2C_RepeatStart = I2C_AUTOEND;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2200      	movs	r2, #0
 80018ee:	775a      	strb	r2, [r3, #29]
				pI2Chandle->pI2C->I2C_CR2 |= (1<<I2C_CR2_AUTOEND);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	685a      	ldr	r2, [r3, #4]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2180      	movs	r1, #128	; 0x80
 80018fc:	0489      	lsls	r1, r1, #18
 80018fe:	430a      	orrs	r2, r1
 8001900:	605a      	str	r2, [r3, #4]
				pI2Chandle->pI2C->I2C_CR1 |= (1<<I2C_CR1_TCIE); //to enable TC (TCIE is for both TC and TCR)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2140      	movs	r1, #64	; 0x40
 800190e:	430a      	orrs	r2, r1
 8001910:	601a      	str	r2, [r3, #0]
				pI2Chandle->pI2C->I2C_CR1 |= (1<<I2C_CR1_STOPIE); //to enable STOP detection
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2120      	movs	r1, #32
 800191e:	430a      	orrs	r2, r1
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	e012      	b.n	800194a <I2C_Master_Receiver+0xfe>
			}
			else{ //software end mode
				pI2Chandle->I2C_Comm_t.I2C_RepeatStart = I2C_REPEAT_START;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2201      	movs	r2, #1
 8001928:	775a      	strb	r2, [r3, #29]
				pI2Chandle->pI2C->I2C_CR2 &= ~(1<<I2C_CR2_AUTOEND);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4910      	ldr	r1, [pc, #64]	; (8001978 <I2C_Master_Receiver+0x12c>)
 8001936:	400a      	ands	r2, r1
 8001938:	605a      	str	r2, [r3, #4]
				pI2Chandle->pI2C->I2C_CR1 &= ~(1<<I2C_CR1_TCIE); //to disable TC
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2140      	movs	r1, #64	; 0x40
 8001946:	438a      	bics	r2, r1
 8001948:	601a      	str	r2, [r3, #0]
		}
		else if (pI2Chandle->I2C_Comm_t.communication_state == (I2C_READY || I2C_RESTART_STOP)){
			//something extra?
		}
		*/
		pI2Chandle->I2C_Comm_t.RX_buffer = appRxBuffer; //I2C RX buffer pointing to app's RX buffer
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	619a      	str	r2, [r3, #24]
		pI2Chandle->I2C_Comm_t.communication_state = I2C_DURING_RX;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2202      	movs	r2, #2
 8001954:	771a      	strb	r2, [r3, #28]
		//start + address. this would clear TC if it had been set (RESTART_STOP)
		//This bit is set by SW and cleared by HW after Start followed by address sequence is sent
		//in case of problems (RXNE delays for example), trigger START from the app
		pI2Chandle->pI2C->I2C_CR2 |= (1<<I2C_CR2_START);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2180      	movs	r1, #128	; 0x80
 8001962:	0189      	lsls	r1, r1, #6
 8001964:	430a      	orrs	r2, r1
 8001966:	605a      	str	r2, [r3, #4]
	}
}
 8001968:	46c0      	nop			; (mov r8, r8)
 800196a:	46bd      	mov	sp, r7
 800196c:	b004      	add	sp, #16
 800196e:	bdb0      	pop	{r4, r5, r7, pc}
 8001970:	ff00ffff 	.word	0xff00ffff
 8001974:	feffffff 	.word	0xfeffffff
 8001978:	fdffffff 	.word	0xfdffffff

0800197c <I2C_TXIS_handler>:
		//bit set by SW, cleared by HW when a STOP condition is detected.Writing ‘0’ has no effect
		pI2Chandle->pI2C->I2C_CR2 |= (1<<I2C_CR2_STOP);
	}
}

static void I2C_TXIS_handler(I2C_Handle_t *pI2Chandle){
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
	/*TXIS set by hardware when I2C_TXDR register empty and the data to be
	*transmitted must be written in I2C_TXDR. It is cleared when the next data to be
	*sent is written in I2C_TXDR register*/
	if (pI2Chandle->I2C_Comm_t.TX_length >=1){
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d016      	beq.n	80019ba <I2C_TXIS_handler+0x3e>
		pI2Chandle->pI2C->I2C_TXDR = *(pI2Chandle->I2C_Comm_t.TX_buffer);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	781a      	ldrb	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	629a      	str	r2, [r3, #40]	; 0x28
		pI2Chandle->I2C_Comm_t.TX_buffer++;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	1c5a      	adds	r2, r3, #1
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	611a      	str	r2, [r3, #16]
		pI2Chandle->I2C_Comm_t.TX_length--;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	1e5a      	subs	r2, r3, #1
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	60da      	str	r2, [r3, #12]
		/*if last byte to be send,wait until STOP or TC/TCR,depending on AUTOEND(these interrupts are handled)
		*state=WAITING_END (STOP or TC/TCR flag)
		*if NBYTES>255, I2C_RELOAD*/
		if (pI2Chandle->I2C_Comm_t.TX_length == 0){
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d102      	bne.n	80019ba <I2C_TXIS_handler+0x3e>
			pI2Chandle->I2C_Comm_t.communication_state = I2C_WAITING_END;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2203      	movs	r2, #3
 80019b8:	771a      	strb	r2, [r3, #28]
		}
	}

}
 80019ba:	46c0      	nop			; (mov r8, r8)
 80019bc:	46bd      	mov	sp, r7
 80019be:	b002      	add	sp, #8
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <I2C_RXNE_handler>:

static void I2C_RXNE_handler(I2C_Handle_t *pI2Chandle){
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
	/*RXNE is set by hardware when received data is copied into I2C_RXDR register, and
	*is ready to be read. It is cleared when I2C_RXDR is read*/
	if (pI2Chandle->I2C_Comm_t.RX_length >= 1){
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d01c      	beq.n	8001a0c <I2C_RXNE_handler+0x4a>
		*pI2Chandle->I2C_Comm_t.RX_buffer = ((uint8_t)pI2Chandle->pI2C->I2C_RXDR); //read RXDR
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	701a      	strb	r2, [r3, #0]
		pI2Chandle->I2C_Comm_t.RX_buffer++; //increase address which I2C buffer points to (next position app's RXbuffer);next RXDR is stored there
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	1c5a      	adds	r2, r3, #1
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	619a      	str	r2, [r3, #24]
		pI2Chandle->I2C_Comm_t.RX_length--;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	1e5a      	subs	r2, r3, #1
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	615a      	str	r2, [r3, #20]
		*if NBYTES>255, I2C_RELOAD*/
		/*if ((pI2Chandle->I2C_Comm_t.I2C_RepeatStart == I2C_AUTOEND) && (pI2Chandle->I2C_Comm_t.RX_length <= 1 )){
			pI2Chandle->I2C_Comm_t.communication_state = I2C_WAITING_END; //autoend: STOP
			//no callback, STOP handler will do
		}*/
		if (pI2Chandle->I2C_Comm_t.RX_length == 0){
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	695b      	ldr	r3, [r3, #20]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d107      	bne.n	8001a0c <I2C_RXNE_handler+0x4a>
			pI2Chandle->I2C_Comm_t.communication_state = I2C_WAITING_END;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2203      	movs	r2, #3
 8001a00:	771a      	strb	r2, [r3, #28]
			I2C_App_Callback(pI2Chandle, I2C_NEW_READING);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2104      	movs	r1, #4
 8001a06:	0018      	movs	r0, r3
 8001a08:	f7fe fd30 	bl	800046c <I2C_App_Callback>
		}
	}

}
 8001a0c:	46c0      	nop			; (mov r8, r8)
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	b002      	add	sp, #8
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <I2C_BERR_handler>:

static void I2C_BERR_handler(I2C_Handle_t *pI2Chandle){
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
	/*BERR is set by hardware when a misplaced Start or STOP is detected whereas
	*the peripheral is involved in the transfer. The flag is not set during address phase in slave
	*mode. It is cleared by software by setting BERRCF bit*/
	pI2Chandle->pI2C->I2C_ICR |= (1<<I2C_ICR_BERRCF);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	69da      	ldr	r2, [r3, #28]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2180      	movs	r1, #128	; 0x80
 8001a28:	0049      	lsls	r1, r1, #1
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	61da      	str	r2, [r3, #28]
	//Disable I2C
	I2C_EnableDisable(pI2Chandle,DISABLE);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2100      	movs	r1, #0
 8001a32:	0018      	movs	r0, r3
 8001a34:	f7ff fd8c 	bl	8001550 <I2C_EnableDisable>
	//inform the main application through callback
	I2C_App_Callback(pI2Chandle, I2C_BERR_ERROR);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2103      	movs	r1, #3
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	f7fe fd15 	bl	800046c <I2C_App_Callback>
}
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	46bd      	mov	sp, r7
 8001a46:	b002      	add	sp, #8
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <I2C_STOP_handler>:

static void I2C_STOP_handler(I2C_Handle_t *pI2Chandle){
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
		pI2Chandle->I2C_Comm_t.communication_state = I2C_READY;
		pI2Chandle->pI2C->I2C_ICR |= (1<<I2C_ICR_STOPCF);
		I2C_App_Callback(pI2Chandle, I2C_FINISHED);
		//Disable I2C in main application
	}*/
	pI2Chandle->I2C_Comm_t.communication_state = I2C_READY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	771a      	strb	r2, [r3, #28]
	pI2Chandle->pI2C->I2C_ICR |= (1<<I2C_ICR_STOPCF);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	69da      	ldr	r2, [r3, #28]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2120      	movs	r1, #32
 8001a64:	430a      	orrs	r2, r1
 8001a66:	61da      	str	r2, [r3, #28]
	I2C_App_Callback(pI2Chandle, I2C_FINISHED);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2102      	movs	r1, #2
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f7fe fcfd 	bl	800046c <I2C_App_Callback>
	//Disable I2C in main application
}
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	46bd      	mov	sp, r7
 8001a76:	b002      	add	sp, #8
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <I2C_TC_handler>:

static void I2C_TC_handler(I2C_Handle_t *pI2Chandle){
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
	/*TC(transfer complete) is set by hardware when RELOAD=0, AUTOEND=0 and NBYTES data have been
	*transferred. It is cleared by software when START bit or STOP bit is set.*/
	//if I2C_WAITING_END --> I2C_RESTART_STOP
	if (pI2Chandle->I2C_Comm_t.communication_state == I2C_WAITING_END){
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	7f1b      	ldrb	r3, [r3, #28]
 8001a86:	2b03      	cmp	r3, #3
 8001a88:	d107      	bne.n	8001a9a <I2C_TC_handler+0x20>
		pI2Chandle->I2C_Comm_t.communication_state = I2C_RESTART_STOP;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2204      	movs	r2, #4
 8001a8e:	771a      	strb	r2, [r3, #28]
		I2C_App_Callback(pI2Chandle, I2C_TC);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2105      	movs	r1, #5
 8001a94:	0018      	movs	r0, r3
 8001a96:	f7fe fce9 	bl	800046c <I2C_App_Callback>
	}
}
 8001a9a:	46c0      	nop			; (mov r8, r8)
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	b002      	add	sp, #8
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <I2C_TCR_handler>:

static void I2C_TCR_handler(I2C_Handle_t *pI2Chandle){ //when NBYTES>255
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
	/*TCR(transfer complete reload) is set by hardware when RELOAD=1 and NBYTES data have been transferred. It is
	*cleared by software when NBYTES is written to a non-zero value.*/
	//if I2C_WAITING_END --> I2C_RELOAD
	if (pI2Chandle->I2C_Comm_t.communication_state == I2C_WAITING_END){
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	7f1b      	ldrb	r3, [r3, #28]
 8001aae:	2b03      	cmp	r3, #3
 8001ab0:	d107      	bne.n	8001ac2 <I2C_TCR_handler+0x20>
		pI2Chandle->I2C_Comm_t.communication_state = I2C_RELOAD;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2205      	movs	r2, #5
 8001ab6:	771a      	strb	r2, [r3, #28]
		I2C_App_Callback(pI2Chandle, I2C_TCR);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2106      	movs	r1, #6
 8001abc:	0018      	movs	r0, r3
 8001abe:	f7fe fcd5 	bl	800046c <I2C_App_Callback>
	}
}
 8001ac2:	46c0      	nop			; (mov r8, r8)
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	b002      	add	sp, #8
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <I2C_Master_TimingR>:
__attribute__((weak)) void I2C_App_Callback(I2C_Handle_t *pI2Chandle,uint8_t Event){
	//This function will be implemented in every particular application. Thus, the weak attribute
}

/*TIMINGR calculation*/
void I2C_Master_TimingR(I2C_Handle_t *pI2Chandle, uint8_t presc, uint8_t scldel, uint8_t sdadel, uint8_t sclh, uint8_t scll){
 8001aca:	b590      	push	{r4, r7, lr}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
 8001ad2:	000c      	movs	r4, r1
 8001ad4:	0010      	movs	r0, r2
 8001ad6:	0019      	movs	r1, r3
 8001ad8:	1cfb      	adds	r3, r7, #3
 8001ada:	1c22      	adds	r2, r4, #0
 8001adc:	701a      	strb	r2, [r3, #0]
 8001ade:	1cbb      	adds	r3, r7, #2
 8001ae0:	1c02      	adds	r2, r0, #0
 8001ae2:	701a      	strb	r2, [r3, #0]
 8001ae4:	1c7b      	adds	r3, r7, #1
 8001ae6:	1c0a      	adds	r2, r1, #0
 8001ae8:	701a      	strb	r2, [r3, #0]
	pI2Chandle->I2C_Config.I2C_Timing |= ((presc & 0x0F) << 28);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	1cfa      	adds	r2, r7, #3
 8001af0:	7812      	ldrb	r2, [r2, #0]
 8001af2:	0712      	lsls	r2, r2, #28
 8001af4:	431a      	orrs	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	609a      	str	r2, [r3, #8]
	pI2Chandle->I2C_Config.I2C_Timing |= ((scldel & 0x0F) << 20);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689a      	ldr	r2, [r3, #8]
 8001afe:	1cbb      	adds	r3, r7, #2
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	051b      	lsls	r3, r3, #20
 8001b04:	0019      	movs	r1, r3
 8001b06:	23f0      	movs	r3, #240	; 0xf0
 8001b08:	041b      	lsls	r3, r3, #16
 8001b0a:	400b      	ands	r3, r1
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	609a      	str	r2, [r3, #8]
	pI2Chandle->I2C_Config.I2C_Timing |= ((sdadel & 0x0F) << 16);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	1c7b      	adds	r3, r7, #1
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	041b      	lsls	r3, r3, #16
 8001b1c:	0019      	movs	r1, r3
 8001b1e:	23f0      	movs	r3, #240	; 0xf0
 8001b20:	031b      	lsls	r3, r3, #12
 8001b22:	400b      	ands	r3, r1
 8001b24:	431a      	orrs	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	609a      	str	r2, [r3, #8]
	pI2Chandle->I2C_Config.I2C_Timing |= (sclh << 8);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689a      	ldr	r2, [r3, #8]
 8001b2e:	2318      	movs	r3, #24
 8001b30:	18fb      	adds	r3, r7, r3
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	021b      	lsls	r3, r3, #8
 8001b36:	431a      	orrs	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
	pI2Chandle->I2C_Config.I2C_Timing |= scll;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	231c      	movs	r3, #28
 8001b42:	18fb      	adds	r3, r7, r3
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	431a      	orrs	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
}
 8001b4c:	46c0      	nop			; (mov r8, r8)
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	b003      	add	sp, #12
 8001b52:	bd90      	pop	{r4, r7, pc}

08001b54 <SPI_ClockControl>:
static void SPI_TXE_handler(SPI_Handle_t *pSPIhandle);
static void SPI_RXNE_handler(SPI_Handle_t *pSPIhandle);
static void SPI_OVR_handler(SPI_Handle_t *pSPIhandle);

/*Enable or disable SPI peripheral clock*/
void SPI_ClockControl(SPI_Handle_t *pSPIhandle, uint8_t EnableDisable){
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	000a      	movs	r2, r1
 8001b5e:	1cfb      	adds	r3, r7, #3
 8001b60:	701a      	strb	r2, [r3, #0]
	if (EnableDisable == ENABLE) {
 8001b62:	1cfb      	adds	r3, r7, #3
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d119      	bne.n	8001b9e <SPI_ClockControl+0x4a>
		if (pSPIhandle->pSPI == SPI1_I2S1){
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a19      	ldr	r2, [pc, #100]	; (8001bd4 <SPI_ClockControl+0x80>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d107      	bne.n	8001b84 <SPI_ClockControl+0x30>
			SPI1_I2S1_EnableClock();
 8001b74:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <SPI_ClockControl+0x84>)
 8001b76:	699a      	ldr	r2, [r3, #24]
 8001b78:	4b17      	ldr	r3, [pc, #92]	; (8001bd8 <SPI_ClockControl+0x84>)
 8001b7a:	2180      	movs	r1, #128	; 0x80
 8001b7c:	0149      	lsls	r1, r1, #5
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	619a      	str	r2, [r3, #24]
		}
		else if (pSPIhandle->pSPI == SPI2){
			SPI2_DisableClock();
		}
	}
}
 8001b82:	e023      	b.n	8001bcc <SPI_ClockControl+0x78>
		else if (pSPIhandle->pSPI == SPI2){
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a14      	ldr	r2, [pc, #80]	; (8001bdc <SPI_ClockControl+0x88>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d11e      	bne.n	8001bcc <SPI_ClockControl+0x78>
			SPI2_EnableClock();
 8001b8e:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <SPI_ClockControl+0x84>)
 8001b90:	69da      	ldr	r2, [r3, #28]
 8001b92:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <SPI_ClockControl+0x84>)
 8001b94:	2180      	movs	r1, #128	; 0x80
 8001b96:	01c9      	lsls	r1, r1, #7
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	61da      	str	r2, [r3, #28]
}
 8001b9c:	e016      	b.n	8001bcc <SPI_ClockControl+0x78>
		if (pSPIhandle->pSPI == SPI1_I2S1){
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a0c      	ldr	r2, [pc, #48]	; (8001bd4 <SPI_ClockControl+0x80>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d106      	bne.n	8001bb6 <SPI_ClockControl+0x62>
			SPI1_I2S1_DisableClock();
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <SPI_ClockControl+0x84>)
 8001baa:	699a      	ldr	r2, [r3, #24]
 8001bac:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <SPI_ClockControl+0x84>)
 8001bae:	490c      	ldr	r1, [pc, #48]	; (8001be0 <SPI_ClockControl+0x8c>)
 8001bb0:	400a      	ands	r2, r1
 8001bb2:	619a      	str	r2, [r3, #24]
}
 8001bb4:	e00a      	b.n	8001bcc <SPI_ClockControl+0x78>
		else if (pSPIhandle->pSPI == SPI2){
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a08      	ldr	r2, [pc, #32]	; (8001bdc <SPI_ClockControl+0x88>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d105      	bne.n	8001bcc <SPI_ClockControl+0x78>
			SPI2_DisableClock();
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <SPI_ClockControl+0x84>)
 8001bc2:	69da      	ldr	r2, [r3, #28]
 8001bc4:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <SPI_ClockControl+0x84>)
 8001bc6:	4907      	ldr	r1, [pc, #28]	; (8001be4 <SPI_ClockControl+0x90>)
 8001bc8:	400a      	ands	r2, r1
 8001bca:	61da      	str	r2, [r3, #28]
}
 8001bcc:	46c0      	nop			; (mov r8, r8)
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	b002      	add	sp, #8
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40013000 	.word	0x40013000
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	40003800 	.word	0x40003800
 8001be0:	ffffefff 	.word	0xffffefff
 8001be4:	ffffbfff 	.word	0xffffbfff

08001be8 <SPI_Init>:

/*SPI initialization, which does not mean to enable SPI (which is done through SPI_EnableDisable) */
void SPI_Init(SPI_Handle_t *pSPIhandle){
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]

	SPI_ClockControl(pSPIhandle,ENABLE); //enable SPI peripheral clock
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	f7ff ffad 	bl	8001b54 <SPI_ClockControl>
	/*Configure CR1*/
	//first,CR1 can be reset completely as it is not related to other parts (it might be reset with memset in the app,too)
	pSPIhandle->pSPI->SPI_CR1 = 0;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]

	//master/slave
	pSPIhandle->pSPI->SPI_CR1 |= ((pSPIhandle->SPI_Config.SPI_Mode)<<SPI_CR1_MSTR); //bit MSTR set
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	791b      	ldrb	r3, [r3, #4]
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	0019      	movs	r1, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	430a      	orrs	r2, r1
 8001c16:	601a      	str	r2, [r3, #0]

	//mode: full duplex/half duplex/simplex.Bits:BIDIMODE (full/half)+BIDIOE (output enabled)+RXONLY(1 if BIDIOE disabled)
	if (pSPIhandle->SPI_Config.SPI_Mode == SPI_FULLDUPLEX){
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	791b      	ldrb	r3, [r3, #4]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d108      	bne.n	8001c32 <SPI_Init+0x4a>
		pSPIhandle->pSPI->SPI_CR1 &= ~(1<<SPI_CR1_BIDIMODE); //not necessary to set 0 because SPI_CR1 had been initialized to 0,but makes code clearer
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	493f      	ldr	r1, [pc, #252]	; (8001d28 <SPI_Init+0x140>)
 8001c2c:	400a      	ands	r2, r1
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	e02a      	b.n	8001c88 <SPI_Init+0xa0>
	}
	else if (pSPIhandle->SPI_Config.SPI_Mode == SPI_HALFDUPLEX){
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	791b      	ldrb	r3, [r3, #4]
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d109      	bne.n	8001c4e <SPI_Init+0x66>
		pSPIhandle->pSPI->SPI_CR1 |= (1<<SPI_CR1_BIDIMODE);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2180      	movs	r1, #128	; 0x80
 8001c46:	0209      	lsls	r1, r1, #8
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	e01c      	b.n	8001c88 <SPI_Init+0xa0>
	}
	else if (pSPIhandle->SPI_Config.SPI_Mode == SPI_CR1_RXONLY){
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	791b      	ldrb	r3, [r3, #4]
 8001c52:	2b0a      	cmp	r3, #10
 8001c54:	d118      	bne.n	8001c88 <SPI_Init+0xa0>
		//acc to datasheet, Keep BIDIMODE bit clear when receive only mode is active.
		pSPIhandle->pSPI->SPI_CR1 &= ~(1<<SPI_CR1_BIDIMODE);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4931      	ldr	r1, [pc, #196]	; (8001d28 <SPI_Init+0x140>)
 8001c62:	400a      	ands	r2, r1
 8001c64:	601a      	str	r2, [r3, #0]
		pSPIhandle->pSPI->SPI_CR1 &= ~(1<<SPI_CR1_BIDIOE);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	492e      	ldr	r1, [pc, #184]	; (8001d2c <SPI_Init+0x144>)
 8001c72:	400a      	ands	r2, r1
 8001c74:	601a      	str	r2, [r3, #0]
		pSPIhandle->pSPI->SPI_CR1 |= (1<<SPI_CR1_RXONLY);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2180      	movs	r1, #128	; 0x80
 8001c82:	00c9      	lsls	r1, r1, #3
 8001c84:	430a      	orrs	r2, r1
 8001c86:	601a      	str	r2, [r3, #0]
	}
	//simplex TX is actually full duplex

	//Phase
	pSPIhandle->pSPI->SPI_CR1 |= (pSPIhandle->SPI_Config.SPI_Phase<<SPI_CR1_CPHA);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	7a9b      	ldrb	r3, [r3, #10]
 8001c92:	0019      	movs	r1, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	601a      	str	r2, [r3, #0]

	//Polarity
	pSPIhandle->pSPI->SPI_CR1 |= (pSPIhandle->SPI_Config.SPI_Pol<<SPI_CR1_CPOL);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	7a5b      	ldrb	r3, [r3, #9]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	0019      	movs	r1, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	601a      	str	r2, [r3, #0]

	//software slave management
	pSPIhandle->pSPI->SPI_CR1 |= (pSPIhandle->SPI_Config.SPI_SWslave<<SPI_CR1_SSM);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	7a1b      	ldrb	r3, [r3, #8]
 8001cbc:	025b      	lsls	r3, r3, #9
 8001cbe:	0019      	movs	r1, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	601a      	str	r2, [r3, #0]

	//Speed (baudrate)
	pSPIhandle->pSPI->SPI_CR1 |= (pSPIhandle->SPI_Config.SPI_Speed<<SPI_CR1_BR);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	795b      	ldrb	r3, [r3, #5]
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	0019      	movs	r1, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	601a      	str	r2, [r3, #0]

	/*CR2. Not reset the whole CR2 to 0 as its bits can be modified from other parts of the code (enable interrupts)*/
	//Size --> this is in CR2!! First reset the data size (bits8-11) and then set it
	pSPIhandle->pSPI->SPI_CR2 &= (~(15<<SPI_CR2_DS)); //I had put pSPIhandle->pSPI->SPI_CR2 &= (~(7<<SPI_CR2_DS)). Why 7?
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4911      	ldr	r1, [pc, #68]	; (8001d30 <SPI_Init+0x148>)
 8001cea:	400a      	ands	r2, r1
 8001cec:	605a      	str	r2, [r3, #4]
	pSPIhandle->pSPI->SPI_CR2 |= (pSPIhandle->SPI_Config.SPI_DataSize <<SPI_CR2_DS);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	79db      	ldrb	r3, [r3, #7]
 8001cf8:	021b      	lsls	r3, r3, #8
 8001cfa:	0019      	movs	r1, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	430a      	orrs	r2, r1
 8001d02:	605a      	str	r2, [r3, #4]

	//to avoid data packing, set FIFO threshold reception to 1/4 (8-bit). Read data packing section
	if (pSPIhandle->SPI_Config.SPI_DataSize == SPI_8BIT){
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	79db      	ldrb	r3, [r3, #7]
 8001d08:	2b07      	cmp	r3, #7
 8001d0a:	d108      	bne.n	8001d1e <SPI_Init+0x136>
		pSPIhandle->pSPI->SPI_CR2 |= (1<<SPI_CR2_FRXTH);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2180      	movs	r1, #128	; 0x80
 8001d18:	0149      	lsls	r1, r1, #5
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	605a      	str	r2, [r3, #4]
	}
}
 8001d1e:	46c0      	nop			; (mov r8, r8)
 8001d20:	46bd      	mov	sp, r7
 8001d22:	b002      	add	sp, #8
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	ffff7fff 	.word	0xffff7fff
 8001d2c:	ffffbfff 	.word	0xffffbfff
 8001d30:	fffff0ff 	.word	0xfffff0ff

08001d34 <SPI_EnableDisable>:

/*SPI control: enable/disable --> bit 6 CR1 */
void SPI_EnableDisable(SPI_Handle_t *pSPIhandle, uint8_t EnableDisable){
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	000a      	movs	r2, r1
 8001d3e:	1cfb      	adds	r3, r7, #3
 8001d40:	701a      	strb	r2, [r3, #0]
	//instead of reset and set bit 6, I prefer to directly set the value
	if (EnableDisable == ENABLE){
 8001d42:	1cfb      	adds	r3, r7, #3
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d108      	bne.n	8001d5c <SPI_EnableDisable+0x28>
		pSPIhandle->pSPI->SPI_CR1 |= (1<<SPI_CR1_SPE);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2140      	movs	r1, #64	; 0x40
 8001d56:	430a      	orrs	r2, r1
 8001d58:	601a      	str	r2, [r3, #0]
	}
	else { //0
		pSPIhandle->pSPI->SPI_CR1 &= (~(1<<SPI_CR1_SPE));
	}
}
 8001d5a:	e007      	b.n	8001d6c <SPI_EnableDisable+0x38>
		pSPIhandle->pSPI->SPI_CR1 &= (~(1<<SPI_CR1_SPE));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2140      	movs	r1, #64	; 0x40
 8001d68:	438a      	bics	r2, r1
 8001d6a:	601a      	str	r2, [r3, #0]
}
 8001d6c:	46c0      	nop			; (mov r8, r8)
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	b002      	add	sp, #8
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <SPI_SSOE>:
		pSPIhandle->pSPI->SPI_CR1 &= (~(1<<SPI_CR1_SSI));
	}
}

/*SSOE: SS output enable*/
void SPI_SSOE(SPI_Handle_t *pSPIhandle, uint8_t EnableDisable){
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	000a      	movs	r2, r1
 8001d7e:	1cfb      	adds	r3, r7, #3
 8001d80:	701a      	strb	r2, [r3, #0]
	if (EnableDisable == ENABLE){
 8001d82:	1cfb      	adds	r3, r7, #3
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d108      	bne.n	8001d9c <SPI_SSOE+0x28>
		pSPIhandle->pSPI->SPI_CR2 |= (1<<SPI_CR2_SSOE);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2104      	movs	r1, #4
 8001d96:	430a      	orrs	r2, r1
 8001d98:	605a      	str	r2, [r3, #4]
	}
	else { //0
		pSPIhandle->pSPI->SPI_CR2 &= (~(1<<SPI_CR2_SSOE));
	}
}
 8001d9a:	e007      	b.n	8001dac <SPI_SSOE+0x38>
		pSPIhandle->pSPI->SPI_CR2 &= (~(1<<SPI_CR2_SSOE));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2104      	movs	r1, #4
 8001da8:	438a      	bics	r2, r1
 8001daa:	605a      	str	r2, [r3, #4]
}
 8001dac:	46c0      	nop			; (mov r8, r8)
 8001dae:	46bd      	mov	sp, r7
 8001db0:	b002      	add	sp, #8
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <SPI_IRQ_EnableDisable>:

}


/*IRQ Configuration and ISR handling*/
void SPI_IRQ_EnableDisable(uint8_t IRQ_Number, uint8_t EnableDisable){
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	0002      	movs	r2, r0
 8001dbc:	1dfb      	adds	r3, r7, #7
 8001dbe:	701a      	strb	r2, [r3, #0]
 8001dc0:	1dbb      	adds	r3, r7, #6
 8001dc2:	1c0a      	adds	r2, r1, #0
 8001dc4:	701a      	strb	r2, [r3, #0]
	if(EnableDisable == ENABLE){ //enable by means of ISER
 8001dc6:	1dbb      	adds	r3, r7, #6
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d10b      	bne.n	8001de6 <SPI_IRQ_EnableDisable+0x32>
		*NVIC_ISER |= ( 1 << IRQ_Number);
 8001dce:	4b0d      	ldr	r3, [pc, #52]	; (8001e04 <SPI_IRQ_EnableDisable+0x50>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	1dfb      	adds	r3, r7, #7
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	4099      	lsls	r1, r3
 8001dda:	000b      	movs	r3, r1
 8001ddc:	0019      	movs	r1, r3
 8001dde:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <SPI_IRQ_EnableDisable+0x50>)
 8001de0:	430a      	orrs	r2, r1
 8001de2:	601a      	str	r2, [r3, #0]
	}
	else { //disable by means of ICER
		*NVIC_ICER |= ( 1 << IRQ_Number);
	}
}
 8001de4:	e00a      	b.n	8001dfc <SPI_IRQ_EnableDisable+0x48>
		*NVIC_ICER |= ( 1 << IRQ_Number);
 8001de6:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <SPI_IRQ_EnableDisable+0x54>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	1dfb      	adds	r3, r7, #7
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2101      	movs	r1, #1
 8001df0:	4099      	lsls	r1, r3
 8001df2:	000b      	movs	r3, r1
 8001df4:	0019      	movs	r1, r3
 8001df6:	4b04      	ldr	r3, [pc, #16]	; (8001e08 <SPI_IRQ_EnableDisable+0x54>)
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	601a      	str	r2, [r3, #0]
}
 8001dfc:	46c0      	nop			; (mov r8, r8)
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	b002      	add	sp, #8
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	e000e100 	.word	0xe000e100
 8001e08:	e000e180 	.word	0xe000e180

08001e0c <SPI_IRQ_Handling>:
	uint32_t tempIPR = ((*(NVIC_IPR_BASE + numberIPR))&~(0xFF<<blockIPR));
	tempIPR |= (IRQ_Priority<<(8*blockIPR+6)); //6 is because bits 0-5 are not editable, only bits 6-7 count.
	*(NVIC_IPR_BASE + numberIPR) = tempIPR;
}

void SPI_IRQ_Handling(SPI_Handle_t *pSPIhandle){
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
	//to handle the possible interrupts related to SPI:TXE,RXNE,MODF,OVR,FRE,CRCERR
	//Call the handler related to the interrupt if register is true as long as it is enabled
	//TXE TX empty (enable control:TXEIE).if set, TX buffer empty so it can be loaded.
	if ( (pSPIhandle->pSPI->SPI_CR2 & (1<<SPI_CR2_TXEIE)) && (pSPIhandle->pSPI->SPI_SR & (1<<SPI_SR_TXE)) ){ //could use SPI_GetFlagStatus
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2280      	movs	r2, #128	; 0x80
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	d009      	beq.n	8001e34 <SPI_IRQ_Handling+0x28>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	2202      	movs	r2, #2
 8001e28:	4013      	ands	r3, r2
 8001e2a:	d003      	beq.n	8001e34 <SPI_IRQ_Handling+0x28>
		SPI_TXE_handler(pSPIhandle);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	0018      	movs	r0, r3
 8001e30:	f000 f824 	bl	8001e7c <SPI_TXE_handler>
	}

	//RXNE RX not empty (enable control:RXNEIE). if set, RX not empty so it has data to be read.
	if ( (pSPIhandle->pSPI->SPI_CR2 & (1<<SPI_CR2_RXNEIE)) && (pSPIhandle->pSPI->SPI_SR & (1<<SPI_SR_RXNE)) ){ //could use SPI_GetFlagStatus
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2240      	movs	r2, #64	; 0x40
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d009      	beq.n	8001e54 <SPI_IRQ_Handling+0x48>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	2201      	movs	r2, #1
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d003      	beq.n	8001e54 <SPI_IRQ_Handling+0x48>
		SPI_RXNE_handler(pSPIhandle);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	0018      	movs	r0, r3
 8001e50:	f000 f85d 	bl	8001f0e <SPI_RXNE_handler>
	MODF bit is set when the SS pin goes high during transmission.*/
	//To be implemented if someday I use multimaster

	/*OVR. Overrun. (enable control:ERRIE)occurs when data is received by a master or slave and the RXFIFO has not enough space to store
	 this received data.*/
	if ( (pSPIhandle->pSPI->SPI_CR2 & (1<<SPI_CR2_ERRIE)) && (pSPIhandle->pSPI->SPI_SR & (1<<SPI_SR_OVR)) ){ //could use SPI_GetFlagStatus
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2220      	movs	r2, #32
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d009      	beq.n	8001e74 <SPI_IRQ_Handling+0x68>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	2240      	movs	r2, #64	; 0x40
 8001e68:	4013      	ands	r3, r2
 8001e6a:	d003      	beq.n	8001e74 <SPI_IRQ_Handling+0x68>
		SPI_OVR_handler(pSPIhandle);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	0018      	movs	r0, r3
 8001e70:	f000 f898 	bl	8001fa4 <SPI_OVR_handler>
	//FRE. TI frame format error.
	//To be implemented when I use TI mode (it seems that TI and Motorola modes are related to SSPFSSOUT output, which many devices don't use).

	//CRCERR
	//To be implemented
}
 8001e74:	46c0      	nop			; (mov r8, r8)
 8001e76:	46bd      	mov	sp, r7
 8001e78:	b002      	add	sp, #8
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <SPI_TXE_handler>:

/*interrupt handlers*/
static void SPI_TXE_handler(SPI_Handle_t *pSPIhandle){
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
	/*When transmission is enabled, a sequence begins and continues while any data is present in the TXFIFO of the master.*/
	//Let's limit it to 8 and 16 bits frame. Every char is 1 byte
	//Load the data into DR, move the pointer (buffer) and decrease length
	if (pSPIhandle->SPI_Config.SPI_DataSize == SPI_8BIT){
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	79db      	ldrb	r3, [r3, #7]
 8001e88:	2b07      	cmp	r3, #7
 8001e8a:	d111      	bne.n	8001eb0 <SPI_TXE_handler+0x34>
		/*this sends 2 bytes <--pSPIhandle->pSPI->SPI_DR = *(pSPIhandle->SPI_Comm.TX_buffer);*/
		//data packing happens. it transmits 16-bit unless we cast into uint8_t
		*((uint8_t*)&pSPIhandle->pSPI->SPI_DR) = *(pSPIhandle->SPI_Comm.TX_buffer);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	691a      	ldr	r2, [r3, #16]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	330c      	adds	r3, #12
 8001e96:	7812      	ldrb	r2, [r2, #0]
 8001e98:	701a      	strb	r2, [r3, #0]
		pSPIhandle->SPI_Comm.TX_buffer++;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	1c5a      	adds	r2, r3, #1
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	611a      	str	r2, [r3, #16]
		pSPIhandle->SPI_Comm.TX_length--;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	1e5a      	subs	r2, r3, #1
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	e013      	b.n	8001ed8 <SPI_TXE_handler+0x5c>
	}
	else if (pSPIhandle->SPI_Config.SPI_DataSize == SPI_16BIT){
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	79db      	ldrb	r3, [r3, #7]
 8001eb4:	2b0f      	cmp	r3, #15
 8001eb6:	d10f      	bne.n	8001ed8 <SPI_TXE_handler+0x5c>
		//TX_buffer is defined as 8-bit.additional treatment is necessary
		pSPIhandle->pSPI->SPI_DR = *((uint16_t*)(pSPIhandle->SPI_Comm.TX_buffer));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	881a      	ldrh	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	60da      	str	r2, [r3, #12]
		pSPIhandle->SPI_Comm.TX_buffer+=2;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	1c9a      	adds	r2, r3, #2
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	611a      	str	r2, [r3, #16]
		pSPIhandle->SPI_Comm.TX_length-=2;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	1e9a      	subs	r2, r3, #2
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	60da      	str	r2, [r3, #12]
	}
	//(I don't use else because DS allows more lengths)

	//Close transmission when no more bytes in the buffer
	if (pSPIhandle->SPI_Comm.TX_length == 0){
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d112      	bne.n	8001f06 <SPI_TXE_handler+0x8a>
		pSPIhandle->pSPI->SPI_CR2 &= (~( 1 << SPI_CR2_TXEIE)); //disable the TX interrupt.It will be enabled by SPI_Send in the next sending
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2180      	movs	r1, #128	; 0x80
 8001eec:	438a      	bics	r2, r1
 8001eee:	605a      	str	r2, [r3, #4]
		pSPIhandle->SPI_Comm.TX_buffer = NULL; //null pointer
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	611a      	str	r2, [r3, #16]
		pSPIhandle->SPI_Comm.TX_state = SPI_READY; //important for loops in main!
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	751a      	strb	r2, [r3, #20]
		SPI_App_Callback(pSPIhandle,SPI_TX_FINISHED); //Inform the main application
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2101      	movs	r1, #1
 8001f00:	0018      	movs	r0, r3
 8001f02:	f000 f8a8 	bl	8002056 <SPI_App_Callback>
	}
}
 8001f06:	46c0      	nop			; (mov r8, r8)
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	b002      	add	sp, #8
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <SPI_RXNE_handler>:

static void SPI_RXNE_handler(SPI_Handle_t *pSPIhandle){
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
	//Let's limit it to 8 and 16 bits frame. Every char is 1 byte
	//Load the data into DR, move the pointer (buffer) and decrease length
	if (pSPIhandle->SPI_Config.SPI_DataSize == SPI_8BIT){
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	79db      	ldrb	r3, [r3, #7]
 8001f1a:	2b07      	cmp	r3, #7
 8001f1c:	d111      	bne.n	8001f42 <SPI_RXNE_handler+0x34>
		*(pSPIhandle->SPI_Comm.RX_buffer) = ((uint8_t)pSPIhandle->pSPI->SPI_DR) ;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68da      	ldr	r2, [r3, #12]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	69db      	ldr	r3, [r3, #28]
 8001f28:	b2d2      	uxtb	r2, r2
 8001f2a:	701a      	strb	r2, [r3, #0]
		pSPIhandle->SPI_Comm.RX_buffer++;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	1c5a      	adds	r2, r3, #1
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	61da      	str	r2, [r3, #28]
		pSPIhandle->SPI_Comm.RX_length--;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	1e5a      	subs	r2, r3, #1
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	619a      	str	r2, [r3, #24]
 8001f40:	e014      	b.n	8001f6c <SPI_RXNE_handler+0x5e>
	}
	else if (pSPIhandle->SPI_Config.SPI_DataSize == SPI_16BIT){
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	79db      	ldrb	r3, [r3, #7]
 8001f46:	2b0f      	cmp	r3, #15
 8001f48:	d110      	bne.n	8001f6c <SPI_RXNE_handler+0x5e>
		//RX_buffer is defined as 8-bit.additional treatment is necessary
		*((uint16_t*)pSPIhandle->SPI_Comm.RX_buffer) = ((uint16_t)pSPIhandle->pSPI->SPI_DR) ;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68da      	ldr	r2, [r3, #12]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	b292      	uxth	r2, r2
 8001f56:	801a      	strh	r2, [r3, #0]
		pSPIhandle->SPI_Comm.RX_buffer+=2;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	69db      	ldr	r3, [r3, #28]
 8001f5c:	1c9a      	adds	r2, r3, #2
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	61da      	str	r2, [r3, #28]
		pSPIhandle->SPI_Comm.RX_length-=2;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	1e9a      	subs	r2, r3, #2
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	619a      	str	r2, [r3, #24]
	}
	//(I don't use else because DS allows more lengths)

	//Close reception when no more bytes in the buffer
	if (pSPIhandle->SPI_Comm.RX_length == 0){
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d113      	bne.n	8001f9c <SPI_RXNE_handler+0x8e>
		pSPIhandle->pSPI->SPI_CR2 &= (~( 1 << SPI_CR2_RXNEIE)); //disable the RX interrupt.It will be enabled by SPI_Receive in the next sending
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2140      	movs	r1, #64	; 0x40
 8001f80:	438a      	bics	r2, r1
 8001f82:	605a      	str	r2, [r3, #4]
		pSPIhandle->SPI_Comm.RX_buffer = NULL; //null pointer
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	61da      	str	r2, [r3, #28]
		pSPIhandle->SPI_Comm.RX_state = SPI_READY; //important for loops in main!
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	2100      	movs	r1, #0
 8001f90:	5499      	strb	r1, [r3, r2]
		SPI_App_Callback(pSPIhandle,SPI_RX_FINISHED); //Inform the main application
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2102      	movs	r1, #2
 8001f96:	0018      	movs	r0, r3
 8001f98:	f000 f85d 	bl	8002056 <SPI_App_Callback>
	}
}
 8001f9c:	46c0      	nop			; (mov r8, r8)
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	b002      	add	sp, #8
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <SPI_OVR_handler>:

static void SPI_OVR_handler(SPI_Handle_t *pSPIhandle){
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
	//Clearing OVR bit is done by a read access to the SPI_DR register followed by a read access to the SPI_SR register
	//if the error happens during transmission,as this error is related to RXFIFO,we won't clear it here. If so, the app will do it
	if (pSPIhandle->SPI_Comm.TX_state != SPI_DURING_TX){ //clear
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	7d1b      	ldrb	r3, [r3, #20]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d007      	beq.n	8001fc4 <SPI_OVR_handler+0x20>
		uint32_t reading; //maybe with uint8_t enough to read DR and SR?
		reading = pSPIhandle->pSPI->SPI_DR;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	60fb      	str	r3, [r7, #12]
		reading = pSPIhandle->pSPI->SPI_SR;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	60fb      	str	r3, [r7, #12]
	}
	//inform the main application
	SPI_App_Callback(pSPIhandle,SPI_OVR_EVENT);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2103      	movs	r1, #3
 8001fc8:	0018      	movs	r0, r3
 8001fca:	f000 f844 	bl	8002056 <SPI_App_Callback>
}
 8001fce:	46c0      	nop			; (mov r8, r8)
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	b004      	add	sp, #16
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <SPI_Send>:

/*Send or read data (through interrupts, not polling). Master always starts communication */
void SPI_Send(SPI_Handle_t *pSPIhandle, uint8_t *pTXbuffer, uint32_t length){
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b084      	sub	sp, #16
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	60f8      	str	r0, [r7, #12]
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	607a      	str	r2, [r7, #4]
	//set TX state as busy (SPI_DURING_TX) and configure the transmission
	if (pSPIhandle->SPI_Comm.TX_state != SPI_DURING_TX){
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	7d1b      	ldrb	r3, [r3, #20]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d010      	beq.n	800200c <SPI_Send+0x36>
		pSPIhandle->SPI_Comm.TX_state = SPI_DURING_TX;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2201      	movs	r2, #1
 8001fee:	751a      	strb	r2, [r3, #20]
		pSPIhandle->SPI_Comm.TX_buffer = pTXbuffer; //SPI TX buffer pointing to app's TX buffer
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	611a      	str	r2, [r3, #16]
		pSPIhandle->SPI_Comm.TX_length = length;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	60da      	str	r2, [r3, #12]
		pSPIhandle->pSPI->SPI_CR2 |= (1 << SPI_CR2_TXEIE);//enable the TX interrupt to start transmission
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2180      	movs	r1, #128	; 0x80
 8002008:	430a      	orrs	r2, r1
 800200a:	605a      	str	r2, [r3, #4]
	}
}
 800200c:	46c0      	nop			; (mov r8, r8)
 800200e:	46bd      	mov	sp, r7
 8002010:	b004      	add	sp, #16
 8002012:	bd80      	pop	{r7, pc}

08002014 <SPI_Read>:
void SPI_Read(SPI_Handle_t *pSPIhandle, volatile uint8_t *pRXbuffer, uint32_t length){
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
	//set RX state as busy (SPI_DURING_RX) and configure the reading process (DR fetches from RX buffer).
	if (pSPIhandle->SPI_Comm.RX_state != SPI_DURING_RX){
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2220      	movs	r2, #32
 8002024:	5c9b      	ldrb	r3, [r3, r2]
 8002026:	2b02      	cmp	r3, #2
 8002028:	d011      	beq.n	800204e <SPI_Read+0x3a>
		pSPIhandle->SPI_Comm.RX_state = SPI_DURING_RX;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2220      	movs	r2, #32
 800202e:	2102      	movs	r1, #2
 8002030:	5499      	strb	r1, [r3, r2]
		pSPIhandle->SPI_Comm.RX_buffer = pRXbuffer; //SPI RX buffer pointing to app's RX buffer
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	68ba      	ldr	r2, [r7, #8]
 8002036:	61da      	str	r2, [r3, #28]
		pSPIhandle->SPI_Comm.RX_length = length;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	619a      	str	r2, [r3, #24]
		pSPIhandle->pSPI->SPI_CR2 |= (1 << SPI_CR2_RXNEIE);//enable the RX interrupt to start reception
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2140      	movs	r1, #64	; 0x40
 800204a:	430a      	orrs	r2, r1
 800204c:	605a      	str	r2, [r3, #4]
	}
}
 800204e:	46c0      	nop			; (mov r8, r8)
 8002050:	46bd      	mov	sp, r7
 8002052:	b004      	add	sp, #16
 8002054:	bd80      	pop	{r7, pc}

08002056 <SPI_App_Callback>:

/*Callback to application */
__attribute__((weak)) void SPI_App_Callback(SPI_Handle_t *pSPIhandle,uint8_t Event){
 8002056:	b580      	push	{r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
 800205e:	000a      	movs	r2, r1
 8002060:	1cfb      	adds	r3, r7, #3
 8002062:	701a      	strb	r2, [r3, #0]
	//This function will be implemented in every particular application. Thus, the weak attribute
}
 8002064:	46c0      	nop			; (mov r8, r8)
 8002066:	46bd      	mov	sp, r7
 8002068:	b002      	add	sp, #8
 800206a:	bd80      	pop	{r7, pc}

0800206c <__libc_init_array>:
 800206c:	b570      	push	{r4, r5, r6, lr}
 800206e:	2600      	movs	r6, #0
 8002070:	4d0c      	ldr	r5, [pc, #48]	; (80020a4 <__libc_init_array+0x38>)
 8002072:	4c0d      	ldr	r4, [pc, #52]	; (80020a8 <__libc_init_array+0x3c>)
 8002074:	1b64      	subs	r4, r4, r5
 8002076:	10a4      	asrs	r4, r4, #2
 8002078:	42a6      	cmp	r6, r4
 800207a:	d109      	bne.n	8002090 <__libc_init_array+0x24>
 800207c:	2600      	movs	r6, #0
 800207e:	f000 f85d 	bl	800213c <_init>
 8002082:	4d0a      	ldr	r5, [pc, #40]	; (80020ac <__libc_init_array+0x40>)
 8002084:	4c0a      	ldr	r4, [pc, #40]	; (80020b0 <__libc_init_array+0x44>)
 8002086:	1b64      	subs	r4, r4, r5
 8002088:	10a4      	asrs	r4, r4, #2
 800208a:	42a6      	cmp	r6, r4
 800208c:	d105      	bne.n	800209a <__libc_init_array+0x2e>
 800208e:	bd70      	pop	{r4, r5, r6, pc}
 8002090:	00b3      	lsls	r3, r6, #2
 8002092:	58eb      	ldr	r3, [r5, r3]
 8002094:	4798      	blx	r3
 8002096:	3601      	adds	r6, #1
 8002098:	e7ee      	b.n	8002078 <__libc_init_array+0xc>
 800209a:	00b3      	lsls	r3, r6, #2
 800209c:	58eb      	ldr	r3, [r5, r3]
 800209e:	4798      	blx	r3
 80020a0:	3601      	adds	r6, #1
 80020a2:	e7f2      	b.n	800208a <__libc_init_array+0x1e>
 80020a4:	080021a0 	.word	0x080021a0
 80020a8:	080021a0 	.word	0x080021a0
 80020ac:	080021a0 	.word	0x080021a0
 80020b0:	080021a4 	.word	0x080021a4

080020b4 <memset>:
 80020b4:	0003      	movs	r3, r0
 80020b6:	1882      	adds	r2, r0, r2
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d100      	bne.n	80020be <memset+0xa>
 80020bc:	4770      	bx	lr
 80020be:	7019      	strb	r1, [r3, #0]
 80020c0:	3301      	adds	r3, #1
 80020c2:	e7f9      	b.n	80020b8 <memset+0x4>

080020c4 <strlcpy>:
 80020c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020c6:	0005      	movs	r5, r0
 80020c8:	2a00      	cmp	r2, #0
 80020ca:	d014      	beq.n	80020f6 <strlcpy+0x32>
 80020cc:	1e50      	subs	r0, r2, #1
 80020ce:	2a01      	cmp	r2, #1
 80020d0:	d01c      	beq.n	800210c <strlcpy+0x48>
 80020d2:	002c      	movs	r4, r5
 80020d4:	000a      	movs	r2, r1
 80020d6:	0016      	movs	r6, r2
 80020d8:	0027      	movs	r7, r4
 80020da:	7836      	ldrb	r6, [r6, #0]
 80020dc:	3201      	adds	r2, #1
 80020de:	3401      	adds	r4, #1
 80020e0:	0013      	movs	r3, r2
 80020e2:	0025      	movs	r5, r4
 80020e4:	703e      	strb	r6, [r7, #0]
 80020e6:	2e00      	cmp	r6, #0
 80020e8:	d00d      	beq.n	8002106 <strlcpy+0x42>
 80020ea:	3801      	subs	r0, #1
 80020ec:	2800      	cmp	r0, #0
 80020ee:	d1f2      	bne.n	80020d6 <strlcpy+0x12>
 80020f0:	2200      	movs	r2, #0
 80020f2:	702a      	strb	r2, [r5, #0]
 80020f4:	e000      	b.n	80020f8 <strlcpy+0x34>
 80020f6:	000b      	movs	r3, r1
 80020f8:	001a      	movs	r2, r3
 80020fa:	3201      	adds	r2, #1
 80020fc:	1e50      	subs	r0, r2, #1
 80020fe:	7800      	ldrb	r0, [r0, #0]
 8002100:	0013      	movs	r3, r2
 8002102:	2800      	cmp	r0, #0
 8002104:	d1f9      	bne.n	80020fa <strlcpy+0x36>
 8002106:	1a58      	subs	r0, r3, r1
 8002108:	3801      	subs	r0, #1
 800210a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800210c:	000b      	movs	r3, r1
 800210e:	e7ef      	b.n	80020f0 <strlcpy+0x2c>

08002110 <strncat>:
 8002110:	0003      	movs	r3, r0
 8002112:	b510      	push	{r4, lr}
 8002114:	781c      	ldrb	r4, [r3, #0]
 8002116:	2c00      	cmp	r4, #0
 8002118:	d107      	bne.n	800212a <strncat+0x1a>
 800211a:	3a01      	subs	r2, #1
 800211c:	1c54      	adds	r4, r2, #1
 800211e:	d003      	beq.n	8002128 <strncat+0x18>
 8002120:	780c      	ldrb	r4, [r1, #0]
 8002122:	701c      	strb	r4, [r3, #0]
 8002124:	2c00      	cmp	r4, #0
 8002126:	d102      	bne.n	800212e <strncat+0x1e>
 8002128:	bd10      	pop	{r4, pc}
 800212a:	3301      	adds	r3, #1
 800212c:	e7f2      	b.n	8002114 <strncat+0x4>
 800212e:	2a00      	cmp	r2, #0
 8002130:	d100      	bne.n	8002134 <strncat+0x24>
 8002132:	705a      	strb	r2, [r3, #1]
 8002134:	3301      	adds	r3, #1
 8002136:	3101      	adds	r1, #1
 8002138:	e7ef      	b.n	800211a <strncat+0xa>
	...

0800213c <_init>:
 800213c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800213e:	46c0      	nop			; (mov r8, r8)
 8002140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002142:	bc08      	pop	{r3}
 8002144:	469e      	mov	lr, r3
 8002146:	4770      	bx	lr

08002148 <_fini>:
 8002148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800214a:	46c0      	nop			; (mov r8, r8)
 800214c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800214e:	bc08      	pop	{r3}
 8002150:	469e      	mov	lr, r3
 8002152:	4770      	bx	lr
