
Train.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000159c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800165c  0800165c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800165c  0800165c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800165c  0800165c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800165c  0800165c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800165c  0800165c  0001165c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001660  08001660  00011660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001664  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000004  08001668  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08001668  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001d82  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000649  00000000  00000000  00021dae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000248  00000000  00000000  000223f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000200  00000000  00000000  00022640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000163a  00000000  00000000  00022840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000224f  00000000  00000000  00023e7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000a0af  00000000  00000000  000260c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00030178  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000778  00000000  00000000  000301c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001644 	.word	0x08001644

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08001644 	.word	0x08001644

08000108 <delay>:
	}
	return length;
}

void delay(void)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	b082      	sub	sp, #8
 800010c:	af00      	add	r7, sp, #0
	// some delay for the debouncing of the buttons
	for(uint32_t i = 0 ; i < 1000000/2 ; i ++);//300000/2 working in old PC. in new PC, so far 1000000/2 mostly
 800010e:	2300      	movs	r3, #0
 8000110:	607b      	str	r3, [r7, #4]
 8000112:	e002      	b.n	800011a <delay+0x12>
 8000114:	687b      	ldr	r3, [r7, #4]
 8000116:	3301      	adds	r3, #1
 8000118:	607b      	str	r3, [r7, #4]
 800011a:	687b      	ldr	r3, [r7, #4]
 800011c:	4a03      	ldr	r2, [pc, #12]	; (800012c <delay+0x24>)
 800011e:	4293      	cmp	r3, r2
 8000120:	d9f8      	bls.n	8000114 <delay+0xc>
}
 8000122:	46c0      	nop			; (mov r8, r8)
 8000124:	46c0      	nop			; (mov r8, r8)
 8000126:	46bd      	mov	sp, r7
 8000128:	b002      	add	sp, #8
 800012a:	bd80      	pop	{r7, pc}
 800012c:	0007a11f 	.word	0x0007a11f

08000130 <main>:
//configure ADS1115 registers
void configureADS1115(I2C_Handle_t *pI2Chandle);

/**********************************************START MAIN********************************************************************/
int main(void)
{
 8000130:	b580      	push	{r7, lr}
 8000132:	af00      	add	r7, sp, #0
	//initialise_monitor_handles(); //for debugging in IDE
	//printf("THIS STARTS\n");


	//initialize structures to 0 to avoid garbage values
	memset(&buttons,0,sizeof(buttons));
 8000134:	4b23      	ldr	r3, [pc, #140]	; (80001c4 <main+0x94>)
 8000136:	220c      	movs	r2, #12
 8000138:	2100      	movs	r1, #0
 800013a:	0018      	movs	r0, r3
 800013c:	f001 fa7a 	bl	8001634 <memset>
	memset(&leds,0,sizeof(leds));
 8000140:	4b21      	ldr	r3, [pc, #132]	; (80001c8 <main+0x98>)
 8000142:	220c      	movs	r2, #12
 8000144:	2100      	movs	r1, #0
 8000146:	0018      	movs	r0, r3
 8000148:	f001 fa74 	bl	8001634 <memset>

	/*GPIOs for the SPI handled by spiGPIO -->SPI1 PA4:NSS PA4:SCK PA4:MISO PA4:MOSI. sp1 is the handle for SPI1*/
	memset(&spiGPIOs,0,sizeof(spiGPIOs));
 800014c:	4b1f      	ldr	r3, [pc, #124]	; (80001cc <main+0x9c>)
 800014e:	220c      	movs	r2, #12
 8000150:	2100      	movs	r1, #0
 8000152:	0018      	movs	r0, r3
 8000154:	f001 fa6e 	bl	8001634 <memset>
	memset(&spi1,0,sizeof(spi1));
 8000158:	4b1d      	ldr	r3, [pc, #116]	; (80001d0 <main+0xa0>)
 800015a:	2224      	movs	r2, #36	; 0x24
 800015c:	2100      	movs	r1, #0
 800015e:	0018      	movs	r0, r3
 8000160:	f001 fa68 	bl	8001634 <memset>

	/*GPIOs for the I2C handled by i2cGPIOs. i2c1 is the handle for I2C1*/
	memset(&i2cGPIOs,0,sizeof(i2cGPIOs));
 8000164:	4b1b      	ldr	r3, [pc, #108]	; (80001d4 <main+0xa4>)
 8000166:	220c      	movs	r2, #12
 8000168:	2100      	movs	r1, #0
 800016a:	0018      	movs	r0, r3
 800016c:	f001 fa62 	bl	8001634 <memset>
	memset(&i2c1,0,sizeof(i2c1));
 8000170:	4b19      	ldr	r3, [pc, #100]	; (80001d8 <main+0xa8>)
 8000172:	2224      	movs	r2, #36	; 0x24
 8000174:	2100      	movs	r1, #0
 8000176:	0018      	movs	r0, r3
 8000178:	f001 fa5c 	bl	8001634 <memset>

	//Configurations and initilizations
	peripheral_Config_Ini();
 800017c:	f000 f918 	bl	80003b0 <peripheral_Config_Ini>

	/*configure interrupts (without priorities atm)*/
	//Button OnOff (GPIOB0)
	GPIO_IRQ_EnableDisable(IRQ_EXTI2_3, ENABLE);
 8000180:	2101      	movs	r1, #1
 8000182:	2006      	movs	r0, #6
 8000184:	f000 fce2 	bl	8000b4c <GPIO_IRQ_EnableDisable>
	//Button Emergency (GPIOB2)
	GPIO_IRQ_EnableDisable(IRQ_EXTI4_15, ENABLE);
 8000188:	2101      	movs	r1, #1
 800018a:	2007      	movs	r0, #7
 800018c:	f000 fcde 	bl	8000b4c <GPIO_IRQ_EnableDisable>
	//SPI1
	SPI_IRQ_EnableDisable(IRQ_SPI1, ENABLE);
 8000190:	2101      	movs	r1, #1
 8000192:	2019      	movs	r0, #25
 8000194:	f001 f90e 	bl	80013b4 <SPI_IRQ_EnableDisable>
	//I2C1
	I2C_IRQ_EnableDisable(IRQ_I2C1, ENABLE);
 8000198:	2101      	movs	r1, #1
 800019a:	2017      	movs	r0, #23
 800019c:	f000 fda2 	bl	8000ce4 <I2C_IRQ_EnableDisable>
				//error. print it in semihosting
				break;

			}
		}*/
		if (restart){
 80001a0:	4b0e      	ldr	r3, [pc, #56]	; (80001dc <main+0xac>)
 80001a2:	781b      	ldrb	r3, [r3, #0]
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d0fb      	beq.n	80001a0 <main+0x70>
			restart = 0;
 80001a8:	4b0c      	ldr	r3, [pc, #48]	; (80001dc <main+0xac>)
 80001aa:	2200      	movs	r2, #0
 80001ac:	701a      	strb	r2, [r3, #0]
			configureADS1115(&i2c1);
 80001ae:	4b0a      	ldr	r3, [pc, #40]	; (80001d8 <main+0xa8>)
 80001b0:	0018      	movs	r0, r3
 80001b2:	f000 fa0f 	bl	80005d4 <configureADS1115>
			I2C_Master_Receiver(&i2c1, ADS1115_CONVERSION_REGISTER_BYTES, 1);//1st byte read(MSB of Conversion register)+2nd byte read(LSB)
 80001b6:	4b08      	ldr	r3, [pc, #32]	; (80001d8 <main+0xa8>)
 80001b8:	2201      	movs	r2, #1
 80001ba:	2102      	movs	r1, #2
 80001bc:	0018      	movs	r0, r3
 80001be:	f000 feae 	bl	8000f1e <I2C_Master_Receiver>
		if (restart){
 80001c2:	e7ed      	b.n	80001a0 <main+0x70>
 80001c4:	20000020 	.word	0x20000020
 80001c8:	2000002c 	.word	0x2000002c
 80001cc:	20000038 	.word	0x20000038
 80001d0:	20000050 	.word	0x20000050
 80001d4:	20000044 	.word	0x20000044
 80001d8:	20000074 	.word	0x20000074
 80001dc:	20000000 	.word	0x20000000

080001e0 <EXTI2_3_IRQHandler>:
	}
}
/**********************************************END MAIN********************************************************************/

/***********************************************ISR handlers****************************************************************/
void EXTI2_3_IRQHandler(void){ //when button on-off
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
	delay();
 80001e4:	f7ff ff90 	bl	8000108 <delay>
	GPIO_IRQ_Handling(PIN_BUTTON_OFFON);
 80001e8:	2003      	movs	r0, #3
 80001ea:	f000 fcdb 	bl	8000ba4 <GPIO_IRQ_Handling>
	if (currentState == OFF){
 80001ee:	4b26      	ldr	r3, [pc, #152]	; (8000288 <EXTI2_3_IRQHandler+0xa8>)
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d122      	bne.n	800023c <EXTI2_3_IRQHandler+0x5c>
		currentState = ON;
 80001f6:	4b24      	ldr	r3, [pc, #144]	; (8000288 <EXTI2_3_IRQHandler+0xa8>)
 80001f8:	2201      	movs	r2, #1
 80001fa:	701a      	strb	r2, [r3, #0]
		stateChanged = 1;
 80001fc:	4b23      	ldr	r3, [pc, #140]	; (800028c <EXTI2_3_IRQHandler+0xac>)
 80001fe:	2201      	movs	r2, #1
 8000200:	701a      	strb	r2, [r3, #0]
		GPIO_WritePin(GPIOA,PIN_LED0,0);
 8000202:	2390      	movs	r3, #144	; 0x90
 8000204:	05db      	lsls	r3, r3, #23
 8000206:	2200      	movs	r2, #0
 8000208:	2100      	movs	r1, #0
 800020a:	0018      	movs	r0, r3
 800020c:	f000 fc74 	bl	8000af8 <GPIO_WritePin>
		GPIO_WritePin(GPIOA,PIN_LED1,1);
 8000210:	2390      	movs	r3, #144	; 0x90
 8000212:	05db      	lsls	r3, r3, #23
 8000214:	2201      	movs	r2, #1
 8000216:	2101      	movs	r1, #1
 8000218:	0018      	movs	r0, r3
 800021a:	f000 fc6d 	bl	8000af8 <GPIO_WritePin>
		GPIO_WritePin(GPIOA,PIN_LED2,1);
 800021e:	2390      	movs	r3, #144	; 0x90
 8000220:	05db      	lsls	r3, r3, #23
 8000222:	2201      	movs	r2, #1
 8000224:	2109      	movs	r1, #9
 8000226:	0018      	movs	r0, r3
 8000228:	f000 fc66 	bl	8000af8 <GPIO_WritePin>
		GPIO_WritePin(GPIOA,PIN_LED3,0);
 800022c:	2390      	movs	r3, #144	; 0x90
 800022e:	05db      	lsls	r3, r3, #23
 8000230:	2200      	movs	r2, #0
 8000232:	210a      	movs	r1, #10
 8000234:	0018      	movs	r0, r3
 8000236:	f000 fc5f 	bl	8000af8 <GPIO_WritePin>
		GPIO_WritePin(GPIOA,PIN_LED1,0);
		GPIO_WritePin(GPIOA,PIN_LED2,0);
		GPIO_WritePin(GPIOA,PIN_LED3,0);
	}
	//printf("%d\n",currentState);
}
 800023a:	e021      	b.n	8000280 <EXTI2_3_IRQHandler+0xa0>
		currentState = OFF;
 800023c:	4b12      	ldr	r3, [pc, #72]	; (8000288 <EXTI2_3_IRQHandler+0xa8>)
 800023e:	2200      	movs	r2, #0
 8000240:	701a      	strb	r2, [r3, #0]
		stateChanged = 1;
 8000242:	4b12      	ldr	r3, [pc, #72]	; (800028c <EXTI2_3_IRQHandler+0xac>)
 8000244:	2201      	movs	r2, #1
 8000246:	701a      	strb	r2, [r3, #0]
		GPIO_WritePin(GPIOA,PIN_LED0,0);
 8000248:	2390      	movs	r3, #144	; 0x90
 800024a:	05db      	lsls	r3, r3, #23
 800024c:	2200      	movs	r2, #0
 800024e:	2100      	movs	r1, #0
 8000250:	0018      	movs	r0, r3
 8000252:	f000 fc51 	bl	8000af8 <GPIO_WritePin>
		GPIO_WritePin(GPIOA,PIN_LED1,0);
 8000256:	2390      	movs	r3, #144	; 0x90
 8000258:	05db      	lsls	r3, r3, #23
 800025a:	2200      	movs	r2, #0
 800025c:	2101      	movs	r1, #1
 800025e:	0018      	movs	r0, r3
 8000260:	f000 fc4a 	bl	8000af8 <GPIO_WritePin>
		GPIO_WritePin(GPIOA,PIN_LED2,0);
 8000264:	2390      	movs	r3, #144	; 0x90
 8000266:	05db      	lsls	r3, r3, #23
 8000268:	2200      	movs	r2, #0
 800026a:	2109      	movs	r1, #9
 800026c:	0018      	movs	r0, r3
 800026e:	f000 fc43 	bl	8000af8 <GPIO_WritePin>
		GPIO_WritePin(GPIOA,PIN_LED3,0);
 8000272:	2390      	movs	r3, #144	; 0x90
 8000274:	05db      	lsls	r3, r3, #23
 8000276:	2200      	movs	r2, #0
 8000278:	210a      	movs	r1, #10
 800027a:	0018      	movs	r0, r3
 800027c:	f000 fc3c 	bl	8000af8 <GPIO_WritePin>
}
 8000280:	46c0      	nop			; (mov r8, r8)
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	46c0      	nop			; (mov r8, r8)
 8000288:	20000098 	.word	0x20000098
 800028c:	20000099 	.word	0x20000099

08000290 <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler(void){
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	delay();
 8000294:	f7ff ff38 	bl	8000108 <delay>
	GPIO_IRQ_Handling(PIN_BUTTON_EMERGENCY);
 8000298:	2005      	movs	r0, #5
 800029a:	f000 fc83 	bl	8000ba4 <GPIO_IRQ_Handling>
	if (currentState != EMERGENCY){
 800029e:	4b14      	ldr	r3, [pc, #80]	; (80002f0 <EXTI4_15_IRQHandler+0x60>)
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	2b02      	cmp	r3, #2
 80002a4:	d002      	beq.n	80002ac <EXTI4_15_IRQHandler+0x1c>
		stateChanged = 1;
 80002a6:	4b13      	ldr	r3, [pc, #76]	; (80002f4 <EXTI4_15_IRQHandler+0x64>)
 80002a8:	2201      	movs	r2, #1
 80002aa:	701a      	strb	r2, [r3, #0]
	}
	currentState = EMERGENCY;
 80002ac:	4b10      	ldr	r3, [pc, #64]	; (80002f0 <EXTI4_15_IRQHandler+0x60>)
 80002ae:	2202      	movs	r2, #2
 80002b0:	701a      	strb	r2, [r3, #0]
	//printf("%d\n",currentState);
	GPIO_WritePin(GPIOA,PIN_LED0,1);
 80002b2:	2390      	movs	r3, #144	; 0x90
 80002b4:	05db      	lsls	r3, r3, #23
 80002b6:	2201      	movs	r2, #1
 80002b8:	2100      	movs	r1, #0
 80002ba:	0018      	movs	r0, r3
 80002bc:	f000 fc1c 	bl	8000af8 <GPIO_WritePin>
	GPIO_WritePin(GPIOA,PIN_LED1,1);
 80002c0:	2390      	movs	r3, #144	; 0x90
 80002c2:	05db      	lsls	r3, r3, #23
 80002c4:	2201      	movs	r2, #1
 80002c6:	2101      	movs	r1, #1
 80002c8:	0018      	movs	r0, r3
 80002ca:	f000 fc15 	bl	8000af8 <GPIO_WritePin>
	GPIO_WritePin(GPIOA,PIN_LED2,1);
 80002ce:	2390      	movs	r3, #144	; 0x90
 80002d0:	05db      	lsls	r3, r3, #23
 80002d2:	2201      	movs	r2, #1
 80002d4:	2109      	movs	r1, #9
 80002d6:	0018      	movs	r0, r3
 80002d8:	f000 fc0e 	bl	8000af8 <GPIO_WritePin>
	GPIO_WritePin(GPIOA,PIN_LED3,1);
 80002dc:	2390      	movs	r3, #144	; 0x90
 80002de:	05db      	lsls	r3, r3, #23
 80002e0:	2201      	movs	r2, #1
 80002e2:	210a      	movs	r1, #10
 80002e4:	0018      	movs	r0, r3
 80002e6:	f000 fc07 	bl	8000af8 <GPIO_WritePin>

}
 80002ea:	46c0      	nop			; (mov r8, r8)
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000098 	.word	0x20000098
 80002f4:	20000099 	.word	0x20000099

080002f8 <SPI1_IRQHandler>:

//SPI IRQ handler for SPI1. declared in startup_stm32f091rctx.s
void SPI1_IRQHandler(void){
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
	SPI_IRQ_Handling(&spi1);
 80002fc:	4b03      	ldr	r3, [pc, #12]	; (800030c <SPI1_IRQHandler+0x14>)
 80002fe:	0018      	movs	r0, r3
 8000300:	f001 f884 	bl	800140c <SPI_IRQ_Handling>
}
 8000304:	46c0      	nop			; (mov r8, r8)
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	46c0      	nop			; (mov r8, r8)
 800030c:	20000050 	.word	0x20000050

08000310 <I2C1_IRQHandler>:
	//NOT NECESSARY SO FAR BECAUSE I'M USING if WITH RX/TX STATE == READY (it's volatile)
}*/

//I2C
//I2C1 IRQ handler, from startup_stm32f091rctx.s
void I2C1_IRQHandler(void){
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	I2C_IRQ_Handling(&i2c1);
 8000314:	4b03      	ldr	r3, [pc, #12]	; (8000324 <I2C1_IRQHandler+0x14>)
 8000316:	0018      	movs	r0, r3
 8000318:	f000 fd10 	bl	8000d3c <I2C_IRQ_Handling>
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	46c0      	nop			; (mov r8, r8)
 8000324:	20000074 	.word	0x20000074

08000328 <I2C_App_Callback>:
//callback
void I2C_App_Callback(I2C_Handle_t *pI2Chandle,uint8_t Event){
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
 8000330:	000a      	movs	r2, r1
 8000332:	1cfb      	adds	r3, r7, #3
 8000334:	701a      	strb	r2, [r3, #0]
	if (Event == I2C_NEW_READING){ //new value from the external ADC (temperature sensor)
 8000336:	1cfb      	adds	r3, r7, #3
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	2b04      	cmp	r3, #4
 800033c:	d10f      	bne.n	800035e <I2C_App_Callback+0x36>
		byteRead = *(pI2Chandle->I2C_Comm_t.RX_buffer);
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	699b      	ldr	r3, [r3, #24]
 8000342:	781a      	ldrb	r2, [r3, #0]
 8000344:	4b15      	ldr	r3, [pc, #84]	; (800039c <I2C_App_Callback+0x74>)
 8000346:	701a      	strb	r2, [r3, #0]
		if (!boolFirstByteRead){
 8000348:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <I2C_App_Callback+0x78>)
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	2b00      	cmp	r3, #0
 800034e:	d106      	bne.n	800035e <I2C_App_Callback+0x36>
			boolFirstByteRead = 1; //first byte read from ADS1115 (MSB)
 8000350:	4b13      	ldr	r3, [pc, #76]	; (80003a0 <I2C_App_Callback+0x78>)
 8000352:	2201      	movs	r2, #1
 8000354:	701a      	strb	r2, [r3, #0]
			firstByteRead = byteRead;
 8000356:	4b11      	ldr	r3, [pc, #68]	; (800039c <I2C_App_Callback+0x74>)
 8000358:	781a      	ldrb	r2, [r3, #0]
 800035a:	4b12      	ldr	r3, [pc, #72]	; (80003a4 <I2C_App_Callback+0x7c>)
 800035c:	701a      	strb	r2, [r3, #0]
		}
	}
	if (Event == I2C_RESTART_STOP || Event == I2C_FINISHED){
 800035e:	1cfb      	adds	r3, r7, #3
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	2b04      	cmp	r3, #4
 8000364:	d003      	beq.n	800036e <I2C_App_Callback+0x46>
 8000366:	1cfb      	adds	r3, r7, #3
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	2b02      	cmp	r3, #2
 800036c:	d111      	bne.n	8000392 <I2C_App_Callback+0x6a>
		restart = 1;
 800036e:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <I2C_App_Callback+0x80>)
 8000370:	2201      	movs	r2, #1
 8000372:	701a      	strb	r2, [r3, #0]
		lastADS1115_raw = (firstByteRead<<8)|byteRead; //byteRead is LSB and firstByteRead is MSB
 8000374:	4b0b      	ldr	r3, [pc, #44]	; (80003a4 <I2C_App_Callback+0x7c>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	021b      	lsls	r3, r3, #8
 800037a:	b21a      	sxth	r2, r3
 800037c:	4b07      	ldr	r3, [pc, #28]	; (800039c <I2C_App_Callback+0x74>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	b21b      	sxth	r3, r3
 8000382:	4313      	orrs	r3, r2
 8000384:	b21b      	sxth	r3, r3
 8000386:	b29a      	uxth	r2, r3
 8000388:	4b08      	ldr	r3, [pc, #32]	; (80003ac <I2C_App_Callback+0x84>)
 800038a:	801a      	strh	r2, [r3, #0]
		boolFirstByteRead = 0; //because next reading will be the first byte to be read from ADS1115
 800038c:	4b04      	ldr	r3, [pc, #16]	; (80003a0 <I2C_App_Callback+0x78>)
 800038e:	2200      	movs	r2, #0
 8000390:	701a      	strb	r2, [r3, #0]
	}

}
 8000392:	46c0      	nop			; (mov r8, r8)
 8000394:	46bd      	mov	sp, r7
 8000396:	b002      	add	sp, #8
 8000398:	bd80      	pop	{r7, pc}
 800039a:	46c0      	nop			; (mov r8, r8)
 800039c:	2000009a 	.word	0x2000009a
 80003a0:	2000009c 	.word	0x2000009c
 80003a4:	2000009b 	.word	0x2000009b
 80003a8:	20000000 	.word	0x20000000
 80003ac:	2000009e 	.word	0x2000009e

080003b0 <peripheral_Config_Ini>:
/**********************************************END IRQ********************************************************************/

/*****************************Configurations and initializations************************************************************/
void peripheral_Config_Ini(void){
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0

	/**********************LEDS***********************************************/
	//LED0. PA0
	leds.pGPIO = GPIOA;
 80003b4:	4b7d      	ldr	r3, [pc, #500]	; (80005ac <peripheral_Config_Ini+0x1fc>)
 80003b6:	2290      	movs	r2, #144	; 0x90
 80003b8:	05d2      	lsls	r2, r2, #23
 80003ba:	601a      	str	r2, [r3, #0]
	leds.GPIO_PinConfig.GPIO_PinNumber = PIN_LED0;
 80003bc:	4b7b      	ldr	r3, [pc, #492]	; (80005ac <peripheral_Config_Ini+0x1fc>)
 80003be:	2200      	movs	r2, #0
 80003c0:	711a      	strb	r2, [r3, #4]
	leds.GPIO_PinConfig.GPIO_PinMode = GPIO_OUT;
 80003c2:	4b7a      	ldr	r3, [pc, #488]	; (80005ac <peripheral_Config_Ini+0x1fc>)
 80003c4:	2201      	movs	r2, #1
 80003c6:	715a      	strb	r2, [r3, #5]
	leds.GPIO_PinConfig.GPIO_PinOutType = GPIO_PUSHPULL;
 80003c8:	4b78      	ldr	r3, [pc, #480]	; (80005ac <peripheral_Config_Ini+0x1fc>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	719a      	strb	r2, [r3, #6]
	leds.GPIO_PinConfig.GPIO_PinOutSpeed = GPIO_SLOWSPEED; //GPIO_MEDIUMSPEED
 80003ce:	4b77      	ldr	r3, [pc, #476]	; (80005ac <peripheral_Config_Ini+0x1fc>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	71da      	strb	r2, [r3, #7]
	leds.GPIO_PinConfig.GPIO_PinPullUpDown = GPIO_NOPULL;
 80003d4:	4b75      	ldr	r3, [pc, #468]	; (80005ac <peripheral_Config_Ini+0x1fc>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	721a      	strb	r2, [r3, #8]
	//Initialization LED0
	GPIO_PinInit(&leds);
 80003da:	4b74      	ldr	r3, [pc, #464]	; (80005ac <peripheral_Config_Ini+0x1fc>)
 80003dc:	0018      	movs	r0, r3
 80003de:	f000 f9fd 	bl	80007dc <GPIO_PinInit>

	//LED1.PA1.Port,Mode,OutType,OutSpeed and PullUpDown same as LED0
	leds.GPIO_PinConfig.GPIO_PinNumber = PIN_LED1;
 80003e2:	4b72      	ldr	r3, [pc, #456]	; (80005ac <peripheral_Config_Ini+0x1fc>)
 80003e4:	2201      	movs	r2, #1
 80003e6:	711a      	strb	r2, [r3, #4]
	//Initialization LED1
	GPIO_PinInit(&leds);
 80003e8:	4b70      	ldr	r3, [pc, #448]	; (80005ac <peripheral_Config_Ini+0x1fc>)
 80003ea:	0018      	movs	r0, r3
 80003ec:	f000 f9f6 	bl	80007dc <GPIO_PinInit>

	//LED2.PA9.Port,Mode,OutType,OutSpeed and PullUpDown same as LED0
	leds.GPIO_PinConfig.GPIO_PinNumber = PIN_LED2;
 80003f0:	4b6e      	ldr	r3, [pc, #440]	; (80005ac <peripheral_Config_Ini+0x1fc>)
 80003f2:	2209      	movs	r2, #9
 80003f4:	711a      	strb	r2, [r3, #4]
	//Initialization LED2
	GPIO_PinInit(&leds);
 80003f6:	4b6d      	ldr	r3, [pc, #436]	; (80005ac <peripheral_Config_Ini+0x1fc>)
 80003f8:	0018      	movs	r0, r3
 80003fa:	f000 f9ef 	bl	80007dc <GPIO_PinInit>

	//LED3.PA10.Port,Mode,OutType,OutSpeed and PullUpDown same as LED0
	leds.GPIO_PinConfig.GPIO_PinNumber = PIN_LED3;
 80003fe:	4b6b      	ldr	r3, [pc, #428]	; (80005ac <peripheral_Config_Ini+0x1fc>)
 8000400:	220a      	movs	r2, #10
 8000402:	711a      	strb	r2, [r3, #4]
	//Initialization LED3
	GPIO_PinInit(&leds);
 8000404:	4b69      	ldr	r3, [pc, #420]	; (80005ac <peripheral_Config_Ini+0x1fc>)
 8000406:	0018      	movs	r0, r3
 8000408:	f000 f9e8 	bl	80007dc <GPIO_PinInit>

	//LEDs OFF
	GPIO_WritePin(GPIOA,PIN_LED0,1);
 800040c:	2390      	movs	r3, #144	; 0x90
 800040e:	05db      	lsls	r3, r3, #23
 8000410:	2201      	movs	r2, #1
 8000412:	2100      	movs	r1, #0
 8000414:	0018      	movs	r0, r3
 8000416:	f000 fb6f 	bl	8000af8 <GPIO_WritePin>
	GPIO_WritePin(GPIOA,PIN_LED1,0);
 800041a:	2390      	movs	r3, #144	; 0x90
 800041c:	05db      	lsls	r3, r3, #23
 800041e:	2200      	movs	r2, #0
 8000420:	2101      	movs	r1, #1
 8000422:	0018      	movs	r0, r3
 8000424:	f000 fb68 	bl	8000af8 <GPIO_WritePin>
	GPIO_WritePin(GPIOA,PIN_LED2,0);
 8000428:	2390      	movs	r3, #144	; 0x90
 800042a:	05db      	lsls	r3, r3, #23
 800042c:	2200      	movs	r2, #0
 800042e:	2109      	movs	r1, #9
 8000430:	0018      	movs	r0, r3
 8000432:	f000 fb61 	bl	8000af8 <GPIO_WritePin>
	GPIO_WritePin(GPIOA,PIN_LED3,1);
 8000436:	2390      	movs	r3, #144	; 0x90
 8000438:	05db      	lsls	r3, r3, #23
 800043a:	2201      	movs	r2, #1
 800043c:	210a      	movs	r1, #10
 800043e:	0018      	movs	r0, r3
 8000440:	f000 fb5a 	bl	8000af8 <GPIO_WritePin>

	/***************************************BUTTONS********************************/
	//BUTTON ON-OFF. PB3
	buttons.pGPIO = GPIOB;
 8000444:	4b5a      	ldr	r3, [pc, #360]	; (80005b0 <peripheral_Config_Ini+0x200>)
 8000446:	4a5b      	ldr	r2, [pc, #364]	; (80005b4 <peripheral_Config_Ini+0x204>)
 8000448:	601a      	str	r2, [r3, #0]
	buttons.GPIO_PinConfig.GPIO_PinNumber = PIN_BUTTON_OFFON;
 800044a:	4b59      	ldr	r3, [pc, #356]	; (80005b0 <peripheral_Config_Ini+0x200>)
 800044c:	2203      	movs	r2, #3
 800044e:	711a      	strb	r2, [r3, #4]
	buttons.GPIO_PinConfig.GPIO_PinMode = GPIO_FALL_TRIG; //interrupt falling edge
 8000450:	4b57      	ldr	r3, [pc, #348]	; (80005b0 <peripheral_Config_Ini+0x200>)
 8000452:	2204      	movs	r2, #4
 8000454:	715a      	strb	r2, [r3, #5]
	buttons.GPIO_PinConfig.GPIO_PinPullUpDown = GPIO_PULLUP; //pull up (3.3 by default)
 8000456:	4b56      	ldr	r3, [pc, #344]	; (80005b0 <peripheral_Config_Ini+0x200>)
 8000458:	2201      	movs	r2, #1
 800045a:	721a      	strb	r2, [r3, #8]
	//initialization button on-off
	GPIO_PinInit(&buttons);
 800045c:	4b54      	ldr	r3, [pc, #336]	; (80005b0 <peripheral_Config_Ini+0x200>)
 800045e:	0018      	movs	r0, r3
 8000460:	f000 f9bc 	bl	80007dc <GPIO_PinInit>

	//EMERGENCY BUTTON. PB5
	buttons.pGPIO = GPIOB;
 8000464:	4b52      	ldr	r3, [pc, #328]	; (80005b0 <peripheral_Config_Ini+0x200>)
 8000466:	4a53      	ldr	r2, [pc, #332]	; (80005b4 <peripheral_Config_Ini+0x204>)
 8000468:	601a      	str	r2, [r3, #0]
	buttons.GPIO_PinConfig.GPIO_PinNumber = PIN_BUTTON_EMERGENCY;
 800046a:	4b51      	ldr	r3, [pc, #324]	; (80005b0 <peripheral_Config_Ini+0x200>)
 800046c:	2205      	movs	r2, #5
 800046e:	711a      	strb	r2, [r3, #4]
	buttons.GPIO_PinConfig.GPIO_PinMode = GPIO_FALL_TRIG;
 8000470:	4b4f      	ldr	r3, [pc, #316]	; (80005b0 <peripheral_Config_Ini+0x200>)
 8000472:	2204      	movs	r2, #4
 8000474:	715a      	strb	r2, [r3, #5]
	buttons.GPIO_PinConfig.GPIO_PinPullUpDown = GPIO_PULLUP;
 8000476:	4b4e      	ldr	r3, [pc, #312]	; (80005b0 <peripheral_Config_Ini+0x200>)
 8000478:	2201      	movs	r2, #1
 800047a:	721a      	strb	r2, [r3, #8]
	//initialization emergency button
	GPIO_PinInit(&buttons);
 800047c:	4b4c      	ldr	r3, [pc, #304]	; (80005b0 <peripheral_Config_Ini+0x200>)
 800047e:	0018      	movs	r0, r3
 8000480:	f000 f9ac 	bl	80007dc <GPIO_PinInit>

	/**************************************SPI***********************************/
	//GPIOs for SPI: SPI1 PA4:NSS PA5:SCK PA6:MISO PA7:MOSI. Alternate function AF0
	spiGPIOs.pGPIO = GPIOA;
 8000484:	4b4c      	ldr	r3, [pc, #304]	; (80005b8 <peripheral_Config_Ini+0x208>)
 8000486:	2290      	movs	r2, #144	; 0x90
 8000488:	05d2      	lsls	r2, r2, #23
 800048a:	601a      	str	r2, [r3, #0]
	spiGPIOs.GPIO_PinConfig.GPIO_PinMode = GPIO_ALTFUN;
 800048c:	4b4a      	ldr	r3, [pc, #296]	; (80005b8 <peripheral_Config_Ini+0x208>)
 800048e:	2202      	movs	r2, #2
 8000490:	715a      	strb	r2, [r3, #5]
	spiGPIOs.GPIO_PinConfig.GPIO_PinAlterFunc = GPIO_AF0;
 8000492:	4b49      	ldr	r3, [pc, #292]	; (80005b8 <peripheral_Config_Ini+0x208>)
 8000494:	2200      	movs	r2, #0
 8000496:	725a      	strb	r2, [r3, #9]
	spiGPIOs.GPIO_PinConfig.GPIO_PinOutType = GPIO_PUSHPULL;
 8000498:	4b47      	ldr	r3, [pc, #284]	; (80005b8 <peripheral_Config_Ini+0x208>)
 800049a:	2200      	movs	r2, #0
 800049c:	719a      	strb	r2, [r3, #6]
	spiGPIOs.GPIO_PinConfig.GPIO_PinOutSpeed = GPIO_HIGHSPEED; //FAST SPEED
 800049e:	4b46      	ldr	r3, [pc, #280]	; (80005b8 <peripheral_Config_Ini+0x208>)
 80004a0:	2203      	movs	r2, #3
 80004a2:	71da      	strb	r2, [r3, #7]
	spiGPIOs.GPIO_PinConfig.GPIO_PinPullUpDown = GPIO_NOPULL;
 80004a4:	4b44      	ldr	r3, [pc, #272]	; (80005b8 <peripheral_Config_Ini+0x208>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	721a      	strb	r2, [r3, #8]
	//SCK
	spiGPIOs.GPIO_PinConfig.GPIO_PinNumber = PIN_SPI1_SCK;//SCK
 80004aa:	4b43      	ldr	r3, [pc, #268]	; (80005b8 <peripheral_Config_Ini+0x208>)
 80004ac:	2205      	movs	r2, #5
 80004ae:	711a      	strb	r2, [r3, #4]
	GPIO_PinInit(&spiGPIOs);
 80004b0:	4b41      	ldr	r3, [pc, #260]	; (80005b8 <peripheral_Config_Ini+0x208>)
 80004b2:	0018      	movs	r0, r3
 80004b4:	f000 f992 	bl	80007dc <GPIO_PinInit>

	spiGPIOs.GPIO_PinConfig.GPIO_PinPullUpDown = GPIO_PULLUP;
 80004b8:	4b3f      	ldr	r3, [pc, #252]	; (80005b8 <peripheral_Config_Ini+0x208>)
 80004ba:	2201      	movs	r2, #1
 80004bc:	721a      	strb	r2, [r3, #8]
	//NSS
	spiGPIOs.GPIO_PinConfig.GPIO_PinNumber = PIN_SPI1_NSS;//NSS
 80004be:	4b3e      	ldr	r3, [pc, #248]	; (80005b8 <peripheral_Config_Ini+0x208>)
 80004c0:	2204      	movs	r2, #4
 80004c2:	711a      	strb	r2, [r3, #4]
	GPIO_PinInit(&spiGPIOs);
 80004c4:	4b3c      	ldr	r3, [pc, #240]	; (80005b8 <peripheral_Config_Ini+0x208>)
 80004c6:	0018      	movs	r0, r3
 80004c8:	f000 f988 	bl	80007dc <GPIO_PinInit>
	//MISO
	spiGPIOs.GPIO_PinConfig.GPIO_PinNumber = PIN_SPI1_MISO;//MISO
 80004cc:	4b3a      	ldr	r3, [pc, #232]	; (80005b8 <peripheral_Config_Ini+0x208>)
 80004ce:	2206      	movs	r2, #6
 80004d0:	711a      	strb	r2, [r3, #4]
	GPIO_PinInit(&spiGPIOs);
 80004d2:	4b39      	ldr	r3, [pc, #228]	; (80005b8 <peripheral_Config_Ini+0x208>)
 80004d4:	0018      	movs	r0, r3
 80004d6:	f000 f981 	bl	80007dc <GPIO_PinInit>
	//MOSI
	spiGPIOs.GPIO_PinConfig.GPIO_PinNumber = PIN_SPI1_MOSI;//MOSI
 80004da:	4b37      	ldr	r3, [pc, #220]	; (80005b8 <peripheral_Config_Ini+0x208>)
 80004dc:	2207      	movs	r2, #7
 80004de:	711a      	strb	r2, [r3, #4]
	GPIO_PinInit(&spiGPIOs);
 80004e0:	4b35      	ldr	r3, [pc, #212]	; (80005b8 <peripheral_Config_Ini+0x208>)
 80004e2:	0018      	movs	r0, r3
 80004e4:	f000 f97a 	bl	80007dc <GPIO_PinInit>

	/*SPI handle configuration and initialization*/
	//SPI configuration
	spi1.pSPI = SPI1_I2S1;
 80004e8:	4b34      	ldr	r3, [pc, #208]	; (80005bc <peripheral_Config_Ini+0x20c>)
 80004ea:	4a35      	ldr	r2, [pc, #212]	; (80005c0 <peripheral_Config_Ini+0x210>)
 80004ec:	601a      	str	r2, [r3, #0]
	spi1.SPI_Config.SPI_Mode = SPI_MASTER;
 80004ee:	4b33      	ldr	r3, [pc, #204]	; (80005bc <peripheral_Config_Ini+0x20c>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	711a      	strb	r2, [r3, #4]
	spi1.SPI_Config.SPI_Speed = SPI_SPEED_2;
 80004f4:	4b31      	ldr	r3, [pc, #196]	; (80005bc <peripheral_Config_Ini+0x20c>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	715a      	strb	r2, [r3, #5]
	spi1.SPI_Config.SPI_CommType = SPI_FULLDUPLEX;
 80004fa:	4b30      	ldr	r3, [pc, #192]	; (80005bc <peripheral_Config_Ini+0x20c>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	719a      	strb	r2, [r3, #6]
	spi1.SPI_Config.SPI_DataSize = SPI_8BIT;
 8000500:	4b2e      	ldr	r3, [pc, #184]	; (80005bc <peripheral_Config_Ini+0x20c>)
 8000502:	2207      	movs	r2, #7
 8000504:	71da      	strb	r2, [r3, #7]
	spi1.SPI_Config.SPI_SWslave = SPI_HW_MGMT;
 8000506:	4b2d      	ldr	r3, [pc, #180]	; (80005bc <peripheral_Config_Ini+0x20c>)
 8000508:	2200      	movs	r2, #0
 800050a:	721a      	strb	r2, [r3, #8]
	spi1.SPI_Config.SPI_Pol = SPI_CLK_IDLE_0;
 800050c:	4b2b      	ldr	r3, [pc, #172]	; (80005bc <peripheral_Config_Ini+0x20c>)
 800050e:	2200      	movs	r2, #0
 8000510:	725a      	strb	r2, [r3, #9]
	spi1.SPI_Config.SPI_Phase = SPI_CLK_CAPT_FIRST;
 8000512:	4b2a      	ldr	r3, [pc, #168]	; (80005bc <peripheral_Config_Ini+0x20c>)
 8000514:	2200      	movs	r2, #0
 8000516:	729a      	strb	r2, [r3, #10]

	//SPI initialization
	SPI_Init(&spi1);
 8000518:	4b28      	ldr	r3, [pc, #160]	; (80005bc <peripheral_Config_Ini+0x20c>)
 800051a:	0018      	movs	r0, r3
 800051c:	f000 fe64 	bl	80011e8 <SPI_Init>

	//Set SSOE to 1 to make NSS output enable
	SPI_SSOE(&spi1,ENABLE);
 8000520:	4b26      	ldr	r3, [pc, #152]	; (80005bc <peripheral_Config_Ini+0x20c>)
 8000522:	2101      	movs	r1, #1
 8000524:	0018      	movs	r0, r3
 8000526:	f000 ff25 	bl	8001374 <SPI_SSOE>

	//Enable SPI peripheral
	SPI_EnableDisable(&spi1,ENABLE);
 800052a:	4b24      	ldr	r3, [pc, #144]	; (80005bc <peripheral_Config_Ini+0x20c>)
 800052c:	2101      	movs	r1, #1
 800052e:	0018      	movs	r0, r3
 8000530:	f000 ff00 	bl	8001334 <SPI_EnableDisable>

	/**********************************I2C*****************************************/
	//GPIOs for I2C: PB6(SCL), PB9(SDA).Alternate function AF1!
	i2cGPIOs.pGPIO = GPIOB;
 8000534:	4b23      	ldr	r3, [pc, #140]	; (80005c4 <peripheral_Config_Ini+0x214>)
 8000536:	4a1f      	ldr	r2, [pc, #124]	; (80005b4 <peripheral_Config_Ini+0x204>)
 8000538:	601a      	str	r2, [r3, #0]
	i2cGPIOs.GPIO_PinConfig.GPIO_PinMode = GPIO_ALTFUN;
 800053a:	4b22      	ldr	r3, [pc, #136]	; (80005c4 <peripheral_Config_Ini+0x214>)
 800053c:	2202      	movs	r2, #2
 800053e:	715a      	strb	r2, [r3, #5]
	i2cGPIOs.GPIO_PinConfig.GPIO_PinAlterFunc = GPIO_AF1;
 8000540:	4b20      	ldr	r3, [pc, #128]	; (80005c4 <peripheral_Config_Ini+0x214>)
 8000542:	2201      	movs	r2, #1
 8000544:	725a      	strb	r2, [r3, #9]
	i2cGPIOs.GPIO_PinConfig.GPIO_PinOutType = GPIO_PUSHPULL;
 8000546:	4b1f      	ldr	r3, [pc, #124]	; (80005c4 <peripheral_Config_Ini+0x214>)
 8000548:	2200      	movs	r2, #0
 800054a:	719a      	strb	r2, [r3, #6]
	i2cGPIOs.GPIO_PinConfig.GPIO_PinOutSpeed = GPIO_HIGHSPEED; //FAST SPEED
 800054c:	4b1d      	ldr	r3, [pc, #116]	; (80005c4 <peripheral_Config_Ini+0x214>)
 800054e:	2203      	movs	r2, #3
 8000550:	71da      	strb	r2, [r3, #7]
	i2cGPIOs.GPIO_PinConfig.GPIO_PinPullUpDown = GPIO_PULLUP; //internal pull up
 8000552:	4b1c      	ldr	r3, [pc, #112]	; (80005c4 <peripheral_Config_Ini+0x214>)
 8000554:	2201      	movs	r2, #1
 8000556:	721a      	strb	r2, [r3, #8]
	//SCL
	i2cGPIOs.GPIO_PinConfig.GPIO_PinNumber = PIN_I2C1_SCL;//SCL
 8000558:	4b1a      	ldr	r3, [pc, #104]	; (80005c4 <peripheral_Config_Ini+0x214>)
 800055a:	2206      	movs	r2, #6
 800055c:	711a      	strb	r2, [r3, #4]
	GPIO_PinInit(&i2cGPIOs);
 800055e:	4b19      	ldr	r3, [pc, #100]	; (80005c4 <peripheral_Config_Ini+0x214>)
 8000560:	0018      	movs	r0, r3
 8000562:	f000 f93b 	bl	80007dc <GPIO_PinInit>
	//SDA
	i2cGPIOs.GPIO_PinConfig.GPIO_PinNumber = PIN_I2C1_SDA;//SDA
 8000566:	4b17      	ldr	r3, [pc, #92]	; (80005c4 <peripheral_Config_Ini+0x214>)
 8000568:	2209      	movs	r2, #9
 800056a:	711a      	strb	r2, [r3, #4]
	GPIO_PinInit(&i2cGPIOs);
 800056c:	4b15      	ldr	r3, [pc, #84]	; (80005c4 <peripheral_Config_Ini+0x214>)
 800056e:	0018      	movs	r0, r3
 8000570:	f000 f934 	bl	80007dc <GPIO_PinInit>

	//I2C configuration
	i2c1.pI2C = I2C1;
 8000574:	4b14      	ldr	r3, [pc, #80]	; (80005c8 <peripheral_Config_Ini+0x218>)
 8000576:	4a15      	ldr	r2, [pc, #84]	; (80005cc <peripheral_Config_Ini+0x21c>)
 8000578:	601a      	str	r2, [r3, #0]
	i2c1.I2C_Config.I2C_Timing = 0x00201D2B;//standard 100KHz 8MHz analog filter on, rise time 100ns, fall time 10ns
 800057a:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <peripheral_Config_Ini+0x218>)
 800057c:	4a14      	ldr	r2, [pc, #80]	; (80005d0 <peripheral_Config_Ini+0x220>)
 800057e:	609a      	str	r2, [r3, #8]
	i2c1.I2C_Config.I2C_AddressMode = I2C_ADDRESS_MODE_7BIT;
 8000580:	4b11      	ldr	r3, [pc, #68]	; (80005c8 <peripheral_Config_Ini+0x218>)
 8000582:	2200      	movs	r2, #0
 8000584:	715a      	strb	r2, [r3, #5]
	i2c1.I2C_Comm_t.I2C_SlaveAddress = ADS1115_ADDRESS; //ADS1115 address
 8000586:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <peripheral_Config_Ini+0x218>)
 8000588:	2248      	movs	r2, #72	; 0x48
 800058a:	841a      	strh	r2, [r3, #32]
	i2c1.I2C_Comm_t.I2C_Nbytes = 1;
 800058c:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <peripheral_Config_Ini+0x218>)
 800058e:	2201      	movs	r2, #1
 8000590:	779a      	strb	r2, [r3, #30]
	i2c1.I2C_Comm_t.RX_length = 1;
 8000592:	4b0d      	ldr	r3, [pc, #52]	; (80005c8 <peripheral_Config_Ini+0x218>)
 8000594:	2201      	movs	r2, #1
 8000596:	615a      	str	r2, [r3, #20]
	i2c1.I2C_Comm_t.I2C_RepeatStart = 1;
 8000598:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <peripheral_Config_Ini+0x218>)
 800059a:	2201      	movs	r2, #1
 800059c:	775a      	strb	r2, [r3, #29]

	//I2C initialization
	I2C_Init(&i2c1);
 800059e:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <peripheral_Config_Ini+0x218>)
 80005a0:	0018      	movs	r0, r3
 80005a2:	f000 fb69 	bl	8000c78 <I2C_Init>

}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	2000002c 	.word	0x2000002c
 80005b0:	20000020 	.word	0x20000020
 80005b4:	48000400 	.word	0x48000400
 80005b8:	20000038 	.word	0x20000038
 80005bc:	20000050 	.word	0x20000050
 80005c0:	40013000 	.word	0x40013000
 80005c4:	20000044 	.word	0x20000044
 80005c8:	20000074 	.word	0x20000074
 80005cc:	40005400 	.word	0x40005400
 80005d0:	00201d2b 	.word	0x00201d2b

080005d4 <configureADS1115>:
/*********************************CONFIGURE ADS1115**********************************************/
void configureADS1115(I2C_Handle_t *pI2Chandle){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	//https://cdn-shop.adafruit.com/datasheets/ads1115.pdf
	//continuous mode
	//1-write to config reg. bit 8 mode(0:continuous;1:single-shot,default);bits 9-11:gain amplifier.bit 15 set to 1 starts single shot (in single-shot mode)
	//transmiter:address+0x01(points to config reg)+0b10000100(MSB:start shot+default gain+continuous)+0b10000011(LSB:default rate+no comparator)
	bytes_to_ADS1115_reg[0] = 0x01; //0x01(points to config reg)
 80005dc:	4b10      	ldr	r3, [pc, #64]	; (8000620 <configureADS1115+0x4c>)
 80005de:	2201      	movs	r2, #1
 80005e0:	701a      	strb	r2, [r3, #0]
	bytes_to_ADS1115_reg[1] = 0x84; //0b10000100 (MSB)
 80005e2:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <configureADS1115+0x4c>)
 80005e4:	2284      	movs	r2, #132	; 0x84
 80005e6:	705a      	strb	r2, [r3, #1]
	bytes_to_ADS1115_reg[2] = 0x83; //0b10000011 (LSB)
 80005e8:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <configureADS1115+0x4c>)
 80005ea:	2283      	movs	r2, #131	; 0x83
 80005ec:	709a      	strb	r2, [r3, #2]
	pI2Chandle->I2C_Comm_t.TX_buffer = bytes_to_ADS1115_reg; //buffer pointing to bytes_to_ADS1115_reg
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4a0b      	ldr	r2, [pc, #44]	; (8000620 <configureADS1115+0x4c>)
 80005f2:	611a      	str	r2, [r3, #16]
	I2C_Master_Transmitter(pI2Chandle, 3, 1);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2201      	movs	r2, #1
 80005f8:	2103      	movs	r1, #3
 80005fa:	0018      	movs	r0, r3
 80005fc:	f000 fc2b 	bl	8000e56 <I2C_Master_Transmitter>

	//2-select the conversion register by writing to pointer reg(0x00:conversion reg;0x01:config reg)
	//transmitter:address+0x00(points to conversion register)
	bytes_to_ADS1115_reg[0] = 0x00; //0x00(points to conversion register)
 8000600:	4b07      	ldr	r3, [pc, #28]	; (8000620 <configureADS1115+0x4c>)
 8000602:	2200      	movs	r2, #0
 8000604:	701a      	strb	r2, [r3, #0]
	pI2Chandle->I2C_Comm_t.TX_buffer = bytes_to_ADS1115_reg; //buffer pointing to bytes_to_ADS1115_reg
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4a05      	ldr	r2, [pc, #20]	; (8000620 <configureADS1115+0x4c>)
 800060a:	611a      	str	r2, [r3, #16]
	I2C_Master_Transmitter(pI2Chandle, 1, 1);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2201      	movs	r2, #1
 8000610:	2101      	movs	r1, #1
 8000612:	0018      	movs	r0, r3
 8000614:	f000 fc1f 	bl	8000e56 <I2C_Master_Transmitter>
}
 8000618:	46c0      	nop			; (mov r8, r8)
 800061a:	46bd      	mov	sp, r7
 800061c:	b002      	add	sp, #8
 800061e:	bd80      	pop	{r7, pc}
 8000620:	200000a0 	.word	0x200000a0

08000624 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000624:	480d      	ldr	r0, [pc, #52]	; (800065c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000626:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000628:	e000      	b.n	800062c <Reset_Handler+0x8>
 800062a:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800062c:	480c      	ldr	r0, [pc, #48]	; (8000660 <LoopForever+0x6>)
  ldr r1, =_edata
 800062e:	490d      	ldr	r1, [pc, #52]	; (8000664 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000630:	4a0d      	ldr	r2, [pc, #52]	; (8000668 <LoopForever+0xe>)
  movs r3, #0
 8000632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000634:	e002      	b.n	800063c <LoopCopyDataInit>

08000636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800063a:	3304      	adds	r3, #4

0800063c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800063c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800063e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000640:	d3f9      	bcc.n	8000636 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000642:	4a0a      	ldr	r2, [pc, #40]	; (800066c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000644:	4c0a      	ldr	r4, [pc, #40]	; (8000670 <LoopForever+0x16>)
  movs r3, #0
 8000646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000648:	e001      	b.n	800064e <LoopFillZerobss>

0800064a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800064a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800064c:	3204      	adds	r2, #4

0800064e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800064e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000650:	d3fb      	bcc.n	800064a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000652:	f000 ffcb 	bl	80015ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000656:	f7ff fd6b 	bl	8000130 <main>

0800065a <LoopForever>:

LoopForever:
    b LoopForever
 800065a:	e7fe      	b.n	800065a <LoopForever>
  ldr   r0, =_estack
 800065c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000664:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000668:	08001664 	.word	0x08001664
  ldr r2, =_sbss
 800066c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000670:	200000a4 	.word	0x200000a4

08000674 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000674:	e7fe      	b.n	8000674 <ADC_COMP_IRQHandler>
	...

08000678 <GPIO_ClockControl>:
 *      Author: danim
 */

#include "gpio.h"
/*********GPIO clock control***************/
void GPIO_ClockControl(GPIO_RegStruct_t *pGPIO, uint8_t EnableDisable){
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	000a      	movs	r2, r1
 8000682:	1cfb      	adds	r3, r7, #3
 8000684:	701a      	strb	r2, [r3, #0]

	if (EnableDisable == ENABLE) {
 8000686:	1cfb      	adds	r3, r7, #3
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b01      	cmp	r3, #1
 800068c:	d148      	bne.n	8000720 <GPIO_ClockControl+0xa8>
		if (pGPIO==GPIOA) { //I can't do switch-case with pointers! that's why I use if
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	2390      	movs	r3, #144	; 0x90
 8000692:	05db      	lsls	r3, r3, #23
 8000694:	429a      	cmp	r2, r3
 8000696:	d107      	bne.n	80006a8 <GPIO_ClockControl+0x30>
			GPIOA_EnableClock();
 8000698:	4b44      	ldr	r3, [pc, #272]	; (80007ac <GPIO_ClockControl+0x134>)
 800069a:	695a      	ldr	r2, [r3, #20]
 800069c:	4b43      	ldr	r3, [pc, #268]	; (80007ac <GPIO_ClockControl+0x134>)
 800069e:	2180      	movs	r1, #128	; 0x80
 80006a0:	0289      	lsls	r1, r1, #10
 80006a2:	430a      	orrs	r2, r1
 80006a4:	615a      	str	r2, [r3, #20]
		}
		else if (pGPIO==GPIOF){
			GPIOF_DisableClock();
		}
	}
}
 80006a6:	e07d      	b.n	80007a4 <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOB){
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4a41      	ldr	r2, [pc, #260]	; (80007b0 <GPIO_ClockControl+0x138>)
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d107      	bne.n	80006c0 <GPIO_ClockControl+0x48>
			GPIOB_EnableClock();
 80006b0:	4b3e      	ldr	r3, [pc, #248]	; (80007ac <GPIO_ClockControl+0x134>)
 80006b2:	695a      	ldr	r2, [r3, #20]
 80006b4:	4b3d      	ldr	r3, [pc, #244]	; (80007ac <GPIO_ClockControl+0x134>)
 80006b6:	2180      	movs	r1, #128	; 0x80
 80006b8:	02c9      	lsls	r1, r1, #11
 80006ba:	430a      	orrs	r2, r1
 80006bc:	615a      	str	r2, [r3, #20]
}
 80006be:	e071      	b.n	80007a4 <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOC){
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	4a3c      	ldr	r2, [pc, #240]	; (80007b4 <GPIO_ClockControl+0x13c>)
 80006c4:	4293      	cmp	r3, r2
 80006c6:	d107      	bne.n	80006d8 <GPIO_ClockControl+0x60>
			GPIOC_EnableClock();
 80006c8:	4b38      	ldr	r3, [pc, #224]	; (80007ac <GPIO_ClockControl+0x134>)
 80006ca:	695a      	ldr	r2, [r3, #20]
 80006cc:	4b37      	ldr	r3, [pc, #220]	; (80007ac <GPIO_ClockControl+0x134>)
 80006ce:	2180      	movs	r1, #128	; 0x80
 80006d0:	0309      	lsls	r1, r1, #12
 80006d2:	430a      	orrs	r2, r1
 80006d4:	615a      	str	r2, [r3, #20]
}
 80006d6:	e065      	b.n	80007a4 <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOD){
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4a37      	ldr	r2, [pc, #220]	; (80007b8 <GPIO_ClockControl+0x140>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d107      	bne.n	80006f0 <GPIO_ClockControl+0x78>
			GPIOD_EnableClock();
 80006e0:	4b32      	ldr	r3, [pc, #200]	; (80007ac <GPIO_ClockControl+0x134>)
 80006e2:	695a      	ldr	r2, [r3, #20]
 80006e4:	4b31      	ldr	r3, [pc, #196]	; (80007ac <GPIO_ClockControl+0x134>)
 80006e6:	2180      	movs	r1, #128	; 0x80
 80006e8:	0349      	lsls	r1, r1, #13
 80006ea:	430a      	orrs	r2, r1
 80006ec:	615a      	str	r2, [r3, #20]
}
 80006ee:	e059      	b.n	80007a4 <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOE){
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4a32      	ldr	r2, [pc, #200]	; (80007bc <GPIO_ClockControl+0x144>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d107      	bne.n	8000708 <GPIO_ClockControl+0x90>
			GPIOE_EnableClock();
 80006f8:	4b2c      	ldr	r3, [pc, #176]	; (80007ac <GPIO_ClockControl+0x134>)
 80006fa:	695a      	ldr	r2, [r3, #20]
 80006fc:	4b2b      	ldr	r3, [pc, #172]	; (80007ac <GPIO_ClockControl+0x134>)
 80006fe:	2180      	movs	r1, #128	; 0x80
 8000700:	0389      	lsls	r1, r1, #14
 8000702:	430a      	orrs	r2, r1
 8000704:	615a      	str	r2, [r3, #20]
}
 8000706:	e04d      	b.n	80007a4 <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOF){
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4a2d      	ldr	r2, [pc, #180]	; (80007c0 <GPIO_ClockControl+0x148>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d149      	bne.n	80007a4 <GPIO_ClockControl+0x12c>
			GPIOF_EnableClock();
 8000710:	4b26      	ldr	r3, [pc, #152]	; (80007ac <GPIO_ClockControl+0x134>)
 8000712:	695a      	ldr	r2, [r3, #20]
 8000714:	4b25      	ldr	r3, [pc, #148]	; (80007ac <GPIO_ClockControl+0x134>)
 8000716:	2180      	movs	r1, #128	; 0x80
 8000718:	03c9      	lsls	r1, r1, #15
 800071a:	430a      	orrs	r2, r1
 800071c:	615a      	str	r2, [r3, #20]
}
 800071e:	e041      	b.n	80007a4 <GPIO_ClockControl+0x12c>
		if (pGPIO==GPIOA) { //I can't do switch-case with pointers! that's why I use if
 8000720:	687a      	ldr	r2, [r7, #4]
 8000722:	2390      	movs	r3, #144	; 0x90
 8000724:	05db      	lsls	r3, r3, #23
 8000726:	429a      	cmp	r2, r3
 8000728:	d106      	bne.n	8000738 <GPIO_ClockControl+0xc0>
			GPIOA_DisableClock();
 800072a:	4b20      	ldr	r3, [pc, #128]	; (80007ac <GPIO_ClockControl+0x134>)
 800072c:	695a      	ldr	r2, [r3, #20]
 800072e:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <GPIO_ClockControl+0x134>)
 8000730:	4924      	ldr	r1, [pc, #144]	; (80007c4 <GPIO_ClockControl+0x14c>)
 8000732:	400a      	ands	r2, r1
 8000734:	615a      	str	r2, [r3, #20]
}
 8000736:	e035      	b.n	80007a4 <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOB){
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	4a1d      	ldr	r2, [pc, #116]	; (80007b0 <GPIO_ClockControl+0x138>)
 800073c:	4293      	cmp	r3, r2
 800073e:	d106      	bne.n	800074e <GPIO_ClockControl+0xd6>
			GPIOB_DisableClock();
 8000740:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <GPIO_ClockControl+0x134>)
 8000742:	695a      	ldr	r2, [r3, #20]
 8000744:	4b19      	ldr	r3, [pc, #100]	; (80007ac <GPIO_ClockControl+0x134>)
 8000746:	4920      	ldr	r1, [pc, #128]	; (80007c8 <GPIO_ClockControl+0x150>)
 8000748:	400a      	ands	r2, r1
 800074a:	615a      	str	r2, [r3, #20]
}
 800074c:	e02a      	b.n	80007a4 <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOC){
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4a18      	ldr	r2, [pc, #96]	; (80007b4 <GPIO_ClockControl+0x13c>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d106      	bne.n	8000764 <GPIO_ClockControl+0xec>
			GPIOC_DisableClock();
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <GPIO_ClockControl+0x134>)
 8000758:	695a      	ldr	r2, [r3, #20]
 800075a:	4b14      	ldr	r3, [pc, #80]	; (80007ac <GPIO_ClockControl+0x134>)
 800075c:	491b      	ldr	r1, [pc, #108]	; (80007cc <GPIO_ClockControl+0x154>)
 800075e:	400a      	ands	r2, r1
 8000760:	615a      	str	r2, [r3, #20]
}
 8000762:	e01f      	b.n	80007a4 <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOD){
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4a14      	ldr	r2, [pc, #80]	; (80007b8 <GPIO_ClockControl+0x140>)
 8000768:	4293      	cmp	r3, r2
 800076a:	d106      	bne.n	800077a <GPIO_ClockControl+0x102>
			GPIOD_DisableClock();
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <GPIO_ClockControl+0x134>)
 800076e:	695a      	ldr	r2, [r3, #20]
 8000770:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <GPIO_ClockControl+0x134>)
 8000772:	4917      	ldr	r1, [pc, #92]	; (80007d0 <GPIO_ClockControl+0x158>)
 8000774:	400a      	ands	r2, r1
 8000776:	615a      	str	r2, [r3, #20]
}
 8000778:	e014      	b.n	80007a4 <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOE){
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4a0f      	ldr	r2, [pc, #60]	; (80007bc <GPIO_ClockControl+0x144>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d106      	bne.n	8000790 <GPIO_ClockControl+0x118>
			GPIOE_DisableClock();
 8000782:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <GPIO_ClockControl+0x134>)
 8000784:	695a      	ldr	r2, [r3, #20]
 8000786:	4b09      	ldr	r3, [pc, #36]	; (80007ac <GPIO_ClockControl+0x134>)
 8000788:	4912      	ldr	r1, [pc, #72]	; (80007d4 <GPIO_ClockControl+0x15c>)
 800078a:	400a      	ands	r2, r1
 800078c:	615a      	str	r2, [r3, #20]
}
 800078e:	e009      	b.n	80007a4 <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOF){
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	4a0b      	ldr	r2, [pc, #44]	; (80007c0 <GPIO_ClockControl+0x148>)
 8000794:	4293      	cmp	r3, r2
 8000796:	d105      	bne.n	80007a4 <GPIO_ClockControl+0x12c>
			GPIOF_DisableClock();
 8000798:	4b04      	ldr	r3, [pc, #16]	; (80007ac <GPIO_ClockControl+0x134>)
 800079a:	695a      	ldr	r2, [r3, #20]
 800079c:	4b03      	ldr	r3, [pc, #12]	; (80007ac <GPIO_ClockControl+0x134>)
 800079e:	490e      	ldr	r1, [pc, #56]	; (80007d8 <GPIO_ClockControl+0x160>)
 80007a0:	400a      	ands	r2, r1
 80007a2:	615a      	str	r2, [r3, #20]
}
 80007a4:	46c0      	nop			; (mov r8, r8)
 80007a6:	46bd      	mov	sp, r7
 80007a8:	b002      	add	sp, #8
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40021000 	.word	0x40021000
 80007b0:	48000400 	.word	0x48000400
 80007b4:	48000800 	.word	0x48000800
 80007b8:	48000c00 	.word	0x48000c00
 80007bc:	48001000 	.word	0x48001000
 80007c0:	48001400 	.word	0x48001400
 80007c4:	fffdffff 	.word	0xfffdffff
 80007c8:	fffbffff 	.word	0xfffbffff
 80007cc:	fff7ffff 	.word	0xfff7ffff
 80007d0:	ffefffff 	.word	0xffefffff
 80007d4:	ffdfffff 	.word	0xffdfffff
 80007d8:	ffbfffff 	.word	0xffbfffff

080007dc <GPIO_PinInit>:
/*********GPIO pin initialization*************/
void GPIO_PinInit(GPIO_PinHandle_t *GPIO_PinHandle){
 80007dc:	b5b0      	push	{r4, r5, r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	//local variables used for temporary values in operations
	uint8_t temp1;
	uint8_t temp2;

	//enable GPIO port clock
	GPIO_ClockControl(GPIO_PinHandle->pGPIO,ENABLE);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2101      	movs	r1, #1
 80007ea:	0018      	movs	r0, r3
 80007ec:	f7ff ff44 	bl	8000678 <GPIO_ClockControl>

	//configure MODE: if not interrupt, mode is input/output/analog/alternate function
	if ((GPIO_PinHandle->GPIO_PinConfig.GPIO_PinMode)<=GPIO_ANA){
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	795b      	ldrb	r3, [r3, #5]
 80007f4:	2b03      	cmp	r3, #3
 80007f6:	d81f      	bhi.n	8000838 <GPIO_PinInit+0x5c>
		// first,reset the 2 bits related to pin.ex:pin number 1 is for MODER bits 2 and 3. 3<<2*pin is 3<<2 aka 1100b.so MODER&=(~1100)=x..x00xx
		GPIO_PinHandle->pGPIO->MODER &= (~(3<<(2*GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber))); //I guess I can use 3 instead of 0x3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	791b      	ldrb	r3, [r3, #4]
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	2103      	movs	r1, #3
 8000806:	4099      	lsls	r1, r3
 8000808:	000b      	movs	r3, r1
 800080a:	43db      	mvns	r3, r3
 800080c:	0019      	movs	r1, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	400a      	ands	r2, r1
 8000814:	601a      	str	r2, [r3, #0]
		//now set
		GPIO_PinHandle->pGPIO->MODER |= (GPIO_PinHandle->GPIO_PinConfig.GPIO_PinMode<<(2*GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	795b      	ldrb	r3, [r3, #5]
 8000820:	0019      	movs	r1, r3
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	791b      	ldrb	r3, [r3, #4]
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	4099      	lsls	r1, r3
 800082a:	000b      	movs	r3, r1
 800082c:	0019      	movs	r1, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	430a      	orrs	r2, r1
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	e0af      	b.n	8000998 <GPIO_PinInit+0x1bc>
	}
	else{ //interrupts
		//Configure the edge trigger (EXTI FTSR and RTSR). EXTI line "y" is for pins "y"; example, EXTI15 is for GPIOA15..GPIOF15
		if ((GPIO_PinHandle->GPIO_PinConfig.GPIO_PinMode)==GPIO_FALL_TRIG){
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	795b      	ldrb	r3, [r3, #5]
 800083c:	2b04      	cmp	r3, #4
 800083e:	d117      	bne.n	8000870 <GPIO_PinInit+0x94>
			//set falling edge trigger
			EXTI->FTSR |= (1<<GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000840:	4ba5      	ldr	r3, [pc, #660]	; (8000ad8 <GPIO_PinInit+0x2fc>)
 8000842:	68da      	ldr	r2, [r3, #12]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	791b      	ldrb	r3, [r3, #4]
 8000848:	0019      	movs	r1, r3
 800084a:	2301      	movs	r3, #1
 800084c:	408b      	lsls	r3, r1
 800084e:	0019      	movs	r1, r3
 8000850:	4ba1      	ldr	r3, [pc, #644]	; (8000ad8 <GPIO_PinInit+0x2fc>)
 8000852:	430a      	orrs	r2, r1
 8000854:	60da      	str	r2, [r3, #12]
			//clear rising edge trigger!
			EXTI->RTSR &= ~(1<<GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000856:	4ba0      	ldr	r3, [pc, #640]	; (8000ad8 <GPIO_PinInit+0x2fc>)
 8000858:	689a      	ldr	r2, [r3, #8]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	791b      	ldrb	r3, [r3, #4]
 800085e:	0019      	movs	r1, r3
 8000860:	2301      	movs	r3, #1
 8000862:	408b      	lsls	r3, r1
 8000864:	43db      	mvns	r3, r3
 8000866:	0019      	movs	r1, r3
 8000868:	4b9b      	ldr	r3, [pc, #620]	; (8000ad8 <GPIO_PinInit+0x2fc>)
 800086a:	400a      	ands	r2, r1
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	e035      	b.n	80008dc <GPIO_PinInit+0x100>
		}
		else if ((GPIO_PinHandle->GPIO_PinConfig.GPIO_PinMode)==GPIO_RISE_TRIG){
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	795b      	ldrb	r3, [r3, #5]
 8000874:	2b05      	cmp	r3, #5
 8000876:	d117      	bne.n	80008a8 <GPIO_PinInit+0xcc>
			//set rising edge trigger
			EXTI->RTSR |= (1<<GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000878:	4b97      	ldr	r3, [pc, #604]	; (8000ad8 <GPIO_PinInit+0x2fc>)
 800087a:	689a      	ldr	r2, [r3, #8]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	791b      	ldrb	r3, [r3, #4]
 8000880:	0019      	movs	r1, r3
 8000882:	2301      	movs	r3, #1
 8000884:	408b      	lsls	r3, r1
 8000886:	0019      	movs	r1, r3
 8000888:	4b93      	ldr	r3, [pc, #588]	; (8000ad8 <GPIO_PinInit+0x2fc>)
 800088a:	430a      	orrs	r2, r1
 800088c:	609a      	str	r2, [r3, #8]
			//clear falling edge trigger!
			EXTI->FTSR &= ~(1<<GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber);
 800088e:	4b92      	ldr	r3, [pc, #584]	; (8000ad8 <GPIO_PinInit+0x2fc>)
 8000890:	68da      	ldr	r2, [r3, #12]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	791b      	ldrb	r3, [r3, #4]
 8000896:	0019      	movs	r1, r3
 8000898:	2301      	movs	r3, #1
 800089a:	408b      	lsls	r3, r1
 800089c:	43db      	mvns	r3, r3
 800089e:	0019      	movs	r1, r3
 80008a0:	4b8d      	ldr	r3, [pc, #564]	; (8000ad8 <GPIO_PinInit+0x2fc>)
 80008a2:	400a      	ands	r2, r1
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	e019      	b.n	80008dc <GPIO_PinInit+0x100>
		}
		else if ((GPIO_PinHandle->GPIO_PinConfig.GPIO_PinMode)==GPIO_FALLRISE_TRIG){
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	795b      	ldrb	r3, [r3, #5]
 80008ac:	2b06      	cmp	r3, #6
 80008ae:	d115      	bne.n	80008dc <GPIO_PinInit+0x100>
			//set both falling and rising edge triggers
			EXTI->FTSR |= (1<<GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008b0:	4b89      	ldr	r3, [pc, #548]	; (8000ad8 <GPIO_PinInit+0x2fc>)
 80008b2:	68da      	ldr	r2, [r3, #12]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	791b      	ldrb	r3, [r3, #4]
 80008b8:	0019      	movs	r1, r3
 80008ba:	2301      	movs	r3, #1
 80008bc:	408b      	lsls	r3, r1
 80008be:	0019      	movs	r1, r3
 80008c0:	4b85      	ldr	r3, [pc, #532]	; (8000ad8 <GPIO_PinInit+0x2fc>)
 80008c2:	430a      	orrs	r2, r1
 80008c4:	60da      	str	r2, [r3, #12]
			EXTI->RTSR |= (1<<GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008c6:	4b84      	ldr	r3, [pc, #528]	; (8000ad8 <GPIO_PinInit+0x2fc>)
 80008c8:	689a      	ldr	r2, [r3, #8]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	791b      	ldrb	r3, [r3, #4]
 80008ce:	0019      	movs	r1, r3
 80008d0:	2301      	movs	r3, #1
 80008d2:	408b      	lsls	r3, r1
 80008d4:	0019      	movs	r1, r3
 80008d6:	4b80      	ldr	r3, [pc, #512]	; (8000ad8 <GPIO_PinInit+0x2fc>)
 80008d8:	430a      	orrs	r2, r1
 80008da:	609a      	str	r2, [r3, #8]
		}

		//EXTICR: select the GPIO for the interruption on corresponding EXTI line through EXTICR registers (every allows just one, so it's a decision)
		//EXTICR0:for GPIO pins 0-3. Blocks of 4 bits to select A-F.EXTICR1: for GPIO pins 4-7. Blocks of 4 bits to select A-F. And so on
		//if GPIOD10-->EXTICR3 (block1,that is,from bit4) because EXTICR1 is for pins 0-3, CR2 pins 4-7 and so on. GPIOD--> 010
		temp1 = GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber/4; //to know which EXTICR
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	791a      	ldrb	r2, [r3, #4]
 80008e0:	200f      	movs	r0, #15
 80008e2:	183b      	adds	r3, r7, r0
 80008e4:	0892      	lsrs	r2, r2, #2
 80008e6:	701a      	strb	r2, [r3, #0]
		temp2 = GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber%4;//to know the block within EXTICR
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	791a      	ldrb	r2, [r3, #4]
 80008ec:	230e      	movs	r3, #14
 80008ee:	18fb      	adds	r3, r7, r3
 80008f0:	2103      	movs	r1, #3
 80008f2:	400a      	ands	r2, r1
 80008f4:	701a      	strb	r2, [r3, #0]
		//enable SYSCFG clock and configure the correspondingEXTICR
		SYSCFG_EnableClock();
 80008f6:	4b79      	ldr	r3, [pc, #484]	; (8000adc <GPIO_PinInit+0x300>)
 80008f8:	699a      	ldr	r2, [r3, #24]
 80008fa:	4b78      	ldr	r3, [pc, #480]	; (8000adc <GPIO_PinInit+0x300>)
 80008fc:	2101      	movs	r1, #1
 80008fe:	430a      	orrs	r2, r1
 8000900:	619a      	str	r2, [r3, #24]
		SYSCFG->EXTICR[temp1] |= ((GPIO_PORT_TO_NUMBER(GPIO_PinHandle->pGPIO))<< (4*temp2) );
 8000902:	4a77      	ldr	r2, [pc, #476]	; (8000ae0 <GPIO_PinInit+0x304>)
 8000904:	183b      	adds	r3, r7, r0
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	3302      	adds	r3, #2
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	589a      	ldr	r2, [r3, r2]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	6819      	ldr	r1, [r3, #0]
 8000912:	2390      	movs	r3, #144	; 0x90
 8000914:	05db      	lsls	r3, r3, #23
 8000916:	4299      	cmp	r1, r3
 8000918:	d024      	beq.n	8000964 <GPIO_PinInit+0x188>
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4971      	ldr	r1, [pc, #452]	; (8000ae4 <GPIO_PinInit+0x308>)
 8000920:	428b      	cmp	r3, r1
 8000922:	d01d      	beq.n	8000960 <GPIO_PinInit+0x184>
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	496f      	ldr	r1, [pc, #444]	; (8000ae8 <GPIO_PinInit+0x30c>)
 800092a:	428b      	cmp	r3, r1
 800092c:	d016      	beq.n	800095c <GPIO_PinInit+0x180>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	496e      	ldr	r1, [pc, #440]	; (8000aec <GPIO_PinInit+0x310>)
 8000934:	428b      	cmp	r3, r1
 8000936:	d00f      	beq.n	8000958 <GPIO_PinInit+0x17c>
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	496c      	ldr	r1, [pc, #432]	; (8000af0 <GPIO_PinInit+0x314>)
 800093e:	428b      	cmp	r3, r1
 8000940:	d008      	beq.n	8000954 <GPIO_PinInit+0x178>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	496b      	ldr	r1, [pc, #428]	; (8000af4 <GPIO_PinInit+0x318>)
 8000948:	428b      	cmp	r3, r1
 800094a:	d101      	bne.n	8000950 <GPIO_PinInit+0x174>
 800094c:	2305      	movs	r3, #5
 800094e:	e00a      	b.n	8000966 <GPIO_PinInit+0x18a>
 8000950:	2300      	movs	r3, #0
 8000952:	e008      	b.n	8000966 <GPIO_PinInit+0x18a>
 8000954:	2304      	movs	r3, #4
 8000956:	e006      	b.n	8000966 <GPIO_PinInit+0x18a>
 8000958:	2303      	movs	r3, #3
 800095a:	e004      	b.n	8000966 <GPIO_PinInit+0x18a>
 800095c:	2302      	movs	r3, #2
 800095e:	e002      	b.n	8000966 <GPIO_PinInit+0x18a>
 8000960:	2301      	movs	r3, #1
 8000962:	e000      	b.n	8000966 <GPIO_PinInit+0x18a>
 8000964:	2300      	movs	r3, #0
 8000966:	210e      	movs	r1, #14
 8000968:	1879      	adds	r1, r7, r1
 800096a:	7809      	ldrb	r1, [r1, #0]
 800096c:	0089      	lsls	r1, r1, #2
 800096e:	408b      	lsls	r3, r1
 8000970:	0018      	movs	r0, r3
 8000972:	495b      	ldr	r1, [pc, #364]	; (8000ae0 <GPIO_PinInit+0x304>)
 8000974:	230f      	movs	r3, #15
 8000976:	18fb      	adds	r3, r7, r3
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	4302      	orrs	r2, r0
 800097c:	3302      	adds	r3, #2
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	505a      	str	r2, [r3, r1]

		//ENABLE EXTI interrupt by means of interrupt mask register
		EXTI->IMR |= (1<<GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000982:	4b55      	ldr	r3, [pc, #340]	; (8000ad8 <GPIO_PinInit+0x2fc>)
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	791b      	ldrb	r3, [r3, #4]
 800098a:	0019      	movs	r1, r3
 800098c:	2301      	movs	r3, #1
 800098e:	408b      	lsls	r3, r1
 8000990:	0019      	movs	r1, r3
 8000992:	4b51      	ldr	r3, [pc, #324]	; (8000ad8 <GPIO_PinInit+0x2fc>)
 8000994:	430a      	orrs	r2, r1
 8000996:	601a      	str	r2, [r3, #0]
		/*Check specific functions for the configuration on processor side: NVIC (nested vector interrupt controller)*/
	}

	//OUTPUT TYPE. TBD:don't do if !=output mode?
	// first,reset the related bit
	GPIO_PinHandle->pGPIO->OTYPER &= (~(1<<GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	685a      	ldr	r2, [r3, #4]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	791b      	ldrb	r3, [r3, #4]
 80009a2:	0019      	movs	r1, r3
 80009a4:	2301      	movs	r3, #1
 80009a6:	408b      	lsls	r3, r1
 80009a8:	43db      	mvns	r3, r3
 80009aa:	0019      	movs	r1, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	400a      	ands	r2, r1
 80009b2:	605a      	str	r2, [r3, #4]
	//now set
	GPIO_PinHandle->pGPIO->OTYPER |= (GPIO_PinHandle->GPIO_PinConfig.GPIO_PinOutType<<(GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber));
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	685a      	ldr	r2, [r3, #4]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	799b      	ldrb	r3, [r3, #6]
 80009be:	0019      	movs	r1, r3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	791b      	ldrb	r3, [r3, #4]
 80009c4:	4099      	lsls	r1, r3
 80009c6:	000b      	movs	r3, r1
 80009c8:	0019      	movs	r1, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	430a      	orrs	r2, r1
 80009d0:	605a      	str	r2, [r3, #4]

	//OUTPUT SPEED. TBD:don't do if !=output mode?
	// first,reset the related bits
	GPIO_PinHandle->pGPIO->OSPEEDR &= (~(3<<(2*GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber)));
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	689a      	ldr	r2, [r3, #8]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	791b      	ldrb	r3, [r3, #4]
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	2103      	movs	r1, #3
 80009e0:	4099      	lsls	r1, r3
 80009e2:	000b      	movs	r3, r1
 80009e4:	43db      	mvns	r3, r3
 80009e6:	0019      	movs	r1, r3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	400a      	ands	r2, r1
 80009ee:	609a      	str	r2, [r3, #8]
	//now set
	GPIO_PinHandle->pGPIO->OSPEEDR |= (GPIO_PinHandle->GPIO_PinConfig.GPIO_PinOutSpeed<<(2*GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber));
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	689a      	ldr	r2, [r3, #8]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	79db      	ldrb	r3, [r3, #7]
 80009fa:	0019      	movs	r1, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	791b      	ldrb	r3, [r3, #4]
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	4099      	lsls	r1, r3
 8000a04:	000b      	movs	r3, r1
 8000a06:	0019      	movs	r1, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	430a      	orrs	r2, r1
 8000a0e:	609a      	str	r2, [r3, #8]

	//PULL UP/DOWN
	// first,reset the related bits
	GPIO_PinHandle->pGPIO->PUPDR &= (~(3<<(2*GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber)));
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	68da      	ldr	r2, [r3, #12]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	791b      	ldrb	r3, [r3, #4]
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	2103      	movs	r1, #3
 8000a1e:	4099      	lsls	r1, r3
 8000a20:	000b      	movs	r3, r1
 8000a22:	43db      	mvns	r3, r3
 8000a24:	0019      	movs	r1, r3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	400a      	ands	r2, r1
 8000a2c:	60da      	str	r2, [r3, #12]
	//now set
	GPIO_PinHandle->pGPIO->PUPDR |= (GPIO_PinHandle->GPIO_PinConfig.GPIO_PinPullUpDown<<(2*GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	68da      	ldr	r2, [r3, #12]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	7a1b      	ldrb	r3, [r3, #8]
 8000a38:	0019      	movs	r1, r3
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	791b      	ldrb	r3, [r3, #4]
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	4099      	lsls	r1, r3
 8000a42:	000b      	movs	r3, r1
 8000a44:	0019      	movs	r1, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	430a      	orrs	r2, r1
 8000a4c:	60da      	str	r2, [r3, #12]

	//ALTERNATE FUNCTION
	if (GPIO_PinHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_ALTFUN){
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	795b      	ldrb	r3, [r3, #5]
 8000a52:	2b02      	cmp	r3, #2
 8000a54:	d13b      	bne.n	8000ace <GPIO_PinInit+0x2f2>
		//as there are 2 registers, low is for pins 0-7 and high for 8-15.in our struct,AFR[2].We need to know where to actuate
		temp1 = GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber / 8 ; //ex: pin 7-->reg 0,byte=7(last);pin12 --> reg1, byte=4
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	791a      	ldrb	r2, [r3, #4]
 8000a5a:	240f      	movs	r4, #15
 8000a5c:	193b      	adds	r3, r7, r4
 8000a5e:	08d2      	lsrs	r2, r2, #3
 8000a60:	701a      	strb	r2, [r3, #0]
		temp2 = GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	791a      	ldrb	r2, [r3, #4]
 8000a66:	250e      	movs	r5, #14
 8000a68:	197b      	adds	r3, r7, r5
 8000a6a:	2107      	movs	r1, #7
 8000a6c:	400a      	ands	r2, r1
 8000a6e:	701a      	strb	r2, [r3, #0]
		// first,reset the related bits. in this case, 4. ~1111 is ~0x0F
		GPIO_PinHandle->pGPIO->AFR[temp1] &= (~(0xF<<(4*temp2)));
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	193a      	adds	r2, r7, r4
 8000a76:	7812      	ldrb	r2, [r2, #0]
 8000a78:	3208      	adds	r2, #8
 8000a7a:	0092      	lsls	r2, r2, #2
 8000a7c:	58d1      	ldr	r1, [r2, r3]
 8000a7e:	197b      	adds	r3, r7, r5
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	220f      	movs	r2, #15
 8000a86:	409a      	lsls	r2, r3
 8000a88:	0013      	movs	r3, r2
 8000a8a:	43db      	mvns	r3, r3
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	193a      	adds	r2, r7, r4
 8000a94:	7812      	ldrb	r2, [r2, #0]
 8000a96:	4001      	ands	r1, r0
 8000a98:	3208      	adds	r2, #8
 8000a9a:	0092      	lsls	r2, r2, #2
 8000a9c:	50d1      	str	r1, [r2, r3]
		//now set
		GPIO_PinHandle->pGPIO->AFR[temp1] |= (GPIO_PinHandle->GPIO_PinConfig.GPIO_PinAlterFunc<<(4*temp2));
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	193a      	adds	r2, r7, r4
 8000aa4:	7812      	ldrb	r2, [r2, #0]
 8000aa6:	3208      	adds	r2, #8
 8000aa8:	0092      	lsls	r2, r2, #2
 8000aaa:	58d1      	ldr	r1, [r2, r3]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	7a5b      	ldrb	r3, [r3, #9]
 8000ab0:	001a      	movs	r2, r3
 8000ab2:	197b      	adds	r3, r7, r5
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	409a      	lsls	r2, r3
 8000aba:	0013      	movs	r3, r2
 8000abc:	0018      	movs	r0, r3
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	193a      	adds	r2, r7, r4
 8000ac4:	7812      	ldrb	r2, [r2, #0]
 8000ac6:	4301      	orrs	r1, r0
 8000ac8:	3208      	adds	r2, #8
 8000aca:	0092      	lsls	r2, r2, #2
 8000acc:	50d1      	str	r1, [r2, r3]
	}
}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b004      	add	sp, #16
 8000ad4:	bdb0      	pop	{r4, r5, r7, pc}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	40010400 	.word	0x40010400
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	40010000 	.word	0x40010000
 8000ae4:	48000400 	.word	0x48000400
 8000ae8:	48000800 	.word	0x48000800
 8000aec:	48000c00 	.word	0x48000c00
 8000af0:	48001000 	.word	0x48001000
 8000af4:	48001400 	.word	0x48001400

08000af8 <GPIO_WritePin>:
uint16_t GPIO_ReadPort(GPIO_RegStruct_t *pGPIO){
	return (uint16_t)pGPIO->IDR;
}

/**************************Write to output (pin or port)************************/
void GPIO_WritePin(GPIO_RegStruct_t *pGPIO, uint8_t pin, uint8_t output){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	0008      	movs	r0, r1
 8000b02:	0011      	movs	r1, r2
 8000b04:	1cfb      	adds	r3, r7, #3
 8000b06:	1c02      	adds	r2, r0, #0
 8000b08:	701a      	strb	r2, [r3, #0]
 8000b0a:	1cbb      	adds	r3, r7, #2
 8000b0c:	1c0a      	adds	r2, r1, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
	//do not do first clear the related bit and then set.we don't want to modify the output
	//I prefer to do an if statement than using intermediate variables to clear and set
	if (output==1){
 8000b10:	1cbb      	adds	r3, r7, #2
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d10a      	bne.n	8000b2e <GPIO_WritePin+0x36>
		pGPIO->ODR |= (1<<pin);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	695b      	ldr	r3, [r3, #20]
 8000b1c:	1cfa      	adds	r2, r7, #3
 8000b1e:	7812      	ldrb	r2, [r2, #0]
 8000b20:	2101      	movs	r1, #1
 8000b22:	4091      	lsls	r1, r2
 8000b24:	000a      	movs	r2, r1
 8000b26:	431a      	orrs	r2, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	615a      	str	r2, [r3, #20]
	}
	else { //0
		pGPIO->ODR &= (~(1<<pin));
	}

}
 8000b2c:	e00a      	b.n	8000b44 <GPIO_WritePin+0x4c>
		pGPIO->ODR &= (~(1<<pin));
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	695b      	ldr	r3, [r3, #20]
 8000b32:	1cfa      	adds	r2, r7, #3
 8000b34:	7812      	ldrb	r2, [r2, #0]
 8000b36:	2101      	movs	r1, #1
 8000b38:	4091      	lsls	r1, r2
 8000b3a:	000a      	movs	r2, r1
 8000b3c:	43d2      	mvns	r2, r2
 8000b3e:	401a      	ands	r2, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	615a      	str	r2, [r3, #20]
}
 8000b44:	46c0      	nop			; (mov r8, r8)
 8000b46:	46bd      	mov	sp, r7
 8000b48:	b002      	add	sp, #8
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <GPIO_IRQ_EnableDisable>:
	pGPIO->ODR ^= (1<<pin); //^ is XOR. 1^0=0;0^1=1;1^1=0;0^0=0. So x^1 = !x
}

/*************************NVIC functions for IRQ*****************************************/
/*Enable or disable an IRQ*/
void GPIO_IRQ_EnableDisable(uint8_t IRQ_Number, uint8_t EnableDisable){
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	0002      	movs	r2, r0
 8000b54:	1dfb      	adds	r3, r7, #7
 8000b56:	701a      	strb	r2, [r3, #0]
 8000b58:	1dbb      	adds	r3, r7, #6
 8000b5a:	1c0a      	adds	r2, r1, #0
 8000b5c:	701a      	strb	r2, [r3, #0]
	if(EnableDisable == ENABLE){ //enable by means of ISER
 8000b5e:	1dbb      	adds	r3, r7, #6
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d10b      	bne.n	8000b7e <GPIO_IRQ_EnableDisable+0x32>
		*NVIC_ISER |= ( 1 << IRQ_Number);
 8000b66:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <GPIO_IRQ_EnableDisable+0x50>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	1dfb      	adds	r3, r7, #7
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2101      	movs	r1, #1
 8000b70:	4099      	lsls	r1, r3
 8000b72:	000b      	movs	r3, r1
 8000b74:	0019      	movs	r1, r3
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <GPIO_IRQ_EnableDisable+0x50>)
 8000b78:	430a      	orrs	r2, r1
 8000b7a:	601a      	str	r2, [r3, #0]
	}
	else { //disable by means of ICER
		*NVIC_ICER |= ( 1 << IRQ_Number);
	}

}
 8000b7c:	e00a      	b.n	8000b94 <GPIO_IRQ_EnableDisable+0x48>
		*NVIC_ICER |= ( 1 << IRQ_Number);
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <GPIO_IRQ_EnableDisable+0x54>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	1dfb      	adds	r3, r7, #7
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2101      	movs	r1, #1
 8000b88:	4099      	lsls	r1, r3
 8000b8a:	000b      	movs	r3, r1
 8000b8c:	0019      	movs	r1, r3
 8000b8e:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <GPIO_IRQ_EnableDisable+0x54>)
 8000b90:	430a      	orrs	r2, r1
 8000b92:	601a      	str	r2, [r3, #0]
}
 8000b94:	46c0      	nop			; (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	b002      	add	sp, #8
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	e000e100 	.word	0xe000e100
 8000ba0:	e000e180 	.word	0xe000e180

08000ba4 <GPIO_IRQ_Handling>:
	//Clear the block and set. Better if I use intermediate variables instead of modifying many times the IPR
	uint32_t tempIPR = ((*(NVIC_IPR_BASE + numberIPR))&~(0xFF<<blockIPR));
	tempIPR |= (IRQ_Priority<<(8*blockIPR+6)); //6 is because bits 0-5 are not editable, only bits 6-7 count.
	*(NVIC_IPR_BASE + numberIPR) = tempIPR;
}
void GPIO_IRQ_Handling(uint8_t pin){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	0002      	movs	r2, r0
 8000bac:	1dfb      	adds	r3, r7, #7
 8000bae:	701a      	strb	r2, [r3, #0]
	/*ISRs (handlers) are actually application specific and implement/override(weak) handlers defined in startup*/
	/*GPIO_IRQ_Handling will be called inside the ISR handler.*/
	//Clear the pending register of the EXTI(interrupt handling depends upon the peripheral).PR of processor is automatically cleared (I think)
	if ((EXTI->PR) & (1<<pin)){ //if PR[pin]==1
 8000bb0:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <GPIO_IRQ_Handling+0x3c>)
 8000bb2:	695b      	ldr	r3, [r3, #20]
 8000bb4:	1dfa      	adds	r2, r7, #7
 8000bb6:	7812      	ldrb	r2, [r2, #0]
 8000bb8:	2101      	movs	r1, #1
 8000bba:	4091      	lsls	r1, r2
 8000bbc:	000a      	movs	r2, r1
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	d00a      	beq.n	8000bd8 <GPIO_IRQ_Handling+0x34>
		(EXTI->PR) |= (1<<pin); //write 1 to clear the pending register
 8000bc2:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <GPIO_IRQ_Handling+0x3c>)
 8000bc4:	695a      	ldr	r2, [r3, #20]
 8000bc6:	1dfb      	adds	r3, r7, #7
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2101      	movs	r1, #1
 8000bcc:	4099      	lsls	r1, r3
 8000bce:	000b      	movs	r3, r1
 8000bd0:	0019      	movs	r1, r3
 8000bd2:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <GPIO_IRQ_Handling+0x3c>)
 8000bd4:	430a      	orrs	r2, r1
 8000bd6:	615a      	str	r2, [r3, #20]
	}

}
 8000bd8:	46c0      	nop			; (mov r8, r8)
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	b002      	add	sp, #8
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40010400 	.word	0x40010400

08000be4 <I2C_ClockControl>:
static void I2C_TCR_handler(I2C_Handle_t *pI2Chandle); //when NBYTES>255

static void I2C_SlaveAddress(I2C_Handle_t *pI2Chandle); //set slave address

/*Enable or disable I2C peripheral clock*/
void I2C_ClockControl(I2C_Handle_t *pI2Chandle, uint8_t EnableDisable){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	000a      	movs	r2, r1
 8000bee:	1cfb      	adds	r3, r7, #3
 8000bf0:	701a      	strb	r2, [r3, #0]
	if (EnableDisable == ENABLE) {
 8000bf2:	1cfb      	adds	r3, r7, #3
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d119      	bne.n	8000c2e <I2C_ClockControl+0x4a>
		if (pI2Chandle->pI2C == I2C1){
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a19      	ldr	r2, [pc, #100]	; (8000c64 <I2C_ClockControl+0x80>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d107      	bne.n	8000c14 <I2C_ClockControl+0x30>
			I2C1_EnableClock();
 8000c04:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <I2C_ClockControl+0x84>)
 8000c06:	69da      	ldr	r2, [r3, #28]
 8000c08:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <I2C_ClockControl+0x84>)
 8000c0a:	2180      	movs	r1, #128	; 0x80
 8000c0c:	0389      	lsls	r1, r1, #14
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	61da      	str	r2, [r3, #28]
		}
		else if (pI2Chandle->pI2C == I2C2){
			I2C2_DisableClock();
		}
	}
}
 8000c12:	e023      	b.n	8000c5c <I2C_ClockControl+0x78>
		else if (pI2Chandle->pI2C == I2C2){
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a14      	ldr	r2, [pc, #80]	; (8000c6c <I2C_ClockControl+0x88>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d11e      	bne.n	8000c5c <I2C_ClockControl+0x78>
			I2C2_EnableClock();
 8000c1e:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <I2C_ClockControl+0x84>)
 8000c20:	69da      	ldr	r2, [r3, #28]
 8000c22:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <I2C_ClockControl+0x84>)
 8000c24:	2180      	movs	r1, #128	; 0x80
 8000c26:	03c9      	lsls	r1, r1, #15
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	61da      	str	r2, [r3, #28]
}
 8000c2c:	e016      	b.n	8000c5c <I2C_ClockControl+0x78>
		if (pI2Chandle->pI2C == I2C1){
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a0c      	ldr	r2, [pc, #48]	; (8000c64 <I2C_ClockControl+0x80>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d106      	bne.n	8000c46 <I2C_ClockControl+0x62>
			I2C1_DisableClock();
 8000c38:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <I2C_ClockControl+0x84>)
 8000c3a:	69da      	ldr	r2, [r3, #28]
 8000c3c:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <I2C_ClockControl+0x84>)
 8000c3e:	490c      	ldr	r1, [pc, #48]	; (8000c70 <I2C_ClockControl+0x8c>)
 8000c40:	400a      	ands	r2, r1
 8000c42:	61da      	str	r2, [r3, #28]
}
 8000c44:	e00a      	b.n	8000c5c <I2C_ClockControl+0x78>
		else if (pI2Chandle->pI2C == I2C2){
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a08      	ldr	r2, [pc, #32]	; (8000c6c <I2C_ClockControl+0x88>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d105      	bne.n	8000c5c <I2C_ClockControl+0x78>
			I2C2_DisableClock();
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <I2C_ClockControl+0x84>)
 8000c52:	69da      	ldr	r2, [r3, #28]
 8000c54:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <I2C_ClockControl+0x84>)
 8000c56:	4907      	ldr	r1, [pc, #28]	; (8000c74 <I2C_ClockControl+0x90>)
 8000c58:	400a      	ands	r2, r1
 8000c5a:	61da      	str	r2, [r3, #28]
}
 8000c5c:	46c0      	nop			; (mov r8, r8)
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	b002      	add	sp, #8
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40005400 	.word	0x40005400
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	40005800 	.word	0x40005800
 8000c70:	ffdfffff 	.word	0xffdfffff
 8000c74:	ffbfffff 	.word	0xffbfffff

08000c78 <I2C_Init>:

/*Initialization, which enables clock but not the peripheral yet(this is done by I2C_EnableDisable)*/
void I2C_Init(I2C_Handle_t *pI2Chandle){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	//enable I2C peripheral clock
	I2C_ClockControl(pI2Chandle,ENABLE);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2101      	movs	r1, #1
 8000c84:	0018      	movs	r0, r3
 8000c86:	f7ff ffad 	bl	8000be4 <I2C_ClockControl>
	*/
	/*Configure TIMINGR. Use I2C_Timing_Config_Tool_Vx.y.z.xls or check out values in 26.4.11
	 * I2C_TIMINGR register configuration examples.
	 * This includes clock speed, I2C mode (standard,fast...)
	 */
	pI2Chandle->pI2C->I2C_TIMINGR = pI2Chandle->I2C_Config.I2C_Timing;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	6892      	ldr	r2, [r2, #8]
 8000c92:	611a      	str	r2, [r3, #16]

	/*//TX buffer as a dynamic array
	pI2Chandle->I2C_Comm_t.TX_buffer = malloc(pI2Chandle->I2C_Comm_t.TX_length);*/
}
 8000c94:	46c0      	nop			; (mov r8, r8)
 8000c96:	46bd      	mov	sp, r7
 8000c98:	b002      	add	sp, #8
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <I2C_EnableDisable>:

/*I2C control: enable/disable */
void I2C_EnableDisable(I2C_Handle_t *pI2Chandle, uint8_t EnableDisable){
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	000a      	movs	r2, r1
 8000ca6:	1cfb      	adds	r3, r7, #3
 8000ca8:	701a      	strb	r2, [r3, #0]
	if (EnableDisable == ENABLE){
 8000caa:	1cfb      	adds	r3, r7, #3
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d10b      	bne.n	8000cca <I2C_EnableDisable+0x2e>
		pI2Chandle->pI2C->I2C_CR1 |= (1<<I2C_CR1_PE);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	430a      	orrs	r2, r1
 8000cc0:	601a      	str	r2, [r3, #0]
		pI2Chandle->I2C_Comm_t.communication_state = I2C_READY;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	771a      	strb	r2, [r3, #28]
	}
	else { //0
		pI2Chandle->pI2C->I2C_CR1 &= (~(1<<I2C_CR1_PE));
	}
}
 8000cc8:	e007      	b.n	8000cda <I2C_EnableDisable+0x3e>
		pI2Chandle->pI2C->I2C_CR1 &= (~(1<<I2C_CR1_PE));
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	438a      	bics	r2, r1
 8000cd8:	601a      	str	r2, [r3, #0]
}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	b002      	add	sp, #8
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <I2C_IRQ_EnableDisable>:
	}
	pI2Chandle->pI2C->I2C_CR1 |= (1<<I2C_CR1_PE);
}

/*IRQ Configuration and ISR handling*/
void I2C_IRQ_EnableDisable(uint8_t IRQ_Number, uint8_t EnableDisable){ //IRQ_I2C1(combined with eXTI line23)/IRQ_I2C2
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	0002      	movs	r2, r0
 8000cec:	1dfb      	adds	r3, r7, #7
 8000cee:	701a      	strb	r2, [r3, #0]
 8000cf0:	1dbb      	adds	r3, r7, #6
 8000cf2:	1c0a      	adds	r2, r1, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
	if(EnableDisable == ENABLE){ //enable by means of ISER
 8000cf6:	1dbb      	adds	r3, r7, #6
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d10b      	bne.n	8000d16 <I2C_IRQ_EnableDisable+0x32>
		*NVIC_ISER |= ( 1 << IRQ_Number);
 8000cfe:	4b0d      	ldr	r3, [pc, #52]	; (8000d34 <I2C_IRQ_EnableDisable+0x50>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	1dfb      	adds	r3, r7, #7
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2101      	movs	r1, #1
 8000d08:	4099      	lsls	r1, r3
 8000d0a:	000b      	movs	r3, r1
 8000d0c:	0019      	movs	r1, r3
 8000d0e:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <I2C_IRQ_EnableDisable+0x50>)
 8000d10:	430a      	orrs	r2, r1
 8000d12:	601a      	str	r2, [r3, #0]
	}
	else { //disable by means of ICER
		*NVIC_ICER |= ( 1 << IRQ_Number);
	}
}
 8000d14:	e00a      	b.n	8000d2c <I2C_IRQ_EnableDisable+0x48>
		*NVIC_ICER |= ( 1 << IRQ_Number);
 8000d16:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <I2C_IRQ_EnableDisable+0x54>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	1dfb      	adds	r3, r7, #7
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2101      	movs	r1, #1
 8000d20:	4099      	lsls	r1, r3
 8000d22:	000b      	movs	r3, r1
 8000d24:	0019      	movs	r1, r3
 8000d26:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <I2C_IRQ_EnableDisable+0x54>)
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	601a      	str	r2, [r3, #0]
}
 8000d2c:	46c0      	nop			; (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	b002      	add	sp, #8
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	e000e100 	.word	0xe000e100
 8000d38:	e000e180 	.word	0xe000e180

08000d3c <I2C_IRQ_Handling>:

void I2C_IRQ_Priority(uint8_t IRQ_Number, uint32_t IRQ_Priority){
	//if required, reuse the same function in spi (better a common function in stm32f091rct6.h?)
}

void I2C_IRQ_Handling(I2C_Handle_t *pI2Chandle){
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
	//Call the handler related to the interrupt if register is true as long as it is enabled
	//TXIS: Transmit Interrupt Status
	if ( (pI2Chandle->pI2C->I2C_CR1 & (1<<I2C_CR1_TXIE)) && (pI2Chandle->pI2C->I2C_ISR & (1<<I2C_ISR_TXIS)) ){
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2202      	movs	r2, #2
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	d009      	beq.n	8000d64 <I2C_IRQ_Handling+0x28>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	699b      	ldr	r3, [r3, #24]
 8000d56:	2202      	movs	r2, #2
 8000d58:	4013      	ands	r3, r2
 8000d5a:	d003      	beq.n	8000d64 <I2C_IRQ_Handling+0x28>
		I2C_TXIS_handler(pI2Chandle);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f000 f941 	bl	8000fe6 <I2C_TXIS_handler>
	}
	//RXNE: Receive data register not empty
	if ( (pI2Chandle->pI2C->I2C_CR1 & (1<<I2C_CR1_RXIE)) && (pI2Chandle->pI2C->I2C_ISR & (1<<I2C_ISR_RXNE)) ){
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2204      	movs	r2, #4
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	d009      	beq.n	8000d84 <I2C_IRQ_Handling+0x48>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	699b      	ldr	r3, [r3, #24]
 8000d76:	2204      	movs	r2, #4
 8000d78:	4013      	ands	r3, r2
 8000d7a:	d003      	beq.n	8000d84 <I2C_IRQ_Handling+0x48>
		I2C_RXNE_handler(pI2Chandle);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f000 f954 	bl	800102c <I2C_RXNE_handler>
	}
	//BERR: bus error
	if ( (pI2Chandle->pI2C->I2C_CR1 & (1<<I2C_CR1_ERRIE)) && (pI2Chandle->pI2C->I2C_ISR & (1<<I2C_ISR_BERR)) ){
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2280      	movs	r2, #128	; 0x80
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	d00a      	beq.n	8000da6 <I2C_IRQ_Handling+0x6a>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	699a      	ldr	r2, [r3, #24]
 8000d96:	2380      	movs	r3, #128	; 0x80
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	d003      	beq.n	8000da6 <I2C_IRQ_Handling+0x6a>
		I2C_BERR_handler(pI2Chandle);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	0018      	movs	r0, r3
 8000da2:	f000 f96c 	bl	800107e <I2C_BERR_handler>
	}
	//TC: Transfer complete interrupt
	if ( (pI2Chandle->pI2C->I2C_CR1 & (1<<I2C_CR1_TCIE)) && (pI2Chandle->pI2C->I2C_ISR & (1<<I2C_ISR_TC)) ){
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2240      	movs	r2, #64	; 0x40
 8000dae:	4013      	ands	r3, r2
 8000db0:	d009      	beq.n	8000dc6 <I2C_IRQ_Handling+0x8a>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	2240      	movs	r2, #64	; 0x40
 8000dba:	4013      	ands	r3, r2
 8000dbc:	d003      	beq.n	8000dc6 <I2C_IRQ_Handling+0x8a>
		I2C_TC_handler(pI2Chandle);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	f000 f99e 	bl	8001102 <I2C_TC_handler>
	}
	//TCR: Transfer complete reload (enabled by TCIE too)
	if ( (pI2Chandle->pI2C->I2C_CR1 & (1<<I2C_CR1_TCIE)) && (pI2Chandle->pI2C->I2C_ISR & (1<<I2C_ISR_TCR)) ){
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2240      	movs	r2, #64	; 0x40
 8000dce:	4013      	ands	r3, r2
 8000dd0:	d009      	beq.n	8000de6 <I2C_IRQ_Handling+0xaa>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	2280      	movs	r2, #128	; 0x80
 8000dda:	4013      	ands	r3, r2
 8000ddc:	d003      	beq.n	8000de6 <I2C_IRQ_Handling+0xaa>
		I2C_TCR_handler(pI2Chandle);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	0018      	movs	r0, r3
 8000de2:	f000 f9a2 	bl	800112a <I2C_TCR_handler>
	}
	//STOP: Stop detection Interrupt
	if ( (pI2Chandle->pI2C->I2C_CR1 & (1<<I2C_CR1_STOPIE)) && (pI2Chandle->pI2C->I2C_ISR & (1<<I2C_ISR_STOPF)) ){
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2220      	movs	r2, #32
 8000dee:	4013      	ands	r3, r2
 8000df0:	d009      	beq.n	8000e06 <I2C_IRQ_Handling+0xca>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	2220      	movs	r2, #32
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	d003      	beq.n	8000e06 <I2C_IRQ_Handling+0xca>
		I2C_STOP_handler(pI2Chandle);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	0018      	movs	r0, r3
 8000e02:	f000 f957 	bl	80010b4 <I2C_STOP_handler>
	}
}
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	b002      	add	sp, #8
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <I2C_SlaveAddress>:

static void I2C_SlaveAddress(I2C_Handle_t *pI2Chandle){
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
	//slave address (7-bit or 10-bit)
	if (pI2Chandle->I2C_Config.I2C_AddressMode == I2C_ADDRESS_MODE_7BIT){ //7-bit
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	795b      	ldrb	r3, [r3, #5]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d10c      	bne.n	8000e38 <I2C_SlaveAddress+0x2a>
		//mask to 7 bits and set
		pI2Chandle->pI2C->I2C_CR2 |= (pI2Chandle->I2C_Comm_t.I2C_SlaveAddress & 0x7F);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	6859      	ldr	r1, [r3, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	8c1b      	ldrh	r3, [r3, #32]
 8000e28:	001a      	movs	r2, r3
 8000e2a:	237f      	movs	r3, #127	; 0x7f
 8000e2c:	401a      	ands	r2, r3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	430a      	orrs	r2, r1
 8000e34:	605a      	str	r2, [r3, #4]
	}
	else { //10-bit
		//mask to 10 bits and set
		pI2Chandle->pI2C->I2C_CR2 |= (pI2Chandle->I2C_Comm_t.I2C_SlaveAddress & 0x3FF);
	}
}
 8000e36:	e00a      	b.n	8000e4e <I2C_SlaveAddress+0x40>
		pI2Chandle->pI2C->I2C_CR2 |= (pI2Chandle->I2C_Comm_t.I2C_SlaveAddress & 0x3FF);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	6859      	ldr	r1, [r3, #4]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	8c1b      	ldrh	r3, [r3, #32]
 8000e42:	059b      	lsls	r3, r3, #22
 8000e44:	0d9a      	lsrs	r2, r3, #22
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	430a      	orrs	r2, r1
 8000e4c:	605a      	str	r2, [r3, #4]
}
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	46bd      	mov	sp, r7
 8000e52:	b002      	add	sp, #8
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <I2C_Master_Transmitter>:

void I2C_Master_Transmitter(I2C_Handle_t *pI2Chandle, uint8_t exp_bytes, uint8_t autoend){
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
 8000e5e:	0008      	movs	r0, r1
 8000e60:	0011      	movs	r1, r2
 8000e62:	1cfb      	adds	r3, r7, #3
 8000e64:	1c02      	adds	r2, r0, #0
 8000e66:	701a      	strb	r2, [r3, #0]
 8000e68:	1cbb      	adds	r3, r7, #2
 8000e6a:	1c0a      	adds	r2, r1, #0
 8000e6c:	701a      	strb	r2, [r3, #0]
	//TX state busy + configure transmission(including interrupts) + start&address
	if (pI2Chandle->I2C_Comm_t.communication_state != (I2C_DURING_TX || I2C_DURING_RX)){
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	7f1b      	ldrb	r3, [r3, #28]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d04f      	beq.n	8000f16 <I2C_Master_Transmitter+0xc0>
		//start transmission (start+slave address) if I2C_READY,I2C_RESTART_STOP or I2C_RELOAD
		//slave address (7-bit or 10-bit)
		I2C_SlaveAddress(pI2Chandle);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f7ff ffc8 	bl	8000e0e <I2C_SlaveAddress>
		//enable TXIE,necessary for TXIS
		pI2Chandle->pI2C->I2C_CR1 |= (1<<I2C_CR1_TXIE);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2102      	movs	r1, #2
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	601a      	str	r2, [r3, #0]
		//write NBYTES --> this would clear TCR by the way
		pI2Chandle->I2C_Comm_t.I2C_Nbytes = exp_bytes;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	1cfa      	adds	r2, r7, #3
 8000e92:	7812      	ldrb	r2, [r2, #0]
 8000e94:	779a      	strb	r2, [r3, #30]
			pI2Chandle->I2C_Comm_t.TX_length = 255;
			pI2Chandle->pI2C->I2C_CR2 |= (1<<I2C_CR2_RELOAD);
			pI2Chandle->pI2C->I2C_CR1 |= (1<<I2C_CR1_TCIE); //TCIE is for both TC and TCR
		}
		else{
			pI2Chandle->I2C_Comm_t.TX_length = exp_bytes;
 8000e96:	1cfb      	adds	r3, r7, #3
 8000e98:	781a      	ldrb	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	60da      	str	r2, [r3, #12]
			pI2Chandle->pI2C->I2C_CR2 &= !((1<<I2C_CR2_RELOAD)); //disable RELOAD
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	605a      	str	r2, [r3, #4]
			 *0: software end mode: TC flag is set when NBYTES data are transferred, stretching SCL low.
			 *1: Automatic end mode: a STOP condition is automatically sent when NBYTES data are
			 *transferred.
			 *Note: This bit has no effect in slave mode or when the RELOAD bit is set.
			 */
			if (autoend){ //automatic end mode
 8000eac:	1cbb      	adds	r3, r7, #2
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d011      	beq.n	8000ed8 <I2C_Master_Transmitter+0x82>
				pI2Chandle->pI2C->I2C_CR2 |= (1<<I2C_CR2_AUTOEND);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	685a      	ldr	r2, [r3, #4]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2180      	movs	r1, #128	; 0x80
 8000ec0:	0489      	lsls	r1, r1, #18
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	605a      	str	r2, [r3, #4]
				pI2Chandle->pI2C->I2C_CR1 |= (1<<I2C_CR1_TCIE); //to enable TC (TCIE is for both TC and TCR)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2140      	movs	r1, #64	; 0x40
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	e00d      	b.n	8000ef4 <I2C_Master_Transmitter+0x9e>
			}
			else{ //software end mode
				pI2Chandle->pI2C->I2C_CR2 &= !((1<<I2C_CR2_AUTOEND));
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	605a      	str	r2, [r3, #4]
				pI2Chandle->pI2C->I2C_CR1 &= !((1<<I2C_CR1_TCIE)); //to disable TC
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
		}
		else if (pI2Chandle->I2C_Comm_t.communication_state == (I2C_READY || I2C_RESTART_STOP)){
			//do something extra?
		}
		*/
		pI2Chandle->I2C_Comm_t.communication_state = I2C_DURING_TX;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	771a      	strb	r2, [r3, #28]
		//start + address. this would clear TC if it had been set (RESTART_STOP)
		//This bit is set by SW and cleared by HW after Start followed by address sequence is sent
		pI2Chandle->pI2C->I2C_CR2 |= (1<<I2C_CR2_START);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	685a      	ldr	r2, [r3, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2180      	movs	r1, #128	; 0x80
 8000f06:	0189      	lsls	r1, r1, #6
 8000f08:	430a      	orrs	r2, r1
 8000f0a:	605a      	str	r2, [r3, #4]
		I2C_App_Callback(pI2Chandle, I2C_TX_STARTED);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2100      	movs	r1, #0
 8000f10:	0018      	movs	r0, r3
 8000f12:	f7ff fa09 	bl	8000328 <I2C_App_Callback>
	}

}
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	b002      	add	sp, #8
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <I2C_Master_Receiver>:

void I2C_Master_Receiver(I2C_Handle_t *pI2Chandle, uint8_t exp_bytes, uint8_t autoend){
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
 8000f26:	0008      	movs	r0, r1
 8000f28:	0011      	movs	r1, r2
 8000f2a:	1cfb      	adds	r3, r7, #3
 8000f2c:	1c02      	adds	r2, r0, #0
 8000f2e:	701a      	strb	r2, [r3, #0]
 8000f30:	1cbb      	adds	r3, r7, #2
 8000f32:	1c0a      	adds	r2, r1, #0
 8000f34:	701a      	strb	r2, [r3, #0]
	//RX state busy + configure reception(including interrupts) + start&address
	if (pI2Chandle->I2C_Comm_t.communication_state != (I2C_DURING_TX || I2C_DURING_RX)){
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	7f1b      	ldrb	r3, [r3, #28]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d04f      	beq.n	8000fde <I2C_Master_Receiver+0xc0>
		//start transmission (start+slave address) if I2C_READY,I2C_RESTART_STOP or I2C_RELOAD
		//slave address (7-bit or 10-bit)
		I2C_SlaveAddress(pI2Chandle);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	0018      	movs	r0, r3
 8000f42:	f7ff ff64 	bl	8000e0e <I2C_SlaveAddress>
		//enable RXIE,necessary for RXNE
		pI2Chandle->pI2C->I2C_CR1 |= (1<<I2C_CR1_RXIE);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2104      	movs	r1, #4
 8000f52:	430a      	orrs	r2, r1
 8000f54:	601a      	str	r2, [r3, #0]
		//write NBYTES --> this would clear TCR by the way
		pI2Chandle->I2C_Comm_t.I2C_Nbytes = exp_bytes;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	1cfa      	adds	r2, r7, #3
 8000f5a:	7812      	ldrb	r2, [r2, #0]
 8000f5c:	779a      	strb	r2, [r3, #30]
			pI2Chandle->I2C_Comm_t.RX_length = 255;
			pI2Chandle->pI2C->I2C_CR2 |= (1<<I2C_CR2_RELOAD);
			pI2Chandle->pI2C->I2C_CR1 |= (1<<I2C_CR1_TCIE); //TCIE is for both TC and TCR
		}
		else{
			pI2Chandle->I2C_Comm_t.RX_length = exp_bytes;
 8000f5e:	1cfb      	adds	r3, r7, #3
 8000f60:	781a      	ldrb	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	615a      	str	r2, [r3, #20]
			pI2Chandle->pI2C->I2C_CR2 &= !((1<<I2C_CR2_RELOAD)); //disable RELOAD
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2200      	movs	r2, #0
 8000f72:	605a      	str	r2, [r3, #4]
			 *0: software end mode: TC flag is set when NBYTES data are transferred, stretching SCL low.
			 *1: Automatic end mode: a STOP condition is automatically sent when NBYTES data are
			 *transferred.
			 *Note: This bit has no effect in slave mode or when the RELOAD bit is set.
			 */
			if (autoend){ //automatic end mode
 8000f74:	1cbb      	adds	r3, r7, #2
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d011      	beq.n	8000fa0 <I2C_Master_Receiver+0x82>
				pI2Chandle->pI2C->I2C_CR2 |= (1<<I2C_CR2_AUTOEND);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	685a      	ldr	r2, [r3, #4]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2180      	movs	r1, #128	; 0x80
 8000f88:	0489      	lsls	r1, r1, #18
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	605a      	str	r2, [r3, #4]
				pI2Chandle->pI2C->I2C_CR1 |= (1<<I2C_CR1_TCIE); //to enable TC (TCIE is for both TC and TCR)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2140      	movs	r1, #64	; 0x40
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	e00d      	b.n	8000fbc <I2C_Master_Receiver+0x9e>
			}
			else{ //software end mode
				pI2Chandle->pI2C->I2C_CR2 &= !((1<<I2C_CR2_AUTOEND));
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2200      	movs	r2, #0
 8000fac:	605a      	str	r2, [r3, #4]
				pI2Chandle->pI2C->I2C_CR1 &= !((1<<I2C_CR1_TCIE)); //to disable TC
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
		}
		else if (pI2Chandle->I2C_Comm_t.communication_state == (I2C_READY || I2C_RESTART_STOP)){
			//something extra?
		}
		*/
		pI2Chandle->I2C_Comm_t.communication_state = I2C_DURING_RX;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	771a      	strb	r2, [r3, #28]
		//start + address. this would clear TC if it had been set (RESTART_STOP)
		//This bit is set by SW and cleared by HW after Start followed by address sequence is sent
		pI2Chandle->pI2C->I2C_CR2 |= (1<<I2C_CR2_START);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	685a      	ldr	r2, [r3, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2180      	movs	r1, #128	; 0x80
 8000fce:	0189      	lsls	r1, r1, #6
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	605a      	str	r2, [r3, #4]
		I2C_App_Callback(pI2Chandle, I2C_RX_STARTED);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	0018      	movs	r0, r3
 8000fda:	f7ff f9a5 	bl	8000328 <I2C_App_Callback>
	}
}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	b002      	add	sp, #8
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <I2C_TXIS_handler>:
		//bit set by SW, cleared by HW when a STOP condition is detected.Writing ‘0’ has no effect
		pI2Chandle->pI2C->I2C_CR2 |= (1<<I2C_CR2_STOP);
	}
}

static void I2C_TXIS_handler(I2C_Handle_t *pI2Chandle){
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
	/*TXIS set by hardware when I2C_TXDR register empty and the data to be
	*transmitted must be written in I2C_TXDR. It is cleared when the next data to be
	*sent is written in I2C_TXDR register*/
	if (pI2Chandle->I2C_Comm_t.TX_length >=1){
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	68db      	ldr	r3, [r3, #12]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d016      	beq.n	8001024 <I2C_TXIS_handler+0x3e>
		pI2Chandle->pI2C->I2C_TXDR = *(pI2Chandle->I2C_Comm_t.TX_buffer);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	691b      	ldr	r3, [r3, #16]
 8000ffa:	781a      	ldrb	r2, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	629a      	str	r2, [r3, #40]	; 0x28
		pI2Chandle->I2C_Comm_t.TX_buffer++;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	691b      	ldr	r3, [r3, #16]
 8001006:	1c5a      	adds	r2, r3, #1
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	611a      	str	r2, [r3, #16]
		pI2Chandle->I2C_Comm_t.TX_length--;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	1e5a      	subs	r2, r3, #1
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	60da      	str	r2, [r3, #12]
		/*if last byte to be send,wait until STOP or TC/TCR,depending on AUTOEND(these interrupts are handled)
		*state=WAITING_END (STOP or TC/TCR flag)
		*if NBYTES>255, I2C_RELOAD*/
		if (pI2Chandle->I2C_Comm_t.TX_length == 0){
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d102      	bne.n	8001024 <I2C_TXIS_handler+0x3e>
			pI2Chandle->I2C_Comm_t.communication_state = I2C_WAITING_END;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2203      	movs	r2, #3
 8001022:	771a      	strb	r2, [r3, #28]
		}
	}

}
 8001024:	46c0      	nop			; (mov r8, r8)
 8001026:	46bd      	mov	sp, r7
 8001028:	b002      	add	sp, #8
 800102a:	bd80      	pop	{r7, pc}

0800102c <I2C_RXNE_handler>:

static void I2C_RXNE_handler(I2C_Handle_t *pI2Chandle){
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	/*RXNE is set by hardware when received data is copied into I2C_RXDR register, and
	*is ready to be read. It is cleared when I2C_RXDR is read*/
	if (pI2Chandle->I2C_Comm_t.RX_length >=1){
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	695b      	ldr	r3, [r3, #20]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d017      	beq.n	800106c <I2C_RXNE_handler+0x40>
		*(pI2Chandle->I2C_Comm_t.RX_buffer) = pI2Chandle->pI2C->I2C_RXDR;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	b2d2      	uxtb	r2, r2
 8001048:	701a      	strb	r2, [r3, #0]
		pI2Chandle->I2C_Comm_t.RX_buffer++;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	1c5a      	adds	r2, r3, #1
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	619a      	str	r2, [r3, #24]
		pI2Chandle->I2C_Comm_t.RX_length--;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	1e5a      	subs	r2, r3, #1
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	615a      	str	r2, [r3, #20]
		/*if last byte to be send,wait until STOP or TC/TCR,depending on AUTOEND(these interrupts are handled)
		*state=WAITING_END (STOP or TC/TCR flag)
		*if NBYTES>255, I2C_RELOAD*/
		if (pI2Chandle->I2C_Comm_t.RX_length == 0){
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d102      	bne.n	800106c <I2C_RXNE_handler+0x40>
			pI2Chandle->I2C_Comm_t.communication_state = I2C_WAITING_END;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2203      	movs	r2, #3
 800106a:	771a      	strb	r2, [r3, #28]
		}
	}

	//inform the main application of a new read value, through callback
	I2C_App_Callback(pI2Chandle, I2C_NEW_READING);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2104      	movs	r1, #4
 8001070:	0018      	movs	r0, r3
 8001072:	f7ff f959 	bl	8000328 <I2C_App_Callback>
}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	46bd      	mov	sp, r7
 800107a:	b002      	add	sp, #8
 800107c:	bd80      	pop	{r7, pc}

0800107e <I2C_BERR_handler>:

static void I2C_BERR_handler(I2C_Handle_t *pI2Chandle){
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
	/*BERR is set by hardware when a misplaced Start or STOP is detected whereas
	*the peripheral is involved in the transfer. The flag is not set during address phase in slave
	*mode. It is cleared by software by setting BERRCF bit*/
	pI2Chandle->pI2C->I2C_ICR |= (1<<I2C_ICR_BERRCF);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	69da      	ldr	r2, [r3, #28]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2180      	movs	r1, #128	; 0x80
 8001092:	0049      	lsls	r1, r1, #1
 8001094:	430a      	orrs	r2, r1
 8001096:	61da      	str	r2, [r3, #28]
	//Disable I2C
	I2C_EnableDisable(pI2Chandle,DISABLE);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2100      	movs	r1, #0
 800109c:	0018      	movs	r0, r3
 800109e:	f7ff fdfd 	bl	8000c9c <I2C_EnableDisable>
	//inform the main application through callback
	I2C_App_Callback(pI2Chandle, I2C_BERR_ERROR);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2103      	movs	r1, #3
 80010a6:	0018      	movs	r0, r3
 80010a8:	f7ff f93e 	bl	8000328 <I2C_App_Callback>
}
 80010ac:	46c0      	nop			; (mov r8, r8)
 80010ae:	46bd      	mov	sp, r7
 80010b0:	b002      	add	sp, #8
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <I2C_STOP_handler>:

static void I2C_STOP_handler(I2C_Handle_t *pI2Chandle){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	/*This flag is set by hardware when a STOP condition is detected on the bus and the
	*peripheral is involved in this transfer. It is cleared by software by setting the STOPCF bit.*/
	//if I2C_WAITING_END --> I2C_READY. Close transmission/reception,buffer pointing to NULL
	if (pI2Chandle->I2C_Comm_t.communication_state == I2C_WAITING_END){
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	7f1b      	ldrb	r3, [r3, #28]
 80010c0:	2b03      	cmp	r3, #3
 80010c2:	d11a      	bne.n	80010fa <I2C_STOP_handler+0x46>
		pI2Chandle->I2C_Comm_t.communication_state = I2C_READY;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	771a      	strb	r2, [r3, #28]
		pI2Chandle->I2C_Comm_t.RX_buffer = NULL; //null pointer
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	619a      	str	r2, [r3, #24]
		pI2Chandle->I2C_Comm_t.TX_buffer = NULL; //null pointer
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	611a      	str	r2, [r3, #16]
		pI2Chandle->pI2C->I2C_ICR |= (1<<I2C_ICR_STOPCF);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	69da      	ldr	r2, [r3, #28]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2120      	movs	r1, #32
 80010e2:	430a      	orrs	r2, r1
 80010e4:	61da      	str	r2, [r3, #28]
		I2C_EnableDisable(pI2Chandle,DISABLE); //Disable I2C
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2100      	movs	r1, #0
 80010ea:	0018      	movs	r0, r3
 80010ec:	f7ff fdd6 	bl	8000c9c <I2C_EnableDisable>
		I2C_App_Callback(pI2Chandle, I2C_FINISHED);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2102      	movs	r1, #2
 80010f4:	0018      	movs	r0, r3
 80010f6:	f7ff f917 	bl	8000328 <I2C_App_Callback>
	}

}
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	46bd      	mov	sp, r7
 80010fe:	b002      	add	sp, #8
 8001100:	bd80      	pop	{r7, pc}

08001102 <I2C_TC_handler>:

static void I2C_TC_handler(I2C_Handle_t *pI2Chandle){
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
	/*TC(transfer complete) is set by hardware when RELOAD=0, AUTOEND=0 and NBYTES data have been
	*transferred. It is cleared by software when START bit or STOP bit is set.*/
	//if I2C_WAITING_END --> I2C_RESTART_STOP
	if (pI2Chandle->I2C_Comm_t.communication_state == I2C_WAITING_END){
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	7f1b      	ldrb	r3, [r3, #28]
 800110e:	2b03      	cmp	r3, #3
 8001110:	d107      	bne.n	8001122 <I2C_TC_handler+0x20>
		pI2Chandle->I2C_Comm_t.communication_state = I2C_RESTART_STOP;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2204      	movs	r2, #4
 8001116:	771a      	strb	r2, [r3, #28]
		I2C_App_Callback(pI2Chandle, I2C_TC);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2105      	movs	r1, #5
 800111c:	0018      	movs	r0, r3
 800111e:	f7ff f903 	bl	8000328 <I2C_App_Callback>
	}
}
 8001122:	46c0      	nop			; (mov r8, r8)
 8001124:	46bd      	mov	sp, r7
 8001126:	b002      	add	sp, #8
 8001128:	bd80      	pop	{r7, pc}

0800112a <I2C_TCR_handler>:

static void I2C_TCR_handler(I2C_Handle_t *pI2Chandle){ //when NBYTES>255
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
	/*TCR(transfer complete reload) is set by hardware when RELOAD=1 and NBYTES data have been transferred. It is
	*cleared by software when NBYTES is written to a non-zero value.*/
	//if I2C_WAITING_END --> I2C_RELOAD
	if (pI2Chandle->I2C_Comm_t.communication_state == I2C_WAITING_END){
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	7f1b      	ldrb	r3, [r3, #28]
 8001136:	2b03      	cmp	r3, #3
 8001138:	d107      	bne.n	800114a <I2C_TCR_handler+0x20>
		pI2Chandle->I2C_Comm_t.communication_state = I2C_RELOAD;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2205      	movs	r2, #5
 800113e:	771a      	strb	r2, [r3, #28]
		I2C_App_Callback(pI2Chandle, I2C_TCR);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2106      	movs	r1, #6
 8001144:	0018      	movs	r0, r3
 8001146:	f7ff f8ef 	bl	8000328 <I2C_App_Callback>
	}
}
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	46bd      	mov	sp, r7
 800114e:	b002      	add	sp, #8
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <SPI_ClockControl>:
static void SPI_TXE_handler(SPI_Handle_t *pSPIhandle);
static void SPI_RXNE_handler(SPI_Handle_t *pSPIhandle);
static void SPI_OVR_handler(SPI_Handle_t *pSPIhandle);

/*Enable or disable SPI peripheral clock*/
void SPI_ClockControl(SPI_Handle_t *pSPIhandle, uint8_t EnableDisable){
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	000a      	movs	r2, r1
 800115e:	1cfb      	adds	r3, r7, #3
 8001160:	701a      	strb	r2, [r3, #0]
	if (EnableDisable == ENABLE) {
 8001162:	1cfb      	adds	r3, r7, #3
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d119      	bne.n	800119e <SPI_ClockControl+0x4a>
		if (pSPIhandle->pSPI == SPI1_I2S1){
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a19      	ldr	r2, [pc, #100]	; (80011d4 <SPI_ClockControl+0x80>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d107      	bne.n	8001184 <SPI_ClockControl+0x30>
			SPI1_I2S1_EnableClock();
 8001174:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <SPI_ClockControl+0x84>)
 8001176:	699a      	ldr	r2, [r3, #24]
 8001178:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <SPI_ClockControl+0x84>)
 800117a:	2180      	movs	r1, #128	; 0x80
 800117c:	0149      	lsls	r1, r1, #5
 800117e:	430a      	orrs	r2, r1
 8001180:	619a      	str	r2, [r3, #24]
		}
		else if (pSPIhandle->pSPI == SPI2){
			SPI2_DisableClock();
		}
	}
}
 8001182:	e023      	b.n	80011cc <SPI_ClockControl+0x78>
		else if (pSPIhandle->pSPI == SPI2){
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a14      	ldr	r2, [pc, #80]	; (80011dc <SPI_ClockControl+0x88>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d11e      	bne.n	80011cc <SPI_ClockControl+0x78>
			SPI2_EnableClock();
 800118e:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <SPI_ClockControl+0x84>)
 8001190:	69da      	ldr	r2, [r3, #28]
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <SPI_ClockControl+0x84>)
 8001194:	2180      	movs	r1, #128	; 0x80
 8001196:	01c9      	lsls	r1, r1, #7
 8001198:	430a      	orrs	r2, r1
 800119a:	61da      	str	r2, [r3, #28]
}
 800119c:	e016      	b.n	80011cc <SPI_ClockControl+0x78>
		if (pSPIhandle->pSPI == SPI1_I2S1){
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a0c      	ldr	r2, [pc, #48]	; (80011d4 <SPI_ClockControl+0x80>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d106      	bne.n	80011b6 <SPI_ClockControl+0x62>
			SPI1_I2S1_DisableClock();
 80011a8:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <SPI_ClockControl+0x84>)
 80011aa:	699a      	ldr	r2, [r3, #24]
 80011ac:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <SPI_ClockControl+0x84>)
 80011ae:	490c      	ldr	r1, [pc, #48]	; (80011e0 <SPI_ClockControl+0x8c>)
 80011b0:	400a      	ands	r2, r1
 80011b2:	619a      	str	r2, [r3, #24]
}
 80011b4:	e00a      	b.n	80011cc <SPI_ClockControl+0x78>
		else if (pSPIhandle->pSPI == SPI2){
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a08      	ldr	r2, [pc, #32]	; (80011dc <SPI_ClockControl+0x88>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d105      	bne.n	80011cc <SPI_ClockControl+0x78>
			SPI2_DisableClock();
 80011c0:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <SPI_ClockControl+0x84>)
 80011c2:	69da      	ldr	r2, [r3, #28]
 80011c4:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <SPI_ClockControl+0x84>)
 80011c6:	4907      	ldr	r1, [pc, #28]	; (80011e4 <SPI_ClockControl+0x90>)
 80011c8:	400a      	ands	r2, r1
 80011ca:	61da      	str	r2, [r3, #28]
}
 80011cc:	46c0      	nop			; (mov r8, r8)
 80011ce:	46bd      	mov	sp, r7
 80011d0:	b002      	add	sp, #8
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40013000 	.word	0x40013000
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40003800 	.word	0x40003800
 80011e0:	ffffefff 	.word	0xffffefff
 80011e4:	ffffbfff 	.word	0xffffbfff

080011e8 <SPI_Init>:

/*SPI initialization, which does not mean to enable SPI (which is done through SPI_EnableDisable) */
void SPI_Init(SPI_Handle_t *pSPIhandle){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]

	SPI_ClockControl(pSPIhandle,ENABLE); //enable SPI peripheral clock
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2101      	movs	r1, #1
 80011f4:	0018      	movs	r0, r3
 80011f6:	f7ff ffad 	bl	8001154 <SPI_ClockControl>
	/*Configure CR1*/
	//first,CR1 can be reset completely as it is not related to other parts (it might be reset with memset in the app,too)
	pSPIhandle->pSPI->SPI_CR1 = 0;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]

	//master/slave
	pSPIhandle->pSPI->SPI_CR1 |= ((pSPIhandle->SPI_Config.SPI_Mode)<<SPI_CR1_MSTR); //bit MSTR set
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	791b      	ldrb	r3, [r3, #4]
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	0019      	movs	r1, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	430a      	orrs	r2, r1
 8001216:	601a      	str	r2, [r3, #0]

	//mode: full duplex/half duplex/simplex.Bits:BIDIMODE (full/half)+BIDIOE (output enabled)+RXONLY(1 if BIDIOE disabled)
	if (pSPIhandle->SPI_Config.SPI_Mode == SPI_FULLDUPLEX){
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	791b      	ldrb	r3, [r3, #4]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d108      	bne.n	8001232 <SPI_Init+0x4a>
		pSPIhandle->pSPI->SPI_CR1 &= ~(1<<SPI_CR1_BIDIMODE); //not necessary to set 0 because SPI_CR1 had been initialized to 0,but makes code clearer
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	493f      	ldr	r1, [pc, #252]	; (8001328 <SPI_Init+0x140>)
 800122c:	400a      	ands	r2, r1
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	e02a      	b.n	8001288 <SPI_Init+0xa0>
	}
	else if (pSPIhandle->SPI_Config.SPI_Mode == SPI_HALFDUPLEX){
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	791b      	ldrb	r3, [r3, #4]
 8001236:	2b02      	cmp	r3, #2
 8001238:	d109      	bne.n	800124e <SPI_Init+0x66>
		pSPIhandle->pSPI->SPI_CR1 |= (1<<SPI_CR1_BIDIMODE);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2180      	movs	r1, #128	; 0x80
 8001246:	0209      	lsls	r1, r1, #8
 8001248:	430a      	orrs	r2, r1
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	e01c      	b.n	8001288 <SPI_Init+0xa0>
	}
	else if (pSPIhandle->SPI_Config.SPI_Mode == SPI_CR1_RXONLY){
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	791b      	ldrb	r3, [r3, #4]
 8001252:	2b0a      	cmp	r3, #10
 8001254:	d118      	bne.n	8001288 <SPI_Init+0xa0>
		//acc to datasheet, Keep BIDIMODE bit clear when receive only mode is active.
		pSPIhandle->pSPI->SPI_CR1 &= ~(1<<SPI_CR1_BIDIMODE);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4931      	ldr	r1, [pc, #196]	; (8001328 <SPI_Init+0x140>)
 8001262:	400a      	ands	r2, r1
 8001264:	601a      	str	r2, [r3, #0]
		pSPIhandle->pSPI->SPI_CR1 &= ~(1<<SPI_CR1_BIDIOE);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	492e      	ldr	r1, [pc, #184]	; (800132c <SPI_Init+0x144>)
 8001272:	400a      	ands	r2, r1
 8001274:	601a      	str	r2, [r3, #0]
		pSPIhandle->pSPI->SPI_CR1 |= (1<<SPI_CR1_RXONLY);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2180      	movs	r1, #128	; 0x80
 8001282:	00c9      	lsls	r1, r1, #3
 8001284:	430a      	orrs	r2, r1
 8001286:	601a      	str	r2, [r3, #0]
	}
	//simplex TX is actually full duplex

	//Phase
	pSPIhandle->pSPI->SPI_CR1 |= (pSPIhandle->SPI_Config.SPI_Phase<<SPI_CR1_CPHA);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	7a9b      	ldrb	r3, [r3, #10]
 8001292:	0019      	movs	r1, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	430a      	orrs	r2, r1
 800129a:	601a      	str	r2, [r3, #0]

	//Polarity
	pSPIhandle->pSPI->SPI_CR1 |= (pSPIhandle->SPI_Config.SPI_Pol<<SPI_CR1_CPOL);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	7a5b      	ldrb	r3, [r3, #9]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	0019      	movs	r1, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	430a      	orrs	r2, r1
 80012b0:	601a      	str	r2, [r3, #0]

	//software slave management
	pSPIhandle->pSPI->SPI_CR1 |= (pSPIhandle->SPI_Config.SPI_SWslave<<SPI_CR1_SSM);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	7a1b      	ldrb	r3, [r3, #8]
 80012bc:	025b      	lsls	r3, r3, #9
 80012be:	0019      	movs	r1, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	430a      	orrs	r2, r1
 80012c6:	601a      	str	r2, [r3, #0]

	//Speed (baudrate)
	pSPIhandle->pSPI->SPI_CR1 |= (pSPIhandle->SPI_Config.SPI_Speed<<SPI_CR1_BR);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	795b      	ldrb	r3, [r3, #5]
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	0019      	movs	r1, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	430a      	orrs	r2, r1
 80012dc:	601a      	str	r2, [r3, #0]

	/*CR2. Not reset the whole CR2 to 0 as its bits can be modified from other parts of the code (enable interrupts)*/
	//Size --> this is in CR2!! First reset the data size (bits8-11) and then set it
	pSPIhandle->pSPI->SPI_CR2 &= (~(15<<SPI_CR2_DS)); //I had put pSPIhandle->pSPI->SPI_CR2 &= (~(7<<SPI_CR2_DS)). Why 7?
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4911      	ldr	r1, [pc, #68]	; (8001330 <SPI_Init+0x148>)
 80012ea:	400a      	ands	r2, r1
 80012ec:	605a      	str	r2, [r3, #4]
	pSPIhandle->pSPI->SPI_CR2 |= (pSPIhandle->SPI_Config.SPI_DataSize <<SPI_CR2_DS);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	685a      	ldr	r2, [r3, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	79db      	ldrb	r3, [r3, #7]
 80012f8:	021b      	lsls	r3, r3, #8
 80012fa:	0019      	movs	r1, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	430a      	orrs	r2, r1
 8001302:	605a      	str	r2, [r3, #4]

	//to avoid data packing, set FIFO threshold reception to 1/4 (8-bit). Read data packing section
	if (pSPIhandle->SPI_Config.SPI_DataSize == SPI_8BIT){
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	79db      	ldrb	r3, [r3, #7]
 8001308:	2b07      	cmp	r3, #7
 800130a:	d108      	bne.n	800131e <SPI_Init+0x136>
		pSPIhandle->pSPI->SPI_CR2 |= (1<<SPI_CR2_FRXTH);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	685a      	ldr	r2, [r3, #4]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2180      	movs	r1, #128	; 0x80
 8001318:	0149      	lsls	r1, r1, #5
 800131a:	430a      	orrs	r2, r1
 800131c:	605a      	str	r2, [r3, #4]
	}
}
 800131e:	46c0      	nop			; (mov r8, r8)
 8001320:	46bd      	mov	sp, r7
 8001322:	b002      	add	sp, #8
 8001324:	bd80      	pop	{r7, pc}
 8001326:	46c0      	nop			; (mov r8, r8)
 8001328:	ffff7fff 	.word	0xffff7fff
 800132c:	ffffbfff 	.word	0xffffbfff
 8001330:	fffff0ff 	.word	0xfffff0ff

08001334 <SPI_EnableDisable>:

/*SPI control: enable/disable --> bit 6 CR1 */
void SPI_EnableDisable(SPI_Handle_t *pSPIhandle, uint8_t EnableDisable){
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	000a      	movs	r2, r1
 800133e:	1cfb      	adds	r3, r7, #3
 8001340:	701a      	strb	r2, [r3, #0]
	//instead of reset and set bit 6, I prefer to directly set the value
	if (EnableDisable == ENABLE){
 8001342:	1cfb      	adds	r3, r7, #3
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d108      	bne.n	800135c <SPI_EnableDisable+0x28>
		pSPIhandle->pSPI->SPI_CR1 |= (1<<SPI_CR1_SPE);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2140      	movs	r1, #64	; 0x40
 8001356:	430a      	orrs	r2, r1
 8001358:	601a      	str	r2, [r3, #0]
	}
	else { //0
		pSPIhandle->pSPI->SPI_CR1 &= (~(1<<SPI_CR1_SPE));
	}
}
 800135a:	e007      	b.n	800136c <SPI_EnableDisable+0x38>
		pSPIhandle->pSPI->SPI_CR1 &= (~(1<<SPI_CR1_SPE));
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2140      	movs	r1, #64	; 0x40
 8001368:	438a      	bics	r2, r1
 800136a:	601a      	str	r2, [r3, #0]
}
 800136c:	46c0      	nop			; (mov r8, r8)
 800136e:	46bd      	mov	sp, r7
 8001370:	b002      	add	sp, #8
 8001372:	bd80      	pop	{r7, pc}

08001374 <SPI_SSOE>:
		pSPIhandle->pSPI->SPI_CR1 &= (~(1<<SPI_CR1_SSI));
	}
}

/*SSOE: SS output enable*/
void SPI_SSOE(SPI_Handle_t *pSPIhandle, uint8_t EnableDisable){
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	000a      	movs	r2, r1
 800137e:	1cfb      	adds	r3, r7, #3
 8001380:	701a      	strb	r2, [r3, #0]
	if (EnableDisable == ENABLE){
 8001382:	1cfb      	adds	r3, r7, #3
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d108      	bne.n	800139c <SPI_SSOE+0x28>
		pSPIhandle->pSPI->SPI_CR2 |= (1<<SPI_CR2_SSOE);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	685a      	ldr	r2, [r3, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2104      	movs	r1, #4
 8001396:	430a      	orrs	r2, r1
 8001398:	605a      	str	r2, [r3, #4]
	}
	else { //0
		pSPIhandle->pSPI->SPI_CR2 &= (~(1<<SPI_CR2_SSOE));
	}
}
 800139a:	e007      	b.n	80013ac <SPI_SSOE+0x38>
		pSPIhandle->pSPI->SPI_CR2 &= (~(1<<SPI_CR2_SSOE));
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	685a      	ldr	r2, [r3, #4]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2104      	movs	r1, #4
 80013a8:	438a      	bics	r2, r1
 80013aa:	605a      	str	r2, [r3, #4]
}
 80013ac:	46c0      	nop			; (mov r8, r8)
 80013ae:	46bd      	mov	sp, r7
 80013b0:	b002      	add	sp, #8
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <SPI_IRQ_EnableDisable>:

}


/*IRQ Configuration and ISR handling*/
void SPI_IRQ_EnableDisable(uint8_t IRQ_Number, uint8_t EnableDisable){
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	0002      	movs	r2, r0
 80013bc:	1dfb      	adds	r3, r7, #7
 80013be:	701a      	strb	r2, [r3, #0]
 80013c0:	1dbb      	adds	r3, r7, #6
 80013c2:	1c0a      	adds	r2, r1, #0
 80013c4:	701a      	strb	r2, [r3, #0]
	if(EnableDisable == ENABLE){ //enable by means of ISER
 80013c6:	1dbb      	adds	r3, r7, #6
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d10b      	bne.n	80013e6 <SPI_IRQ_EnableDisable+0x32>
		*NVIC_ISER |= ( 1 << IRQ_Number);
 80013ce:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <SPI_IRQ_EnableDisable+0x50>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	1dfb      	adds	r3, r7, #7
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2101      	movs	r1, #1
 80013d8:	4099      	lsls	r1, r3
 80013da:	000b      	movs	r3, r1
 80013dc:	0019      	movs	r1, r3
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <SPI_IRQ_EnableDisable+0x50>)
 80013e0:	430a      	orrs	r2, r1
 80013e2:	601a      	str	r2, [r3, #0]
	}
	else { //disable by means of ICER
		*NVIC_ICER |= ( 1 << IRQ_Number);
	}
}
 80013e4:	e00a      	b.n	80013fc <SPI_IRQ_EnableDisable+0x48>
		*NVIC_ICER |= ( 1 << IRQ_Number);
 80013e6:	4b08      	ldr	r3, [pc, #32]	; (8001408 <SPI_IRQ_EnableDisable+0x54>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	1dfb      	adds	r3, r7, #7
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2101      	movs	r1, #1
 80013f0:	4099      	lsls	r1, r3
 80013f2:	000b      	movs	r3, r1
 80013f4:	0019      	movs	r1, r3
 80013f6:	4b04      	ldr	r3, [pc, #16]	; (8001408 <SPI_IRQ_EnableDisable+0x54>)
 80013f8:	430a      	orrs	r2, r1
 80013fa:	601a      	str	r2, [r3, #0]
}
 80013fc:	46c0      	nop			; (mov r8, r8)
 80013fe:	46bd      	mov	sp, r7
 8001400:	b002      	add	sp, #8
 8001402:	bd80      	pop	{r7, pc}
 8001404:	e000e100 	.word	0xe000e100
 8001408:	e000e180 	.word	0xe000e180

0800140c <SPI_IRQ_Handling>:
	uint32_t tempIPR = ((*(NVIC_IPR_BASE + numberIPR))&~(0xFF<<blockIPR));
	tempIPR |= (IRQ_Priority<<(8*blockIPR+6)); //6 is because bits 0-5 are not editable, only bits 6-7 count.
	*(NVIC_IPR_BASE + numberIPR) = tempIPR;
}

void SPI_IRQ_Handling(SPI_Handle_t *pSPIhandle){
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	//to handle the possible interrupts related to SPI:TXE,RXNE,MODF,OVR,FRE,CRCERR
	//Call the handler related to the interrupt if register is true as long as it is enabled
	//TXE TX empty (enable control:TXEIE).if set, TX buffer empty so it can be loaded.
	if ( (pSPIhandle->pSPI->SPI_CR2 & (1<<SPI_CR2_TXEIE)) && (pSPIhandle->pSPI->SPI_SR & (1<<SPI_SR_TXE)) ){ //could use SPI_GetFlagStatus
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2280      	movs	r2, #128	; 0x80
 800141c:	4013      	ands	r3, r2
 800141e:	d009      	beq.n	8001434 <SPI_IRQ_Handling+0x28>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	2202      	movs	r2, #2
 8001428:	4013      	ands	r3, r2
 800142a:	d003      	beq.n	8001434 <SPI_IRQ_Handling+0x28>
		SPI_TXE_handler(pSPIhandle);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	0018      	movs	r0, r3
 8001430:	f000 f824 	bl	800147c <SPI_TXE_handler>
	}

	//RXNE RX not empty (enable control:RXNEIE). if set, RX not empty so it has data to be read.
	if ( (pSPIhandle->pSPI->SPI_CR2 & (1<<SPI_CR2_RXNEIE)) && (pSPIhandle->pSPI->SPI_SR & (1<<SPI_SR_RXNE)) ){ //could use SPI_GetFlagStatus
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2240      	movs	r2, #64	; 0x40
 800143c:	4013      	ands	r3, r2
 800143e:	d009      	beq.n	8001454 <SPI_IRQ_Handling+0x48>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	2201      	movs	r2, #1
 8001448:	4013      	ands	r3, r2
 800144a:	d003      	beq.n	8001454 <SPI_IRQ_Handling+0x48>
		SPI_RXNE_handler(pSPIhandle);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	0018      	movs	r0, r3
 8001450:	f000 f85d 	bl	800150e <SPI_RXNE_handler>
	MODF bit is set when the SS pin goes high during transmission.*/
	//To be implemented if someday I use multimaster

	/*OVR. Overrun. (enable control:ERRIE)occurs when data is received by a master or slave and the RXFIFO has not enough space to store
	 this received data.*/
	if ( (pSPIhandle->pSPI->SPI_CR2 & (1<<SPI_CR2_ERRIE)) && (pSPIhandle->pSPI->SPI_SR & (1<<SPI_SR_OVR)) ){ //could use SPI_GetFlagStatus
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2220      	movs	r2, #32
 800145c:	4013      	ands	r3, r2
 800145e:	d009      	beq.n	8001474 <SPI_IRQ_Handling+0x68>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	2240      	movs	r2, #64	; 0x40
 8001468:	4013      	ands	r3, r2
 800146a:	d003      	beq.n	8001474 <SPI_IRQ_Handling+0x68>
		SPI_OVR_handler(pSPIhandle);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	0018      	movs	r0, r3
 8001470:	f000 f898 	bl	80015a4 <SPI_OVR_handler>
	//FRE. TI frame format error.
	//To be implemented when I use TI mode (it seems that TI and Motorola modes are related to SSPFSSOUT output, which many devices don't use).

	//CRCERR
	//To be implemented
}
 8001474:	46c0      	nop			; (mov r8, r8)
 8001476:	46bd      	mov	sp, r7
 8001478:	b002      	add	sp, #8
 800147a:	bd80      	pop	{r7, pc}

0800147c <SPI_TXE_handler>:

/*interrupt handlers*/
static void SPI_TXE_handler(SPI_Handle_t *pSPIhandle){
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	/*When transmission is enabled, a sequence begins and continues while any data is present in the TXFIFO of the master.*/
	//Let's limit it to 8 and 16 bits frame. Every char is 1 byte
	//Load the data into DR, move the pointer (buffer) and decrease length
	if (pSPIhandle->SPI_Config.SPI_DataSize == SPI_8BIT){
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	79db      	ldrb	r3, [r3, #7]
 8001488:	2b07      	cmp	r3, #7
 800148a:	d111      	bne.n	80014b0 <SPI_TXE_handler+0x34>
		/*this sends 2 bytes <--pSPIhandle->pSPI->SPI_DR = *(pSPIhandle->SPI_Comm.TX_buffer);*/
		//data packing happens. it transmits 16-bit unless we cast into uint8_t
		*((uint8_t*)&pSPIhandle->pSPI->SPI_DR) = *(pSPIhandle->SPI_Comm.TX_buffer);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	691a      	ldr	r2, [r3, #16]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	330c      	adds	r3, #12
 8001496:	7812      	ldrb	r2, [r2, #0]
 8001498:	701a      	strb	r2, [r3, #0]
		pSPIhandle->SPI_Comm.TX_buffer++;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	1c5a      	adds	r2, r3, #1
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	611a      	str	r2, [r3, #16]
		pSPIhandle->SPI_Comm.TX_length--;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	1e5a      	subs	r2, r3, #1
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	e013      	b.n	80014d8 <SPI_TXE_handler+0x5c>
	}
	else if (pSPIhandle->SPI_Config.SPI_DataSize == SPI_16BIT){
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	79db      	ldrb	r3, [r3, #7]
 80014b4:	2b0f      	cmp	r3, #15
 80014b6:	d10f      	bne.n	80014d8 <SPI_TXE_handler+0x5c>
		//TX_buffer is defined as 8-bit.additional treatment is necessary
		pSPIhandle->pSPI->SPI_DR = *((uint16_t*)(pSPIhandle->SPI_Comm.TX_buffer));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	881a      	ldrh	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	60da      	str	r2, [r3, #12]
		pSPIhandle->SPI_Comm.TX_buffer+=2;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	691b      	ldr	r3, [r3, #16]
 80014c8:	1c9a      	adds	r2, r3, #2
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	611a      	str	r2, [r3, #16]
		pSPIhandle->SPI_Comm.TX_length-=2;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	1e9a      	subs	r2, r3, #2
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	60da      	str	r2, [r3, #12]
	}
	//(I don't use else because DS allows more lengths)

	//Close transmission when no more bytes in the buffer
	if (pSPIhandle->SPI_Comm.TX_length == 0){
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d112      	bne.n	8001506 <SPI_TXE_handler+0x8a>
		pSPIhandle->pSPI->SPI_CR2 &= (~( 1 << SPI_CR2_TXEIE)); //disable the TX interrupt.It will be enabled by SPI_Send in the next sending
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2180      	movs	r1, #128	; 0x80
 80014ec:	438a      	bics	r2, r1
 80014ee:	605a      	str	r2, [r3, #4]
		pSPIhandle->SPI_Comm.TX_buffer = NULL; //null pointer
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	611a      	str	r2, [r3, #16]
		pSPIhandle->SPI_Comm.TX_state = SPI_READY; //important for loops in main!
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	751a      	strb	r2, [r3, #20]
		SPI_App_Callback(pSPIhandle,SPI_TX_FINISHED); //Inform the main application
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2101      	movs	r1, #1
 8001500:	0018      	movs	r0, r3
 8001502:	f000 f868 	bl	80015d6 <SPI_App_Callback>
	}
}
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	46bd      	mov	sp, r7
 800150a:	b002      	add	sp, #8
 800150c:	bd80      	pop	{r7, pc}

0800150e <SPI_RXNE_handler>:

static void SPI_RXNE_handler(SPI_Handle_t *pSPIhandle){
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
	//Let's limit it to 8 and 16 bits frame. Every char is 1 byte
	//Load the data into DR, move the pointer (buffer) and decrease length
	if (pSPIhandle->SPI_Config.SPI_DataSize == SPI_8BIT){
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	79db      	ldrb	r3, [r3, #7]
 800151a:	2b07      	cmp	r3, #7
 800151c:	d111      	bne.n	8001542 <SPI_RXNE_handler+0x34>
		*(pSPIhandle->SPI_Comm.RX_buffer) = ((uint8_t)pSPIhandle->pSPI->SPI_DR) ;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	68da      	ldr	r2, [r3, #12]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	69db      	ldr	r3, [r3, #28]
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	701a      	strb	r2, [r3, #0]
		pSPIhandle->SPI_Comm.RX_buffer++;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69db      	ldr	r3, [r3, #28]
 8001530:	1c5a      	adds	r2, r3, #1
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	61da      	str	r2, [r3, #28]
		pSPIhandle->SPI_Comm.RX_length--;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	1e5a      	subs	r2, r3, #1
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	619a      	str	r2, [r3, #24]
 8001540:	e014      	b.n	800156c <SPI_RXNE_handler+0x5e>
	}
	else if (pSPIhandle->SPI_Config.SPI_DataSize == SPI_16BIT){
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	79db      	ldrb	r3, [r3, #7]
 8001546:	2b0f      	cmp	r3, #15
 8001548:	d110      	bne.n	800156c <SPI_RXNE_handler+0x5e>
		//RX_buffer is defined as 8-bit.additional treatment is necessary
		*((uint16_t*)pSPIhandle->SPI_Comm.RX_buffer) = ((uint16_t)pSPIhandle->pSPI->SPI_DR) ;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68da      	ldr	r2, [r3, #12]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69db      	ldr	r3, [r3, #28]
 8001554:	b292      	uxth	r2, r2
 8001556:	801a      	strh	r2, [r3, #0]
		pSPIhandle->SPI_Comm.RX_buffer+=2;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	69db      	ldr	r3, [r3, #28]
 800155c:	1c9a      	adds	r2, r3, #2
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	61da      	str	r2, [r3, #28]
		pSPIhandle->SPI_Comm.RX_length-=2;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	1e9a      	subs	r2, r3, #2
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	619a      	str	r2, [r3, #24]
	}
	//(I don't use else because DS allows more lengths)

	//Close reception when no more bytes in the buffer
	if (pSPIhandle->SPI_Comm.RX_length == 0){
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d113      	bne.n	800159c <SPI_RXNE_handler+0x8e>
		pSPIhandle->pSPI->SPI_CR2 &= (~( 1 << SPI_CR2_RXNEIE)); //disable the RX interrupt.It will be enabled by SPI_Receive in the next sending
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	685a      	ldr	r2, [r3, #4]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2140      	movs	r1, #64	; 0x40
 8001580:	438a      	bics	r2, r1
 8001582:	605a      	str	r2, [r3, #4]
		pSPIhandle->SPI_Comm.RX_buffer = NULL; //null pointer
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	61da      	str	r2, [r3, #28]
		pSPIhandle->SPI_Comm.RX_state = SPI_READY; //important for loops in main!
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2220      	movs	r2, #32
 800158e:	2100      	movs	r1, #0
 8001590:	5499      	strb	r1, [r3, r2]
		SPI_App_Callback(pSPIhandle,SPI_RX_FINISHED); //Inform the main application
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2102      	movs	r1, #2
 8001596:	0018      	movs	r0, r3
 8001598:	f000 f81d 	bl	80015d6 <SPI_App_Callback>
	}
}
 800159c:	46c0      	nop			; (mov r8, r8)
 800159e:	46bd      	mov	sp, r7
 80015a0:	b002      	add	sp, #8
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <SPI_OVR_handler>:

static void SPI_OVR_handler(SPI_Handle_t *pSPIhandle){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
	//Clearing OVR bit is done by a read access to the SPI_DR register followed by a read access to the SPI_SR register
	//if the error happens during transmission,as this error is related to RXFIFO,we won't clear it here. If so, the app will do it
	if (pSPIhandle->SPI_Comm.TX_state != SPI_DURING_TX){ //clear
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	7d1b      	ldrb	r3, [r3, #20]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d007      	beq.n	80015c4 <SPI_OVR_handler+0x20>
		uint32_t reading; //maybe with uint8_t enough to read DR and SR?
		reading = pSPIhandle->pSPI->SPI_DR;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	60fb      	str	r3, [r7, #12]
		reading = pSPIhandle->pSPI->SPI_SR;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	60fb      	str	r3, [r7, #12]
	}
	//inform the main application
	SPI_App_Callback(pSPIhandle,SPI_OVR_EVENT);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2103      	movs	r1, #3
 80015c8:	0018      	movs	r0, r3
 80015ca:	f000 f804 	bl	80015d6 <SPI_App_Callback>
}
 80015ce:	46c0      	nop			; (mov r8, r8)
 80015d0:	46bd      	mov	sp, r7
 80015d2:	b004      	add	sp, #16
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <SPI_App_Callback>:
		pSPIhandle->pSPI->SPI_CR2 |= (1 << SPI_CR2_RXNEIE);//enable the RX interrupt to start reception
	}
}

/*Callback to application */
__attribute__((weak)) void SPI_App_Callback(SPI_Handle_t *pSPIhandle,uint8_t Event){
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
 80015de:	000a      	movs	r2, r1
 80015e0:	1cfb      	adds	r3, r7, #3
 80015e2:	701a      	strb	r2, [r3, #0]
	//This function will be implemented in every particular application. Thus, the weak attribute
}
 80015e4:	46c0      	nop			; (mov r8, r8)
 80015e6:	46bd      	mov	sp, r7
 80015e8:	b002      	add	sp, #8
 80015ea:	bd80      	pop	{r7, pc}

080015ec <__libc_init_array>:
 80015ec:	b570      	push	{r4, r5, r6, lr}
 80015ee:	2600      	movs	r6, #0
 80015f0:	4d0c      	ldr	r5, [pc, #48]	; (8001624 <__libc_init_array+0x38>)
 80015f2:	4c0d      	ldr	r4, [pc, #52]	; (8001628 <__libc_init_array+0x3c>)
 80015f4:	1b64      	subs	r4, r4, r5
 80015f6:	10a4      	asrs	r4, r4, #2
 80015f8:	42a6      	cmp	r6, r4
 80015fa:	d109      	bne.n	8001610 <__libc_init_array+0x24>
 80015fc:	2600      	movs	r6, #0
 80015fe:	f000 f821 	bl	8001644 <_init>
 8001602:	4d0a      	ldr	r5, [pc, #40]	; (800162c <__libc_init_array+0x40>)
 8001604:	4c0a      	ldr	r4, [pc, #40]	; (8001630 <__libc_init_array+0x44>)
 8001606:	1b64      	subs	r4, r4, r5
 8001608:	10a4      	asrs	r4, r4, #2
 800160a:	42a6      	cmp	r6, r4
 800160c:	d105      	bne.n	800161a <__libc_init_array+0x2e>
 800160e:	bd70      	pop	{r4, r5, r6, pc}
 8001610:	00b3      	lsls	r3, r6, #2
 8001612:	58eb      	ldr	r3, [r5, r3]
 8001614:	4798      	blx	r3
 8001616:	3601      	adds	r6, #1
 8001618:	e7ee      	b.n	80015f8 <__libc_init_array+0xc>
 800161a:	00b3      	lsls	r3, r6, #2
 800161c:	58eb      	ldr	r3, [r5, r3]
 800161e:	4798      	blx	r3
 8001620:	3601      	adds	r6, #1
 8001622:	e7f2      	b.n	800160a <__libc_init_array+0x1e>
 8001624:	0800165c 	.word	0x0800165c
 8001628:	0800165c 	.word	0x0800165c
 800162c:	0800165c 	.word	0x0800165c
 8001630:	08001660 	.word	0x08001660

08001634 <memset>:
 8001634:	0003      	movs	r3, r0
 8001636:	1882      	adds	r2, r0, r2
 8001638:	4293      	cmp	r3, r2
 800163a:	d100      	bne.n	800163e <memset+0xa>
 800163c:	4770      	bx	lr
 800163e:	7019      	strb	r1, [r3, #0]
 8001640:	3301      	adds	r3, #1
 8001642:	e7f9      	b.n	8001638 <memset+0x4>

08001644 <_init>:
 8001644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800164a:	bc08      	pop	{r3}
 800164c:	469e      	mov	lr, r3
 800164e:	4770      	bx	lr

08001650 <_fini>:
 8001650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001652:	46c0      	nop			; (mov r8, r8)
 8001654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001656:	bc08      	pop	{r3}
 8001658:	469e      	mov	lr, r3
 800165a:	4770      	bx	lr
