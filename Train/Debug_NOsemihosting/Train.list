
Train.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017a8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001868  08001868  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001868  08001868  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001868  08001868  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001868  08001868  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001868  08001868  00011868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800186c  0800186c  0001186c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001870  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000004  08001874  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08001874  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001f3a  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000669  00000000  00000000  00021f66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000250  00000000  00000000  000225d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000208  00000000  00000000  00022820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001652  00000000  00000000  00022a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002386  00000000  00000000  0002407a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000a1b1  00000000  00000000  00026400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000305b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000007a4  00000000  00000000  00030604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001850 	.word	0x08001850

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08001850 	.word	0x08001850

08000108 <delay>:
	}
	return length;
}

void delay(uint32_t timeDelayed)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	b084      	sub	sp, #16
 800010c:	af00      	add	r7, sp, #0
 800010e:	6078      	str	r0, [r7, #4]
	// some delay for the debouncing of the buttons
	for(uint32_t i = 0 ; i < timeDelayed ; i ++);//SPI,GPIO too?: 300000/2 working in old PC. in new PC, so far 1000000/2 mostly
 8000110:	2300      	movs	r3, #0
 8000112:	60fb      	str	r3, [r7, #12]
 8000114:	e002      	b.n	800011c <delay+0x14>
 8000116:	68fb      	ldr	r3, [r7, #12]
 8000118:	3301      	adds	r3, #1
 800011a:	60fb      	str	r3, [r7, #12]
 800011c:	68fa      	ldr	r2, [r7, #12]
 800011e:	687b      	ldr	r3, [r7, #4]
 8000120:	429a      	cmp	r2, r3
 8000122:	d3f8      	bcc.n	8000116 <delay+0xe>
}
 8000124:	46c0      	nop			; (mov r8, r8)
 8000126:	46c0      	nop			; (mov r8, r8)
 8000128:	46bd      	mov	sp, r7
 800012a:	b004      	add	sp, #16
 800012c:	bd80      	pop	{r7, pc}
	...

08000130 <main>:
//configure ADS1115 registers
void configureADS1115(I2C_Handle_t *pI2Chandle);

/**********************************************START MAIN********************************************************************/
int main(void)
{
 8000130:	b580      	push	{r7, lr}
 8000132:	af00      	add	r7, sp, #0
	//initialise_monitor_handles(); //for debugging in IDE
	//printf("THIS STARTS\n");


	//initialize structures to 0 to avoid garbage values
	memset(&buttons,0,sizeof(buttons));
 8000134:	4b2f      	ldr	r3, [pc, #188]	; (80001f4 <main+0xc4>)
 8000136:	220c      	movs	r2, #12
 8000138:	2100      	movs	r1, #0
 800013a:	0018      	movs	r0, r3
 800013c:	f001 fb80 	bl	8001840 <memset>
	memset(&leds,0,sizeof(leds));
 8000140:	4b2d      	ldr	r3, [pc, #180]	; (80001f8 <main+0xc8>)
 8000142:	220c      	movs	r2, #12
 8000144:	2100      	movs	r1, #0
 8000146:	0018      	movs	r0, r3
 8000148:	f001 fb7a 	bl	8001840 <memset>

	/*GPIOs for the SPI handled by spiGPIO -->SPI1 PA4:NSS PA4:SCK PA4:MISO PA4:MOSI. sp1 is the handle for SPI1*/
	memset(&spiGPIOs,0,sizeof(spiGPIOs));
 800014c:	4b2b      	ldr	r3, [pc, #172]	; (80001fc <main+0xcc>)
 800014e:	220c      	movs	r2, #12
 8000150:	2100      	movs	r1, #0
 8000152:	0018      	movs	r0, r3
 8000154:	f001 fb74 	bl	8001840 <memset>
	memset(&spi1,0,sizeof(spi1));
 8000158:	4b29      	ldr	r3, [pc, #164]	; (8000200 <main+0xd0>)
 800015a:	2224      	movs	r2, #36	; 0x24
 800015c:	2100      	movs	r1, #0
 800015e:	0018      	movs	r0, r3
 8000160:	f001 fb6e 	bl	8001840 <memset>

	/*GPIOs for the I2C handled by i2cGPIOs. i2c1 is the handle for I2C1*/
	memset(&i2cGPIOs,0,sizeof(i2cGPIOs));
 8000164:	4b27      	ldr	r3, [pc, #156]	; (8000204 <main+0xd4>)
 8000166:	220c      	movs	r2, #12
 8000168:	2100      	movs	r1, #0
 800016a:	0018      	movs	r0, r3
 800016c:	f001 fb68 	bl	8001840 <memset>
	memset(&i2c1,0,sizeof(i2c1));
 8000170:	4b25      	ldr	r3, [pc, #148]	; (8000208 <main+0xd8>)
 8000172:	2224      	movs	r2, #36	; 0x24
 8000174:	2100      	movs	r1, #0
 8000176:	0018      	movs	r0, r3
 8000178:	f001 fb62 	bl	8001840 <memset>

	//Configurations and initilizations
	peripheral_Config_Ini();
 800017c:	f000 f948 	bl	8000410 <peripheral_Config_Ini>

	/*configure interrupts (without priorities atm)*/
	//Button OnOff (GPIOB0)
	GPIO_IRQ_EnableDisable(IRQ_EXTI2_3, ENABLE);
 8000180:	2101      	movs	r1, #1
 8000182:	2006      	movs	r0, #6
 8000184:	f000 fd46 	bl	8000c14 <GPIO_IRQ_EnableDisable>
	//Button Emergency (GPIOB2)
	GPIO_IRQ_EnableDisable(IRQ_EXTI4_15, ENABLE);
 8000188:	2101      	movs	r1, #1
 800018a:	2007      	movs	r0, #7
 800018c:	f000 fd42 	bl	8000c14 <GPIO_IRQ_EnableDisable>
	//SPI1
	SPI_IRQ_EnableDisable(IRQ_SPI1, ENABLE);
 8000190:	2101      	movs	r1, #1
 8000192:	2019      	movs	r0, #25
 8000194:	f001 fa14 	bl	80015c0 <SPI_IRQ_EnableDisable>
	//I2C1
	I2C_IRQ_EnableDisable(IRQ_I2C1, ENABLE);
 8000198:	2101      	movs	r1, #1
 800019a:	2017      	movs	r0, #23
 800019c:	f000 fe06 	bl	8000dac <I2C_IRQ_EnableDisable>
				//error. print it in semihosting
				break;

			}
		}*/
		if (restart || (flagADS1115 != ADS1115_NOT_STARTED)){
 80001a0:	4b1a      	ldr	r3, [pc, #104]	; (800020c <main+0xdc>)
 80001a2:	781b      	ldrb	r3, [r3, #0]
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d103      	bne.n	80001b0 <main+0x80>
 80001a8:	4b19      	ldr	r3, [pc, #100]	; (8000210 <main+0xe0>)
 80001aa:	781b      	ldrb	r3, [r3, #0]
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	d0f7      	beq.n	80001a0 <main+0x70>
			restart = 0;
 80001b0:	4b16      	ldr	r3, [pc, #88]	; (800020c <main+0xdc>)
 80001b2:	2200      	movs	r2, #0
 80001b4:	701a      	strb	r2, [r3, #0]
			configureADS1115(&i2c1);
 80001b6:	4b14      	ldr	r3, [pc, #80]	; (8000208 <main+0xd8>)
 80001b8:	0018      	movs	r0, r3
 80001ba:	f000 fa5d 	bl	8000678 <configureADS1115>
			if ((flagADS1115 == ADS1115_CONFIGURED) && !startRX) {
 80001be:	4b14      	ldr	r3, [pc, #80]	; (8000210 <main+0xe0>)
 80001c0:	781b      	ldrb	r3, [r3, #0]
 80001c2:	2b04      	cmp	r3, #4
 80001c4:	d1ec      	bne.n	80001a0 <main+0x70>
 80001c6:	4b13      	ldr	r3, [pc, #76]	; (8000214 <main+0xe4>)
 80001c8:	781b      	ldrb	r3, [r3, #0]
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d1e8      	bne.n	80001a0 <main+0x70>
				//I2C_EnableDisable(&i2c1,ENABLE);
				I2C_Master_Receiver(&i2c1, ADS1115_CONVERSION_REGISTER_BYTES, 1, bytes_from_ADS1115);//1st byte read(MSB of Conversion register)+2nd byte read(LSB)
 80001ce:	4b12      	ldr	r3, [pc, #72]	; (8000218 <main+0xe8>)
 80001d0:	480d      	ldr	r0, [pc, #52]	; (8000208 <main+0xd8>)
 80001d2:	2201      	movs	r2, #1
 80001d4:	2102      	movs	r1, #2
 80001d6:	f000 ff43 	bl	8001060 <I2C_Master_Receiver>
				startRX = 1;
 80001da:	4b0e      	ldr	r3, [pc, #56]	; (8000214 <main+0xe4>)
 80001dc:	2201      	movs	r2, #1
 80001de:	701a      	strb	r2, [r3, #0]
				i2c1.pI2C->I2C_CR2 |= (1<<I2C_CR2_START);
 80001e0:	4b09      	ldr	r3, [pc, #36]	; (8000208 <main+0xd8>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	685a      	ldr	r2, [r3, #4]
 80001e6:	4b08      	ldr	r3, [pc, #32]	; (8000208 <main+0xd8>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	2180      	movs	r1, #128	; 0x80
 80001ec:	0189      	lsls	r1, r1, #6
 80001ee:	430a      	orrs	r2, r1
 80001f0:	605a      	str	r2, [r3, #4]
		if (restart || (flagADS1115 != ADS1115_NOT_STARTED)){
 80001f2:	e7d5      	b.n	80001a0 <main+0x70>
 80001f4:	20000020 	.word	0x20000020
 80001f8:	2000002c 	.word	0x2000002c
 80001fc:	20000038 	.word	0x20000038
 8000200:	20000050 	.word	0x20000050
 8000204:	20000044 	.word	0x20000044
 8000208:	20000074 	.word	0x20000074
 800020c:	20000000 	.word	0x20000000
 8000210:	200000a2 	.word	0x200000a2
 8000214:	200000a3 	.word	0x200000a3
 8000218:	200000a0 	.word	0x200000a0

0800021c <EXTI2_3_IRQHandler>:
	}
}
/**********************************************END MAIN********************************************************************/

/***********************************************ISR handlers****************************************************************/
void EXTI2_3_IRQHandler(void){ //when button on-off
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
	delay(500000);
 8000220:	4b29      	ldr	r3, [pc, #164]	; (80002c8 <EXTI2_3_IRQHandler+0xac>)
 8000222:	0018      	movs	r0, r3
 8000224:	f7ff ff70 	bl	8000108 <delay>
	GPIO_IRQ_Handling(PIN_BUTTON_OFFON);
 8000228:	2003      	movs	r0, #3
 800022a:	f000 fd1f 	bl	8000c6c <GPIO_IRQ_Handling>
	if (currentState == OFF){
 800022e:	4b27      	ldr	r3, [pc, #156]	; (80002cc <EXTI2_3_IRQHandler+0xb0>)
 8000230:	781b      	ldrb	r3, [r3, #0]
 8000232:	2b00      	cmp	r3, #0
 8000234:	d122      	bne.n	800027c <EXTI2_3_IRQHandler+0x60>
		currentState = ON;
 8000236:	4b25      	ldr	r3, [pc, #148]	; (80002cc <EXTI2_3_IRQHandler+0xb0>)
 8000238:	2201      	movs	r2, #1
 800023a:	701a      	strb	r2, [r3, #0]
		stateChanged = 1;
 800023c:	4b24      	ldr	r3, [pc, #144]	; (80002d0 <EXTI2_3_IRQHandler+0xb4>)
 800023e:	2201      	movs	r2, #1
 8000240:	701a      	strb	r2, [r3, #0]
		GPIO_WritePin(GPIOA,PIN_LED0,0);
 8000242:	2390      	movs	r3, #144	; 0x90
 8000244:	05db      	lsls	r3, r3, #23
 8000246:	2200      	movs	r2, #0
 8000248:	2100      	movs	r1, #0
 800024a:	0018      	movs	r0, r3
 800024c:	f000 fcb8 	bl	8000bc0 <GPIO_WritePin>
		GPIO_WritePin(GPIOA,PIN_LED1,1);
 8000250:	2390      	movs	r3, #144	; 0x90
 8000252:	05db      	lsls	r3, r3, #23
 8000254:	2201      	movs	r2, #1
 8000256:	2101      	movs	r1, #1
 8000258:	0018      	movs	r0, r3
 800025a:	f000 fcb1 	bl	8000bc0 <GPIO_WritePin>
		GPIO_WritePin(GPIOA,PIN_LED2,1);
 800025e:	2390      	movs	r3, #144	; 0x90
 8000260:	05db      	lsls	r3, r3, #23
 8000262:	2201      	movs	r2, #1
 8000264:	2109      	movs	r1, #9
 8000266:	0018      	movs	r0, r3
 8000268:	f000 fcaa 	bl	8000bc0 <GPIO_WritePin>
		GPIO_WritePin(GPIOA,PIN_LED3,0);
 800026c:	2390      	movs	r3, #144	; 0x90
 800026e:	05db      	lsls	r3, r3, #23
 8000270:	2200      	movs	r2, #0
 8000272:	210a      	movs	r1, #10
 8000274:	0018      	movs	r0, r3
 8000276:	f000 fca3 	bl	8000bc0 <GPIO_WritePin>
		GPIO_WritePin(GPIOA,PIN_LED1,0);
		GPIO_WritePin(GPIOA,PIN_LED2,0);
		GPIO_WritePin(GPIOA,PIN_LED3,0);
	}
	//printf("%d\n",currentState);
}
 800027a:	e021      	b.n	80002c0 <EXTI2_3_IRQHandler+0xa4>
		currentState = OFF;
 800027c:	4b13      	ldr	r3, [pc, #76]	; (80002cc <EXTI2_3_IRQHandler+0xb0>)
 800027e:	2200      	movs	r2, #0
 8000280:	701a      	strb	r2, [r3, #0]
		stateChanged = 1;
 8000282:	4b13      	ldr	r3, [pc, #76]	; (80002d0 <EXTI2_3_IRQHandler+0xb4>)
 8000284:	2201      	movs	r2, #1
 8000286:	701a      	strb	r2, [r3, #0]
		GPIO_WritePin(GPIOA,PIN_LED0,0);
 8000288:	2390      	movs	r3, #144	; 0x90
 800028a:	05db      	lsls	r3, r3, #23
 800028c:	2200      	movs	r2, #0
 800028e:	2100      	movs	r1, #0
 8000290:	0018      	movs	r0, r3
 8000292:	f000 fc95 	bl	8000bc0 <GPIO_WritePin>
		GPIO_WritePin(GPIOA,PIN_LED1,0);
 8000296:	2390      	movs	r3, #144	; 0x90
 8000298:	05db      	lsls	r3, r3, #23
 800029a:	2200      	movs	r2, #0
 800029c:	2101      	movs	r1, #1
 800029e:	0018      	movs	r0, r3
 80002a0:	f000 fc8e 	bl	8000bc0 <GPIO_WritePin>
		GPIO_WritePin(GPIOA,PIN_LED2,0);
 80002a4:	2390      	movs	r3, #144	; 0x90
 80002a6:	05db      	lsls	r3, r3, #23
 80002a8:	2200      	movs	r2, #0
 80002aa:	2109      	movs	r1, #9
 80002ac:	0018      	movs	r0, r3
 80002ae:	f000 fc87 	bl	8000bc0 <GPIO_WritePin>
		GPIO_WritePin(GPIOA,PIN_LED3,0);
 80002b2:	2390      	movs	r3, #144	; 0x90
 80002b4:	05db      	lsls	r3, r3, #23
 80002b6:	2200      	movs	r2, #0
 80002b8:	210a      	movs	r1, #10
 80002ba:	0018      	movs	r0, r3
 80002bc:	f000 fc80 	bl	8000bc0 <GPIO_WritePin>
}
 80002c0:	46c0      	nop			; (mov r8, r8)
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	46c0      	nop			; (mov r8, r8)
 80002c8:	0007a120 	.word	0x0007a120
 80002cc:	20000098 	.word	0x20000098
 80002d0:	20000099 	.word	0x20000099

080002d4 <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler(void){
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
	delay(500000);
 80002d8:	4b17      	ldr	r3, [pc, #92]	; (8000338 <EXTI4_15_IRQHandler+0x64>)
 80002da:	0018      	movs	r0, r3
 80002dc:	f7ff ff14 	bl	8000108 <delay>
	GPIO_IRQ_Handling(PIN_BUTTON_EMERGENCY);
 80002e0:	2005      	movs	r0, #5
 80002e2:	f000 fcc3 	bl	8000c6c <GPIO_IRQ_Handling>
	if (currentState != EMERGENCY){
 80002e6:	4b15      	ldr	r3, [pc, #84]	; (800033c <EXTI4_15_IRQHandler+0x68>)
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	2b02      	cmp	r3, #2
 80002ec:	d002      	beq.n	80002f4 <EXTI4_15_IRQHandler+0x20>
		stateChanged = 1;
 80002ee:	4b14      	ldr	r3, [pc, #80]	; (8000340 <EXTI4_15_IRQHandler+0x6c>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	701a      	strb	r2, [r3, #0]
	}
	currentState = EMERGENCY;
 80002f4:	4b11      	ldr	r3, [pc, #68]	; (800033c <EXTI4_15_IRQHandler+0x68>)
 80002f6:	2202      	movs	r2, #2
 80002f8:	701a      	strb	r2, [r3, #0]
	//printf("%d\n",currentState);
	GPIO_WritePin(GPIOA,PIN_LED0,1);
 80002fa:	2390      	movs	r3, #144	; 0x90
 80002fc:	05db      	lsls	r3, r3, #23
 80002fe:	2201      	movs	r2, #1
 8000300:	2100      	movs	r1, #0
 8000302:	0018      	movs	r0, r3
 8000304:	f000 fc5c 	bl	8000bc0 <GPIO_WritePin>
	GPIO_WritePin(GPIOA,PIN_LED1,1);
 8000308:	2390      	movs	r3, #144	; 0x90
 800030a:	05db      	lsls	r3, r3, #23
 800030c:	2201      	movs	r2, #1
 800030e:	2101      	movs	r1, #1
 8000310:	0018      	movs	r0, r3
 8000312:	f000 fc55 	bl	8000bc0 <GPIO_WritePin>
	GPIO_WritePin(GPIOA,PIN_LED2,1);
 8000316:	2390      	movs	r3, #144	; 0x90
 8000318:	05db      	lsls	r3, r3, #23
 800031a:	2201      	movs	r2, #1
 800031c:	2109      	movs	r1, #9
 800031e:	0018      	movs	r0, r3
 8000320:	f000 fc4e 	bl	8000bc0 <GPIO_WritePin>
	GPIO_WritePin(GPIOA,PIN_LED3,1);
 8000324:	2390      	movs	r3, #144	; 0x90
 8000326:	05db      	lsls	r3, r3, #23
 8000328:	2201      	movs	r2, #1
 800032a:	210a      	movs	r1, #10
 800032c:	0018      	movs	r0, r3
 800032e:	f000 fc47 	bl	8000bc0 <GPIO_WritePin>

}
 8000332:	46c0      	nop			; (mov r8, r8)
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	0007a120 	.word	0x0007a120
 800033c:	20000098 	.word	0x20000098
 8000340:	20000099 	.word	0x20000099

08000344 <SPI1_IRQHandler>:

//SPI IRQ handler for SPI1. declared in startup_stm32f091rctx.s
void SPI1_IRQHandler(void){
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
	SPI_IRQ_Handling(&spi1);
 8000348:	4b03      	ldr	r3, [pc, #12]	; (8000358 <SPI1_IRQHandler+0x14>)
 800034a:	0018      	movs	r0, r3
 800034c:	f001 f964 	bl	8001618 <SPI_IRQ_Handling>
}
 8000350:	46c0      	nop			; (mov r8, r8)
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	46c0      	nop			; (mov r8, r8)
 8000358:	20000050 	.word	0x20000050

0800035c <I2C1_IRQHandler>:
	//NOT NECESSARY SO FAR BECAUSE I'M USING if WITH RX/TX STATE == READY (it's volatile)
}*/

//I2C
//I2C1 IRQ handler, from startup_stm32f091rctx.s
void I2C1_IRQHandler(void){
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
	I2C_IRQ_Handling(&i2c1);
 8000360:	4b03      	ldr	r3, [pc, #12]	; (8000370 <I2C1_IRQHandler+0x14>)
 8000362:	0018      	movs	r0, r3
 8000364:	f000 fd4e 	bl	8000e04 <I2C_IRQ_Handling>
}
 8000368:	46c0      	nop			; (mov r8, r8)
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	46c0      	nop			; (mov r8, r8)
 8000370:	20000074 	.word	0x20000074

08000374 <I2C_App_Callback>:
//callback
void I2C_App_Callback(I2C_Handle_t *pI2Chandle,uint8_t Event){
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	000a      	movs	r2, r1
 800037e:	1cfb      	adds	r3, r7, #3
 8000380:	701a      	strb	r2, [r3, #0]
	//without event I2C_NEW_READING because it might cause slowness for reading RXNE (OVR not triggered for master)
	if ((Event == I2C_RESTART_STOP) || (Event == I2C_FINISHED)){
 8000382:	1cfb      	adds	r3, r7, #3
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	2b04      	cmp	r3, #4
 8000388:	d003      	beq.n	8000392 <I2C_App_Callback+0x1e>
 800038a:	1cfb      	adds	r3, r7, #3
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	2b02      	cmp	r3, #2
 8000390:	d12d      	bne.n	80003ee <I2C_App_Callback+0x7a>
		//if ADS1115 not configured yet,focus on that:
		if (flagADS1115 != ADS1115_CONFIGURED){
 8000392:	4b19      	ldr	r3, [pc, #100]	; (80003f8 <I2C_App_Callback+0x84>)
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	2b04      	cmp	r3, #4
 8000398:	d00e      	beq.n	80003b8 <I2C_App_Callback+0x44>
			switch (flagADS1115){
 800039a:	4b17      	ldr	r3, [pc, #92]	; (80003f8 <I2C_App_Callback+0x84>)
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	2b01      	cmp	r3, #1
 80003a0:	d002      	beq.n	80003a8 <I2C_App_Callback+0x34>
 80003a2:	2b03      	cmp	r3, #3
 80003a4:	d004      	beq.n	80003b0 <I2C_App_Callback+0x3c>
			case ADS1115_2ND_DURING:
				flagADS1115 = ADS1115_CONFIGURED;
				break;

			default:
				break;
 80003a6:	e022      	b.n	80003ee <I2C_App_Callback+0x7a>
				flagADS1115 = ADS1115_1ST_DONE;
 80003a8:	4b13      	ldr	r3, [pc, #76]	; (80003f8 <I2C_App_Callback+0x84>)
 80003aa:	2202      	movs	r2, #2
 80003ac:	701a      	strb	r2, [r3, #0]
				break;
 80003ae:	e01e      	b.n	80003ee <I2C_App_Callback+0x7a>
				flagADS1115 = ADS1115_CONFIGURED;
 80003b0:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <I2C_App_Callback+0x84>)
 80003b2:	2204      	movs	r2, #4
 80003b4:	701a      	strb	r2, [r3, #0]
				break;
 80003b6:	e01a      	b.n	80003ee <I2C_App_Callback+0x7a>
			}
		}
		else{ //if ADS1115 has already been configured, finish reading the ADC value
			I2C_EnableDisable(&i2c1,DISABLE);
 80003b8:	4b10      	ldr	r3, [pc, #64]	; (80003fc <I2C_App_Callback+0x88>)
 80003ba:	2100      	movs	r1, #0
 80003bc:	0018      	movs	r0, r3
 80003be:	f000 fcd1 	bl	8000d64 <I2C_EnableDisable>
			lastADS1115_raw = (bytes_from_ADS1115[0] << 8)|(bytes_from_ADS1115[1]); //byteRead is LSB and firstByteRead is MSB
 80003c2:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <I2C_App_Callback+0x8c>)
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	021b      	lsls	r3, r3, #8
 80003c8:	b21a      	sxth	r2, r3
 80003ca:	4b0d      	ldr	r3, [pc, #52]	; (8000400 <I2C_App_Callback+0x8c>)
 80003cc:	785b      	ldrb	r3, [r3, #1]
 80003ce:	b21b      	sxth	r3, r3
 80003d0:	4313      	orrs	r3, r2
 80003d2:	b21b      	sxth	r3, r3
 80003d4:	b29a      	uxth	r2, r3
 80003d6:	4b0b      	ldr	r3, [pc, #44]	; (8000404 <I2C_App_Callback+0x90>)
 80003d8:	801a      	strh	r2, [r3, #0]
			flagADS1115 = ADS1115_NOT_STARTED;
 80003da:	4b07      	ldr	r3, [pc, #28]	; (80003f8 <I2C_App_Callback+0x84>)
 80003dc:	2200      	movs	r2, #0
 80003de:	701a      	strb	r2, [r3, #0]
			restart = 1;
 80003e0:	4b09      	ldr	r3, [pc, #36]	; (8000408 <I2C_App_Callback+0x94>)
 80003e2:	2201      	movs	r2, #1
 80003e4:	701a      	strb	r2, [r3, #0]
			startRX = 0;
 80003e6:	4b09      	ldr	r3, [pc, #36]	; (800040c <I2C_App_Callback+0x98>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	701a      	strb	r2, [r3, #0]
		}


	}

}
 80003ec:	e7ff      	b.n	80003ee <I2C_App_Callback+0x7a>
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	46bd      	mov	sp, r7
 80003f2:	b002      	add	sp, #8
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	200000a2 	.word	0x200000a2
 80003fc:	20000074 	.word	0x20000074
 8000400:	200000a0 	.word	0x200000a0
 8000404:	2000009a 	.word	0x2000009a
 8000408:	20000000 	.word	0x20000000
 800040c:	200000a3 	.word	0x200000a3

08000410 <peripheral_Config_Ini>:
/**********************************************END IRQ********************************************************************/

/*****************************Configurations and initializations************************************************************/
void peripheral_Config_Ini(void){
 8000410:	b590      	push	{r4, r7, lr}
 8000412:	b085      	sub	sp, #20
 8000414:	af02      	add	r7, sp, #8

	//local variables
	uint8_t param1, param2, param3, param4, param5;
	/**********************LEDS***********************************************/
	//LED0. PA0
	leds.pGPIO = GPIOA;
 8000416:	4b8f      	ldr	r3, [pc, #572]	; (8000654 <peripheral_Config_Ini+0x244>)
 8000418:	2290      	movs	r2, #144	; 0x90
 800041a:	05d2      	lsls	r2, r2, #23
 800041c:	601a      	str	r2, [r3, #0]
	leds.GPIO_PinConfig.GPIO_PinNumber = PIN_LED0;
 800041e:	4b8d      	ldr	r3, [pc, #564]	; (8000654 <peripheral_Config_Ini+0x244>)
 8000420:	2200      	movs	r2, #0
 8000422:	711a      	strb	r2, [r3, #4]
	leds.GPIO_PinConfig.GPIO_PinMode = GPIO_OUT;
 8000424:	4b8b      	ldr	r3, [pc, #556]	; (8000654 <peripheral_Config_Ini+0x244>)
 8000426:	2201      	movs	r2, #1
 8000428:	715a      	strb	r2, [r3, #5]
	leds.GPIO_PinConfig.GPIO_PinOutType = GPIO_PUSHPULL;
 800042a:	4b8a      	ldr	r3, [pc, #552]	; (8000654 <peripheral_Config_Ini+0x244>)
 800042c:	2200      	movs	r2, #0
 800042e:	719a      	strb	r2, [r3, #6]
	leds.GPIO_PinConfig.GPIO_PinOutSpeed = GPIO_SLOWSPEED; //GPIO_MEDIUMSPEED
 8000430:	4b88      	ldr	r3, [pc, #544]	; (8000654 <peripheral_Config_Ini+0x244>)
 8000432:	2200      	movs	r2, #0
 8000434:	71da      	strb	r2, [r3, #7]
	leds.GPIO_PinConfig.GPIO_PinPullUpDown = GPIO_NOPULL;
 8000436:	4b87      	ldr	r3, [pc, #540]	; (8000654 <peripheral_Config_Ini+0x244>)
 8000438:	2200      	movs	r2, #0
 800043a:	721a      	strb	r2, [r3, #8]
	//Initialization LED0
	GPIO_PinInit(&leds);
 800043c:	4b85      	ldr	r3, [pc, #532]	; (8000654 <peripheral_Config_Ini+0x244>)
 800043e:	0018      	movs	r0, r3
 8000440:	f000 fa30 	bl	80008a4 <GPIO_PinInit>

	//LED1.PA1.Port,Mode,OutType,OutSpeed and PullUpDown same as LED0
	leds.GPIO_PinConfig.GPIO_PinNumber = PIN_LED1;
 8000444:	4b83      	ldr	r3, [pc, #524]	; (8000654 <peripheral_Config_Ini+0x244>)
 8000446:	2201      	movs	r2, #1
 8000448:	711a      	strb	r2, [r3, #4]
	//Initialization LED1
	GPIO_PinInit(&leds);
 800044a:	4b82      	ldr	r3, [pc, #520]	; (8000654 <peripheral_Config_Ini+0x244>)
 800044c:	0018      	movs	r0, r3
 800044e:	f000 fa29 	bl	80008a4 <GPIO_PinInit>

	//LED2.PA9.Port,Mode,OutType,OutSpeed and PullUpDown same as LED0
	leds.GPIO_PinConfig.GPIO_PinNumber = PIN_LED2;
 8000452:	4b80      	ldr	r3, [pc, #512]	; (8000654 <peripheral_Config_Ini+0x244>)
 8000454:	2209      	movs	r2, #9
 8000456:	711a      	strb	r2, [r3, #4]
	//Initialization LED2
	GPIO_PinInit(&leds);
 8000458:	4b7e      	ldr	r3, [pc, #504]	; (8000654 <peripheral_Config_Ini+0x244>)
 800045a:	0018      	movs	r0, r3
 800045c:	f000 fa22 	bl	80008a4 <GPIO_PinInit>

	//LED3.PA10.Port,Mode,OutType,OutSpeed and PullUpDown same as LED0
	leds.GPIO_PinConfig.GPIO_PinNumber = PIN_LED3;
 8000460:	4b7c      	ldr	r3, [pc, #496]	; (8000654 <peripheral_Config_Ini+0x244>)
 8000462:	220a      	movs	r2, #10
 8000464:	711a      	strb	r2, [r3, #4]
	//Initialization LED3
	GPIO_PinInit(&leds);
 8000466:	4b7b      	ldr	r3, [pc, #492]	; (8000654 <peripheral_Config_Ini+0x244>)
 8000468:	0018      	movs	r0, r3
 800046a:	f000 fa1b 	bl	80008a4 <GPIO_PinInit>

	//LEDs OFF
	GPIO_WritePin(GPIOA,PIN_LED0,1);
 800046e:	2390      	movs	r3, #144	; 0x90
 8000470:	05db      	lsls	r3, r3, #23
 8000472:	2201      	movs	r2, #1
 8000474:	2100      	movs	r1, #0
 8000476:	0018      	movs	r0, r3
 8000478:	f000 fba2 	bl	8000bc0 <GPIO_WritePin>
	GPIO_WritePin(GPIOA,PIN_LED1,0);
 800047c:	2390      	movs	r3, #144	; 0x90
 800047e:	05db      	lsls	r3, r3, #23
 8000480:	2200      	movs	r2, #0
 8000482:	2101      	movs	r1, #1
 8000484:	0018      	movs	r0, r3
 8000486:	f000 fb9b 	bl	8000bc0 <GPIO_WritePin>
	GPIO_WritePin(GPIOA,PIN_LED2,0);
 800048a:	2390      	movs	r3, #144	; 0x90
 800048c:	05db      	lsls	r3, r3, #23
 800048e:	2200      	movs	r2, #0
 8000490:	2109      	movs	r1, #9
 8000492:	0018      	movs	r0, r3
 8000494:	f000 fb94 	bl	8000bc0 <GPIO_WritePin>
	GPIO_WritePin(GPIOA,PIN_LED3,1);
 8000498:	2390      	movs	r3, #144	; 0x90
 800049a:	05db      	lsls	r3, r3, #23
 800049c:	2201      	movs	r2, #1
 800049e:	210a      	movs	r1, #10
 80004a0:	0018      	movs	r0, r3
 80004a2:	f000 fb8d 	bl	8000bc0 <GPIO_WritePin>

	/***************************************BUTTONS********************************/
	//BUTTON ON-OFF. PB3
	buttons.pGPIO = GPIOB;
 80004a6:	4b6c      	ldr	r3, [pc, #432]	; (8000658 <peripheral_Config_Ini+0x248>)
 80004a8:	4a6c      	ldr	r2, [pc, #432]	; (800065c <peripheral_Config_Ini+0x24c>)
 80004aa:	601a      	str	r2, [r3, #0]
	buttons.GPIO_PinConfig.GPIO_PinNumber = PIN_BUTTON_OFFON;
 80004ac:	4b6a      	ldr	r3, [pc, #424]	; (8000658 <peripheral_Config_Ini+0x248>)
 80004ae:	2203      	movs	r2, #3
 80004b0:	711a      	strb	r2, [r3, #4]
	buttons.GPIO_PinConfig.GPIO_PinMode = GPIO_FALL_TRIG; //interrupt falling edge
 80004b2:	4b69      	ldr	r3, [pc, #420]	; (8000658 <peripheral_Config_Ini+0x248>)
 80004b4:	2204      	movs	r2, #4
 80004b6:	715a      	strb	r2, [r3, #5]
	buttons.GPIO_PinConfig.GPIO_PinPullUpDown = GPIO_PULLUP; //pull up (3.3 by default)
 80004b8:	4b67      	ldr	r3, [pc, #412]	; (8000658 <peripheral_Config_Ini+0x248>)
 80004ba:	2201      	movs	r2, #1
 80004bc:	721a      	strb	r2, [r3, #8]
	//initialization button on-off
	GPIO_PinInit(&buttons);
 80004be:	4b66      	ldr	r3, [pc, #408]	; (8000658 <peripheral_Config_Ini+0x248>)
 80004c0:	0018      	movs	r0, r3
 80004c2:	f000 f9ef 	bl	80008a4 <GPIO_PinInit>

	//EMERGENCY BUTTON. PB5
	buttons.pGPIO = GPIOB;
 80004c6:	4b64      	ldr	r3, [pc, #400]	; (8000658 <peripheral_Config_Ini+0x248>)
 80004c8:	4a64      	ldr	r2, [pc, #400]	; (800065c <peripheral_Config_Ini+0x24c>)
 80004ca:	601a      	str	r2, [r3, #0]
	buttons.GPIO_PinConfig.GPIO_PinNumber = PIN_BUTTON_EMERGENCY;
 80004cc:	4b62      	ldr	r3, [pc, #392]	; (8000658 <peripheral_Config_Ini+0x248>)
 80004ce:	2205      	movs	r2, #5
 80004d0:	711a      	strb	r2, [r3, #4]
	buttons.GPIO_PinConfig.GPIO_PinMode = GPIO_FALL_TRIG;
 80004d2:	4b61      	ldr	r3, [pc, #388]	; (8000658 <peripheral_Config_Ini+0x248>)
 80004d4:	2204      	movs	r2, #4
 80004d6:	715a      	strb	r2, [r3, #5]
	buttons.GPIO_PinConfig.GPIO_PinPullUpDown = GPIO_PULLUP;
 80004d8:	4b5f      	ldr	r3, [pc, #380]	; (8000658 <peripheral_Config_Ini+0x248>)
 80004da:	2201      	movs	r2, #1
 80004dc:	721a      	strb	r2, [r3, #8]
	//initialization emergency button
	GPIO_PinInit(&buttons);
 80004de:	4b5e      	ldr	r3, [pc, #376]	; (8000658 <peripheral_Config_Ini+0x248>)
 80004e0:	0018      	movs	r0, r3
 80004e2:	f000 f9df 	bl	80008a4 <GPIO_PinInit>

	/**************************************SPI***********************************/
	//GPIOs for SPI: SPI1 PA4:NSS PA5:SCK PA6:MISO PA7:MOSI. Alternate function AF0
	spiGPIOs.pGPIO = GPIOA;
 80004e6:	4b5e      	ldr	r3, [pc, #376]	; (8000660 <peripheral_Config_Ini+0x250>)
 80004e8:	2290      	movs	r2, #144	; 0x90
 80004ea:	05d2      	lsls	r2, r2, #23
 80004ec:	601a      	str	r2, [r3, #0]
	spiGPIOs.GPIO_PinConfig.GPIO_PinMode = GPIO_ALTFUN;
 80004ee:	4b5c      	ldr	r3, [pc, #368]	; (8000660 <peripheral_Config_Ini+0x250>)
 80004f0:	2202      	movs	r2, #2
 80004f2:	715a      	strb	r2, [r3, #5]
	spiGPIOs.GPIO_PinConfig.GPIO_PinAlterFunc = GPIO_AF0;
 80004f4:	4b5a      	ldr	r3, [pc, #360]	; (8000660 <peripheral_Config_Ini+0x250>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	725a      	strb	r2, [r3, #9]
	spiGPIOs.GPIO_PinConfig.GPIO_PinOutType = GPIO_PUSHPULL;
 80004fa:	4b59      	ldr	r3, [pc, #356]	; (8000660 <peripheral_Config_Ini+0x250>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	719a      	strb	r2, [r3, #6]
	spiGPIOs.GPIO_PinConfig.GPIO_PinOutSpeed = GPIO_HIGHSPEED; //FAST SPEED
 8000500:	4b57      	ldr	r3, [pc, #348]	; (8000660 <peripheral_Config_Ini+0x250>)
 8000502:	2203      	movs	r2, #3
 8000504:	71da      	strb	r2, [r3, #7]
	spiGPIOs.GPIO_PinConfig.GPIO_PinPullUpDown = GPIO_NOPULL;
 8000506:	4b56      	ldr	r3, [pc, #344]	; (8000660 <peripheral_Config_Ini+0x250>)
 8000508:	2200      	movs	r2, #0
 800050a:	721a      	strb	r2, [r3, #8]
	//SCK
	spiGPIOs.GPIO_PinConfig.GPIO_PinNumber = PIN_SPI1_SCK;//SCK
 800050c:	4b54      	ldr	r3, [pc, #336]	; (8000660 <peripheral_Config_Ini+0x250>)
 800050e:	2205      	movs	r2, #5
 8000510:	711a      	strb	r2, [r3, #4]
	GPIO_PinInit(&spiGPIOs);
 8000512:	4b53      	ldr	r3, [pc, #332]	; (8000660 <peripheral_Config_Ini+0x250>)
 8000514:	0018      	movs	r0, r3
 8000516:	f000 f9c5 	bl	80008a4 <GPIO_PinInit>

	spiGPIOs.GPIO_PinConfig.GPIO_PinPullUpDown = GPIO_PULLUP;
 800051a:	4b51      	ldr	r3, [pc, #324]	; (8000660 <peripheral_Config_Ini+0x250>)
 800051c:	2201      	movs	r2, #1
 800051e:	721a      	strb	r2, [r3, #8]
	//NSS
	spiGPIOs.GPIO_PinConfig.GPIO_PinNumber = PIN_SPI1_NSS;//NSS
 8000520:	4b4f      	ldr	r3, [pc, #316]	; (8000660 <peripheral_Config_Ini+0x250>)
 8000522:	2204      	movs	r2, #4
 8000524:	711a      	strb	r2, [r3, #4]
	GPIO_PinInit(&spiGPIOs);
 8000526:	4b4e      	ldr	r3, [pc, #312]	; (8000660 <peripheral_Config_Ini+0x250>)
 8000528:	0018      	movs	r0, r3
 800052a:	f000 f9bb 	bl	80008a4 <GPIO_PinInit>
	//MISO
	spiGPIOs.GPIO_PinConfig.GPIO_PinNumber = PIN_SPI1_MISO;//MISO
 800052e:	4b4c      	ldr	r3, [pc, #304]	; (8000660 <peripheral_Config_Ini+0x250>)
 8000530:	2206      	movs	r2, #6
 8000532:	711a      	strb	r2, [r3, #4]
	GPIO_PinInit(&spiGPIOs);
 8000534:	4b4a      	ldr	r3, [pc, #296]	; (8000660 <peripheral_Config_Ini+0x250>)
 8000536:	0018      	movs	r0, r3
 8000538:	f000 f9b4 	bl	80008a4 <GPIO_PinInit>
	//MOSI
	spiGPIOs.GPIO_PinConfig.GPIO_PinNumber = PIN_SPI1_MOSI;//MOSI
 800053c:	4b48      	ldr	r3, [pc, #288]	; (8000660 <peripheral_Config_Ini+0x250>)
 800053e:	2207      	movs	r2, #7
 8000540:	711a      	strb	r2, [r3, #4]
	GPIO_PinInit(&spiGPIOs);
 8000542:	4b47      	ldr	r3, [pc, #284]	; (8000660 <peripheral_Config_Ini+0x250>)
 8000544:	0018      	movs	r0, r3
 8000546:	f000 f9ad 	bl	80008a4 <GPIO_PinInit>

	/*SPI handle configuration and initialization*/
	//SPI configuration
	spi1.pSPI = SPI1_I2S1;
 800054a:	4b46      	ldr	r3, [pc, #280]	; (8000664 <peripheral_Config_Ini+0x254>)
 800054c:	4a46      	ldr	r2, [pc, #280]	; (8000668 <peripheral_Config_Ini+0x258>)
 800054e:	601a      	str	r2, [r3, #0]
	spi1.SPI_Config.SPI_Mode = SPI_MASTER;
 8000550:	4b44      	ldr	r3, [pc, #272]	; (8000664 <peripheral_Config_Ini+0x254>)
 8000552:	2201      	movs	r2, #1
 8000554:	711a      	strb	r2, [r3, #4]
	spi1.SPI_Config.SPI_Speed = SPI_SPEED_2;
 8000556:	4b43      	ldr	r3, [pc, #268]	; (8000664 <peripheral_Config_Ini+0x254>)
 8000558:	2200      	movs	r2, #0
 800055a:	715a      	strb	r2, [r3, #5]
	spi1.SPI_Config.SPI_CommType = SPI_FULLDUPLEX;
 800055c:	4b41      	ldr	r3, [pc, #260]	; (8000664 <peripheral_Config_Ini+0x254>)
 800055e:	2201      	movs	r2, #1
 8000560:	719a      	strb	r2, [r3, #6]
	spi1.SPI_Config.SPI_DataSize = SPI_8BIT;
 8000562:	4b40      	ldr	r3, [pc, #256]	; (8000664 <peripheral_Config_Ini+0x254>)
 8000564:	2207      	movs	r2, #7
 8000566:	71da      	strb	r2, [r3, #7]
	spi1.SPI_Config.SPI_SWslave = SPI_HW_MGMT;
 8000568:	4b3e      	ldr	r3, [pc, #248]	; (8000664 <peripheral_Config_Ini+0x254>)
 800056a:	2200      	movs	r2, #0
 800056c:	721a      	strb	r2, [r3, #8]
	spi1.SPI_Config.SPI_Pol = SPI_CLK_IDLE_0;
 800056e:	4b3d      	ldr	r3, [pc, #244]	; (8000664 <peripheral_Config_Ini+0x254>)
 8000570:	2200      	movs	r2, #0
 8000572:	725a      	strb	r2, [r3, #9]
	spi1.SPI_Config.SPI_Phase = SPI_CLK_CAPT_FIRST;
 8000574:	4b3b      	ldr	r3, [pc, #236]	; (8000664 <peripheral_Config_Ini+0x254>)
 8000576:	2200      	movs	r2, #0
 8000578:	729a      	strb	r2, [r3, #10]

	//SPI initialization
	SPI_Init(&spi1);
 800057a:	4b3a      	ldr	r3, [pc, #232]	; (8000664 <peripheral_Config_Ini+0x254>)
 800057c:	0018      	movs	r0, r3
 800057e:	f000 ff39 	bl	80013f4 <SPI_Init>

	//Set SSOE to 1 to make NSS output enable
	SPI_SSOE(&spi1,ENABLE);
 8000582:	4b38      	ldr	r3, [pc, #224]	; (8000664 <peripheral_Config_Ini+0x254>)
 8000584:	2101      	movs	r1, #1
 8000586:	0018      	movs	r0, r3
 8000588:	f000 fffa 	bl	8001580 <SPI_SSOE>

	//Enable SPI peripheral
	SPI_EnableDisable(&spi1,ENABLE);
 800058c:	4b35      	ldr	r3, [pc, #212]	; (8000664 <peripheral_Config_Ini+0x254>)
 800058e:	2101      	movs	r1, #1
 8000590:	0018      	movs	r0, r3
 8000592:	f000 ffd5 	bl	8001540 <SPI_EnableDisable>

	/**********************************I2C*****************************************/
	//GPIOs for I2C: PB6(SCL), PB9(SDA).Alternate function AF1!
	i2cGPIOs.pGPIO = GPIOB;
 8000596:	4b35      	ldr	r3, [pc, #212]	; (800066c <peripheral_Config_Ini+0x25c>)
 8000598:	4a30      	ldr	r2, [pc, #192]	; (800065c <peripheral_Config_Ini+0x24c>)
 800059a:	601a      	str	r2, [r3, #0]
	i2cGPIOs.GPIO_PinConfig.GPIO_PinMode = GPIO_ALTFUN;
 800059c:	4b33      	ldr	r3, [pc, #204]	; (800066c <peripheral_Config_Ini+0x25c>)
 800059e:	2202      	movs	r2, #2
 80005a0:	715a      	strb	r2, [r3, #5]
	i2cGPIOs.GPIO_PinConfig.GPIO_PinAlterFunc = GPIO_AF1;
 80005a2:	4b32      	ldr	r3, [pc, #200]	; (800066c <peripheral_Config_Ini+0x25c>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	725a      	strb	r2, [r3, #9]
	i2cGPIOs.GPIO_PinConfig.GPIO_PinOutType = GPIO_PUSHPULL;
 80005a8:	4b30      	ldr	r3, [pc, #192]	; (800066c <peripheral_Config_Ini+0x25c>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	719a      	strb	r2, [r3, #6]
	i2cGPIOs.GPIO_PinConfig.GPIO_PinOutSpeed = GPIO_HIGHSPEED; //FAST SPEED
 80005ae:	4b2f      	ldr	r3, [pc, #188]	; (800066c <peripheral_Config_Ini+0x25c>)
 80005b0:	2203      	movs	r2, #3
 80005b2:	71da      	strb	r2, [r3, #7]
	i2cGPIOs.GPIO_PinConfig.GPIO_PinPullUpDown = GPIO_PULLUP; //internal pull up
 80005b4:	4b2d      	ldr	r3, [pc, #180]	; (800066c <peripheral_Config_Ini+0x25c>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	721a      	strb	r2, [r3, #8]
	//SCL
	i2cGPIOs.GPIO_PinConfig.GPIO_PinNumber = PIN_I2C1_SCL;//SCL
 80005ba:	4b2c      	ldr	r3, [pc, #176]	; (800066c <peripheral_Config_Ini+0x25c>)
 80005bc:	2206      	movs	r2, #6
 80005be:	711a      	strb	r2, [r3, #4]
	GPIO_PinInit(&i2cGPIOs);
 80005c0:	4b2a      	ldr	r3, [pc, #168]	; (800066c <peripheral_Config_Ini+0x25c>)
 80005c2:	0018      	movs	r0, r3
 80005c4:	f000 f96e 	bl	80008a4 <GPIO_PinInit>
	//SDA
	i2cGPIOs.GPIO_PinConfig.GPIO_PinNumber = PIN_I2C1_SDA;//SDA
 80005c8:	4b28      	ldr	r3, [pc, #160]	; (800066c <peripheral_Config_Ini+0x25c>)
 80005ca:	2209      	movs	r2, #9
 80005cc:	711a      	strb	r2, [r3, #4]
	GPIO_PinInit(&i2cGPIOs);
 80005ce:	4b27      	ldr	r3, [pc, #156]	; (800066c <peripheral_Config_Ini+0x25c>)
 80005d0:	0018      	movs	r0, r3
 80005d2:	f000 f967 	bl	80008a4 <GPIO_PinInit>

	/*I2C configuration*/
	i2c1.pI2C = I2C1;
 80005d6:	4b26      	ldr	r3, [pc, #152]	; (8000670 <peripheral_Config_Ini+0x260>)
 80005d8:	4a26      	ldr	r2, [pc, #152]	; (8000674 <peripheral_Config_Ini+0x264>)
 80005da:	601a      	str	r2, [r3, #0]
	//timing according to table for 100kHz I2C,8MHz clock
	param1 = 0x01;//PRESC
 80005dc:	1dfb      	adds	r3, r7, #7
 80005de:	2201      	movs	r2, #1
 80005e0:	701a      	strb	r2, [r3, #0]
	param2 = 0x04;//SCLDEL
 80005e2:	1dbb      	adds	r3, r7, #6
 80005e4:	2204      	movs	r2, #4
 80005e6:	701a      	strb	r2, [r3, #0]
	param3 = 0x02;//SDADEL
 80005e8:	1d7b      	adds	r3, r7, #5
 80005ea:	2202      	movs	r2, #2
 80005ec:	701a      	strb	r2, [r3, #0]
	param4 = 0x0F;//SCLH
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	220f      	movs	r2, #15
 80005f2:	701a      	strb	r2, [r3, #0]
	param5 = 0x13;//SCLL
 80005f4:	1cfb      	adds	r3, r7, #3
 80005f6:	2213      	movs	r2, #19
 80005f8:	701a      	strb	r2, [r3, #0]
	I2C_Master_TimingR(&i2c1, param1, param2, param3, param4, param5);
 80005fa:	1d7b      	adds	r3, r7, #5
 80005fc:	781c      	ldrb	r4, [r3, #0]
 80005fe:	1dbb      	adds	r3, r7, #6
 8000600:	781a      	ldrb	r2, [r3, #0]
 8000602:	1dfb      	adds	r3, r7, #7
 8000604:	7819      	ldrb	r1, [r3, #0]
 8000606:	481a      	ldr	r0, [pc, #104]	; (8000670 <peripheral_Config_Ini+0x260>)
 8000608:	1cfb      	adds	r3, r7, #3
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	0023      	movs	r3, r4
 8000616:	f000 fe5d 	bl	80012d4 <I2C_Master_TimingR>
	i2c1.I2C_Config.I2C_AddressMode = I2C_ADDRESS_MODE_7BIT;
 800061a:	4b15      	ldr	r3, [pc, #84]	; (8000670 <peripheral_Config_Ini+0x260>)
 800061c:	2200      	movs	r2, #0
 800061e:	715a      	strb	r2, [r3, #5]
	i2c1.I2C_Comm_t.I2C_SlaveAddress = ADS1115_ADDRESS; //ADS1115 address
 8000620:	4b13      	ldr	r3, [pc, #76]	; (8000670 <peripheral_Config_Ini+0x260>)
 8000622:	2248      	movs	r2, #72	; 0x48
 8000624:	841a      	strh	r2, [r3, #32]
	i2c1.I2C_Comm_t.I2C_Nbytes = 1;
 8000626:	4b12      	ldr	r3, [pc, #72]	; (8000670 <peripheral_Config_Ini+0x260>)
 8000628:	2201      	movs	r2, #1
 800062a:	779a      	strb	r2, [r3, #30]
	i2c1.I2C_Comm_t.RX_length = 1;
 800062c:	4b10      	ldr	r3, [pc, #64]	; (8000670 <peripheral_Config_Ini+0x260>)
 800062e:	2201      	movs	r2, #1
 8000630:	615a      	str	r2, [r3, #20]
	i2c1.I2C_Comm_t.I2C_RepeatStart = I2C_AUTOEND;
 8000632:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <peripheral_Config_Ini+0x260>)
 8000634:	2200      	movs	r2, #0
 8000636:	775a      	strb	r2, [r3, #29]

	//I2C initialization
	I2C_Init(&i2c1);
 8000638:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <peripheral_Config_Ini+0x260>)
 800063a:	0018      	movs	r0, r3
 800063c:	f000 fb80 	bl	8000d40 <I2C_Init>
	//Enable I2C peripheral
	I2C_EnableDisable(&i2c1,ENABLE);
 8000640:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <peripheral_Config_Ini+0x260>)
 8000642:	2101      	movs	r1, #1
 8000644:	0018      	movs	r0, r3
 8000646:	f000 fb8d 	bl	8000d64 <I2C_EnableDisable>

}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	46bd      	mov	sp, r7
 800064e:	b003      	add	sp, #12
 8000650:	bd90      	pop	{r4, r7, pc}
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	2000002c 	.word	0x2000002c
 8000658:	20000020 	.word	0x20000020
 800065c:	48000400 	.word	0x48000400
 8000660:	20000038 	.word	0x20000038
 8000664:	20000050 	.word	0x20000050
 8000668:	40013000 	.word	0x40013000
 800066c:	20000044 	.word	0x20000044
 8000670:	20000074 	.word	0x20000074
 8000674:	40005400 	.word	0x40005400

08000678 <configureADS1115>:
/*********************************CONFIGURE ADS1115**********************************************/
void configureADS1115(I2C_Handle_t *pI2Chandle){
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	//https://cdn-shop.adafruit.com/datasheets/ads1115.pdf
	if (flagADS1115 < ADS1115_1ST_DURING){
 8000680:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <configureADS1115+0x68>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d116      	bne.n	80006b6 <configureADS1115+0x3e>
		//continuous mode
		/*1-write to config reg. bit 8 mode(0:continuous;1:single-shot,default);bits 9-11:gain amplifier.bit 15 set to 1 starts single shot
		*bits 14-12:multiplexor configuration
		*transmiter:address+0x01(points to config reg)+0b10000100(MSB:start shot+default gain+continuous)+0b10000011(LSB:default rate+no comparator)*/
		bytes_to_ADS1115_reg[0] = 0x01; //0x01(points to config reg)
 8000688:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <configureADS1115+0x6c>)
 800068a:	2201      	movs	r2, #1
 800068c:	701a      	strb	r2, [r3, #0]

		//for continuous mode. +-4.076V, 128 sps, bits 14-12 110: AINp=AIN0 and AInn=GND (single ended measurement for A0).
		//bytes_to_ADS1115_reg[1] = 0xC2; //0b11000010 (MSB)
		//bytes_to_ADS1115_reg[2] = 0x83; //0b10000011 (LSB)
		//for single-shot. bit 15: begin single conversion. bit 8: 1-single shot
		bytes_to_ADS1115_reg[1] = 0xC3; //0b11000011 (MSB)
 800068e:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <configureADS1115+0x6c>)
 8000690:	22c3      	movs	r2, #195	; 0xc3
 8000692:	705a      	strb	r2, [r3, #1]
		bytes_to_ADS1115_reg[2] = 0x83; //0b10000011 (LSB)
 8000694:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <configureADS1115+0x6c>)
 8000696:	2283      	movs	r2, #131	; 0x83
 8000698:	709a      	strb	r2, [r3, #2]

		//pI2Chandle->I2C_Comm_t.TX_buffer = bytes_to_ADS1115_reg; //buffer pointing to bytes_to_ADS1115_reg
		flagADS1115 = ADS1115_1ST_DURING;
 800069a:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <configureADS1115+0x68>)
 800069c:	2201      	movs	r2, #1
 800069e:	701a      	strb	r2, [r3, #0]
		I2C_EnableDisable(&i2c1,ENABLE);
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <configureADS1115+0x70>)
 80006a2:	2101      	movs	r1, #1
 80006a4:	0018      	movs	r0, r3
 80006a6:	f000 fb5d 	bl	8000d64 <I2C_EnableDisable>
		I2C_Master_Transmitter(pI2Chandle, 3, 1, bytes_to_ADS1115_reg);
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <configureADS1115+0x6c>)
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	2201      	movs	r2, #1
 80006b0:	2103      	movs	r1, #3
 80006b2:	f000 fc3b 	bl	8000f2c <I2C_Master_Transmitter>
	}


	if (flagADS1115 == ADS1115_1ST_DONE){
 80006b6:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <configureADS1115+0x68>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2b02      	cmp	r3, #2
 80006bc:	d10b      	bne.n	80006d6 <configureADS1115+0x5e>
		//2-select the conversion register by writing to pointer reg(0x00:conversion reg;0x01:config reg)
		//transmitter:address+0x00(points to conversion register)
		bytes_to_ADS1115_reg[0] = 0x00; //0x00(points to conversion register)
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <configureADS1115+0x6c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	701a      	strb	r2, [r3, #0]
		//pI2Chandle->I2C_Comm_t.TX_buffer = bytes_to_ADS1115_reg; //buffer pointing to bytes_to_ADS1115_reg
		flagADS1115 = ADS1115_2ND_DURING;
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <configureADS1115+0x68>)
 80006c6:	2203      	movs	r2, #3
 80006c8:	701a      	strb	r2, [r3, #0]
		//I2C_EnableDisable(&i2c1,ENABLE);
		I2C_Master_Transmitter(pI2Chandle, 1, 1, bytes_to_ADS1115_reg);
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <configureADS1115+0x6c>)
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	2201      	movs	r2, #1
 80006d0:	2101      	movs	r1, #1
 80006d2:	f000 fc2b 	bl	8000f2c <I2C_Master_Transmitter>
	}

}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	46bd      	mov	sp, r7
 80006da:	b002      	add	sp, #8
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	200000a2 	.word	0x200000a2
 80006e4:	2000009c 	.word	0x2000009c
 80006e8:	20000074 	.word	0x20000074

080006ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006ec:	480d      	ldr	r0, [pc, #52]	; (8000724 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006f0:	e000      	b.n	80006f4 <Reset_Handler+0x8>
 80006f2:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006f4:	480c      	ldr	r0, [pc, #48]	; (8000728 <LoopForever+0x6>)
  ldr r1, =_edata
 80006f6:	490d      	ldr	r1, [pc, #52]	; (800072c <LoopForever+0xa>)
  ldr r2, =_sidata
 80006f8:	4a0d      	ldr	r2, [pc, #52]	; (8000730 <LoopForever+0xe>)
  movs r3, #0
 80006fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006fc:	e002      	b.n	8000704 <LoopCopyDataInit>

080006fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000702:	3304      	adds	r3, #4

08000704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000708:	d3f9      	bcc.n	80006fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800070a:	4a0a      	ldr	r2, [pc, #40]	; (8000734 <LoopForever+0x12>)
  ldr r4, =_ebss
 800070c:	4c0a      	ldr	r4, [pc, #40]	; (8000738 <LoopForever+0x16>)
  movs r3, #0
 800070e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000710:	e001      	b.n	8000716 <LoopFillZerobss>

08000712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000714:	3204      	adds	r2, #4

08000716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000718:	d3fb      	bcc.n	8000712 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800071a:	f001 f86d 	bl	80017f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800071e:	f7ff fd07 	bl	8000130 <main>

08000722 <LoopForever>:

LoopForever:
    b LoopForever
 8000722:	e7fe      	b.n	8000722 <LoopForever>
  ldr   r0, =_estack
 8000724:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800072c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000730:	08001870 	.word	0x08001870
  ldr r2, =_sbss
 8000734:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000738:	200000a4 	.word	0x200000a4

0800073c <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800073c:	e7fe      	b.n	800073c <ADC_COMP_IRQHandler>
	...

08000740 <GPIO_ClockControl>:
 *      Author: danim
 */

#include "gpio.h"
/*********GPIO clock control***************/
void GPIO_ClockControl(GPIO_RegStruct_t *pGPIO, uint8_t EnableDisable){
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	000a      	movs	r2, r1
 800074a:	1cfb      	adds	r3, r7, #3
 800074c:	701a      	strb	r2, [r3, #0]

	if (EnableDisable == ENABLE) {
 800074e:	1cfb      	adds	r3, r7, #3
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d148      	bne.n	80007e8 <GPIO_ClockControl+0xa8>
		if (pGPIO==GPIOA) { //I can't do switch-case with pointers! that's why I use if
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	2390      	movs	r3, #144	; 0x90
 800075a:	05db      	lsls	r3, r3, #23
 800075c:	429a      	cmp	r2, r3
 800075e:	d107      	bne.n	8000770 <GPIO_ClockControl+0x30>
			GPIOA_EnableClock();
 8000760:	4b44      	ldr	r3, [pc, #272]	; (8000874 <GPIO_ClockControl+0x134>)
 8000762:	695a      	ldr	r2, [r3, #20]
 8000764:	4b43      	ldr	r3, [pc, #268]	; (8000874 <GPIO_ClockControl+0x134>)
 8000766:	2180      	movs	r1, #128	; 0x80
 8000768:	0289      	lsls	r1, r1, #10
 800076a:	430a      	orrs	r2, r1
 800076c:	615a      	str	r2, [r3, #20]
		}
		else if (pGPIO==GPIOF){
			GPIOF_DisableClock();
		}
	}
}
 800076e:	e07d      	b.n	800086c <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOB){
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	4a41      	ldr	r2, [pc, #260]	; (8000878 <GPIO_ClockControl+0x138>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d107      	bne.n	8000788 <GPIO_ClockControl+0x48>
			GPIOB_EnableClock();
 8000778:	4b3e      	ldr	r3, [pc, #248]	; (8000874 <GPIO_ClockControl+0x134>)
 800077a:	695a      	ldr	r2, [r3, #20]
 800077c:	4b3d      	ldr	r3, [pc, #244]	; (8000874 <GPIO_ClockControl+0x134>)
 800077e:	2180      	movs	r1, #128	; 0x80
 8000780:	02c9      	lsls	r1, r1, #11
 8000782:	430a      	orrs	r2, r1
 8000784:	615a      	str	r2, [r3, #20]
}
 8000786:	e071      	b.n	800086c <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOC){
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4a3c      	ldr	r2, [pc, #240]	; (800087c <GPIO_ClockControl+0x13c>)
 800078c:	4293      	cmp	r3, r2
 800078e:	d107      	bne.n	80007a0 <GPIO_ClockControl+0x60>
			GPIOC_EnableClock();
 8000790:	4b38      	ldr	r3, [pc, #224]	; (8000874 <GPIO_ClockControl+0x134>)
 8000792:	695a      	ldr	r2, [r3, #20]
 8000794:	4b37      	ldr	r3, [pc, #220]	; (8000874 <GPIO_ClockControl+0x134>)
 8000796:	2180      	movs	r1, #128	; 0x80
 8000798:	0309      	lsls	r1, r1, #12
 800079a:	430a      	orrs	r2, r1
 800079c:	615a      	str	r2, [r3, #20]
}
 800079e:	e065      	b.n	800086c <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOD){
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4a37      	ldr	r2, [pc, #220]	; (8000880 <GPIO_ClockControl+0x140>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d107      	bne.n	80007b8 <GPIO_ClockControl+0x78>
			GPIOD_EnableClock();
 80007a8:	4b32      	ldr	r3, [pc, #200]	; (8000874 <GPIO_ClockControl+0x134>)
 80007aa:	695a      	ldr	r2, [r3, #20]
 80007ac:	4b31      	ldr	r3, [pc, #196]	; (8000874 <GPIO_ClockControl+0x134>)
 80007ae:	2180      	movs	r1, #128	; 0x80
 80007b0:	0349      	lsls	r1, r1, #13
 80007b2:	430a      	orrs	r2, r1
 80007b4:	615a      	str	r2, [r3, #20]
}
 80007b6:	e059      	b.n	800086c <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOE){
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	4a32      	ldr	r2, [pc, #200]	; (8000884 <GPIO_ClockControl+0x144>)
 80007bc:	4293      	cmp	r3, r2
 80007be:	d107      	bne.n	80007d0 <GPIO_ClockControl+0x90>
			GPIOE_EnableClock();
 80007c0:	4b2c      	ldr	r3, [pc, #176]	; (8000874 <GPIO_ClockControl+0x134>)
 80007c2:	695a      	ldr	r2, [r3, #20]
 80007c4:	4b2b      	ldr	r3, [pc, #172]	; (8000874 <GPIO_ClockControl+0x134>)
 80007c6:	2180      	movs	r1, #128	; 0x80
 80007c8:	0389      	lsls	r1, r1, #14
 80007ca:	430a      	orrs	r2, r1
 80007cc:	615a      	str	r2, [r3, #20]
}
 80007ce:	e04d      	b.n	800086c <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOF){
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4a2d      	ldr	r2, [pc, #180]	; (8000888 <GPIO_ClockControl+0x148>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d149      	bne.n	800086c <GPIO_ClockControl+0x12c>
			GPIOF_EnableClock();
 80007d8:	4b26      	ldr	r3, [pc, #152]	; (8000874 <GPIO_ClockControl+0x134>)
 80007da:	695a      	ldr	r2, [r3, #20]
 80007dc:	4b25      	ldr	r3, [pc, #148]	; (8000874 <GPIO_ClockControl+0x134>)
 80007de:	2180      	movs	r1, #128	; 0x80
 80007e0:	03c9      	lsls	r1, r1, #15
 80007e2:	430a      	orrs	r2, r1
 80007e4:	615a      	str	r2, [r3, #20]
}
 80007e6:	e041      	b.n	800086c <GPIO_ClockControl+0x12c>
		if (pGPIO==GPIOA) { //I can't do switch-case with pointers! that's why I use if
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	2390      	movs	r3, #144	; 0x90
 80007ec:	05db      	lsls	r3, r3, #23
 80007ee:	429a      	cmp	r2, r3
 80007f0:	d106      	bne.n	8000800 <GPIO_ClockControl+0xc0>
			GPIOA_DisableClock();
 80007f2:	4b20      	ldr	r3, [pc, #128]	; (8000874 <GPIO_ClockControl+0x134>)
 80007f4:	695a      	ldr	r2, [r3, #20]
 80007f6:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <GPIO_ClockControl+0x134>)
 80007f8:	4924      	ldr	r1, [pc, #144]	; (800088c <GPIO_ClockControl+0x14c>)
 80007fa:	400a      	ands	r2, r1
 80007fc:	615a      	str	r2, [r3, #20]
}
 80007fe:	e035      	b.n	800086c <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOB){
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4a1d      	ldr	r2, [pc, #116]	; (8000878 <GPIO_ClockControl+0x138>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d106      	bne.n	8000816 <GPIO_ClockControl+0xd6>
			GPIOB_DisableClock();
 8000808:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <GPIO_ClockControl+0x134>)
 800080a:	695a      	ldr	r2, [r3, #20]
 800080c:	4b19      	ldr	r3, [pc, #100]	; (8000874 <GPIO_ClockControl+0x134>)
 800080e:	4920      	ldr	r1, [pc, #128]	; (8000890 <GPIO_ClockControl+0x150>)
 8000810:	400a      	ands	r2, r1
 8000812:	615a      	str	r2, [r3, #20]
}
 8000814:	e02a      	b.n	800086c <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOC){
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4a18      	ldr	r2, [pc, #96]	; (800087c <GPIO_ClockControl+0x13c>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d106      	bne.n	800082c <GPIO_ClockControl+0xec>
			GPIOC_DisableClock();
 800081e:	4b15      	ldr	r3, [pc, #84]	; (8000874 <GPIO_ClockControl+0x134>)
 8000820:	695a      	ldr	r2, [r3, #20]
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <GPIO_ClockControl+0x134>)
 8000824:	491b      	ldr	r1, [pc, #108]	; (8000894 <GPIO_ClockControl+0x154>)
 8000826:	400a      	ands	r2, r1
 8000828:	615a      	str	r2, [r3, #20]
}
 800082a:	e01f      	b.n	800086c <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOD){
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4a14      	ldr	r2, [pc, #80]	; (8000880 <GPIO_ClockControl+0x140>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d106      	bne.n	8000842 <GPIO_ClockControl+0x102>
			GPIOD_DisableClock();
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <GPIO_ClockControl+0x134>)
 8000836:	695a      	ldr	r2, [r3, #20]
 8000838:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <GPIO_ClockControl+0x134>)
 800083a:	4917      	ldr	r1, [pc, #92]	; (8000898 <GPIO_ClockControl+0x158>)
 800083c:	400a      	ands	r2, r1
 800083e:	615a      	str	r2, [r3, #20]
}
 8000840:	e014      	b.n	800086c <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOE){
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4a0f      	ldr	r2, [pc, #60]	; (8000884 <GPIO_ClockControl+0x144>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d106      	bne.n	8000858 <GPIO_ClockControl+0x118>
			GPIOE_DisableClock();
 800084a:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <GPIO_ClockControl+0x134>)
 800084c:	695a      	ldr	r2, [r3, #20]
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <GPIO_ClockControl+0x134>)
 8000850:	4912      	ldr	r1, [pc, #72]	; (800089c <GPIO_ClockControl+0x15c>)
 8000852:	400a      	ands	r2, r1
 8000854:	615a      	str	r2, [r3, #20]
}
 8000856:	e009      	b.n	800086c <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOF){
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	4a0b      	ldr	r2, [pc, #44]	; (8000888 <GPIO_ClockControl+0x148>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d105      	bne.n	800086c <GPIO_ClockControl+0x12c>
			GPIOF_DisableClock();
 8000860:	4b04      	ldr	r3, [pc, #16]	; (8000874 <GPIO_ClockControl+0x134>)
 8000862:	695a      	ldr	r2, [r3, #20]
 8000864:	4b03      	ldr	r3, [pc, #12]	; (8000874 <GPIO_ClockControl+0x134>)
 8000866:	490e      	ldr	r1, [pc, #56]	; (80008a0 <GPIO_ClockControl+0x160>)
 8000868:	400a      	ands	r2, r1
 800086a:	615a      	str	r2, [r3, #20]
}
 800086c:	46c0      	nop			; (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	b002      	add	sp, #8
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40021000 	.word	0x40021000
 8000878:	48000400 	.word	0x48000400
 800087c:	48000800 	.word	0x48000800
 8000880:	48000c00 	.word	0x48000c00
 8000884:	48001000 	.word	0x48001000
 8000888:	48001400 	.word	0x48001400
 800088c:	fffdffff 	.word	0xfffdffff
 8000890:	fffbffff 	.word	0xfffbffff
 8000894:	fff7ffff 	.word	0xfff7ffff
 8000898:	ffefffff 	.word	0xffefffff
 800089c:	ffdfffff 	.word	0xffdfffff
 80008a0:	ffbfffff 	.word	0xffbfffff

080008a4 <GPIO_PinInit>:
/*********GPIO pin initialization*************/
void GPIO_PinInit(GPIO_PinHandle_t *GPIO_PinHandle){
 80008a4:	b5b0      	push	{r4, r5, r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	//local variables used for temporary values in operations
	uint8_t temp1;
	uint8_t temp2;

	//enable GPIO port clock
	GPIO_ClockControl(GPIO_PinHandle->pGPIO,ENABLE);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	2101      	movs	r1, #1
 80008b2:	0018      	movs	r0, r3
 80008b4:	f7ff ff44 	bl	8000740 <GPIO_ClockControl>

	//configure MODE: if not interrupt, mode is input/output/analog/alternate function
	if ((GPIO_PinHandle->GPIO_PinConfig.GPIO_PinMode)<=GPIO_ANA){
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	795b      	ldrb	r3, [r3, #5]
 80008bc:	2b03      	cmp	r3, #3
 80008be:	d81f      	bhi.n	8000900 <GPIO_PinInit+0x5c>
		// first,reset the 2 bits related to pin.ex:pin number 1 is for MODER bits 2 and 3. 3<<2*pin is 3<<2 aka 1100b.so MODER&=(~1100)=x..x00xx
		GPIO_PinHandle->pGPIO->MODER &= (~(3<<(2*GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber))); //I guess I can use 3 instead of 0x3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	791b      	ldrb	r3, [r3, #4]
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	2103      	movs	r1, #3
 80008ce:	4099      	lsls	r1, r3
 80008d0:	000b      	movs	r3, r1
 80008d2:	43db      	mvns	r3, r3
 80008d4:	0019      	movs	r1, r3
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	400a      	ands	r2, r1
 80008dc:	601a      	str	r2, [r3, #0]
		//now set
		GPIO_PinHandle->pGPIO->MODER |= (GPIO_PinHandle->GPIO_PinConfig.GPIO_PinMode<<(2*GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	795b      	ldrb	r3, [r3, #5]
 80008e8:	0019      	movs	r1, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	791b      	ldrb	r3, [r3, #4]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	4099      	lsls	r1, r3
 80008f2:	000b      	movs	r3, r1
 80008f4:	0019      	movs	r1, r3
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	430a      	orrs	r2, r1
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	e0af      	b.n	8000a60 <GPIO_PinInit+0x1bc>
	}
	else{ //interrupts
		//Configure the edge trigger (EXTI FTSR and RTSR). EXTI line "y" is for pins "y"; example, EXTI15 is for GPIOA15..GPIOF15
		if ((GPIO_PinHandle->GPIO_PinConfig.GPIO_PinMode)==GPIO_FALL_TRIG){
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	795b      	ldrb	r3, [r3, #5]
 8000904:	2b04      	cmp	r3, #4
 8000906:	d117      	bne.n	8000938 <GPIO_PinInit+0x94>
			//set falling edge trigger
			EXTI->FTSR |= (1<<GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000908:	4ba5      	ldr	r3, [pc, #660]	; (8000ba0 <GPIO_PinInit+0x2fc>)
 800090a:	68da      	ldr	r2, [r3, #12]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	791b      	ldrb	r3, [r3, #4]
 8000910:	0019      	movs	r1, r3
 8000912:	2301      	movs	r3, #1
 8000914:	408b      	lsls	r3, r1
 8000916:	0019      	movs	r1, r3
 8000918:	4ba1      	ldr	r3, [pc, #644]	; (8000ba0 <GPIO_PinInit+0x2fc>)
 800091a:	430a      	orrs	r2, r1
 800091c:	60da      	str	r2, [r3, #12]
			//clear rising edge trigger!
			EXTI->RTSR &= ~(1<<GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber);
 800091e:	4ba0      	ldr	r3, [pc, #640]	; (8000ba0 <GPIO_PinInit+0x2fc>)
 8000920:	689a      	ldr	r2, [r3, #8]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	791b      	ldrb	r3, [r3, #4]
 8000926:	0019      	movs	r1, r3
 8000928:	2301      	movs	r3, #1
 800092a:	408b      	lsls	r3, r1
 800092c:	43db      	mvns	r3, r3
 800092e:	0019      	movs	r1, r3
 8000930:	4b9b      	ldr	r3, [pc, #620]	; (8000ba0 <GPIO_PinInit+0x2fc>)
 8000932:	400a      	ands	r2, r1
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	e035      	b.n	80009a4 <GPIO_PinInit+0x100>
		}
		else if ((GPIO_PinHandle->GPIO_PinConfig.GPIO_PinMode)==GPIO_RISE_TRIG){
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	795b      	ldrb	r3, [r3, #5]
 800093c:	2b05      	cmp	r3, #5
 800093e:	d117      	bne.n	8000970 <GPIO_PinInit+0xcc>
			//set rising edge trigger
			EXTI->RTSR |= (1<<GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000940:	4b97      	ldr	r3, [pc, #604]	; (8000ba0 <GPIO_PinInit+0x2fc>)
 8000942:	689a      	ldr	r2, [r3, #8]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	791b      	ldrb	r3, [r3, #4]
 8000948:	0019      	movs	r1, r3
 800094a:	2301      	movs	r3, #1
 800094c:	408b      	lsls	r3, r1
 800094e:	0019      	movs	r1, r3
 8000950:	4b93      	ldr	r3, [pc, #588]	; (8000ba0 <GPIO_PinInit+0x2fc>)
 8000952:	430a      	orrs	r2, r1
 8000954:	609a      	str	r2, [r3, #8]
			//clear falling edge trigger!
			EXTI->FTSR &= ~(1<<GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000956:	4b92      	ldr	r3, [pc, #584]	; (8000ba0 <GPIO_PinInit+0x2fc>)
 8000958:	68da      	ldr	r2, [r3, #12]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	791b      	ldrb	r3, [r3, #4]
 800095e:	0019      	movs	r1, r3
 8000960:	2301      	movs	r3, #1
 8000962:	408b      	lsls	r3, r1
 8000964:	43db      	mvns	r3, r3
 8000966:	0019      	movs	r1, r3
 8000968:	4b8d      	ldr	r3, [pc, #564]	; (8000ba0 <GPIO_PinInit+0x2fc>)
 800096a:	400a      	ands	r2, r1
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	e019      	b.n	80009a4 <GPIO_PinInit+0x100>
		}
		else if ((GPIO_PinHandle->GPIO_PinConfig.GPIO_PinMode)==GPIO_FALLRISE_TRIG){
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	795b      	ldrb	r3, [r3, #5]
 8000974:	2b06      	cmp	r3, #6
 8000976:	d115      	bne.n	80009a4 <GPIO_PinInit+0x100>
			//set both falling and rising edge triggers
			EXTI->FTSR |= (1<<GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000978:	4b89      	ldr	r3, [pc, #548]	; (8000ba0 <GPIO_PinInit+0x2fc>)
 800097a:	68da      	ldr	r2, [r3, #12]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	791b      	ldrb	r3, [r3, #4]
 8000980:	0019      	movs	r1, r3
 8000982:	2301      	movs	r3, #1
 8000984:	408b      	lsls	r3, r1
 8000986:	0019      	movs	r1, r3
 8000988:	4b85      	ldr	r3, [pc, #532]	; (8000ba0 <GPIO_PinInit+0x2fc>)
 800098a:	430a      	orrs	r2, r1
 800098c:	60da      	str	r2, [r3, #12]
			EXTI->RTSR |= (1<<GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber);
 800098e:	4b84      	ldr	r3, [pc, #528]	; (8000ba0 <GPIO_PinInit+0x2fc>)
 8000990:	689a      	ldr	r2, [r3, #8]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	791b      	ldrb	r3, [r3, #4]
 8000996:	0019      	movs	r1, r3
 8000998:	2301      	movs	r3, #1
 800099a:	408b      	lsls	r3, r1
 800099c:	0019      	movs	r1, r3
 800099e:	4b80      	ldr	r3, [pc, #512]	; (8000ba0 <GPIO_PinInit+0x2fc>)
 80009a0:	430a      	orrs	r2, r1
 80009a2:	609a      	str	r2, [r3, #8]
		}

		//EXTICR: select the GPIO for the interruption on corresponding EXTI line through EXTICR registers (every allows just one, so it's a decision)
		//EXTICR0:for GPIO pins 0-3. Blocks of 4 bits to select A-F.EXTICR1: for GPIO pins 4-7. Blocks of 4 bits to select A-F. And so on
		//if GPIOD10-->EXTICR3 (block1,that is,from bit4) because EXTICR1 is for pins 0-3, CR2 pins 4-7 and so on. GPIOD--> 010
		temp1 = GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber/4; //to know which EXTICR
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	791a      	ldrb	r2, [r3, #4]
 80009a8:	200f      	movs	r0, #15
 80009aa:	183b      	adds	r3, r7, r0
 80009ac:	0892      	lsrs	r2, r2, #2
 80009ae:	701a      	strb	r2, [r3, #0]
		temp2 = GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber%4;//to know the block within EXTICR
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	791a      	ldrb	r2, [r3, #4]
 80009b4:	230e      	movs	r3, #14
 80009b6:	18fb      	adds	r3, r7, r3
 80009b8:	2103      	movs	r1, #3
 80009ba:	400a      	ands	r2, r1
 80009bc:	701a      	strb	r2, [r3, #0]
		//enable SYSCFG clock and configure the correspondingEXTICR
		SYSCFG_EnableClock();
 80009be:	4b79      	ldr	r3, [pc, #484]	; (8000ba4 <GPIO_PinInit+0x300>)
 80009c0:	699a      	ldr	r2, [r3, #24]
 80009c2:	4b78      	ldr	r3, [pc, #480]	; (8000ba4 <GPIO_PinInit+0x300>)
 80009c4:	2101      	movs	r1, #1
 80009c6:	430a      	orrs	r2, r1
 80009c8:	619a      	str	r2, [r3, #24]
		SYSCFG->EXTICR[temp1] |= ((GPIO_PORT_TO_NUMBER(GPIO_PinHandle->pGPIO))<< (4*temp2) );
 80009ca:	4a77      	ldr	r2, [pc, #476]	; (8000ba8 <GPIO_PinInit+0x304>)
 80009cc:	183b      	adds	r3, r7, r0
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	3302      	adds	r3, #2
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	589a      	ldr	r2, [r3, r2]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6819      	ldr	r1, [r3, #0]
 80009da:	2390      	movs	r3, #144	; 0x90
 80009dc:	05db      	lsls	r3, r3, #23
 80009de:	4299      	cmp	r1, r3
 80009e0:	d024      	beq.n	8000a2c <GPIO_PinInit+0x188>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4971      	ldr	r1, [pc, #452]	; (8000bac <GPIO_PinInit+0x308>)
 80009e8:	428b      	cmp	r3, r1
 80009ea:	d01d      	beq.n	8000a28 <GPIO_PinInit+0x184>
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	496f      	ldr	r1, [pc, #444]	; (8000bb0 <GPIO_PinInit+0x30c>)
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d016      	beq.n	8000a24 <GPIO_PinInit+0x180>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	496e      	ldr	r1, [pc, #440]	; (8000bb4 <GPIO_PinInit+0x310>)
 80009fc:	428b      	cmp	r3, r1
 80009fe:	d00f      	beq.n	8000a20 <GPIO_PinInit+0x17c>
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	496c      	ldr	r1, [pc, #432]	; (8000bb8 <GPIO_PinInit+0x314>)
 8000a06:	428b      	cmp	r3, r1
 8000a08:	d008      	beq.n	8000a1c <GPIO_PinInit+0x178>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	496b      	ldr	r1, [pc, #428]	; (8000bbc <GPIO_PinInit+0x318>)
 8000a10:	428b      	cmp	r3, r1
 8000a12:	d101      	bne.n	8000a18 <GPIO_PinInit+0x174>
 8000a14:	2305      	movs	r3, #5
 8000a16:	e00a      	b.n	8000a2e <GPIO_PinInit+0x18a>
 8000a18:	2300      	movs	r3, #0
 8000a1a:	e008      	b.n	8000a2e <GPIO_PinInit+0x18a>
 8000a1c:	2304      	movs	r3, #4
 8000a1e:	e006      	b.n	8000a2e <GPIO_PinInit+0x18a>
 8000a20:	2303      	movs	r3, #3
 8000a22:	e004      	b.n	8000a2e <GPIO_PinInit+0x18a>
 8000a24:	2302      	movs	r3, #2
 8000a26:	e002      	b.n	8000a2e <GPIO_PinInit+0x18a>
 8000a28:	2301      	movs	r3, #1
 8000a2a:	e000      	b.n	8000a2e <GPIO_PinInit+0x18a>
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	210e      	movs	r1, #14
 8000a30:	1879      	adds	r1, r7, r1
 8000a32:	7809      	ldrb	r1, [r1, #0]
 8000a34:	0089      	lsls	r1, r1, #2
 8000a36:	408b      	lsls	r3, r1
 8000a38:	0018      	movs	r0, r3
 8000a3a:	495b      	ldr	r1, [pc, #364]	; (8000ba8 <GPIO_PinInit+0x304>)
 8000a3c:	230f      	movs	r3, #15
 8000a3e:	18fb      	adds	r3, r7, r3
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	4302      	orrs	r2, r0
 8000a44:	3302      	adds	r3, #2
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	505a      	str	r2, [r3, r1]

		//ENABLE EXTI interrupt by means of interrupt mask register
		EXTI->IMR |= (1<<GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a4a:	4b55      	ldr	r3, [pc, #340]	; (8000ba0 <GPIO_PinInit+0x2fc>)
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	791b      	ldrb	r3, [r3, #4]
 8000a52:	0019      	movs	r1, r3
 8000a54:	2301      	movs	r3, #1
 8000a56:	408b      	lsls	r3, r1
 8000a58:	0019      	movs	r1, r3
 8000a5a:	4b51      	ldr	r3, [pc, #324]	; (8000ba0 <GPIO_PinInit+0x2fc>)
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	601a      	str	r2, [r3, #0]
		/*Check specific functions for the configuration on processor side: NVIC (nested vector interrupt controller)*/
	}

	//OUTPUT TYPE. TBD:don't do if !=output mode?
	// first,reset the related bit
	GPIO_PinHandle->pGPIO->OTYPER &= (~(1<<GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	685a      	ldr	r2, [r3, #4]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	791b      	ldrb	r3, [r3, #4]
 8000a6a:	0019      	movs	r1, r3
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	408b      	lsls	r3, r1
 8000a70:	43db      	mvns	r3, r3
 8000a72:	0019      	movs	r1, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	400a      	ands	r2, r1
 8000a7a:	605a      	str	r2, [r3, #4]
	//now set
	GPIO_PinHandle->pGPIO->OTYPER |= (GPIO_PinHandle->GPIO_PinConfig.GPIO_PinOutType<<(GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	685a      	ldr	r2, [r3, #4]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	799b      	ldrb	r3, [r3, #6]
 8000a86:	0019      	movs	r1, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	791b      	ldrb	r3, [r3, #4]
 8000a8c:	4099      	lsls	r1, r3
 8000a8e:	000b      	movs	r3, r1
 8000a90:	0019      	movs	r1, r3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	430a      	orrs	r2, r1
 8000a98:	605a      	str	r2, [r3, #4]

	//OUTPUT SPEED. TBD:don't do if !=output mode?
	// first,reset the related bits
	GPIO_PinHandle->pGPIO->OSPEEDR &= (~(3<<(2*GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber)));
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	689a      	ldr	r2, [r3, #8]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	791b      	ldrb	r3, [r3, #4]
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	2103      	movs	r1, #3
 8000aa8:	4099      	lsls	r1, r3
 8000aaa:	000b      	movs	r3, r1
 8000aac:	43db      	mvns	r3, r3
 8000aae:	0019      	movs	r1, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	400a      	ands	r2, r1
 8000ab6:	609a      	str	r2, [r3, #8]
	//now set
	GPIO_PinHandle->pGPIO->OSPEEDR |= (GPIO_PinHandle->GPIO_PinConfig.GPIO_PinOutSpeed<<(2*GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	689a      	ldr	r2, [r3, #8]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	79db      	ldrb	r3, [r3, #7]
 8000ac2:	0019      	movs	r1, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	791b      	ldrb	r3, [r3, #4]
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	4099      	lsls	r1, r3
 8000acc:	000b      	movs	r3, r1
 8000ace:	0019      	movs	r1, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	609a      	str	r2, [r3, #8]

	//PULL UP/DOWN
	// first,reset the related bits
	GPIO_PinHandle->pGPIO->PUPDR &= (~(3<<(2*GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber)));
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	68da      	ldr	r2, [r3, #12]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	791b      	ldrb	r3, [r3, #4]
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	2103      	movs	r1, #3
 8000ae6:	4099      	lsls	r1, r3
 8000ae8:	000b      	movs	r3, r1
 8000aea:	43db      	mvns	r3, r3
 8000aec:	0019      	movs	r1, r3
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	400a      	ands	r2, r1
 8000af4:	60da      	str	r2, [r3, #12]
	//now set
	GPIO_PinHandle->pGPIO->PUPDR |= (GPIO_PinHandle->GPIO_PinConfig.GPIO_PinPullUpDown<<(2*GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	68da      	ldr	r2, [r3, #12]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	7a1b      	ldrb	r3, [r3, #8]
 8000b00:	0019      	movs	r1, r3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	791b      	ldrb	r3, [r3, #4]
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	4099      	lsls	r1, r3
 8000b0a:	000b      	movs	r3, r1
 8000b0c:	0019      	movs	r1, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	430a      	orrs	r2, r1
 8000b14:	60da      	str	r2, [r3, #12]

	//ALTERNATE FUNCTION
	if (GPIO_PinHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_ALTFUN){
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	795b      	ldrb	r3, [r3, #5]
 8000b1a:	2b02      	cmp	r3, #2
 8000b1c:	d13b      	bne.n	8000b96 <GPIO_PinInit+0x2f2>
		//as there are 2 registers, low is for pins 0-7 and high for 8-15.in our struct,AFR[2].We need to know where to actuate
		temp1 = GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber / 8 ; //ex: pin 7-->reg 0,byte=7(last);pin12 --> reg1, byte=4
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	791a      	ldrb	r2, [r3, #4]
 8000b22:	240f      	movs	r4, #15
 8000b24:	193b      	adds	r3, r7, r4
 8000b26:	08d2      	lsrs	r2, r2, #3
 8000b28:	701a      	strb	r2, [r3, #0]
		temp2 = GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	791a      	ldrb	r2, [r3, #4]
 8000b2e:	250e      	movs	r5, #14
 8000b30:	197b      	adds	r3, r7, r5
 8000b32:	2107      	movs	r1, #7
 8000b34:	400a      	ands	r2, r1
 8000b36:	701a      	strb	r2, [r3, #0]
		// first,reset the related bits. in this case, 4. ~1111 is ~0x0F
		GPIO_PinHandle->pGPIO->AFR[temp1] &= (~(0xF<<(4*temp2)));
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	193a      	adds	r2, r7, r4
 8000b3e:	7812      	ldrb	r2, [r2, #0]
 8000b40:	3208      	adds	r2, #8
 8000b42:	0092      	lsls	r2, r2, #2
 8000b44:	58d1      	ldr	r1, [r2, r3]
 8000b46:	197b      	adds	r3, r7, r5
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	220f      	movs	r2, #15
 8000b4e:	409a      	lsls	r2, r3
 8000b50:	0013      	movs	r3, r2
 8000b52:	43db      	mvns	r3, r3
 8000b54:	0018      	movs	r0, r3
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	193a      	adds	r2, r7, r4
 8000b5c:	7812      	ldrb	r2, [r2, #0]
 8000b5e:	4001      	ands	r1, r0
 8000b60:	3208      	adds	r2, #8
 8000b62:	0092      	lsls	r2, r2, #2
 8000b64:	50d1      	str	r1, [r2, r3]
		//now set
		GPIO_PinHandle->pGPIO->AFR[temp1] |= (GPIO_PinHandle->GPIO_PinConfig.GPIO_PinAlterFunc<<(4*temp2));
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	193a      	adds	r2, r7, r4
 8000b6c:	7812      	ldrb	r2, [r2, #0]
 8000b6e:	3208      	adds	r2, #8
 8000b70:	0092      	lsls	r2, r2, #2
 8000b72:	58d1      	ldr	r1, [r2, r3]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	7a5b      	ldrb	r3, [r3, #9]
 8000b78:	001a      	movs	r2, r3
 8000b7a:	197b      	adds	r3, r7, r5
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	409a      	lsls	r2, r3
 8000b82:	0013      	movs	r3, r2
 8000b84:	0018      	movs	r0, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	193a      	adds	r2, r7, r4
 8000b8c:	7812      	ldrb	r2, [r2, #0]
 8000b8e:	4301      	orrs	r1, r0
 8000b90:	3208      	adds	r2, #8
 8000b92:	0092      	lsls	r2, r2, #2
 8000b94:	50d1      	str	r1, [r2, r3]
	}
}
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	b004      	add	sp, #16
 8000b9c:	bdb0      	pop	{r4, r5, r7, pc}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	40010400 	.word	0x40010400
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	40010000 	.word	0x40010000
 8000bac:	48000400 	.word	0x48000400
 8000bb0:	48000800 	.word	0x48000800
 8000bb4:	48000c00 	.word	0x48000c00
 8000bb8:	48001000 	.word	0x48001000
 8000bbc:	48001400 	.word	0x48001400

08000bc0 <GPIO_WritePin>:
uint16_t GPIO_ReadPort(GPIO_RegStruct_t *pGPIO){
	return (uint16_t)pGPIO->IDR;
}

/**************************Write to output (pin or port)************************/
void GPIO_WritePin(GPIO_RegStruct_t *pGPIO, uint8_t pin, uint8_t output){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	0008      	movs	r0, r1
 8000bca:	0011      	movs	r1, r2
 8000bcc:	1cfb      	adds	r3, r7, #3
 8000bce:	1c02      	adds	r2, r0, #0
 8000bd0:	701a      	strb	r2, [r3, #0]
 8000bd2:	1cbb      	adds	r3, r7, #2
 8000bd4:	1c0a      	adds	r2, r1, #0
 8000bd6:	701a      	strb	r2, [r3, #0]
	//do not do first clear the related bit and then set.we don't want to modify the output
	//I prefer to do an if statement than using intermediate variables to clear and set
	if (output==1){
 8000bd8:	1cbb      	adds	r3, r7, #2
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d10a      	bne.n	8000bf6 <GPIO_WritePin+0x36>
		pGPIO->ODR |= (1<<pin);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	695b      	ldr	r3, [r3, #20]
 8000be4:	1cfa      	adds	r2, r7, #3
 8000be6:	7812      	ldrb	r2, [r2, #0]
 8000be8:	2101      	movs	r1, #1
 8000bea:	4091      	lsls	r1, r2
 8000bec:	000a      	movs	r2, r1
 8000bee:	431a      	orrs	r2, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	615a      	str	r2, [r3, #20]
	}
	else { //0
		pGPIO->ODR &= (~(1<<pin));
	}

}
 8000bf4:	e00a      	b.n	8000c0c <GPIO_WritePin+0x4c>
		pGPIO->ODR &= (~(1<<pin));
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	1cfa      	adds	r2, r7, #3
 8000bfc:	7812      	ldrb	r2, [r2, #0]
 8000bfe:	2101      	movs	r1, #1
 8000c00:	4091      	lsls	r1, r2
 8000c02:	000a      	movs	r2, r1
 8000c04:	43d2      	mvns	r2, r2
 8000c06:	401a      	ands	r2, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	615a      	str	r2, [r3, #20]
}
 8000c0c:	46c0      	nop			; (mov r8, r8)
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	b002      	add	sp, #8
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <GPIO_IRQ_EnableDisable>:
	pGPIO->ODR ^= (1<<pin); //^ is XOR. 1^0=0;0^1=1;1^1=0;0^0=0. So x^1 = !x
}

/*************************NVIC functions for IRQ*****************************************/
/*Enable or disable an IRQ*/
void GPIO_IRQ_EnableDisable(uint8_t IRQ_Number, uint8_t EnableDisable){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	0002      	movs	r2, r0
 8000c1c:	1dfb      	adds	r3, r7, #7
 8000c1e:	701a      	strb	r2, [r3, #0]
 8000c20:	1dbb      	adds	r3, r7, #6
 8000c22:	1c0a      	adds	r2, r1, #0
 8000c24:	701a      	strb	r2, [r3, #0]
	if(EnableDisable == ENABLE){ //enable by means of ISER
 8000c26:	1dbb      	adds	r3, r7, #6
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d10b      	bne.n	8000c46 <GPIO_IRQ_EnableDisable+0x32>
		*NVIC_ISER |= ( 1 << IRQ_Number);
 8000c2e:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <GPIO_IRQ_EnableDisable+0x50>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	1dfb      	adds	r3, r7, #7
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2101      	movs	r1, #1
 8000c38:	4099      	lsls	r1, r3
 8000c3a:	000b      	movs	r3, r1
 8000c3c:	0019      	movs	r1, r3
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <GPIO_IRQ_EnableDisable+0x50>)
 8000c40:	430a      	orrs	r2, r1
 8000c42:	601a      	str	r2, [r3, #0]
	}
	else { //disable by means of ICER
		*NVIC_ICER |= ( 1 << IRQ_Number);
	}

}
 8000c44:	e00a      	b.n	8000c5c <GPIO_IRQ_EnableDisable+0x48>
		*NVIC_ICER |= ( 1 << IRQ_Number);
 8000c46:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <GPIO_IRQ_EnableDisable+0x54>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	1dfb      	adds	r3, r7, #7
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2101      	movs	r1, #1
 8000c50:	4099      	lsls	r1, r3
 8000c52:	000b      	movs	r3, r1
 8000c54:	0019      	movs	r1, r3
 8000c56:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <GPIO_IRQ_EnableDisable+0x54>)
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	601a      	str	r2, [r3, #0]
}
 8000c5c:	46c0      	nop			; (mov r8, r8)
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	b002      	add	sp, #8
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	e000e100 	.word	0xe000e100
 8000c68:	e000e180 	.word	0xe000e180

08000c6c <GPIO_IRQ_Handling>:
	//Clear the block and set. Better if I use intermediate variables instead of modifying many times the IPR
	uint32_t tempIPR = ((*(NVIC_IPR_BASE + numberIPR))&~(0xFF<<blockIPR));
	tempIPR |= (IRQ_Priority<<(8*blockIPR+6)); //6 is because bits 0-5 are not editable, only bits 6-7 count.
	*(NVIC_IPR_BASE + numberIPR) = tempIPR;
}
void GPIO_IRQ_Handling(uint8_t pin){
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	0002      	movs	r2, r0
 8000c74:	1dfb      	adds	r3, r7, #7
 8000c76:	701a      	strb	r2, [r3, #0]
	/*ISRs (handlers) are actually application specific and implement/override(weak) handlers defined in startup*/
	/*GPIO_IRQ_Handling will be called inside the ISR handler.*/
	//Clear the pending register of the EXTI(interrupt handling depends upon the peripheral).PR of processor is automatically cleared (I think)
	if ((EXTI->PR) & (1<<pin)){ //if PR[pin]==1
 8000c78:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <GPIO_IRQ_Handling+0x3c>)
 8000c7a:	695b      	ldr	r3, [r3, #20]
 8000c7c:	1dfa      	adds	r2, r7, #7
 8000c7e:	7812      	ldrb	r2, [r2, #0]
 8000c80:	2101      	movs	r1, #1
 8000c82:	4091      	lsls	r1, r2
 8000c84:	000a      	movs	r2, r1
 8000c86:	4013      	ands	r3, r2
 8000c88:	d00a      	beq.n	8000ca0 <GPIO_IRQ_Handling+0x34>
		(EXTI->PR) |= (1<<pin); //write 1 to clear the pending register
 8000c8a:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <GPIO_IRQ_Handling+0x3c>)
 8000c8c:	695a      	ldr	r2, [r3, #20]
 8000c8e:	1dfb      	adds	r3, r7, #7
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2101      	movs	r1, #1
 8000c94:	4099      	lsls	r1, r3
 8000c96:	000b      	movs	r3, r1
 8000c98:	0019      	movs	r1, r3
 8000c9a:	4b03      	ldr	r3, [pc, #12]	; (8000ca8 <GPIO_IRQ_Handling+0x3c>)
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	615a      	str	r2, [r3, #20]
	}

}
 8000ca0:	46c0      	nop			; (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b002      	add	sp, #8
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40010400 	.word	0x40010400

08000cac <I2C_ClockControl>:
static void I2C_TCR_handler(I2C_Handle_t *pI2Chandle); //when NBYTES>255

static void I2C_SlaveAddress(I2C_Handle_t *pI2Chandle); //set slave address

/*Enable or disable I2C peripheral clock*/
void I2C_ClockControl(I2C_Handle_t *pI2Chandle, uint8_t EnableDisable){
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	000a      	movs	r2, r1
 8000cb6:	1cfb      	adds	r3, r7, #3
 8000cb8:	701a      	strb	r2, [r3, #0]
	if (EnableDisable == ENABLE) {
 8000cba:	1cfb      	adds	r3, r7, #3
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d119      	bne.n	8000cf6 <I2C_ClockControl+0x4a>
		if (pI2Chandle->pI2C == I2C1){
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a19      	ldr	r2, [pc, #100]	; (8000d2c <I2C_ClockControl+0x80>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d107      	bne.n	8000cdc <I2C_ClockControl+0x30>
			I2C1_EnableClock();
 8000ccc:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <I2C_ClockControl+0x84>)
 8000cce:	69da      	ldr	r2, [r3, #28]
 8000cd0:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <I2C_ClockControl+0x84>)
 8000cd2:	2180      	movs	r1, #128	; 0x80
 8000cd4:	0389      	lsls	r1, r1, #14
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	61da      	str	r2, [r3, #28]
		}
		else if (pI2Chandle->pI2C == I2C2){
			I2C2_DisableClock();
		}
	}
}
 8000cda:	e023      	b.n	8000d24 <I2C_ClockControl+0x78>
		else if (pI2Chandle->pI2C == I2C2){
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a14      	ldr	r2, [pc, #80]	; (8000d34 <I2C_ClockControl+0x88>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d11e      	bne.n	8000d24 <I2C_ClockControl+0x78>
			I2C2_EnableClock();
 8000ce6:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <I2C_ClockControl+0x84>)
 8000ce8:	69da      	ldr	r2, [r3, #28]
 8000cea:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <I2C_ClockControl+0x84>)
 8000cec:	2180      	movs	r1, #128	; 0x80
 8000cee:	03c9      	lsls	r1, r1, #15
 8000cf0:	430a      	orrs	r2, r1
 8000cf2:	61da      	str	r2, [r3, #28]
}
 8000cf4:	e016      	b.n	8000d24 <I2C_ClockControl+0x78>
		if (pI2Chandle->pI2C == I2C1){
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a0c      	ldr	r2, [pc, #48]	; (8000d2c <I2C_ClockControl+0x80>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d106      	bne.n	8000d0e <I2C_ClockControl+0x62>
			I2C1_DisableClock();
 8000d00:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <I2C_ClockControl+0x84>)
 8000d02:	69da      	ldr	r2, [r3, #28]
 8000d04:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <I2C_ClockControl+0x84>)
 8000d06:	490c      	ldr	r1, [pc, #48]	; (8000d38 <I2C_ClockControl+0x8c>)
 8000d08:	400a      	ands	r2, r1
 8000d0a:	61da      	str	r2, [r3, #28]
}
 8000d0c:	e00a      	b.n	8000d24 <I2C_ClockControl+0x78>
		else if (pI2Chandle->pI2C == I2C2){
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a08      	ldr	r2, [pc, #32]	; (8000d34 <I2C_ClockControl+0x88>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d105      	bne.n	8000d24 <I2C_ClockControl+0x78>
			I2C2_DisableClock();
 8000d18:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <I2C_ClockControl+0x84>)
 8000d1a:	69da      	ldr	r2, [r3, #28]
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <I2C_ClockControl+0x84>)
 8000d1e:	4907      	ldr	r1, [pc, #28]	; (8000d3c <I2C_ClockControl+0x90>)
 8000d20:	400a      	ands	r2, r1
 8000d22:	61da      	str	r2, [r3, #28]
}
 8000d24:	46c0      	nop			; (mov r8, r8)
 8000d26:	46bd      	mov	sp, r7
 8000d28:	b002      	add	sp, #8
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40005400 	.word	0x40005400
 8000d30:	40021000 	.word	0x40021000
 8000d34:	40005800 	.word	0x40005800
 8000d38:	ffdfffff 	.word	0xffdfffff
 8000d3c:	ffbfffff 	.word	0xffbfffff

08000d40 <I2C_Init>:

/*Initialization, which enables clock but not the peripheral yet(this is done by I2C_EnableDisable)*/
void I2C_Init(I2C_Handle_t *pI2Chandle){
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	//enable I2C peripheral clock
	I2C_ClockControl(pI2Chandle,ENABLE);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f7ff ffad 	bl	8000cac <I2C_ClockControl>
	/*Configure TIMINGR. Use I2C_Timing_Config_Tool_Vx.y.z.xls or check out values in 26.4.11
	 * I2C_TIMINGR register configuration examples.
	 * This includes clock speed, I2C mode (standard,fast...)
	 * In case of knowing PRESC,SCLDEL,SDADEL,SCLH and SCLL: use my I2C_Master_TimingR
	 */
	pI2Chandle->pI2C->I2C_TIMINGR = pI2Chandle->I2C_Config.I2C_Timing;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	6892      	ldr	r2, [r2, #8]
 8000d5a:	611a      	str	r2, [r3, #16]

	/*//TX buffer as a dynamic array
	pI2Chandle->I2C_Comm_t.TX_buffer = malloc(pI2Chandle->I2C_Comm_t.TX_length);*/
}
 8000d5c:	46c0      	nop			; (mov r8, r8)
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	b002      	add	sp, #8
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <I2C_EnableDisable>:

/*I2C control: enable/disable */
void I2C_EnableDisable(I2C_Handle_t *pI2Chandle, uint8_t EnableDisable){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	000a      	movs	r2, r1
 8000d6e:	1cfb      	adds	r3, r7, #3
 8000d70:	701a      	strb	r2, [r3, #0]
	if (EnableDisable == ENABLE){
 8000d72:	1cfb      	adds	r3, r7, #3
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d10b      	bne.n	8000d92 <I2C_EnableDisable+0x2e>
		pI2Chandle->pI2C->I2C_CR1 |= (1<<I2C_CR1_PE);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2101      	movs	r1, #1
 8000d86:	430a      	orrs	r2, r1
 8000d88:	601a      	str	r2, [r3, #0]
		pI2Chandle->I2C_Comm_t.communication_state = I2C_READY;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	771a      	strb	r2, [r3, #28]
	}
	else { //0
		pI2Chandle->pI2C->I2C_CR1 &= ~(1<<I2C_CR1_PE);
	}
}
 8000d90:	e007      	b.n	8000da2 <I2C_EnableDisable+0x3e>
		pI2Chandle->pI2C->I2C_CR1 &= ~(1<<I2C_CR1_PE);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	438a      	bics	r2, r1
 8000da0:	601a      	str	r2, [r3, #0]
}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	46bd      	mov	sp, r7
 8000da6:	b002      	add	sp, #8
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <I2C_IRQ_EnableDisable>:
	}
	pI2Chandle->pI2C->I2C_CR1 |= (1<<I2C_CR1_PE);
}

/*IRQ Configuration and ISR handling*/
void I2C_IRQ_EnableDisable(uint8_t IRQ_Number, uint8_t EnableDisable){ //IRQ_I2C1(combined with eXTI line23)/IRQ_I2C2
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	0002      	movs	r2, r0
 8000db4:	1dfb      	adds	r3, r7, #7
 8000db6:	701a      	strb	r2, [r3, #0]
 8000db8:	1dbb      	adds	r3, r7, #6
 8000dba:	1c0a      	adds	r2, r1, #0
 8000dbc:	701a      	strb	r2, [r3, #0]
	if(EnableDisable == ENABLE){ //enable by means of ISER
 8000dbe:	1dbb      	adds	r3, r7, #6
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d10b      	bne.n	8000dde <I2C_IRQ_EnableDisable+0x32>
		*NVIC_ISER |= ( 1 << IRQ_Number);
 8000dc6:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <I2C_IRQ_EnableDisable+0x50>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	1dfb      	adds	r3, r7, #7
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2101      	movs	r1, #1
 8000dd0:	4099      	lsls	r1, r3
 8000dd2:	000b      	movs	r3, r1
 8000dd4:	0019      	movs	r1, r3
 8000dd6:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <I2C_IRQ_EnableDisable+0x50>)
 8000dd8:	430a      	orrs	r2, r1
 8000dda:	601a      	str	r2, [r3, #0]
	}
	else { //disable by means of ICER
		*NVIC_ICER |= ( 1 << IRQ_Number);
	}
}
 8000ddc:	e00a      	b.n	8000df4 <I2C_IRQ_EnableDisable+0x48>
		*NVIC_ICER |= ( 1 << IRQ_Number);
 8000dde:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <I2C_IRQ_EnableDisable+0x54>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	1dfb      	adds	r3, r7, #7
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2101      	movs	r1, #1
 8000de8:	4099      	lsls	r1, r3
 8000dea:	000b      	movs	r3, r1
 8000dec:	0019      	movs	r1, r3
 8000dee:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <I2C_IRQ_EnableDisable+0x54>)
 8000df0:	430a      	orrs	r2, r1
 8000df2:	601a      	str	r2, [r3, #0]
}
 8000df4:	46c0      	nop			; (mov r8, r8)
 8000df6:	46bd      	mov	sp, r7
 8000df8:	b002      	add	sp, #8
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	e000e100 	.word	0xe000e100
 8000e00:	e000e180 	.word	0xe000e180

08000e04 <I2C_IRQ_Handling>:
	uint32_t tempIPR = ((*(NVIC_IPR_BASE + numberIPR))&~(0xFF<<blockIPR));
	tempIPR |= (IRQ_Priority<<(8*blockIPR+6)); //6 is because bits 0-5 are not editable, only bits 6-7 count.
	*(NVIC_IPR_BASE + numberIPR) = tempIPR;
}

void I2C_IRQ_Handling(I2C_Handle_t *pI2Chandle){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
	//Call the handler related to the interrupt if register is true as long as it is enabled
	//TXIS: Transmit Interrupt Status
	if ( (pI2Chandle->pI2C->I2C_CR1 & (1<<I2C_CR1_TXIE)) && (pI2Chandle->pI2C->I2C_ISR & (1<<I2C_ISR_TXIS)) ){
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2202      	movs	r2, #2
 8000e14:	4013      	ands	r3, r2
 8000e16:	d00a      	beq.n	8000e2e <I2C_IRQ_Handling+0x2a>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	2202      	movs	r2, #2
 8000e20:	4013      	ands	r3, r2
 8000e22:	d004      	beq.n	8000e2e <I2C_IRQ_Handling+0x2a>
		I2C_TXIS_handler(pI2Chandle);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	0018      	movs	r0, r3
 8000e28:	f000 f9aa 	bl	8001180 <I2C_TXIS_handler>
		return;
 8000e2c:	e055      	b.n	8000eda <I2C_IRQ_Handling+0xd6>
	}
	//RXNE: Receive data register not empty
	if ( (pI2Chandle->pI2C->I2C_CR1 & (1<<I2C_CR1_RXIE)) && (pI2Chandle->pI2C->I2C_ISR & (1<<I2C_ISR_RXNE)) ){
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2204      	movs	r2, #4
 8000e36:	4013      	ands	r3, r2
 8000e38:	d00a      	beq.n	8000e50 <I2C_IRQ_Handling+0x4c>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	2204      	movs	r2, #4
 8000e42:	4013      	ands	r3, r2
 8000e44:	d004      	beq.n	8000e50 <I2C_IRQ_Handling+0x4c>
		I2C_RXNE_handler(pI2Chandle);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f000 f9bc 	bl	80011c6 <I2C_RXNE_handler>
		return;
 8000e4e:	e044      	b.n	8000eda <I2C_IRQ_Handling+0xd6>
	}
	//BERR: bus error
	if ( (pI2Chandle->pI2C->I2C_CR1 & (1<<I2C_CR1_ERRIE)) && (pI2Chandle->pI2C->I2C_ISR & (1<<I2C_ISR_BERR)) ){
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2280      	movs	r2, #128	; 0x80
 8000e58:	4013      	ands	r3, r2
 8000e5a:	d00b      	beq.n	8000e74 <I2C_IRQ_Handling+0x70>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	699a      	ldr	r2, [r3, #24]
 8000e62:	2380      	movs	r3, #128	; 0x80
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	4013      	ands	r3, r2
 8000e68:	d004      	beq.n	8000e74 <I2C_IRQ_Handling+0x70>
		I2C_BERR_handler(pI2Chandle);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f000 f9d2 	bl	8001216 <I2C_BERR_handler>
		return;
 8000e72:	e032      	b.n	8000eda <I2C_IRQ_Handling+0xd6>
	}
	//TC: Transfer complete interrupt
	if ( (pI2Chandle->pI2C->I2C_CR1 & (1<<I2C_CR1_TCIE)) && (pI2Chandle->pI2C->I2C_ISR & (1<<I2C_ISR_TC)) ){
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2240      	movs	r2, #64	; 0x40
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	d00a      	beq.n	8000e96 <I2C_IRQ_Handling+0x92>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	2240      	movs	r2, #64	; 0x40
 8000e88:	4013      	ands	r3, r2
 8000e8a:	d004      	beq.n	8000e96 <I2C_IRQ_Handling+0x92>
		I2C_TC_handler(pI2Chandle);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f000 f9f8 	bl	8001284 <I2C_TC_handler>
		return;
 8000e94:	e021      	b.n	8000eda <I2C_IRQ_Handling+0xd6>
	}
	//TCR: Transfer complete reload (enabled by TCIE too)
	if ( (pI2Chandle->pI2C->I2C_CR1 & (1<<I2C_CR1_TCIE)) && (pI2Chandle->pI2C->I2C_ISR & (1<<I2C_ISR_TCR)) ){
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2240      	movs	r2, #64	; 0x40
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	d00a      	beq.n	8000eb8 <I2C_IRQ_Handling+0xb4>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	2280      	movs	r2, #128	; 0x80
 8000eaa:	4013      	ands	r3, r2
 8000eac:	d004      	beq.n	8000eb8 <I2C_IRQ_Handling+0xb4>
		I2C_TCR_handler(pI2Chandle);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	f000 f9fb 	bl	80012ac <I2C_TCR_handler>
		return;
 8000eb6:	e010      	b.n	8000eda <I2C_IRQ_Handling+0xd6>
	}
	//STOP: Stop detection Interrupt
	if ( (pI2Chandle->pI2C->I2C_CR1 & (1<<I2C_CR1_STOPIE)) && (pI2Chandle->pI2C->I2C_ISR & (1<<I2C_ISR_STOPF)) ){
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2220      	movs	r2, #32
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	d00a      	beq.n	8000eda <I2C_IRQ_Handling+0xd6>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	699b      	ldr	r3, [r3, #24]
 8000eca:	2220      	movs	r2, #32
 8000ecc:	4013      	ands	r3, r2
 8000ece:	d004      	beq.n	8000eda <I2C_IRQ_Handling+0xd6>
		I2C_STOP_handler(pI2Chandle);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	f000 f9ba 	bl	800124c <I2C_STOP_handler>
		return;
 8000ed8:	46c0      	nop			; (mov r8, r8)
	}
}
 8000eda:	46bd      	mov	sp, r7
 8000edc:	b002      	add	sp, #8
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <I2C_SlaveAddress>:

static void I2C_SlaveAddress(I2C_Handle_t *pI2Chandle){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	//slave address (7-bit or 10-bit)
	if (pI2Chandle->I2C_Config.I2C_AddressMode == I2C_ADDRESS_MODE_7BIT){ //7-bit
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	795b      	ldrb	r3, [r3, #5]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d10d      	bne.n	8000f0c <I2C_SlaveAddress+0x2c>
		//mask to 7 bits, move 1 bit to left (7-bits, so from b1 to b7) and set
		pI2Chandle->pI2C->I2C_CR2 |= ((pI2Chandle->I2C_Comm_t.I2C_SlaveAddress & 0x7F)<<1);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	6859      	ldr	r1, [r3, #4]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	8c1b      	ldrh	r3, [r3, #32]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	001a      	movs	r2, r3
 8000efe:	23ff      	movs	r3, #255	; 0xff
 8000f00:	401a      	ands	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	430a      	orrs	r2, r1
 8000f08:	605a      	str	r2, [r3, #4]
	}
	else { //10-bit
		//mask to 10 bits and set
		pI2Chandle->pI2C->I2C_CR2 |= (pI2Chandle->I2C_Comm_t.I2C_SlaveAddress & 0x3FF);
	}
}
 8000f0a:	e00a      	b.n	8000f22 <I2C_SlaveAddress+0x42>
		pI2Chandle->pI2C->I2C_CR2 |= (pI2Chandle->I2C_Comm_t.I2C_SlaveAddress & 0x3FF);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	6859      	ldr	r1, [r3, #4]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	8c1b      	ldrh	r3, [r3, #32]
 8000f16:	059b      	lsls	r3, r3, #22
 8000f18:	0d9a      	lsrs	r2, r3, #22
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	605a      	str	r2, [r3, #4]
}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	46bd      	mov	sp, r7
 8000f26:	b002      	add	sp, #8
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <I2C_Master_Transmitter>:

void I2C_Master_Transmitter(I2C_Handle_t *pI2Chandle, uint8_t exp_bytes, uint8_t autoend, uint8_t* appTxBuffer){
 8000f2c:	b5b0      	push	{r4, r5, r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	0008      	movs	r0, r1
 8000f36:	0011      	movs	r1, r2
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	240b      	movs	r4, #11
 8000f3c:	193b      	adds	r3, r7, r4
 8000f3e:	1c02      	adds	r2, r0, #0
 8000f40:	701a      	strb	r2, [r3, #0]
 8000f42:	250a      	movs	r5, #10
 8000f44:	197b      	adds	r3, r7, r5
 8000f46:	1c0a      	adds	r2, r1, #0
 8000f48:	701a      	strb	r2, [r3, #0]
	//TX state busy + configure transmission(including interrupts) + start&address
	if (pI2Chandle->I2C_Comm_t.communication_state != (I2C_DURING_TX || I2C_DURING_RX)){
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	7f1b      	ldrb	r3, [r3, #28]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d079      	beq.n	8001046 <I2C_Master_Transmitter+0x11a>
		//start transmission (start+slave address) if I2C_READY,I2C_RESTART_STOP or I2C_RELOAD
		//transfer direction: master requests a write transfer (0)
		pI2Chandle->pI2C->I2C_CR2 &= ~(1<<I2C_CR2_RDWRN);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	685a      	ldr	r2, [r3, #4]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	493c      	ldr	r1, [pc, #240]	; (8001050 <I2C_Master_Transmitter+0x124>)
 8000f5e:	400a      	ands	r2, r1
 8000f60:	605a      	str	r2, [r3, #4]
		//slave address (7-bit or 10-bit)
		I2C_SlaveAddress(pI2Chandle);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	0018      	movs	r0, r3
 8000f66:	f7ff ffbb 	bl	8000ee0 <I2C_SlaveAddress>
		//enable TXIE,necessary for TXIS
		pI2Chandle->pI2C->I2C_CR1 |= (1<<I2C_CR1_TXIE);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2102      	movs	r1, #2
 8000f76:	430a      	orrs	r2, r1
 8000f78:	601a      	str	r2, [r3, #0]
		pI2Chandle->I2C_Comm_t.I2C_Nbytes = exp_bytes;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	193a      	adds	r2, r7, r4
 8000f7e:	7812      	ldrb	r2, [r2, #0]
 8000f80:	779a      	strb	r2, [r3, #30]
			pI2Chandle->pI2C->I2C_CR2 |= (1<<I2C_CR2_RELOAD);
			pI2Chandle->pI2C->I2C_CR1 |= (1<<I2C_CR1_TCIE); //TCIE is for both TC and TCR
		}
		else{
			//writing NBYTES clears TCR by the way.first reset NBYTES (important,8bits!) and then set them
			pI2Chandle->pI2C->I2C_CR2 &= ~(255<<I2C_CR2_NBYTES);//reset NBYTES. 0xFF=1..1
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	685a      	ldr	r2, [r3, #4]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4931      	ldr	r1, [pc, #196]	; (8001054 <I2C_Master_Transmitter+0x128>)
 8000f8e:	400a      	ands	r2, r1
 8000f90:	605a      	str	r2, [r3, #4]
			pI2Chandle->pI2C->I2C_CR2 |= (exp_bytes<<I2C_CR2_NBYTES); //set NBYTES
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	685a      	ldr	r2, [r3, #4]
 8000f98:	193b      	adds	r3, r7, r4
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	041b      	lsls	r3, r3, #16
 8000f9e:	0019      	movs	r1, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	605a      	str	r2, [r3, #4]
			pI2Chandle->I2C_Comm_t.TX_length = exp_bytes;
 8000fa8:	193b      	adds	r3, r7, r4
 8000faa:	781a      	ldrb	r2, [r3, #0]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	60da      	str	r2, [r3, #12]
			pI2Chandle->pI2C->I2C_CR2 &= ~(1<<I2C_CR2_RELOAD); //disable RELOAD
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	685a      	ldr	r2, [r3, #4]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4927      	ldr	r1, [pc, #156]	; (8001058 <I2C_Master_Transmitter+0x12c>)
 8000fbc:	400a      	ands	r2, r1
 8000fbe:	605a      	str	r2, [r3, #4]
			 *0: software end mode: TC flag is set when NBYTES data are transferred, stretching SCL low.
			 *1: Automatic end mode: a STOP condition is automatically sent when NBYTES data are
			 *transferred.
			 *Note: This bit has no effect in slave mode or when the RELOAD bit is set.
			 */
			if (autoend){ //automatic end mode
 8000fc0:	197b      	adds	r3, r7, r5
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d01c      	beq.n	8001002 <I2C_Master_Transmitter+0xd6>
				pI2Chandle->I2C_Comm_t.I2C_RepeatStart = I2C_AUTOEND;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	775a      	strb	r2, [r3, #29]
				pI2Chandle->pI2C->I2C_CR2 |= (1<<I2C_CR2_AUTOEND);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	685a      	ldr	r2, [r3, #4]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2180      	movs	r1, #128	; 0x80
 8000fda:	0489      	lsls	r1, r1, #18
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	605a      	str	r2, [r3, #4]
				pI2Chandle->pI2C->I2C_CR1 |= (1<<I2C_CR1_TCIE); //to enable TC (TCIE is for both TC and TCR)
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2140      	movs	r1, #64	; 0x40
 8000fec:	430a      	orrs	r2, r1
 8000fee:	601a      	str	r2, [r3, #0]
				pI2Chandle->pI2C->I2C_CR1 |= (1<<I2C_CR1_STOPIE); //to enable STOP detection
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2120      	movs	r1, #32
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	e012      	b.n	8001028 <I2C_Master_Transmitter+0xfc>
			}
			else{ //software end mode
				pI2Chandle->I2C_Comm_t.I2C_RepeatStart = I2C_REPEAT_START;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	2201      	movs	r2, #1
 8001006:	775a      	strb	r2, [r3, #29]
				pI2Chandle->pI2C->I2C_CR2 &= ~(1<<I2C_CR2_AUTOEND);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	685a      	ldr	r2, [r3, #4]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4912      	ldr	r1, [pc, #72]	; (800105c <I2C_Master_Transmitter+0x130>)
 8001014:	400a      	ands	r2, r1
 8001016:	605a      	str	r2, [r3, #4]
				pI2Chandle->pI2C->I2C_CR1 &= ~(1<<I2C_CR1_TCIE); //to disable TC
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2140      	movs	r1, #64	; 0x40
 8001024:	438a      	bics	r2, r1
 8001026:	601a      	str	r2, [r3, #0]
		}
		else if (pI2Chandle->I2C_Comm_t.communication_state == (I2C_READY || I2C_RESTART_STOP)){
			//do something extra?
		}
		*/
		pI2Chandle->I2C_Comm_t.TX_buffer = appTxBuffer; //I2C TX buffer pointing to app's TX buffer
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	611a      	str	r2, [r3, #16]
		pI2Chandle->I2C_Comm_t.communication_state = I2C_DURING_TX;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2201      	movs	r2, #1
 8001032:	771a      	strb	r2, [r3, #28]
		//start + address. this would clear TC if it had been set (RESTART_STOP)
		//This bit is set by SW and cleared by HW after Start followed by address sequence is sent
		pI2Chandle->pI2C->I2C_CR2 |= (1<<I2C_CR2_START);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	685a      	ldr	r2, [r3, #4]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2180      	movs	r1, #128	; 0x80
 8001040:	0189      	lsls	r1, r1, #6
 8001042:	430a      	orrs	r2, r1
 8001044:	605a      	str	r2, [r3, #4]
		//I2C_App_Callback(pI2Chandle, I2C_TX_STARTED);
	}

}
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	46bd      	mov	sp, r7
 800104a:	b004      	add	sp, #16
 800104c:	bdb0      	pop	{r4, r5, r7, pc}
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	fffffbff 	.word	0xfffffbff
 8001054:	ff00ffff 	.word	0xff00ffff
 8001058:	feffffff 	.word	0xfeffffff
 800105c:	fdffffff 	.word	0xfdffffff

08001060 <I2C_Master_Receiver>:

void I2C_Master_Receiver(I2C_Handle_t *pI2Chandle, uint8_t exp_bytes, uint8_t autoend, uint8_t* appRxBuffer){
 8001060:	b5b0      	push	{r4, r5, r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	0008      	movs	r0, r1
 800106a:	0011      	movs	r1, r2
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	240b      	movs	r4, #11
 8001070:	193b      	adds	r3, r7, r4
 8001072:	1c02      	adds	r2, r0, #0
 8001074:	701a      	strb	r2, [r3, #0]
 8001076:	250a      	movs	r5, #10
 8001078:	197b      	adds	r3, r7, r5
 800107a:	1c0a      	adds	r2, r1, #0
 800107c:	701a      	strb	r2, [r3, #0]
	//RX state busy + configure reception(including interrupts) + start&address
	if (pI2Chandle->I2C_Comm_t.communication_state != (I2C_DURING_TX || I2C_DURING_RX)){
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	7f1b      	ldrb	r3, [r3, #28]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d071      	beq.n	800116a <I2C_Master_Receiver+0x10a>
		//start transmission (start+slave address) if I2C_READY,I2C_RESTART_STOP or I2C_RELOAD
		//transfer direction: master requests a read transfer (1)
		pI2Chandle->pI2C->I2C_CR2 |= (1<<I2C_CR2_RDWRN);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	685a      	ldr	r2, [r3, #4]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2180      	movs	r1, #128	; 0x80
 8001092:	00c9      	lsls	r1, r1, #3
 8001094:	430a      	orrs	r2, r1
 8001096:	605a      	str	r2, [r3, #4]
		//slave address (7-bit or 10-bit)
		I2C_SlaveAddress(pI2Chandle);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	0018      	movs	r0, r3
 800109c:	f7ff ff20 	bl	8000ee0 <I2C_SlaveAddress>
		//enable RXIE,necessary for RXNE
		pI2Chandle->pI2C->I2C_CR1 |= (1<<I2C_CR1_RXIE);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2104      	movs	r1, #4
 80010ac:	430a      	orrs	r2, r1
 80010ae:	601a      	str	r2, [r3, #0]
		pI2Chandle->I2C_Comm_t.I2C_Nbytes = exp_bytes;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	193a      	adds	r2, r7, r4
 80010b4:	7812      	ldrb	r2, [r2, #0]
 80010b6:	779a      	strb	r2, [r3, #30]
			pI2Chandle->pI2C->I2C_CR2 |= (1<<I2C_CR2_RELOAD);
			pI2Chandle->pI2C->I2C_CR1 |= (1<<I2C_CR1_TCIE); //TCIE is for both TC and TCR
		}
		else{
			//writing NBYTES clears TCR by the way.first reset NBYTES (important,8bits!) and then set them
			pI2Chandle->pI2C->I2C_CR2 &= ~(255<<I2C_CR2_NBYTES);//reset NBYTES. 0xFF=1..1
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	685a      	ldr	r2, [r3, #4]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	492c      	ldr	r1, [pc, #176]	; (8001174 <I2C_Master_Receiver+0x114>)
 80010c4:	400a      	ands	r2, r1
 80010c6:	605a      	str	r2, [r3, #4]
			pI2Chandle->pI2C->I2C_CR2 |= (exp_bytes<<I2C_CR2_NBYTES); //set NBYTES
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	685a      	ldr	r2, [r3, #4]
 80010ce:	193b      	adds	r3, r7, r4
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	041b      	lsls	r3, r3, #16
 80010d4:	0019      	movs	r1, r3
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	430a      	orrs	r2, r1
 80010dc:	605a      	str	r2, [r3, #4]
			pI2Chandle->I2C_Comm_t.RX_length = exp_bytes;
 80010de:	193b      	adds	r3, r7, r4
 80010e0:	781a      	ldrb	r2, [r3, #0]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	615a      	str	r2, [r3, #20]
			pI2Chandle->pI2C->I2C_CR2 &= ~(1<<I2C_CR2_RELOAD); //disable RELOAD
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	685a      	ldr	r2, [r3, #4]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4921      	ldr	r1, [pc, #132]	; (8001178 <I2C_Master_Receiver+0x118>)
 80010f2:	400a      	ands	r2, r1
 80010f4:	605a      	str	r2, [r3, #4]
			 *0: software end mode: TC flag is set when NBYTES data are transferred, stretching SCL low.
			 *1: Automatic end mode: a STOP condition is automatically sent when NBYTES data are
			 *transferred.
			 *Note: This bit has no effect in slave mode or when the RELOAD bit is set.
			 */
			if (autoend){ //automatic end mode
 80010f6:	197b      	adds	r3, r7, r5
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d01c      	beq.n	8001138 <I2C_Master_Receiver+0xd8>
				pI2Chandle->I2C_Comm_t.I2C_RepeatStart = I2C_AUTOEND;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2200      	movs	r2, #0
 8001102:	775a      	strb	r2, [r3, #29]
				pI2Chandle->pI2C->I2C_CR2 |= (1<<I2C_CR2_AUTOEND);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	685a      	ldr	r2, [r3, #4]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2180      	movs	r1, #128	; 0x80
 8001110:	0489      	lsls	r1, r1, #18
 8001112:	430a      	orrs	r2, r1
 8001114:	605a      	str	r2, [r3, #4]
				pI2Chandle->pI2C->I2C_CR1 |= (1<<I2C_CR1_TCIE); //to enable TC (TCIE is for both TC and TCR)
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2140      	movs	r1, #64	; 0x40
 8001122:	430a      	orrs	r2, r1
 8001124:	601a      	str	r2, [r3, #0]
				pI2Chandle->pI2C->I2C_CR1 |= (1<<I2C_CR1_STOPIE); //to enable STOP detection
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2120      	movs	r1, #32
 8001132:	430a      	orrs	r2, r1
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	e012      	b.n	800115e <I2C_Master_Receiver+0xfe>
			}
			else{ //software end mode
				pI2Chandle->I2C_Comm_t.I2C_RepeatStart = I2C_REPEAT_START;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	2201      	movs	r2, #1
 800113c:	775a      	strb	r2, [r3, #29]
				pI2Chandle->pI2C->I2C_CR2 &= ~(1<<I2C_CR2_AUTOEND);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	685a      	ldr	r2, [r3, #4]
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	490c      	ldr	r1, [pc, #48]	; (800117c <I2C_Master_Receiver+0x11c>)
 800114a:	400a      	ands	r2, r1
 800114c:	605a      	str	r2, [r3, #4]
				pI2Chandle->pI2C->I2C_CR1 &= ~(1<<I2C_CR1_TCIE); //to disable TC
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2140      	movs	r1, #64	; 0x40
 800115a:	438a      	bics	r2, r1
 800115c:	601a      	str	r2, [r3, #0]
		}
		else if (pI2Chandle->I2C_Comm_t.communication_state == (I2C_READY || I2C_RESTART_STOP)){
			//something extra?
		}
		*/
		pI2Chandle->I2C_Comm_t.RX_buffer = appRxBuffer; //I2C RX buffer pointing to app's RX buffer
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	619a      	str	r2, [r3, #24]
		pI2Chandle->I2C_Comm_t.communication_state = I2C_DURING_RX;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2202      	movs	r2, #2
 8001168:	771a      	strb	r2, [r3, #28]
		//start + address. this would clear TC if it had been set (RESTART_STOP)
		//This bit is set by SW and cleared by HW after Start followed by address sequence is sent
		//pI2Chandle->pI2C->I2C_CR2 |= (1<<I2C_CR2_START);

	}
}
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	46bd      	mov	sp, r7
 800116e:	b004      	add	sp, #16
 8001170:	bdb0      	pop	{r4, r5, r7, pc}
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	ff00ffff 	.word	0xff00ffff
 8001178:	feffffff 	.word	0xfeffffff
 800117c:	fdffffff 	.word	0xfdffffff

08001180 <I2C_TXIS_handler>:
		//bit set by SW, cleared by HW when a STOP condition is detected.Writing ‘0’ has no effect
		pI2Chandle->pI2C->I2C_CR2 |= (1<<I2C_CR2_STOP);
	}
}

static void I2C_TXIS_handler(I2C_Handle_t *pI2Chandle){
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	/*TXIS set by hardware when I2C_TXDR register empty and the data to be
	*transmitted must be written in I2C_TXDR. It is cleared when the next data to be
	*sent is written in I2C_TXDR register*/
	if (pI2Chandle->I2C_Comm_t.TX_length >=1){
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d016      	beq.n	80011be <I2C_TXIS_handler+0x3e>
		pI2Chandle->pI2C->I2C_TXDR = *(pI2Chandle->I2C_Comm_t.TX_buffer);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	691b      	ldr	r3, [r3, #16]
 8001194:	781a      	ldrb	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	629a      	str	r2, [r3, #40]	; 0x28
		pI2Chandle->I2C_Comm_t.TX_buffer++;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	691b      	ldr	r3, [r3, #16]
 80011a0:	1c5a      	adds	r2, r3, #1
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	611a      	str	r2, [r3, #16]
		pI2Chandle->I2C_Comm_t.TX_length--;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	1e5a      	subs	r2, r3, #1
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	60da      	str	r2, [r3, #12]
		/*if last byte to be send,wait until STOP or TC/TCR,depending on AUTOEND(these interrupts are handled)
		*state=WAITING_END (STOP or TC/TCR flag)
		*if NBYTES>255, I2C_RELOAD*/
		if (pI2Chandle->I2C_Comm_t.TX_length == 0){
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d102      	bne.n	80011be <I2C_TXIS_handler+0x3e>
			pI2Chandle->I2C_Comm_t.communication_state = I2C_WAITING_END;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2203      	movs	r2, #3
 80011bc:	771a      	strb	r2, [r3, #28]
		}
	}

}
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	46bd      	mov	sp, r7
 80011c2:	b002      	add	sp, #8
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <I2C_RXNE_handler>:

static void I2C_RXNE_handler(I2C_Handle_t *pI2Chandle){
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
	/*RXNE is set by hardware when received data is copied into I2C_RXDR register, and
	*is ready to be read. It is cleared when I2C_RXDR is read*/
	if (pI2Chandle->I2C_Comm_t.RX_length >= 1){
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d01b      	beq.n	800120e <I2C_RXNE_handler+0x48>
		*pI2Chandle->I2C_Comm_t.RX_buffer = ((uint8_t)pI2Chandle->pI2C->I2C_RXDR);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	b2d2      	uxtb	r2, r2
 80011e2:	701a      	strb	r2, [r3, #0]
		pI2Chandle->I2C_Comm_t.RX_buffer++; //increase address of the I2C buffer
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	1c5a      	adds	r2, r3, #1
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	619a      	str	r2, [r3, #24]
		pI2Chandle->I2C_Comm_t.RX_length--;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	1e5a      	subs	r2, r3, #1
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	615a      	str	r2, [r3, #20]
		/*if last byte to be send,wait until STOP or TC/TCR,depending on AUTOEND(these interrupts are handled)
		*state=WAITING_END (STOP or TC/TCR flag)
		*if NBYTES>255, I2C_RELOAD*/
		if ((pI2Chandle->I2C_Comm_t.I2C_RepeatStart == I2C_AUTOEND) && (pI2Chandle->I2C_Comm_t.RX_length <= 1 )){
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	7f5b      	ldrb	r3, [r3, #29]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d106      	bne.n	800120e <I2C_RXNE_handler+0x48>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	695b      	ldr	r3, [r3, #20]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d802      	bhi.n	800120e <I2C_RXNE_handler+0x48>
			pI2Chandle->I2C_Comm_t.communication_state = I2C_WAITING_END; //autoend: STOP
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2203      	movs	r2, #3
 800120c:	771a      	strb	r2, [r3, #28]
			//no callback, STOP handler will do
		}
	}

}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	46bd      	mov	sp, r7
 8001212:	b002      	add	sp, #8
 8001214:	bd80      	pop	{r7, pc}

08001216 <I2C_BERR_handler>:

static void I2C_BERR_handler(I2C_Handle_t *pI2Chandle){
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
	/*BERR is set by hardware when a misplaced Start or STOP is detected whereas
	*the peripheral is involved in the transfer. The flag is not set during address phase in slave
	*mode. It is cleared by software by setting BERRCF bit*/
	pI2Chandle->pI2C->I2C_ICR |= (1<<I2C_ICR_BERRCF);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	69da      	ldr	r2, [r3, #28]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2180      	movs	r1, #128	; 0x80
 800122a:	0049      	lsls	r1, r1, #1
 800122c:	430a      	orrs	r2, r1
 800122e:	61da      	str	r2, [r3, #28]
	//Disable I2C
	I2C_EnableDisable(pI2Chandle,DISABLE);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2100      	movs	r1, #0
 8001234:	0018      	movs	r0, r3
 8001236:	f7ff fd95 	bl	8000d64 <I2C_EnableDisable>
	//inform the main application through callback
	I2C_App_Callback(pI2Chandle, I2C_BERR_ERROR);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2103      	movs	r1, #3
 800123e:	0018      	movs	r0, r3
 8001240:	f7ff f898 	bl	8000374 <I2C_App_Callback>
}
 8001244:	46c0      	nop			; (mov r8, r8)
 8001246:	46bd      	mov	sp, r7
 8001248:	b002      	add	sp, #8
 800124a:	bd80      	pop	{r7, pc}

0800124c <I2C_STOP_handler>:

static void I2C_STOP_handler(I2C_Handle_t *pI2Chandle){
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	/*This flag is set by hardware when a STOP condition is detected on the bus and the
	*peripheral is involved in this transfer. It is cleared by software by setting the STOPCF bit.*/
	//if I2C_WAITING_END --> I2C_READY. Close transmission/reception,buffer pointing to NULL
	if (pI2Chandle->I2C_Comm_t.communication_state == I2C_WAITING_END){
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	7f1b      	ldrb	r3, [r3, #28]
 8001258:	2b03      	cmp	r3, #3
 800125a:	d10f      	bne.n	800127c <I2C_STOP_handler+0x30>
		pI2Chandle->I2C_Comm_t.communication_state = I2C_READY;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	771a      	strb	r2, [r3, #28]
		pI2Chandle->pI2C->I2C_ICR |= (1<<I2C_ICR_STOPCF);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	69da      	ldr	r2, [r3, #28]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2120      	movs	r1, #32
 800126e:	430a      	orrs	r2, r1
 8001270:	61da      	str	r2, [r3, #28]
		//I2C_EnableDisable(pI2Chandle,DISABLE); //Disable I2C
		I2C_App_Callback(pI2Chandle, I2C_FINISHED);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2102      	movs	r1, #2
 8001276:	0018      	movs	r0, r3
 8001278:	f7ff f87c 	bl	8000374 <I2C_App_Callback>
	}

}
 800127c:	46c0      	nop			; (mov r8, r8)
 800127e:	46bd      	mov	sp, r7
 8001280:	b002      	add	sp, #8
 8001282:	bd80      	pop	{r7, pc}

08001284 <I2C_TC_handler>:

static void I2C_TC_handler(I2C_Handle_t *pI2Chandle){
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	/*TC(transfer complete) is set by hardware when RELOAD=0, AUTOEND=0 and NBYTES data have been
	*transferred. It is cleared by software when START bit or STOP bit is set.*/
	//if I2C_WAITING_END --> I2C_RESTART_STOP
	if (pI2Chandle->I2C_Comm_t.communication_state == I2C_WAITING_END){
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	7f1b      	ldrb	r3, [r3, #28]
 8001290:	2b03      	cmp	r3, #3
 8001292:	d107      	bne.n	80012a4 <I2C_TC_handler+0x20>
		pI2Chandle->I2C_Comm_t.communication_state = I2C_RESTART_STOP;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2204      	movs	r2, #4
 8001298:	771a      	strb	r2, [r3, #28]
		I2C_App_Callback(pI2Chandle, I2C_TC);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2105      	movs	r1, #5
 800129e:	0018      	movs	r0, r3
 80012a0:	f7ff f868 	bl	8000374 <I2C_App_Callback>
	}
}
 80012a4:	46c0      	nop			; (mov r8, r8)
 80012a6:	46bd      	mov	sp, r7
 80012a8:	b002      	add	sp, #8
 80012aa:	bd80      	pop	{r7, pc}

080012ac <I2C_TCR_handler>:

static void I2C_TCR_handler(I2C_Handle_t *pI2Chandle){ //when NBYTES>255
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	/*TCR(transfer complete reload) is set by hardware when RELOAD=1 and NBYTES data have been transferred. It is
	*cleared by software when NBYTES is written to a non-zero value.*/
	//if I2C_WAITING_END --> I2C_RELOAD
	if (pI2Chandle->I2C_Comm_t.communication_state == I2C_WAITING_END){
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	7f1b      	ldrb	r3, [r3, #28]
 80012b8:	2b03      	cmp	r3, #3
 80012ba:	d107      	bne.n	80012cc <I2C_TCR_handler+0x20>
		pI2Chandle->I2C_Comm_t.communication_state = I2C_RELOAD;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2205      	movs	r2, #5
 80012c0:	771a      	strb	r2, [r3, #28]
		I2C_App_Callback(pI2Chandle, I2C_TCR);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2106      	movs	r1, #6
 80012c6:	0018      	movs	r0, r3
 80012c8:	f7ff f854 	bl	8000374 <I2C_App_Callback>
	}
}
 80012cc:	46c0      	nop			; (mov r8, r8)
 80012ce:	46bd      	mov	sp, r7
 80012d0:	b002      	add	sp, #8
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <I2C_Master_TimingR>:
__attribute__((weak)) void I2C_App_Callback(I2C_Handle_t *pI2Chandle,uint8_t Event){
	//This function will be implemented in every particular application. Thus, the weak attribute
}

/*TIMINGR calculation*/
void I2C_Master_TimingR(I2C_Handle_t *pI2Chandle, uint8_t presc, uint8_t scldel, uint8_t sdadel, uint8_t sclh, uint8_t scll){
 80012d4:	b590      	push	{r4, r7, lr}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	000c      	movs	r4, r1
 80012de:	0010      	movs	r0, r2
 80012e0:	0019      	movs	r1, r3
 80012e2:	1cfb      	adds	r3, r7, #3
 80012e4:	1c22      	adds	r2, r4, #0
 80012e6:	701a      	strb	r2, [r3, #0]
 80012e8:	1cbb      	adds	r3, r7, #2
 80012ea:	1c02      	adds	r2, r0, #0
 80012ec:	701a      	strb	r2, [r3, #0]
 80012ee:	1c7b      	adds	r3, r7, #1
 80012f0:	1c0a      	adds	r2, r1, #0
 80012f2:	701a      	strb	r2, [r3, #0]
	pI2Chandle->I2C_Config.I2C_Timing |= ((presc & 0x0F) << 28);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	1cfa      	adds	r2, r7, #3
 80012fa:	7812      	ldrb	r2, [r2, #0]
 80012fc:	0712      	lsls	r2, r2, #28
 80012fe:	431a      	orrs	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	609a      	str	r2, [r3, #8]
	pI2Chandle->I2C_Config.I2C_Timing |= ((scldel & 0x0F) << 20);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	1cbb      	adds	r3, r7, #2
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	051b      	lsls	r3, r3, #20
 800130e:	0019      	movs	r1, r3
 8001310:	23f0      	movs	r3, #240	; 0xf0
 8001312:	041b      	lsls	r3, r3, #16
 8001314:	400b      	ands	r3, r1
 8001316:	431a      	orrs	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	609a      	str	r2, [r3, #8]
	pI2Chandle->I2C_Config.I2C_Timing |= ((sdadel & 0x0F) << 16);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	1c7b      	adds	r3, r7, #1
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	041b      	lsls	r3, r3, #16
 8001326:	0019      	movs	r1, r3
 8001328:	23f0      	movs	r3, #240	; 0xf0
 800132a:	031b      	lsls	r3, r3, #12
 800132c:	400b      	ands	r3, r1
 800132e:	431a      	orrs	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	609a      	str	r2, [r3, #8]
	pI2Chandle->I2C_Config.I2C_Timing |= (sclh << 8);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689a      	ldr	r2, [r3, #8]
 8001338:	2318      	movs	r3, #24
 800133a:	18fb      	adds	r3, r7, r3
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	021b      	lsls	r3, r3, #8
 8001340:	431a      	orrs	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	609a      	str	r2, [r3, #8]
	pI2Chandle->I2C_Config.I2C_Timing |= scll;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689a      	ldr	r2, [r3, #8]
 800134a:	231c      	movs	r3, #28
 800134c:	18fb      	adds	r3, r7, r3
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	431a      	orrs	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	609a      	str	r2, [r3, #8]
}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	46bd      	mov	sp, r7
 800135a:	b003      	add	sp, #12
 800135c:	bd90      	pop	{r4, r7, pc}
	...

08001360 <SPI_ClockControl>:
static void SPI_TXE_handler(SPI_Handle_t *pSPIhandle);
static void SPI_RXNE_handler(SPI_Handle_t *pSPIhandle);
static void SPI_OVR_handler(SPI_Handle_t *pSPIhandle);

/*Enable or disable SPI peripheral clock*/
void SPI_ClockControl(SPI_Handle_t *pSPIhandle, uint8_t EnableDisable){
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	000a      	movs	r2, r1
 800136a:	1cfb      	adds	r3, r7, #3
 800136c:	701a      	strb	r2, [r3, #0]
	if (EnableDisable == ENABLE) {
 800136e:	1cfb      	adds	r3, r7, #3
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d119      	bne.n	80013aa <SPI_ClockControl+0x4a>
		if (pSPIhandle->pSPI == SPI1_I2S1){
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a19      	ldr	r2, [pc, #100]	; (80013e0 <SPI_ClockControl+0x80>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d107      	bne.n	8001390 <SPI_ClockControl+0x30>
			SPI1_I2S1_EnableClock();
 8001380:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <SPI_ClockControl+0x84>)
 8001382:	699a      	ldr	r2, [r3, #24]
 8001384:	4b17      	ldr	r3, [pc, #92]	; (80013e4 <SPI_ClockControl+0x84>)
 8001386:	2180      	movs	r1, #128	; 0x80
 8001388:	0149      	lsls	r1, r1, #5
 800138a:	430a      	orrs	r2, r1
 800138c:	619a      	str	r2, [r3, #24]
		}
		else if (pSPIhandle->pSPI == SPI2){
			SPI2_DisableClock();
		}
	}
}
 800138e:	e023      	b.n	80013d8 <SPI_ClockControl+0x78>
		else if (pSPIhandle->pSPI == SPI2){
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a14      	ldr	r2, [pc, #80]	; (80013e8 <SPI_ClockControl+0x88>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d11e      	bne.n	80013d8 <SPI_ClockControl+0x78>
			SPI2_EnableClock();
 800139a:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <SPI_ClockControl+0x84>)
 800139c:	69da      	ldr	r2, [r3, #28]
 800139e:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <SPI_ClockControl+0x84>)
 80013a0:	2180      	movs	r1, #128	; 0x80
 80013a2:	01c9      	lsls	r1, r1, #7
 80013a4:	430a      	orrs	r2, r1
 80013a6:	61da      	str	r2, [r3, #28]
}
 80013a8:	e016      	b.n	80013d8 <SPI_ClockControl+0x78>
		if (pSPIhandle->pSPI == SPI1_I2S1){
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a0c      	ldr	r2, [pc, #48]	; (80013e0 <SPI_ClockControl+0x80>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d106      	bne.n	80013c2 <SPI_ClockControl+0x62>
			SPI1_I2S1_DisableClock();
 80013b4:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <SPI_ClockControl+0x84>)
 80013b6:	699a      	ldr	r2, [r3, #24]
 80013b8:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <SPI_ClockControl+0x84>)
 80013ba:	490c      	ldr	r1, [pc, #48]	; (80013ec <SPI_ClockControl+0x8c>)
 80013bc:	400a      	ands	r2, r1
 80013be:	619a      	str	r2, [r3, #24]
}
 80013c0:	e00a      	b.n	80013d8 <SPI_ClockControl+0x78>
		else if (pSPIhandle->pSPI == SPI2){
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a08      	ldr	r2, [pc, #32]	; (80013e8 <SPI_ClockControl+0x88>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d105      	bne.n	80013d8 <SPI_ClockControl+0x78>
			SPI2_DisableClock();
 80013cc:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <SPI_ClockControl+0x84>)
 80013ce:	69da      	ldr	r2, [r3, #28]
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <SPI_ClockControl+0x84>)
 80013d2:	4907      	ldr	r1, [pc, #28]	; (80013f0 <SPI_ClockControl+0x90>)
 80013d4:	400a      	ands	r2, r1
 80013d6:	61da      	str	r2, [r3, #28]
}
 80013d8:	46c0      	nop			; (mov r8, r8)
 80013da:	46bd      	mov	sp, r7
 80013dc:	b002      	add	sp, #8
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40013000 	.word	0x40013000
 80013e4:	40021000 	.word	0x40021000
 80013e8:	40003800 	.word	0x40003800
 80013ec:	ffffefff 	.word	0xffffefff
 80013f0:	ffffbfff 	.word	0xffffbfff

080013f4 <SPI_Init>:

/*SPI initialization, which does not mean to enable SPI (which is done through SPI_EnableDisable) */
void SPI_Init(SPI_Handle_t *pSPIhandle){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]

	SPI_ClockControl(pSPIhandle,ENABLE); //enable SPI peripheral clock
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2101      	movs	r1, #1
 8001400:	0018      	movs	r0, r3
 8001402:	f7ff ffad 	bl	8001360 <SPI_ClockControl>
	/*Configure CR1*/
	//first,CR1 can be reset completely as it is not related to other parts (it might be reset with memset in the app,too)
	pSPIhandle->pSPI->SPI_CR1 = 0;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]

	//master/slave
	pSPIhandle->pSPI->SPI_CR1 |= ((pSPIhandle->SPI_Config.SPI_Mode)<<SPI_CR1_MSTR); //bit MSTR set
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	791b      	ldrb	r3, [r3, #4]
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	0019      	movs	r1, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	430a      	orrs	r2, r1
 8001422:	601a      	str	r2, [r3, #0]

	//mode: full duplex/half duplex/simplex.Bits:BIDIMODE (full/half)+BIDIOE (output enabled)+RXONLY(1 if BIDIOE disabled)
	if (pSPIhandle->SPI_Config.SPI_Mode == SPI_FULLDUPLEX){
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	791b      	ldrb	r3, [r3, #4]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d108      	bne.n	800143e <SPI_Init+0x4a>
		pSPIhandle->pSPI->SPI_CR1 &= ~(1<<SPI_CR1_BIDIMODE); //not necessary to set 0 because SPI_CR1 had been initialized to 0,but makes code clearer
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	493f      	ldr	r1, [pc, #252]	; (8001534 <SPI_Init+0x140>)
 8001438:	400a      	ands	r2, r1
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	e02a      	b.n	8001494 <SPI_Init+0xa0>
	}
	else if (pSPIhandle->SPI_Config.SPI_Mode == SPI_HALFDUPLEX){
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	791b      	ldrb	r3, [r3, #4]
 8001442:	2b02      	cmp	r3, #2
 8001444:	d109      	bne.n	800145a <SPI_Init+0x66>
		pSPIhandle->pSPI->SPI_CR1 |= (1<<SPI_CR1_BIDIMODE);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2180      	movs	r1, #128	; 0x80
 8001452:	0209      	lsls	r1, r1, #8
 8001454:	430a      	orrs	r2, r1
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	e01c      	b.n	8001494 <SPI_Init+0xa0>
	}
	else if (pSPIhandle->SPI_Config.SPI_Mode == SPI_CR1_RXONLY){
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	791b      	ldrb	r3, [r3, #4]
 800145e:	2b0a      	cmp	r3, #10
 8001460:	d118      	bne.n	8001494 <SPI_Init+0xa0>
		//acc to datasheet, Keep BIDIMODE bit clear when receive only mode is active.
		pSPIhandle->pSPI->SPI_CR1 &= ~(1<<SPI_CR1_BIDIMODE);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4931      	ldr	r1, [pc, #196]	; (8001534 <SPI_Init+0x140>)
 800146e:	400a      	ands	r2, r1
 8001470:	601a      	str	r2, [r3, #0]
		pSPIhandle->pSPI->SPI_CR1 &= ~(1<<SPI_CR1_BIDIOE);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	492e      	ldr	r1, [pc, #184]	; (8001538 <SPI_Init+0x144>)
 800147e:	400a      	ands	r2, r1
 8001480:	601a      	str	r2, [r3, #0]
		pSPIhandle->pSPI->SPI_CR1 |= (1<<SPI_CR1_RXONLY);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2180      	movs	r1, #128	; 0x80
 800148e:	00c9      	lsls	r1, r1, #3
 8001490:	430a      	orrs	r2, r1
 8001492:	601a      	str	r2, [r3, #0]
	}
	//simplex TX is actually full duplex

	//Phase
	pSPIhandle->pSPI->SPI_CR1 |= (pSPIhandle->SPI_Config.SPI_Phase<<SPI_CR1_CPHA);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	7a9b      	ldrb	r3, [r3, #10]
 800149e:	0019      	movs	r1, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	430a      	orrs	r2, r1
 80014a6:	601a      	str	r2, [r3, #0]

	//Polarity
	pSPIhandle->pSPI->SPI_CR1 |= (pSPIhandle->SPI_Config.SPI_Pol<<SPI_CR1_CPOL);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	7a5b      	ldrb	r3, [r3, #9]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	0019      	movs	r1, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	430a      	orrs	r2, r1
 80014bc:	601a      	str	r2, [r3, #0]

	//software slave management
	pSPIhandle->pSPI->SPI_CR1 |= (pSPIhandle->SPI_Config.SPI_SWslave<<SPI_CR1_SSM);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	7a1b      	ldrb	r3, [r3, #8]
 80014c8:	025b      	lsls	r3, r3, #9
 80014ca:	0019      	movs	r1, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	430a      	orrs	r2, r1
 80014d2:	601a      	str	r2, [r3, #0]

	//Speed (baudrate)
	pSPIhandle->pSPI->SPI_CR1 |= (pSPIhandle->SPI_Config.SPI_Speed<<SPI_CR1_BR);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	795b      	ldrb	r3, [r3, #5]
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	0019      	movs	r1, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	430a      	orrs	r2, r1
 80014e8:	601a      	str	r2, [r3, #0]

	/*CR2. Not reset the whole CR2 to 0 as its bits can be modified from other parts of the code (enable interrupts)*/
	//Size --> this is in CR2!! First reset the data size (bits8-11) and then set it
	pSPIhandle->pSPI->SPI_CR2 &= (~(15<<SPI_CR2_DS)); //I had put pSPIhandle->pSPI->SPI_CR2 &= (~(7<<SPI_CR2_DS)). Why 7?
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4911      	ldr	r1, [pc, #68]	; (800153c <SPI_Init+0x148>)
 80014f6:	400a      	ands	r2, r1
 80014f8:	605a      	str	r2, [r3, #4]
	pSPIhandle->pSPI->SPI_CR2 |= (pSPIhandle->SPI_Config.SPI_DataSize <<SPI_CR2_DS);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	685a      	ldr	r2, [r3, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	79db      	ldrb	r3, [r3, #7]
 8001504:	021b      	lsls	r3, r3, #8
 8001506:	0019      	movs	r1, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	430a      	orrs	r2, r1
 800150e:	605a      	str	r2, [r3, #4]

	//to avoid data packing, set FIFO threshold reception to 1/4 (8-bit). Read data packing section
	if (pSPIhandle->SPI_Config.SPI_DataSize == SPI_8BIT){
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	79db      	ldrb	r3, [r3, #7]
 8001514:	2b07      	cmp	r3, #7
 8001516:	d108      	bne.n	800152a <SPI_Init+0x136>
		pSPIhandle->pSPI->SPI_CR2 |= (1<<SPI_CR2_FRXTH);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2180      	movs	r1, #128	; 0x80
 8001524:	0149      	lsls	r1, r1, #5
 8001526:	430a      	orrs	r2, r1
 8001528:	605a      	str	r2, [r3, #4]
	}
}
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	46bd      	mov	sp, r7
 800152e:	b002      	add	sp, #8
 8001530:	bd80      	pop	{r7, pc}
 8001532:	46c0      	nop			; (mov r8, r8)
 8001534:	ffff7fff 	.word	0xffff7fff
 8001538:	ffffbfff 	.word	0xffffbfff
 800153c:	fffff0ff 	.word	0xfffff0ff

08001540 <SPI_EnableDisable>:

/*SPI control: enable/disable --> bit 6 CR1 */
void SPI_EnableDisable(SPI_Handle_t *pSPIhandle, uint8_t EnableDisable){
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	000a      	movs	r2, r1
 800154a:	1cfb      	adds	r3, r7, #3
 800154c:	701a      	strb	r2, [r3, #0]
	//instead of reset and set bit 6, I prefer to directly set the value
	if (EnableDisable == ENABLE){
 800154e:	1cfb      	adds	r3, r7, #3
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d108      	bne.n	8001568 <SPI_EnableDisable+0x28>
		pSPIhandle->pSPI->SPI_CR1 |= (1<<SPI_CR1_SPE);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2140      	movs	r1, #64	; 0x40
 8001562:	430a      	orrs	r2, r1
 8001564:	601a      	str	r2, [r3, #0]
	}
	else { //0
		pSPIhandle->pSPI->SPI_CR1 &= (~(1<<SPI_CR1_SPE));
	}
}
 8001566:	e007      	b.n	8001578 <SPI_EnableDisable+0x38>
		pSPIhandle->pSPI->SPI_CR1 &= (~(1<<SPI_CR1_SPE));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2140      	movs	r1, #64	; 0x40
 8001574:	438a      	bics	r2, r1
 8001576:	601a      	str	r2, [r3, #0]
}
 8001578:	46c0      	nop			; (mov r8, r8)
 800157a:	46bd      	mov	sp, r7
 800157c:	b002      	add	sp, #8
 800157e:	bd80      	pop	{r7, pc}

08001580 <SPI_SSOE>:
		pSPIhandle->pSPI->SPI_CR1 &= (~(1<<SPI_CR1_SSI));
	}
}

/*SSOE: SS output enable*/
void SPI_SSOE(SPI_Handle_t *pSPIhandle, uint8_t EnableDisable){
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	000a      	movs	r2, r1
 800158a:	1cfb      	adds	r3, r7, #3
 800158c:	701a      	strb	r2, [r3, #0]
	if (EnableDisable == ENABLE){
 800158e:	1cfb      	adds	r3, r7, #3
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d108      	bne.n	80015a8 <SPI_SSOE+0x28>
		pSPIhandle->pSPI->SPI_CR2 |= (1<<SPI_CR2_SSOE);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2104      	movs	r1, #4
 80015a2:	430a      	orrs	r2, r1
 80015a4:	605a      	str	r2, [r3, #4]
	}
	else { //0
		pSPIhandle->pSPI->SPI_CR2 &= (~(1<<SPI_CR2_SSOE));
	}
}
 80015a6:	e007      	b.n	80015b8 <SPI_SSOE+0x38>
		pSPIhandle->pSPI->SPI_CR2 &= (~(1<<SPI_CR2_SSOE));
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2104      	movs	r1, #4
 80015b4:	438a      	bics	r2, r1
 80015b6:	605a      	str	r2, [r3, #4]
}
 80015b8:	46c0      	nop			; (mov r8, r8)
 80015ba:	46bd      	mov	sp, r7
 80015bc:	b002      	add	sp, #8
 80015be:	bd80      	pop	{r7, pc}

080015c0 <SPI_IRQ_EnableDisable>:

}


/*IRQ Configuration and ISR handling*/
void SPI_IRQ_EnableDisable(uint8_t IRQ_Number, uint8_t EnableDisable){
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	0002      	movs	r2, r0
 80015c8:	1dfb      	adds	r3, r7, #7
 80015ca:	701a      	strb	r2, [r3, #0]
 80015cc:	1dbb      	adds	r3, r7, #6
 80015ce:	1c0a      	adds	r2, r1, #0
 80015d0:	701a      	strb	r2, [r3, #0]
	if(EnableDisable == ENABLE){ //enable by means of ISER
 80015d2:	1dbb      	adds	r3, r7, #6
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d10b      	bne.n	80015f2 <SPI_IRQ_EnableDisable+0x32>
		*NVIC_ISER |= ( 1 << IRQ_Number);
 80015da:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <SPI_IRQ_EnableDisable+0x50>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	1dfb      	adds	r3, r7, #7
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2101      	movs	r1, #1
 80015e4:	4099      	lsls	r1, r3
 80015e6:	000b      	movs	r3, r1
 80015e8:	0019      	movs	r1, r3
 80015ea:	4b09      	ldr	r3, [pc, #36]	; (8001610 <SPI_IRQ_EnableDisable+0x50>)
 80015ec:	430a      	orrs	r2, r1
 80015ee:	601a      	str	r2, [r3, #0]
	}
	else { //disable by means of ICER
		*NVIC_ICER |= ( 1 << IRQ_Number);
	}
}
 80015f0:	e00a      	b.n	8001608 <SPI_IRQ_EnableDisable+0x48>
		*NVIC_ICER |= ( 1 << IRQ_Number);
 80015f2:	4b08      	ldr	r3, [pc, #32]	; (8001614 <SPI_IRQ_EnableDisable+0x54>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	1dfb      	adds	r3, r7, #7
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	2101      	movs	r1, #1
 80015fc:	4099      	lsls	r1, r3
 80015fe:	000b      	movs	r3, r1
 8001600:	0019      	movs	r1, r3
 8001602:	4b04      	ldr	r3, [pc, #16]	; (8001614 <SPI_IRQ_EnableDisable+0x54>)
 8001604:	430a      	orrs	r2, r1
 8001606:	601a      	str	r2, [r3, #0]
}
 8001608:	46c0      	nop			; (mov r8, r8)
 800160a:	46bd      	mov	sp, r7
 800160c:	b002      	add	sp, #8
 800160e:	bd80      	pop	{r7, pc}
 8001610:	e000e100 	.word	0xe000e100
 8001614:	e000e180 	.word	0xe000e180

08001618 <SPI_IRQ_Handling>:
	uint32_t tempIPR = ((*(NVIC_IPR_BASE + numberIPR))&~(0xFF<<blockIPR));
	tempIPR |= (IRQ_Priority<<(8*blockIPR+6)); //6 is because bits 0-5 are not editable, only bits 6-7 count.
	*(NVIC_IPR_BASE + numberIPR) = tempIPR;
}

void SPI_IRQ_Handling(SPI_Handle_t *pSPIhandle){
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	//to handle the possible interrupts related to SPI:TXE,RXNE,MODF,OVR,FRE,CRCERR
	//Call the handler related to the interrupt if register is true as long as it is enabled
	//TXE TX empty (enable control:TXEIE).if set, TX buffer empty so it can be loaded.
	if ( (pSPIhandle->pSPI->SPI_CR2 & (1<<SPI_CR2_TXEIE)) && (pSPIhandle->pSPI->SPI_SR & (1<<SPI_SR_TXE)) ){ //could use SPI_GetFlagStatus
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2280      	movs	r2, #128	; 0x80
 8001628:	4013      	ands	r3, r2
 800162a:	d009      	beq.n	8001640 <SPI_IRQ_Handling+0x28>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	2202      	movs	r2, #2
 8001634:	4013      	ands	r3, r2
 8001636:	d003      	beq.n	8001640 <SPI_IRQ_Handling+0x28>
		SPI_TXE_handler(pSPIhandle);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	0018      	movs	r0, r3
 800163c:	f000 f824 	bl	8001688 <SPI_TXE_handler>
	}

	//RXNE RX not empty (enable control:RXNEIE). if set, RX not empty so it has data to be read.
	if ( (pSPIhandle->pSPI->SPI_CR2 & (1<<SPI_CR2_RXNEIE)) && (pSPIhandle->pSPI->SPI_SR & (1<<SPI_SR_RXNE)) ){ //could use SPI_GetFlagStatus
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2240      	movs	r2, #64	; 0x40
 8001648:	4013      	ands	r3, r2
 800164a:	d009      	beq.n	8001660 <SPI_IRQ_Handling+0x48>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	2201      	movs	r2, #1
 8001654:	4013      	ands	r3, r2
 8001656:	d003      	beq.n	8001660 <SPI_IRQ_Handling+0x48>
		SPI_RXNE_handler(pSPIhandle);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	0018      	movs	r0, r3
 800165c:	f000 f85d 	bl	800171a <SPI_RXNE_handler>
	MODF bit is set when the SS pin goes high during transmission.*/
	//To be implemented if someday I use multimaster

	/*OVR. Overrun. (enable control:ERRIE)occurs when data is received by a master or slave and the RXFIFO has not enough space to store
	 this received data.*/
	if ( (pSPIhandle->pSPI->SPI_CR2 & (1<<SPI_CR2_ERRIE)) && (pSPIhandle->pSPI->SPI_SR & (1<<SPI_SR_OVR)) ){ //could use SPI_GetFlagStatus
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	2220      	movs	r2, #32
 8001668:	4013      	ands	r3, r2
 800166a:	d009      	beq.n	8001680 <SPI_IRQ_Handling+0x68>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	2240      	movs	r2, #64	; 0x40
 8001674:	4013      	ands	r3, r2
 8001676:	d003      	beq.n	8001680 <SPI_IRQ_Handling+0x68>
		SPI_OVR_handler(pSPIhandle);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	0018      	movs	r0, r3
 800167c:	f000 f898 	bl	80017b0 <SPI_OVR_handler>
	//FRE. TI frame format error.
	//To be implemented when I use TI mode (it seems that TI and Motorola modes are related to SSPFSSOUT output, which many devices don't use).

	//CRCERR
	//To be implemented
}
 8001680:	46c0      	nop			; (mov r8, r8)
 8001682:	46bd      	mov	sp, r7
 8001684:	b002      	add	sp, #8
 8001686:	bd80      	pop	{r7, pc}

08001688 <SPI_TXE_handler>:

/*interrupt handlers*/
static void SPI_TXE_handler(SPI_Handle_t *pSPIhandle){
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	/*When transmission is enabled, a sequence begins and continues while any data is present in the TXFIFO of the master.*/
	//Let's limit it to 8 and 16 bits frame. Every char is 1 byte
	//Load the data into DR, move the pointer (buffer) and decrease length
	if (pSPIhandle->SPI_Config.SPI_DataSize == SPI_8BIT){
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	79db      	ldrb	r3, [r3, #7]
 8001694:	2b07      	cmp	r3, #7
 8001696:	d111      	bne.n	80016bc <SPI_TXE_handler+0x34>
		/*this sends 2 bytes <--pSPIhandle->pSPI->SPI_DR = *(pSPIhandle->SPI_Comm.TX_buffer);*/
		//data packing happens. it transmits 16-bit unless we cast into uint8_t
		*((uint8_t*)&pSPIhandle->pSPI->SPI_DR) = *(pSPIhandle->SPI_Comm.TX_buffer);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	691a      	ldr	r2, [r3, #16]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	330c      	adds	r3, #12
 80016a2:	7812      	ldrb	r2, [r2, #0]
 80016a4:	701a      	strb	r2, [r3, #0]
		pSPIhandle->SPI_Comm.TX_buffer++;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	1c5a      	adds	r2, r3, #1
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	611a      	str	r2, [r3, #16]
		pSPIhandle->SPI_Comm.TX_length--;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	1e5a      	subs	r2, r3, #1
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	e013      	b.n	80016e4 <SPI_TXE_handler+0x5c>
	}
	else if (pSPIhandle->SPI_Config.SPI_DataSize == SPI_16BIT){
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	79db      	ldrb	r3, [r3, #7]
 80016c0:	2b0f      	cmp	r3, #15
 80016c2:	d10f      	bne.n	80016e4 <SPI_TXE_handler+0x5c>
		//TX_buffer is defined as 8-bit.additional treatment is necessary
		pSPIhandle->pSPI->SPI_DR = *((uint16_t*)(pSPIhandle->SPI_Comm.TX_buffer));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	881a      	ldrh	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	60da      	str	r2, [r3, #12]
		pSPIhandle->SPI_Comm.TX_buffer+=2;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	1c9a      	adds	r2, r3, #2
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	611a      	str	r2, [r3, #16]
		pSPIhandle->SPI_Comm.TX_length-=2;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	1e9a      	subs	r2, r3, #2
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	60da      	str	r2, [r3, #12]
	}
	//(I don't use else because DS allows more lengths)

	//Close transmission when no more bytes in the buffer
	if (pSPIhandle->SPI_Comm.TX_length == 0){
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d112      	bne.n	8001712 <SPI_TXE_handler+0x8a>
		pSPIhandle->pSPI->SPI_CR2 &= (~( 1 << SPI_CR2_TXEIE)); //disable the TX interrupt.It will be enabled by SPI_Send in the next sending
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	685a      	ldr	r2, [r3, #4]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2180      	movs	r1, #128	; 0x80
 80016f8:	438a      	bics	r2, r1
 80016fa:	605a      	str	r2, [r3, #4]
		pSPIhandle->SPI_Comm.TX_buffer = NULL; //null pointer
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	611a      	str	r2, [r3, #16]
		pSPIhandle->SPI_Comm.TX_state = SPI_READY; //important for loops in main!
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	751a      	strb	r2, [r3, #20]
		SPI_App_Callback(pSPIhandle,SPI_TX_FINISHED); //Inform the main application
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2101      	movs	r1, #1
 800170c:	0018      	movs	r0, r3
 800170e:	f000 f868 	bl	80017e2 <SPI_App_Callback>
	}
}
 8001712:	46c0      	nop			; (mov r8, r8)
 8001714:	46bd      	mov	sp, r7
 8001716:	b002      	add	sp, #8
 8001718:	bd80      	pop	{r7, pc}

0800171a <SPI_RXNE_handler>:

static void SPI_RXNE_handler(SPI_Handle_t *pSPIhandle){
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
	//Let's limit it to 8 and 16 bits frame. Every char is 1 byte
	//Load the data into DR, move the pointer (buffer) and decrease length
	if (pSPIhandle->SPI_Config.SPI_DataSize == SPI_8BIT){
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	79db      	ldrb	r3, [r3, #7]
 8001726:	2b07      	cmp	r3, #7
 8001728:	d111      	bne.n	800174e <SPI_RXNE_handler+0x34>
		*(pSPIhandle->SPI_Comm.RX_buffer) = ((uint8_t)pSPIhandle->pSPI->SPI_DR) ;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	68da      	ldr	r2, [r3, #12]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	69db      	ldr	r3, [r3, #28]
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	701a      	strb	r2, [r3, #0]
		pSPIhandle->SPI_Comm.RX_buffer++;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	1c5a      	adds	r2, r3, #1
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	61da      	str	r2, [r3, #28]
		pSPIhandle->SPI_Comm.RX_length--;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	1e5a      	subs	r2, r3, #1
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	619a      	str	r2, [r3, #24]
 800174c:	e014      	b.n	8001778 <SPI_RXNE_handler+0x5e>
	}
	else if (pSPIhandle->SPI_Config.SPI_DataSize == SPI_16BIT){
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	79db      	ldrb	r3, [r3, #7]
 8001752:	2b0f      	cmp	r3, #15
 8001754:	d110      	bne.n	8001778 <SPI_RXNE_handler+0x5e>
		//RX_buffer is defined as 8-bit.additional treatment is necessary
		*((uint16_t*)pSPIhandle->SPI_Comm.RX_buffer) = ((uint16_t)pSPIhandle->pSPI->SPI_DR) ;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	68da      	ldr	r2, [r3, #12]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69db      	ldr	r3, [r3, #28]
 8001760:	b292      	uxth	r2, r2
 8001762:	801a      	strh	r2, [r3, #0]
		pSPIhandle->SPI_Comm.RX_buffer+=2;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	69db      	ldr	r3, [r3, #28]
 8001768:	1c9a      	adds	r2, r3, #2
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	61da      	str	r2, [r3, #28]
		pSPIhandle->SPI_Comm.RX_length-=2;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	1e9a      	subs	r2, r3, #2
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	619a      	str	r2, [r3, #24]
	}
	//(I don't use else because DS allows more lengths)

	//Close reception when no more bytes in the buffer
	if (pSPIhandle->SPI_Comm.RX_length == 0){
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d113      	bne.n	80017a8 <SPI_RXNE_handler+0x8e>
		pSPIhandle->pSPI->SPI_CR2 &= (~( 1 << SPI_CR2_RXNEIE)); //disable the RX interrupt.It will be enabled by SPI_Receive in the next sending
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2140      	movs	r1, #64	; 0x40
 800178c:	438a      	bics	r2, r1
 800178e:	605a      	str	r2, [r3, #4]
		pSPIhandle->SPI_Comm.RX_buffer = NULL; //null pointer
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
		pSPIhandle->SPI_Comm.RX_state = SPI_READY; //important for loops in main!
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2220      	movs	r2, #32
 800179a:	2100      	movs	r1, #0
 800179c:	5499      	strb	r1, [r3, r2]
		SPI_App_Callback(pSPIhandle,SPI_RX_FINISHED); //Inform the main application
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2102      	movs	r1, #2
 80017a2:	0018      	movs	r0, r3
 80017a4:	f000 f81d 	bl	80017e2 <SPI_App_Callback>
	}
}
 80017a8:	46c0      	nop			; (mov r8, r8)
 80017aa:	46bd      	mov	sp, r7
 80017ac:	b002      	add	sp, #8
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <SPI_OVR_handler>:

static void SPI_OVR_handler(SPI_Handle_t *pSPIhandle){
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	//Clearing OVR bit is done by a read access to the SPI_DR register followed by a read access to the SPI_SR register
	//if the error happens during transmission,as this error is related to RXFIFO,we won't clear it here. If so, the app will do it
	if (pSPIhandle->SPI_Comm.TX_state != SPI_DURING_TX){ //clear
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	7d1b      	ldrb	r3, [r3, #20]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d007      	beq.n	80017d0 <SPI_OVR_handler+0x20>
		uint32_t reading; //maybe with uint8_t enough to read DR and SR?
		reading = pSPIhandle->pSPI->SPI_DR;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	60fb      	str	r3, [r7, #12]
		reading = pSPIhandle->pSPI->SPI_SR;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	60fb      	str	r3, [r7, #12]
	}
	//inform the main application
	SPI_App_Callback(pSPIhandle,SPI_OVR_EVENT);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2103      	movs	r1, #3
 80017d4:	0018      	movs	r0, r3
 80017d6:	f000 f804 	bl	80017e2 <SPI_App_Callback>
}
 80017da:	46c0      	nop			; (mov r8, r8)
 80017dc:	46bd      	mov	sp, r7
 80017de:	b004      	add	sp, #16
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <SPI_App_Callback>:
		pSPIhandle->pSPI->SPI_CR2 |= (1 << SPI_CR2_RXNEIE);//enable the RX interrupt to start reception
	}
}

/*Callback to application */
__attribute__((weak)) void SPI_App_Callback(SPI_Handle_t *pSPIhandle,uint8_t Event){
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
 80017ea:	000a      	movs	r2, r1
 80017ec:	1cfb      	adds	r3, r7, #3
 80017ee:	701a      	strb	r2, [r3, #0]
	//This function will be implemented in every particular application. Thus, the weak attribute
}
 80017f0:	46c0      	nop			; (mov r8, r8)
 80017f2:	46bd      	mov	sp, r7
 80017f4:	b002      	add	sp, #8
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <__libc_init_array>:
 80017f8:	b570      	push	{r4, r5, r6, lr}
 80017fa:	2600      	movs	r6, #0
 80017fc:	4d0c      	ldr	r5, [pc, #48]	; (8001830 <__libc_init_array+0x38>)
 80017fe:	4c0d      	ldr	r4, [pc, #52]	; (8001834 <__libc_init_array+0x3c>)
 8001800:	1b64      	subs	r4, r4, r5
 8001802:	10a4      	asrs	r4, r4, #2
 8001804:	42a6      	cmp	r6, r4
 8001806:	d109      	bne.n	800181c <__libc_init_array+0x24>
 8001808:	2600      	movs	r6, #0
 800180a:	f000 f821 	bl	8001850 <_init>
 800180e:	4d0a      	ldr	r5, [pc, #40]	; (8001838 <__libc_init_array+0x40>)
 8001810:	4c0a      	ldr	r4, [pc, #40]	; (800183c <__libc_init_array+0x44>)
 8001812:	1b64      	subs	r4, r4, r5
 8001814:	10a4      	asrs	r4, r4, #2
 8001816:	42a6      	cmp	r6, r4
 8001818:	d105      	bne.n	8001826 <__libc_init_array+0x2e>
 800181a:	bd70      	pop	{r4, r5, r6, pc}
 800181c:	00b3      	lsls	r3, r6, #2
 800181e:	58eb      	ldr	r3, [r5, r3]
 8001820:	4798      	blx	r3
 8001822:	3601      	adds	r6, #1
 8001824:	e7ee      	b.n	8001804 <__libc_init_array+0xc>
 8001826:	00b3      	lsls	r3, r6, #2
 8001828:	58eb      	ldr	r3, [r5, r3]
 800182a:	4798      	blx	r3
 800182c:	3601      	adds	r6, #1
 800182e:	e7f2      	b.n	8001816 <__libc_init_array+0x1e>
 8001830:	08001868 	.word	0x08001868
 8001834:	08001868 	.word	0x08001868
 8001838:	08001868 	.word	0x08001868
 800183c:	0800186c 	.word	0x0800186c

08001840 <memset>:
 8001840:	0003      	movs	r3, r0
 8001842:	1882      	adds	r2, r0, r2
 8001844:	4293      	cmp	r3, r2
 8001846:	d100      	bne.n	800184a <memset+0xa>
 8001848:	4770      	bx	lr
 800184a:	7019      	strb	r1, [r3, #0]
 800184c:	3301      	adds	r3, #1
 800184e:	e7f9      	b.n	8001844 <memset+0x4>

08001850 <_init>:
 8001850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001856:	bc08      	pop	{r3}
 8001858:	469e      	mov	lr, r3
 800185a:	4770      	bx	lr

0800185c <_fini>:
 800185c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800185e:	46c0      	nop			; (mov r8, r8)
 8001860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001862:	bc08      	pop	{r3}
 8001864:	469e      	mov	lr, r3
 8001866:	4770      	bx	lr
