
Train.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fac  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800106c  0800106c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800106c  0800106c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800106c  0800106c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800106c  0800106c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800106c  0800106c  0001106c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001070  08001070  00011070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001074  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000004  08001078  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08001078  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000013af  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000463  00000000  00000000  000213db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000188  00000000  00000000  00021840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000150  00000000  00000000  000219c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000121c  00000000  00000000  00021b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000194c  00000000  00000000  00022d34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009502  00000000  00000000  00024680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002db82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004d0  00000000  00000000  0002dbd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001054 	.word	0x08001054

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08001054 	.word	0x08001054

08000108 <delay>:
	}
	return length;
}

void delay(void)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	b082      	sub	sp, #8
 800010c:	af00      	add	r7, sp, #0
	// some delay for the debouncing of the buttons
	for(uint32_t i = 0 ; i < 300000/2 ; i ++);
 800010e:	2300      	movs	r3, #0
 8000110:	607b      	str	r3, [r7, #4]
 8000112:	e002      	b.n	800011a <delay+0x12>
 8000114:	687b      	ldr	r3, [r7, #4]
 8000116:	3301      	adds	r3, #1
 8000118:	607b      	str	r3, [r7, #4]
 800011a:	687b      	ldr	r3, [r7, #4]
 800011c:	4a03      	ldr	r2, [pc, #12]	; (800012c <delay+0x24>)
 800011e:	4293      	cmp	r3, r2
 8000120:	d9f8      	bls.n	8000114 <delay+0xc>
}
 8000122:	46c0      	nop			; (mov r8, r8)
 8000124:	46c0      	nop			; (mov r8, r8)
 8000126:	46bd      	mov	sp, r7
 8000128:	b002      	add	sp, #8
 800012a:	bd80      	pop	{r7, pc}
 800012c:	000249ef 	.word	0x000249ef

08000130 <main>:

//Configurations and initializations
void peripheral_Config_Ini(void);
/**********************************************START MAIN********************************************************************/
int main(void)
{
 8000130:	b580      	push	{r7, lr}
 8000132:	b084      	sub	sp, #16
 8000134:	af00      	add	r7, sp, #0
	//initialise_monitor_handles(); //for debugging in IDE
	//printf("THIS STARTS\n");


	//initialize structures to 0 to avoid garbage values
	memset(&buttons,0,sizeof(buttons));
 8000136:	4b40      	ldr	r3, [pc, #256]	; (8000238 <main+0x108>)
 8000138:	220c      	movs	r2, #12
 800013a:	2100      	movs	r1, #0
 800013c:	0018      	movs	r0, r3
 800013e:	f000 ff81 	bl	8001044 <memset>
	memset(&leds,0,sizeof(leds));
 8000142:	4b3e      	ldr	r3, [pc, #248]	; (800023c <main+0x10c>)
 8000144:	220c      	movs	r2, #12
 8000146:	2100      	movs	r1, #0
 8000148:	0018      	movs	r0, r3
 800014a:	f000 ff7b 	bl	8001044 <memset>

	/*GPIOs for the SPI handled by spiGPIO -->SPI1 PA4:NSS PA4:SCK PA4:MISO PA4:MOSI*/
	GPIO_PinHandle_t spiGPIOs;
	memset(&spiGPIOs,0,sizeof(spiGPIOs));
 800014e:	1d3b      	adds	r3, r7, #4
 8000150:	220c      	movs	r2, #12
 8000152:	2100      	movs	r1, #0
 8000154:	0018      	movs	r0, r3
 8000156:	f000 ff75 	bl	8001044 <memset>
	memset(&spi1,0,sizeof(spi1));
 800015a:	4b39      	ldr	r3, [pc, #228]	; (8000240 <main+0x110>)
 800015c:	2224      	movs	r2, #36	; 0x24
 800015e:	2100      	movs	r1, #0
 8000160:	0018      	movs	r0, r3
 8000162:	f000 ff6f 	bl	8001044 <memset>

	//Configurations and initilizations
	peripheral_Config_Ini();
 8000166:	f000 f90f 	bl	8000388 <peripheral_Config_Ini>

	/*configure interrupts (without priorities atm)*/
	//Button OnOff (GPIOB0)
	GPIO_IRQ_EnableDisable(IRQ_EXTI2_3, ENABLE);
 800016a:	2101      	movs	r1, #1
 800016c:	2006      	movs	r0, #6
 800016e:	f000 fc6d 	bl	8000a4c <GPIO_IRQ_EnableDisable>
	//Button Emergency (GPIOB2)
	GPIO_IRQ_EnableDisable(IRQ_EXTI4_15, ENABLE);
 8000172:	2101      	movs	r1, #1
 8000174:	2007      	movs	r0, #7
 8000176:	f000 fc69 	bl	8000a4c <GPIO_IRQ_EnableDisable>
	//SPI1
	SPI_IRQ_EnableDisable(IRQ_SPI1, ENABLE);
 800017a:	2101      	movs	r1, #1
 800017c:	2019      	movs	r0, #25
 800017e:	f000 fde1 	bl	8000d44 <SPI_IRQ_EnableDisable>

	/* Loop forever */
	while (1){
		//if state changes, send print command and the content. Think about a way to do it with interrupt due to value change
		if (stateChanged) {
 8000182:	4b30      	ldr	r3, [pc, #192]	; (8000244 <main+0x114>)
 8000184:	781b      	ldrb	r3, [r3, #0]
 8000186:	2b00      	cmp	r3, #0
 8000188:	d0fb      	beq.n	8000182 <main+0x52>
			//enable SPI and disable it at the end?

			//Send print command.Ard should store it in its RX buffer and put ACK in TX.Master should receive garbage in shift reg.
			myTXbuffer[0] = SPI_COMMAND_PRINT;
 800018a:	4b2f      	ldr	r3, [pc, #188]	; (8000248 <main+0x118>)
 800018c:	2250      	movs	r2, #80	; 0x50
 800018e:	701a      	strb	r2, [r3, #0]
			SPI_Send(&spi1, myTXbuffer, 1);
 8000190:	492d      	ldr	r1, [pc, #180]	; (8000248 <main+0x118>)
 8000192:	4b2b      	ldr	r3, [pc, #172]	; (8000240 <main+0x110>)
 8000194:	2201      	movs	r2, #1
 8000196:	0018      	movs	r0, r3
 8000198:	f000 fee5 	bl	8000f66 <SPI_Send>
			//SPI_Send(&spi1, (uint8_t*)SPI_COMMAND_PRINT, 1);
			while (spi1.SPI_Comm.TX_state != SPI_READY);
 800019c:	46c0      	nop			; (mov r8, r8)
 800019e:	4b28      	ldr	r3, [pc, #160]	; (8000240 <main+0x110>)
 80001a0:	7d1b      	ldrb	r3, [r3, #20]
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d1fb      	bne.n	800019e <main+0x6e>

			//Read master RX to clear it off for the next reading
			SPI_Read(&spi1, myRXbuffer, 1); //1 byte to be read
 80001a6:	4929      	ldr	r1, [pc, #164]	; (800024c <main+0x11c>)
 80001a8:	4b25      	ldr	r3, [pc, #148]	; (8000240 <main+0x110>)
 80001aa:	2201      	movs	r2, #1
 80001ac:	0018      	movs	r0, r3
 80001ae:	f000 fef9 	bl	8000fa4 <SPI_Read>
			while (spi1.SPI_Comm.RX_state != SPI_READY);
 80001b2:	46c0      	nop			; (mov r8, r8)
 80001b4:	4b22      	ldr	r3, [pc, #136]	; (8000240 <main+0x110>)
 80001b6:	2220      	movs	r2, #32
 80001b8:	5c9b      	ldrb	r3, [r3, r2]
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d1fa      	bne.n	80001b4 <main+0x84>

			//Send dummy data to Ard so that master receives ACK/NACK
			SPI_Send(&spi1, &dummy_byte, 1); //length 1 byte
 80001be:	4924      	ldr	r1, [pc, #144]	; (8000250 <main+0x120>)
 80001c0:	4b1f      	ldr	r3, [pc, #124]	; (8000240 <main+0x110>)
 80001c2:	2201      	movs	r2, #1
 80001c4:	0018      	movs	r0, r3
 80001c6:	f000 fece 	bl	8000f66 <SPI_Send>
			while (spi1.SPI_Comm.TX_state != SPI_READY);
 80001ca:	46c0      	nop			; (mov r8, r8)
 80001cc:	4b1c      	ldr	r3, [pc, #112]	; (8000240 <main+0x110>)
 80001ce:	7d1b      	ldrb	r3, [r3, #20]
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d1fb      	bne.n	80001cc <main+0x9c>

			//Read master RX to get ACK/NACK
			SPI_Read(&spi1, myRXbuffer, 1); //1 byte to be read
 80001d4:	491d      	ldr	r1, [pc, #116]	; (800024c <main+0x11c>)
 80001d6:	4b1a      	ldr	r3, [pc, #104]	; (8000240 <main+0x110>)
 80001d8:	2201      	movs	r2, #1
 80001da:	0018      	movs	r0, r3
 80001dc:	f000 fee2 	bl	8000fa4 <SPI_Read>
			while (spi1.SPI_Comm.RX_state != SPI_READY);
 80001e0:	46c0      	nop			; (mov r8, r8)
 80001e2:	4b17      	ldr	r3, [pc, #92]	; (8000240 <main+0x110>)
 80001e4:	2220      	movs	r2, #32
 80001e6:	5c9b      	ldrb	r3, [r3, r2]
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d1fa      	bne.n	80001e2 <main+0xb2>
			//printf("myRXbuffer ACK: %s/n", myRXbuffer);

			//if ACK, send length+currentState and receive response
			if (*myRXbuffer == SPI_ARD_ACK){
 80001ec:	4b17      	ldr	r3, [pc, #92]	; (800024c <main+0x11c>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	2ba1      	cmp	r3, #161	; 0xa1
 80001f2:	d11d      	bne.n	8000230 <main+0x100>
				myTXbuffer[0] = 8; //in bits
 80001f4:	4b14      	ldr	r3, [pc, #80]	; (8000248 <main+0x118>)
 80001f6:	2208      	movs	r2, #8
 80001f8:	701a      	strb	r2, [r3, #0]
				myTXbuffer[1] = currentState;
 80001fa:	4b16      	ldr	r3, [pc, #88]	; (8000254 <main+0x124>)
 80001fc:	781a      	ldrb	r2, [r3, #0]
 80001fe:	4b12      	ldr	r3, [pc, #72]	; (8000248 <main+0x118>)
 8000200:	705a      	strb	r2, [r3, #1]
				SPI_Send(&spi1, myTXbuffer, 2); //length is 2
 8000202:	4911      	ldr	r1, [pc, #68]	; (8000248 <main+0x118>)
 8000204:	4b0e      	ldr	r3, [pc, #56]	; (8000240 <main+0x110>)
 8000206:	2202      	movs	r2, #2
 8000208:	0018      	movs	r0, r3
 800020a:	f000 feac 	bl	8000f66 <SPI_Send>
				while (spi1.SPI_Comm.TX_state != SPI_READY);
 800020e:	46c0      	nop			; (mov r8, r8)
 8000210:	4b0b      	ldr	r3, [pc, #44]	; (8000240 <main+0x110>)
 8000212:	7d1b      	ldrb	r3, [r3, #20]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d1fb      	bne.n	8000210 <main+0xe0>

				SPI_Read(&spi1, myRXbuffer, 2); //2 bytes to be read (dummy read).
 8000218:	490c      	ldr	r1, [pc, #48]	; (800024c <main+0x11c>)
 800021a:	4b09      	ldr	r3, [pc, #36]	; (8000240 <main+0x110>)
 800021c:	2202      	movs	r2, #2
 800021e:	0018      	movs	r0, r3
 8000220:	f000 fec0 	bl	8000fa4 <SPI_Read>
				while (spi1.SPI_Comm.RX_state != SPI_READY);
 8000224:	46c0      	nop			; (mov r8, r8)
 8000226:	4b06      	ldr	r3, [pc, #24]	; (8000240 <main+0x110>)
 8000228:	2220      	movs	r2, #32
 800022a:	5c9b      	ldrb	r3, [r3, r2]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d1fa      	bne.n	8000226 <main+0xf6>
				SPI_Read(&spi1, myRXbuffer, 2); //2 bytes to be read (dummy read).
				while (spi1.SPI_Comm.RX_state != SPI_READY);*/
			}

			//clear the flag of current state in order to capture state changes
			stateChanged = 0;
 8000230:	4b04      	ldr	r3, [pc, #16]	; (8000244 <main+0x114>)
 8000232:	2200      	movs	r2, #0
 8000234:	701a      	strb	r2, [r3, #0]
		if (stateChanged) {
 8000236:	e7a4      	b.n	8000182 <main+0x52>
 8000238:	20000020 	.word	0x20000020
 800023c:	2000002c 	.word	0x2000002c
 8000240:	20000044 	.word	0x20000044
 8000244:	20000069 	.word	0x20000069
 8000248:	2000006c 	.word	0x2000006c
 800024c:	20000070 	.word	0x20000070
 8000250:	20000000 	.word	0x20000000
 8000254:	20000068 	.word	0x20000068

08000258 <EXTI2_3_IRQHandler>:
	}
}
/**********************************************END MAIN********************************************************************/

/***********************************************ISR handlers****************************************************************/
void EXTI2_3_IRQHandler(void){ //when button on-off
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	delay();
 800025c:	f7ff ff54 	bl	8000108 <delay>
	GPIO_IRQ_Handling(PIN_BUTTON_OFFON);
 8000260:	2003      	movs	r0, #3
 8000262:	f000 fc1f 	bl	8000aa4 <GPIO_IRQ_Handling>
	if (currentState == OFF){
 8000266:	4b26      	ldr	r3, [pc, #152]	; (8000300 <EXTI2_3_IRQHandler+0xa8>)
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	2b00      	cmp	r3, #0
 800026c:	d122      	bne.n	80002b4 <EXTI2_3_IRQHandler+0x5c>
		currentState = ON;
 800026e:	4b24      	ldr	r3, [pc, #144]	; (8000300 <EXTI2_3_IRQHandler+0xa8>)
 8000270:	2201      	movs	r2, #1
 8000272:	701a      	strb	r2, [r3, #0]
		stateChanged = 1;
 8000274:	4b23      	ldr	r3, [pc, #140]	; (8000304 <EXTI2_3_IRQHandler+0xac>)
 8000276:	2201      	movs	r2, #1
 8000278:	701a      	strb	r2, [r3, #0]
		GPIO_WritePin(GPIOA,PIN_LED0,0);
 800027a:	2390      	movs	r3, #144	; 0x90
 800027c:	05db      	lsls	r3, r3, #23
 800027e:	2200      	movs	r2, #0
 8000280:	2100      	movs	r1, #0
 8000282:	0018      	movs	r0, r3
 8000284:	f000 fbb8 	bl	80009f8 <GPIO_WritePin>
		GPIO_WritePin(GPIOA,PIN_LED1,1);
 8000288:	2390      	movs	r3, #144	; 0x90
 800028a:	05db      	lsls	r3, r3, #23
 800028c:	2201      	movs	r2, #1
 800028e:	2101      	movs	r1, #1
 8000290:	0018      	movs	r0, r3
 8000292:	f000 fbb1 	bl	80009f8 <GPIO_WritePin>
		GPIO_WritePin(GPIOA,PIN_LED2,1);
 8000296:	2390      	movs	r3, #144	; 0x90
 8000298:	05db      	lsls	r3, r3, #23
 800029a:	2201      	movs	r2, #1
 800029c:	2109      	movs	r1, #9
 800029e:	0018      	movs	r0, r3
 80002a0:	f000 fbaa 	bl	80009f8 <GPIO_WritePin>
		GPIO_WritePin(GPIOA,PIN_LED3,0);
 80002a4:	2390      	movs	r3, #144	; 0x90
 80002a6:	05db      	lsls	r3, r3, #23
 80002a8:	2200      	movs	r2, #0
 80002aa:	210a      	movs	r1, #10
 80002ac:	0018      	movs	r0, r3
 80002ae:	f000 fba3 	bl	80009f8 <GPIO_WritePin>
		GPIO_WritePin(GPIOA,PIN_LED1,0);
		GPIO_WritePin(GPIOA,PIN_LED2,0);
		GPIO_WritePin(GPIOA,PIN_LED3,0);
	}
	//printf("%d\n",currentState);
}
 80002b2:	e021      	b.n	80002f8 <EXTI2_3_IRQHandler+0xa0>
		currentState = OFF;
 80002b4:	4b12      	ldr	r3, [pc, #72]	; (8000300 <EXTI2_3_IRQHandler+0xa8>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	701a      	strb	r2, [r3, #0]
		stateChanged = 1;
 80002ba:	4b12      	ldr	r3, [pc, #72]	; (8000304 <EXTI2_3_IRQHandler+0xac>)
 80002bc:	2201      	movs	r2, #1
 80002be:	701a      	strb	r2, [r3, #0]
		GPIO_WritePin(GPIOA,PIN_LED0,0);
 80002c0:	2390      	movs	r3, #144	; 0x90
 80002c2:	05db      	lsls	r3, r3, #23
 80002c4:	2200      	movs	r2, #0
 80002c6:	2100      	movs	r1, #0
 80002c8:	0018      	movs	r0, r3
 80002ca:	f000 fb95 	bl	80009f8 <GPIO_WritePin>
		GPIO_WritePin(GPIOA,PIN_LED1,0);
 80002ce:	2390      	movs	r3, #144	; 0x90
 80002d0:	05db      	lsls	r3, r3, #23
 80002d2:	2200      	movs	r2, #0
 80002d4:	2101      	movs	r1, #1
 80002d6:	0018      	movs	r0, r3
 80002d8:	f000 fb8e 	bl	80009f8 <GPIO_WritePin>
		GPIO_WritePin(GPIOA,PIN_LED2,0);
 80002dc:	2390      	movs	r3, #144	; 0x90
 80002de:	05db      	lsls	r3, r3, #23
 80002e0:	2200      	movs	r2, #0
 80002e2:	2109      	movs	r1, #9
 80002e4:	0018      	movs	r0, r3
 80002e6:	f000 fb87 	bl	80009f8 <GPIO_WritePin>
		GPIO_WritePin(GPIOA,PIN_LED3,0);
 80002ea:	2390      	movs	r3, #144	; 0x90
 80002ec:	05db      	lsls	r3, r3, #23
 80002ee:	2200      	movs	r2, #0
 80002f0:	210a      	movs	r1, #10
 80002f2:	0018      	movs	r0, r3
 80002f4:	f000 fb80 	bl	80009f8 <GPIO_WritePin>
}
 80002f8:	46c0      	nop			; (mov r8, r8)
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	46c0      	nop			; (mov r8, r8)
 8000300:	20000068 	.word	0x20000068
 8000304:	20000069 	.word	0x20000069

08000308 <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler(void){
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	delay();
 800030c:	f7ff fefc 	bl	8000108 <delay>
	GPIO_IRQ_Handling(PIN_BUTTON_EMERGENCY);
 8000310:	2005      	movs	r0, #5
 8000312:	f000 fbc7 	bl	8000aa4 <GPIO_IRQ_Handling>
	if (currentState != EMERGENCY){
 8000316:	4b14      	ldr	r3, [pc, #80]	; (8000368 <EXTI4_15_IRQHandler+0x60>)
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	2b02      	cmp	r3, #2
 800031c:	d002      	beq.n	8000324 <EXTI4_15_IRQHandler+0x1c>
		stateChanged = 1;
 800031e:	4b13      	ldr	r3, [pc, #76]	; (800036c <EXTI4_15_IRQHandler+0x64>)
 8000320:	2201      	movs	r2, #1
 8000322:	701a      	strb	r2, [r3, #0]
	}
	currentState = EMERGENCY;
 8000324:	4b10      	ldr	r3, [pc, #64]	; (8000368 <EXTI4_15_IRQHandler+0x60>)
 8000326:	2202      	movs	r2, #2
 8000328:	701a      	strb	r2, [r3, #0]
	//printf("%d\n",currentState);
	GPIO_WritePin(GPIOA,PIN_LED0,1);
 800032a:	2390      	movs	r3, #144	; 0x90
 800032c:	05db      	lsls	r3, r3, #23
 800032e:	2201      	movs	r2, #1
 8000330:	2100      	movs	r1, #0
 8000332:	0018      	movs	r0, r3
 8000334:	f000 fb60 	bl	80009f8 <GPIO_WritePin>
	GPIO_WritePin(GPIOA,PIN_LED1,1);
 8000338:	2390      	movs	r3, #144	; 0x90
 800033a:	05db      	lsls	r3, r3, #23
 800033c:	2201      	movs	r2, #1
 800033e:	2101      	movs	r1, #1
 8000340:	0018      	movs	r0, r3
 8000342:	f000 fb59 	bl	80009f8 <GPIO_WritePin>
	GPIO_WritePin(GPIOA,PIN_LED2,1);
 8000346:	2390      	movs	r3, #144	; 0x90
 8000348:	05db      	lsls	r3, r3, #23
 800034a:	2201      	movs	r2, #1
 800034c:	2109      	movs	r1, #9
 800034e:	0018      	movs	r0, r3
 8000350:	f000 fb52 	bl	80009f8 <GPIO_WritePin>
	GPIO_WritePin(GPIOA,PIN_LED3,1);
 8000354:	2390      	movs	r3, #144	; 0x90
 8000356:	05db      	lsls	r3, r3, #23
 8000358:	2201      	movs	r2, #1
 800035a:	210a      	movs	r1, #10
 800035c:	0018      	movs	r0, r3
 800035e:	f000 fb4b 	bl	80009f8 <GPIO_WritePin>

}
 8000362:	46c0      	nop			; (mov r8, r8)
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}
 8000368:	20000068 	.word	0x20000068
 800036c:	20000069 	.word	0x20000069

08000370 <SPI1_IRQHandler>:

//SPI IRQ handler for SPI1
void SPI1_IRQHandler(void){
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
	SPI_IRQ_Handling(&spi1);
 8000374:	4b03      	ldr	r3, [pc, #12]	; (8000384 <SPI1_IRQHandler+0x14>)
 8000376:	0018      	movs	r0, r3
 8000378:	f000 fd10 	bl	8000d9c <SPI_IRQ_Handling>
}
 800037c:	46c0      	nop			; (mov r8, r8)
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	46c0      	nop			; (mov r8, r8)
 8000384:	20000044 	.word	0x20000044

08000388 <peripheral_Config_Ini>:

/**********************************************END IRQ********************************************************************/

/*****************************Configurations and initializations************************************************************/
void peripheral_Config_Ini(void){
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0

	//LED0
	leds.pGPIO = GPIOA;
 800038c:	4b5f      	ldr	r3, [pc, #380]	; (800050c <peripheral_Config_Ini+0x184>)
 800038e:	2290      	movs	r2, #144	; 0x90
 8000390:	05d2      	lsls	r2, r2, #23
 8000392:	601a      	str	r2, [r3, #0]
	leds.GPIO_PinConfig.GPIO_PinNumber = PIN_LED0;
 8000394:	4b5d      	ldr	r3, [pc, #372]	; (800050c <peripheral_Config_Ini+0x184>)
 8000396:	2200      	movs	r2, #0
 8000398:	711a      	strb	r2, [r3, #4]
	leds.GPIO_PinConfig.GPIO_PinMode = GPIO_OUT;
 800039a:	4b5c      	ldr	r3, [pc, #368]	; (800050c <peripheral_Config_Ini+0x184>)
 800039c:	2201      	movs	r2, #1
 800039e:	715a      	strb	r2, [r3, #5]
	leds.GPIO_PinConfig.GPIO_PinOutType = GPIO_PUSHPULL;
 80003a0:	4b5a      	ldr	r3, [pc, #360]	; (800050c <peripheral_Config_Ini+0x184>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	719a      	strb	r2, [r3, #6]
	leds.GPIO_PinConfig.GPIO_PinOutSpeed = GPIO_SLOWSPEED; //GPIO_MEDIUMSPEED
 80003a6:	4b59      	ldr	r3, [pc, #356]	; (800050c <peripheral_Config_Ini+0x184>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	71da      	strb	r2, [r3, #7]
	leds.GPIO_PinConfig.GPIO_PinPullUpDown = GPIO_NOPULL;
 80003ac:	4b57      	ldr	r3, [pc, #348]	; (800050c <peripheral_Config_Ini+0x184>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	721a      	strb	r2, [r3, #8]
	//Initialization LED0
	GPIO_PinInit(&leds);
 80003b2:	4b56      	ldr	r3, [pc, #344]	; (800050c <peripheral_Config_Ini+0x184>)
 80003b4:	0018      	movs	r0, r3
 80003b6:	f000 f991 	bl	80006dc <GPIO_PinInit>

	//LED1.Port,Mode,OutType,OutSpeed and PullUpDown same as LED0
	leds.GPIO_PinConfig.GPIO_PinNumber = PIN_LED1;
 80003ba:	4b54      	ldr	r3, [pc, #336]	; (800050c <peripheral_Config_Ini+0x184>)
 80003bc:	2201      	movs	r2, #1
 80003be:	711a      	strb	r2, [r3, #4]
	//Initialization LED1
	GPIO_PinInit(&leds);
 80003c0:	4b52      	ldr	r3, [pc, #328]	; (800050c <peripheral_Config_Ini+0x184>)
 80003c2:	0018      	movs	r0, r3
 80003c4:	f000 f98a 	bl	80006dc <GPIO_PinInit>

	//LED2.Port,Mode,OutType,OutSpeed and PullUpDown same as LED0
	leds.GPIO_PinConfig.GPIO_PinNumber = PIN_LED2;
 80003c8:	4b50      	ldr	r3, [pc, #320]	; (800050c <peripheral_Config_Ini+0x184>)
 80003ca:	2209      	movs	r2, #9
 80003cc:	711a      	strb	r2, [r3, #4]
	//Initialization LED2
	GPIO_PinInit(&leds);
 80003ce:	4b4f      	ldr	r3, [pc, #316]	; (800050c <peripheral_Config_Ini+0x184>)
 80003d0:	0018      	movs	r0, r3
 80003d2:	f000 f983 	bl	80006dc <GPIO_PinInit>

	//LED3.Port,Mode,OutType,OutSpeed and PullUpDown same as LED0
	leds.GPIO_PinConfig.GPIO_PinNumber = PIN_LED3;
 80003d6:	4b4d      	ldr	r3, [pc, #308]	; (800050c <peripheral_Config_Ini+0x184>)
 80003d8:	220a      	movs	r2, #10
 80003da:	711a      	strb	r2, [r3, #4]
	//Initialization LED3
	GPIO_PinInit(&leds);
 80003dc:	4b4b      	ldr	r3, [pc, #300]	; (800050c <peripheral_Config_Ini+0x184>)
 80003de:	0018      	movs	r0, r3
 80003e0:	f000 f97c 	bl	80006dc <GPIO_PinInit>

	//LEDs OFF
	GPIO_WritePin(GPIOA,PIN_LED0,1);
 80003e4:	2390      	movs	r3, #144	; 0x90
 80003e6:	05db      	lsls	r3, r3, #23
 80003e8:	2201      	movs	r2, #1
 80003ea:	2100      	movs	r1, #0
 80003ec:	0018      	movs	r0, r3
 80003ee:	f000 fb03 	bl	80009f8 <GPIO_WritePin>
	GPIO_WritePin(GPIOA,PIN_LED1,0);
 80003f2:	2390      	movs	r3, #144	; 0x90
 80003f4:	05db      	lsls	r3, r3, #23
 80003f6:	2200      	movs	r2, #0
 80003f8:	2101      	movs	r1, #1
 80003fa:	0018      	movs	r0, r3
 80003fc:	f000 fafc 	bl	80009f8 <GPIO_WritePin>
	GPIO_WritePin(GPIOA,PIN_LED2,0);
 8000400:	2390      	movs	r3, #144	; 0x90
 8000402:	05db      	lsls	r3, r3, #23
 8000404:	2200      	movs	r2, #0
 8000406:	2109      	movs	r1, #9
 8000408:	0018      	movs	r0, r3
 800040a:	f000 faf5 	bl	80009f8 <GPIO_WritePin>
	GPIO_WritePin(GPIOA,PIN_LED3,1);
 800040e:	2390      	movs	r3, #144	; 0x90
 8000410:	05db      	lsls	r3, r3, #23
 8000412:	2201      	movs	r2, #1
 8000414:	210a      	movs	r1, #10
 8000416:	0018      	movs	r0, r3
 8000418:	f000 faee 	bl	80009f8 <GPIO_WritePin>

	//BUTTON ON-OFF
	buttons.pGPIO = GPIOB;
 800041c:	4b3c      	ldr	r3, [pc, #240]	; (8000510 <peripheral_Config_Ini+0x188>)
 800041e:	4a3d      	ldr	r2, [pc, #244]	; (8000514 <peripheral_Config_Ini+0x18c>)
 8000420:	601a      	str	r2, [r3, #0]
	buttons.GPIO_PinConfig.GPIO_PinNumber = PIN_BUTTON_OFFON;
 8000422:	4b3b      	ldr	r3, [pc, #236]	; (8000510 <peripheral_Config_Ini+0x188>)
 8000424:	2203      	movs	r2, #3
 8000426:	711a      	strb	r2, [r3, #4]
	buttons.GPIO_PinConfig.GPIO_PinMode = GPIO_FALL_TRIG; //interrupt falling edge
 8000428:	4b39      	ldr	r3, [pc, #228]	; (8000510 <peripheral_Config_Ini+0x188>)
 800042a:	2204      	movs	r2, #4
 800042c:	715a      	strb	r2, [r3, #5]
	buttons.GPIO_PinConfig.GPIO_PinPullUpDown = GPIO_PULLUP; //pull up (3.3 by default)
 800042e:	4b38      	ldr	r3, [pc, #224]	; (8000510 <peripheral_Config_Ini+0x188>)
 8000430:	2201      	movs	r2, #1
 8000432:	721a      	strb	r2, [r3, #8]
	//initialization button on-off
	GPIO_PinInit(&buttons);
 8000434:	4b36      	ldr	r3, [pc, #216]	; (8000510 <peripheral_Config_Ini+0x188>)
 8000436:	0018      	movs	r0, r3
 8000438:	f000 f950 	bl	80006dc <GPIO_PinInit>

	//EMERGENCY BUTTON
	buttons.pGPIO = GPIOB;
 800043c:	4b34      	ldr	r3, [pc, #208]	; (8000510 <peripheral_Config_Ini+0x188>)
 800043e:	4a35      	ldr	r2, [pc, #212]	; (8000514 <peripheral_Config_Ini+0x18c>)
 8000440:	601a      	str	r2, [r3, #0]
	buttons.GPIO_PinConfig.GPIO_PinNumber = PIN_BUTTON_EMERGENCY;
 8000442:	4b33      	ldr	r3, [pc, #204]	; (8000510 <peripheral_Config_Ini+0x188>)
 8000444:	2205      	movs	r2, #5
 8000446:	711a      	strb	r2, [r3, #4]
	buttons.GPIO_PinConfig.GPIO_PinMode = GPIO_FALL_TRIG;
 8000448:	4b31      	ldr	r3, [pc, #196]	; (8000510 <peripheral_Config_Ini+0x188>)
 800044a:	2204      	movs	r2, #4
 800044c:	715a      	strb	r2, [r3, #5]
	buttons.GPIO_PinConfig.GPIO_PinPullUpDown = GPIO_PULLUP;
 800044e:	4b30      	ldr	r3, [pc, #192]	; (8000510 <peripheral_Config_Ini+0x188>)
 8000450:	2201      	movs	r2, #1
 8000452:	721a      	strb	r2, [r3, #8]
	//initialization emergency button
	GPIO_PinInit(&buttons);
 8000454:	4b2e      	ldr	r3, [pc, #184]	; (8000510 <peripheral_Config_Ini+0x188>)
 8000456:	0018      	movs	r0, r3
 8000458:	f000 f940 	bl	80006dc <GPIO_PinInit>

	//GPIOs for SPI: SPI1 PA4:NSS PA5:SCK PA6:MISO PA7:MOSI
	spiGPIOs.pGPIO = GPIOA;
 800045c:	4b2e      	ldr	r3, [pc, #184]	; (8000518 <peripheral_Config_Ini+0x190>)
 800045e:	2290      	movs	r2, #144	; 0x90
 8000460:	05d2      	lsls	r2, r2, #23
 8000462:	601a      	str	r2, [r3, #0]
	spiGPIOs.GPIO_PinConfig.GPIO_PinMode = GPIO_ALTFUN;
 8000464:	4b2c      	ldr	r3, [pc, #176]	; (8000518 <peripheral_Config_Ini+0x190>)
 8000466:	2202      	movs	r2, #2
 8000468:	715a      	strb	r2, [r3, #5]
	spiGPIOs.GPIO_PinConfig.GPIO_PinOutType = GPIO_PUSHPULL;
 800046a:	4b2b      	ldr	r3, [pc, #172]	; (8000518 <peripheral_Config_Ini+0x190>)
 800046c:	2200      	movs	r2, #0
 800046e:	719a      	strb	r2, [r3, #6]
	spiGPIOs.GPIO_PinConfig.GPIO_PinOutSpeed = GPIO_HIGHSPEED; //FAST SPEED
 8000470:	4b29      	ldr	r3, [pc, #164]	; (8000518 <peripheral_Config_Ini+0x190>)
 8000472:	2203      	movs	r2, #3
 8000474:	71da      	strb	r2, [r3, #7]
	spiGPIOs.GPIO_PinConfig.GPIO_PinPullUpDown = GPIO_NOPULL;
 8000476:	4b28      	ldr	r3, [pc, #160]	; (8000518 <peripheral_Config_Ini+0x190>)
 8000478:	2200      	movs	r2, #0
 800047a:	721a      	strb	r2, [r3, #8]
	//SCK
	spiGPIOs.GPIO_PinConfig.GPIO_PinNumber = PIN_SPI1_SCK;//SCK
 800047c:	4b26      	ldr	r3, [pc, #152]	; (8000518 <peripheral_Config_Ini+0x190>)
 800047e:	2205      	movs	r2, #5
 8000480:	711a      	strb	r2, [r3, #4]
	GPIO_PinInit(&spiGPIOs);
 8000482:	4b25      	ldr	r3, [pc, #148]	; (8000518 <peripheral_Config_Ini+0x190>)
 8000484:	0018      	movs	r0, r3
 8000486:	f000 f929 	bl	80006dc <GPIO_PinInit>

	spiGPIOs.GPIO_PinConfig.GPIO_PinPullUpDown = GPIO_PULLUP;
 800048a:	4b23      	ldr	r3, [pc, #140]	; (8000518 <peripheral_Config_Ini+0x190>)
 800048c:	2201      	movs	r2, #1
 800048e:	721a      	strb	r2, [r3, #8]
	//NSS
	spiGPIOs.GPIO_PinConfig.GPIO_PinNumber = PIN_SPI1_NSS;//NSS
 8000490:	4b21      	ldr	r3, [pc, #132]	; (8000518 <peripheral_Config_Ini+0x190>)
 8000492:	2204      	movs	r2, #4
 8000494:	711a      	strb	r2, [r3, #4]
	GPIO_PinInit(&spiGPIOs);
 8000496:	4b20      	ldr	r3, [pc, #128]	; (8000518 <peripheral_Config_Ini+0x190>)
 8000498:	0018      	movs	r0, r3
 800049a:	f000 f91f 	bl	80006dc <GPIO_PinInit>
	//MISO
	spiGPIOs.GPIO_PinConfig.GPIO_PinNumber = PIN_SPI1_MISO;//MISO
 800049e:	4b1e      	ldr	r3, [pc, #120]	; (8000518 <peripheral_Config_Ini+0x190>)
 80004a0:	2206      	movs	r2, #6
 80004a2:	711a      	strb	r2, [r3, #4]
	GPIO_PinInit(&spiGPIOs);
 80004a4:	4b1c      	ldr	r3, [pc, #112]	; (8000518 <peripheral_Config_Ini+0x190>)
 80004a6:	0018      	movs	r0, r3
 80004a8:	f000 f918 	bl	80006dc <GPIO_PinInit>
	//MOSI
	spiGPIOs.GPIO_PinConfig.GPIO_PinNumber = PIN_SPI1_MOSI;//MOSI
 80004ac:	4b1a      	ldr	r3, [pc, #104]	; (8000518 <peripheral_Config_Ini+0x190>)
 80004ae:	2207      	movs	r2, #7
 80004b0:	711a      	strb	r2, [r3, #4]
	GPIO_PinInit(&spiGPIOs);
 80004b2:	4b19      	ldr	r3, [pc, #100]	; (8000518 <peripheral_Config_Ini+0x190>)
 80004b4:	0018      	movs	r0, r3
 80004b6:	f000 f911 	bl	80006dc <GPIO_PinInit>

	/*SPI handle configuration and initialization*/
	//SPI configuration
	spi1.pSPI = SPI1_I2S1;
 80004ba:	4b18      	ldr	r3, [pc, #96]	; (800051c <peripheral_Config_Ini+0x194>)
 80004bc:	4a18      	ldr	r2, [pc, #96]	; (8000520 <peripheral_Config_Ini+0x198>)
 80004be:	601a      	str	r2, [r3, #0]
	spi1.SPI_Config.SPI_Mode = SPI_MASTER;
 80004c0:	4b16      	ldr	r3, [pc, #88]	; (800051c <peripheral_Config_Ini+0x194>)
 80004c2:	2201      	movs	r2, #1
 80004c4:	711a      	strb	r2, [r3, #4]
	spi1.SPI_Config.SPI_Speed = SPI_SPEED_2;
 80004c6:	4b15      	ldr	r3, [pc, #84]	; (800051c <peripheral_Config_Ini+0x194>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	715a      	strb	r2, [r3, #5]
	spi1.SPI_Config.SPI_CommType = SPI_FULLDUPLEX;
 80004cc:	4b13      	ldr	r3, [pc, #76]	; (800051c <peripheral_Config_Ini+0x194>)
 80004ce:	2201      	movs	r2, #1
 80004d0:	719a      	strb	r2, [r3, #6]
	spi1.SPI_Config.SPI_DataSize = SPI_8BIT;
 80004d2:	4b12      	ldr	r3, [pc, #72]	; (800051c <peripheral_Config_Ini+0x194>)
 80004d4:	2207      	movs	r2, #7
 80004d6:	71da      	strb	r2, [r3, #7]
	spi1.SPI_Config.SPI_SWslave = SPI_HW_MGMT;
 80004d8:	4b10      	ldr	r3, [pc, #64]	; (800051c <peripheral_Config_Ini+0x194>)
 80004da:	2200      	movs	r2, #0
 80004dc:	721a      	strb	r2, [r3, #8]
	spi1.SPI_Config.SPI_Pol = SPI_CLK_IDLE_0;
 80004de:	4b0f      	ldr	r3, [pc, #60]	; (800051c <peripheral_Config_Ini+0x194>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	725a      	strb	r2, [r3, #9]
	spi1.SPI_Config.SPI_Phase = SPI_CLK_CAPT_FIRST;
 80004e4:	4b0d      	ldr	r3, [pc, #52]	; (800051c <peripheral_Config_Ini+0x194>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	729a      	strb	r2, [r3, #10]

	//SPI initialization
	SPI_Init(&spi1);
 80004ea:	4b0c      	ldr	r3, [pc, #48]	; (800051c <peripheral_Config_Ini+0x194>)
 80004ec:	0018      	movs	r0, r3
 80004ee:	f000 fb43 	bl	8000b78 <SPI_Init>

	//Set SSOE to 1 to make NSS output enable
	SPI_SSOE(&spi1,ENABLE);
 80004f2:	4b0a      	ldr	r3, [pc, #40]	; (800051c <peripheral_Config_Ini+0x194>)
 80004f4:	2101      	movs	r1, #1
 80004f6:	0018      	movs	r0, r3
 80004f8:	f000 fc04 	bl	8000d04 <SPI_SSOE>

	//Enable SPI peripheral
	SPI_EnableDisable(&spi1,ENABLE);
 80004fc:	4b07      	ldr	r3, [pc, #28]	; (800051c <peripheral_Config_Ini+0x194>)
 80004fe:	2101      	movs	r1, #1
 8000500:	0018      	movs	r0, r3
 8000502:	f000 fbdf 	bl	8000cc4 <SPI_EnableDisable>
}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	2000002c 	.word	0x2000002c
 8000510:	20000020 	.word	0x20000020
 8000514:	48000400 	.word	0x48000400
 8000518:	20000038 	.word	0x20000038
 800051c:	20000044 	.word	0x20000044
 8000520:	40013000 	.word	0x40013000

08000524 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000524:	480d      	ldr	r0, [pc, #52]	; (800055c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000526:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000528:	e000      	b.n	800052c <Reset_Handler+0x8>
 800052a:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800052c:	480c      	ldr	r0, [pc, #48]	; (8000560 <LoopForever+0x6>)
  ldr r1, =_edata
 800052e:	490d      	ldr	r1, [pc, #52]	; (8000564 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000530:	4a0d      	ldr	r2, [pc, #52]	; (8000568 <LoopForever+0xe>)
  movs r3, #0
 8000532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000534:	e002      	b.n	800053c <LoopCopyDataInit>

08000536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800053a:	3304      	adds	r3, #4

0800053c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800053c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800053e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000540:	d3f9      	bcc.n	8000536 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000542:	4a0a      	ldr	r2, [pc, #40]	; (800056c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000544:	4c0a      	ldr	r4, [pc, #40]	; (8000570 <LoopForever+0x16>)
  movs r3, #0
 8000546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000548:	e001      	b.n	800054e <LoopFillZerobss>

0800054a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800054a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800054c:	3204      	adds	r2, #4

0800054e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800054e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000550:	d3fb      	bcc.n	800054a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000552:	f000 fd53 	bl	8000ffc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000556:	f7ff fdeb 	bl	8000130 <main>

0800055a <LoopForever>:

LoopForever:
    b LoopForever
 800055a:	e7fe      	b.n	800055a <LoopForever>
  ldr   r0, =_estack
 800055c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000564:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000568:	08001074 	.word	0x08001074
  ldr r2, =_sbss
 800056c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000570:	20000074 	.word	0x20000074

08000574 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000574:	e7fe      	b.n	8000574 <ADC_COMP_IRQHandler>
	...

08000578 <GPIO_ClockControl>:
 *      Author: danim
 */

#include "gpio.h"
/*********GPIO clock control***************/
void GPIO_ClockControl(GPIO_RegStruct_t *pGPIO, uint8_t EnableDisable){
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	000a      	movs	r2, r1
 8000582:	1cfb      	adds	r3, r7, #3
 8000584:	701a      	strb	r2, [r3, #0]

	if (EnableDisable == ENABLE) {
 8000586:	1cfb      	adds	r3, r7, #3
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	2b01      	cmp	r3, #1
 800058c:	d148      	bne.n	8000620 <GPIO_ClockControl+0xa8>
		if (pGPIO==GPIOA) { //I can't do switch-case with pointers! that's why I use if
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	2390      	movs	r3, #144	; 0x90
 8000592:	05db      	lsls	r3, r3, #23
 8000594:	429a      	cmp	r2, r3
 8000596:	d107      	bne.n	80005a8 <GPIO_ClockControl+0x30>
			GPIOA_EnableClock();
 8000598:	4b44      	ldr	r3, [pc, #272]	; (80006ac <GPIO_ClockControl+0x134>)
 800059a:	695a      	ldr	r2, [r3, #20]
 800059c:	4b43      	ldr	r3, [pc, #268]	; (80006ac <GPIO_ClockControl+0x134>)
 800059e:	2180      	movs	r1, #128	; 0x80
 80005a0:	0289      	lsls	r1, r1, #10
 80005a2:	430a      	orrs	r2, r1
 80005a4:	615a      	str	r2, [r3, #20]
		}
		else if (pGPIO==GPIOF){
			GPIOF_DisableClock();
		}
	}
}
 80005a6:	e07d      	b.n	80006a4 <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOB){
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4a41      	ldr	r2, [pc, #260]	; (80006b0 <GPIO_ClockControl+0x138>)
 80005ac:	4293      	cmp	r3, r2
 80005ae:	d107      	bne.n	80005c0 <GPIO_ClockControl+0x48>
			GPIOB_EnableClock();
 80005b0:	4b3e      	ldr	r3, [pc, #248]	; (80006ac <GPIO_ClockControl+0x134>)
 80005b2:	695a      	ldr	r2, [r3, #20]
 80005b4:	4b3d      	ldr	r3, [pc, #244]	; (80006ac <GPIO_ClockControl+0x134>)
 80005b6:	2180      	movs	r1, #128	; 0x80
 80005b8:	02c9      	lsls	r1, r1, #11
 80005ba:	430a      	orrs	r2, r1
 80005bc:	615a      	str	r2, [r3, #20]
}
 80005be:	e071      	b.n	80006a4 <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOC){
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4a3c      	ldr	r2, [pc, #240]	; (80006b4 <GPIO_ClockControl+0x13c>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d107      	bne.n	80005d8 <GPIO_ClockControl+0x60>
			GPIOC_EnableClock();
 80005c8:	4b38      	ldr	r3, [pc, #224]	; (80006ac <GPIO_ClockControl+0x134>)
 80005ca:	695a      	ldr	r2, [r3, #20]
 80005cc:	4b37      	ldr	r3, [pc, #220]	; (80006ac <GPIO_ClockControl+0x134>)
 80005ce:	2180      	movs	r1, #128	; 0x80
 80005d0:	0309      	lsls	r1, r1, #12
 80005d2:	430a      	orrs	r2, r1
 80005d4:	615a      	str	r2, [r3, #20]
}
 80005d6:	e065      	b.n	80006a4 <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOD){
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	4a37      	ldr	r2, [pc, #220]	; (80006b8 <GPIO_ClockControl+0x140>)
 80005dc:	4293      	cmp	r3, r2
 80005de:	d107      	bne.n	80005f0 <GPIO_ClockControl+0x78>
			GPIOD_EnableClock();
 80005e0:	4b32      	ldr	r3, [pc, #200]	; (80006ac <GPIO_ClockControl+0x134>)
 80005e2:	695a      	ldr	r2, [r3, #20]
 80005e4:	4b31      	ldr	r3, [pc, #196]	; (80006ac <GPIO_ClockControl+0x134>)
 80005e6:	2180      	movs	r1, #128	; 0x80
 80005e8:	0349      	lsls	r1, r1, #13
 80005ea:	430a      	orrs	r2, r1
 80005ec:	615a      	str	r2, [r3, #20]
}
 80005ee:	e059      	b.n	80006a4 <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOE){
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4a32      	ldr	r2, [pc, #200]	; (80006bc <GPIO_ClockControl+0x144>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d107      	bne.n	8000608 <GPIO_ClockControl+0x90>
			GPIOE_EnableClock();
 80005f8:	4b2c      	ldr	r3, [pc, #176]	; (80006ac <GPIO_ClockControl+0x134>)
 80005fa:	695a      	ldr	r2, [r3, #20]
 80005fc:	4b2b      	ldr	r3, [pc, #172]	; (80006ac <GPIO_ClockControl+0x134>)
 80005fe:	2180      	movs	r1, #128	; 0x80
 8000600:	0389      	lsls	r1, r1, #14
 8000602:	430a      	orrs	r2, r1
 8000604:	615a      	str	r2, [r3, #20]
}
 8000606:	e04d      	b.n	80006a4 <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOF){
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4a2d      	ldr	r2, [pc, #180]	; (80006c0 <GPIO_ClockControl+0x148>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d149      	bne.n	80006a4 <GPIO_ClockControl+0x12c>
			GPIOF_EnableClock();
 8000610:	4b26      	ldr	r3, [pc, #152]	; (80006ac <GPIO_ClockControl+0x134>)
 8000612:	695a      	ldr	r2, [r3, #20]
 8000614:	4b25      	ldr	r3, [pc, #148]	; (80006ac <GPIO_ClockControl+0x134>)
 8000616:	2180      	movs	r1, #128	; 0x80
 8000618:	03c9      	lsls	r1, r1, #15
 800061a:	430a      	orrs	r2, r1
 800061c:	615a      	str	r2, [r3, #20]
}
 800061e:	e041      	b.n	80006a4 <GPIO_ClockControl+0x12c>
		if (pGPIO==GPIOA) { //I can't do switch-case with pointers! that's why I use if
 8000620:	687a      	ldr	r2, [r7, #4]
 8000622:	2390      	movs	r3, #144	; 0x90
 8000624:	05db      	lsls	r3, r3, #23
 8000626:	429a      	cmp	r2, r3
 8000628:	d106      	bne.n	8000638 <GPIO_ClockControl+0xc0>
			GPIOA_DisableClock();
 800062a:	4b20      	ldr	r3, [pc, #128]	; (80006ac <GPIO_ClockControl+0x134>)
 800062c:	695a      	ldr	r2, [r3, #20]
 800062e:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <GPIO_ClockControl+0x134>)
 8000630:	4924      	ldr	r1, [pc, #144]	; (80006c4 <GPIO_ClockControl+0x14c>)
 8000632:	400a      	ands	r2, r1
 8000634:	615a      	str	r2, [r3, #20]
}
 8000636:	e035      	b.n	80006a4 <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOB){
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	4a1d      	ldr	r2, [pc, #116]	; (80006b0 <GPIO_ClockControl+0x138>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d106      	bne.n	800064e <GPIO_ClockControl+0xd6>
			GPIOB_DisableClock();
 8000640:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <GPIO_ClockControl+0x134>)
 8000642:	695a      	ldr	r2, [r3, #20]
 8000644:	4b19      	ldr	r3, [pc, #100]	; (80006ac <GPIO_ClockControl+0x134>)
 8000646:	4920      	ldr	r1, [pc, #128]	; (80006c8 <GPIO_ClockControl+0x150>)
 8000648:	400a      	ands	r2, r1
 800064a:	615a      	str	r2, [r3, #20]
}
 800064c:	e02a      	b.n	80006a4 <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOC){
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4a18      	ldr	r2, [pc, #96]	; (80006b4 <GPIO_ClockControl+0x13c>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d106      	bne.n	8000664 <GPIO_ClockControl+0xec>
			GPIOC_DisableClock();
 8000656:	4b15      	ldr	r3, [pc, #84]	; (80006ac <GPIO_ClockControl+0x134>)
 8000658:	695a      	ldr	r2, [r3, #20]
 800065a:	4b14      	ldr	r3, [pc, #80]	; (80006ac <GPIO_ClockControl+0x134>)
 800065c:	491b      	ldr	r1, [pc, #108]	; (80006cc <GPIO_ClockControl+0x154>)
 800065e:	400a      	ands	r2, r1
 8000660:	615a      	str	r2, [r3, #20]
}
 8000662:	e01f      	b.n	80006a4 <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOD){
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4a14      	ldr	r2, [pc, #80]	; (80006b8 <GPIO_ClockControl+0x140>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d106      	bne.n	800067a <GPIO_ClockControl+0x102>
			GPIOD_DisableClock();
 800066c:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <GPIO_ClockControl+0x134>)
 800066e:	695a      	ldr	r2, [r3, #20]
 8000670:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <GPIO_ClockControl+0x134>)
 8000672:	4917      	ldr	r1, [pc, #92]	; (80006d0 <GPIO_ClockControl+0x158>)
 8000674:	400a      	ands	r2, r1
 8000676:	615a      	str	r2, [r3, #20]
}
 8000678:	e014      	b.n	80006a4 <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOE){
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4a0f      	ldr	r2, [pc, #60]	; (80006bc <GPIO_ClockControl+0x144>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d106      	bne.n	8000690 <GPIO_ClockControl+0x118>
			GPIOE_DisableClock();
 8000682:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <GPIO_ClockControl+0x134>)
 8000684:	695a      	ldr	r2, [r3, #20]
 8000686:	4b09      	ldr	r3, [pc, #36]	; (80006ac <GPIO_ClockControl+0x134>)
 8000688:	4912      	ldr	r1, [pc, #72]	; (80006d4 <GPIO_ClockControl+0x15c>)
 800068a:	400a      	ands	r2, r1
 800068c:	615a      	str	r2, [r3, #20]
}
 800068e:	e009      	b.n	80006a4 <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOF){
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4a0b      	ldr	r2, [pc, #44]	; (80006c0 <GPIO_ClockControl+0x148>)
 8000694:	4293      	cmp	r3, r2
 8000696:	d105      	bne.n	80006a4 <GPIO_ClockControl+0x12c>
			GPIOF_DisableClock();
 8000698:	4b04      	ldr	r3, [pc, #16]	; (80006ac <GPIO_ClockControl+0x134>)
 800069a:	695a      	ldr	r2, [r3, #20]
 800069c:	4b03      	ldr	r3, [pc, #12]	; (80006ac <GPIO_ClockControl+0x134>)
 800069e:	490e      	ldr	r1, [pc, #56]	; (80006d8 <GPIO_ClockControl+0x160>)
 80006a0:	400a      	ands	r2, r1
 80006a2:	615a      	str	r2, [r3, #20]
}
 80006a4:	46c0      	nop			; (mov r8, r8)
 80006a6:	46bd      	mov	sp, r7
 80006a8:	b002      	add	sp, #8
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40021000 	.word	0x40021000
 80006b0:	48000400 	.word	0x48000400
 80006b4:	48000800 	.word	0x48000800
 80006b8:	48000c00 	.word	0x48000c00
 80006bc:	48001000 	.word	0x48001000
 80006c0:	48001400 	.word	0x48001400
 80006c4:	fffdffff 	.word	0xfffdffff
 80006c8:	fffbffff 	.word	0xfffbffff
 80006cc:	fff7ffff 	.word	0xfff7ffff
 80006d0:	ffefffff 	.word	0xffefffff
 80006d4:	ffdfffff 	.word	0xffdfffff
 80006d8:	ffbfffff 	.word	0xffbfffff

080006dc <GPIO_PinInit>:
/*********GPIO pin initialization*************/
void GPIO_PinInit(GPIO_PinHandle_t *GPIO_PinHandle){
 80006dc:	b5b0      	push	{r4, r5, r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	//local variables used for temporary values in operations
	uint8_t temp1;
	uint8_t temp2;

	//enable GPIO port clock
	GPIO_ClockControl(GPIO_PinHandle->pGPIO,ENABLE);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2101      	movs	r1, #1
 80006ea:	0018      	movs	r0, r3
 80006ec:	f7ff ff44 	bl	8000578 <GPIO_ClockControl>

	//configure MODE: if not interrupt, mode is input/output/analog/alternate function
	if ((GPIO_PinHandle->GPIO_PinConfig.GPIO_PinMode)<=GPIO_ANA){
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	795b      	ldrb	r3, [r3, #5]
 80006f4:	2b03      	cmp	r3, #3
 80006f6:	d81f      	bhi.n	8000738 <GPIO_PinInit+0x5c>
		// first,reset the 2 bits related to pin.ex:pin number 1 is for MODER bits 2 and 3. 3<<2*pin is 3<<2 aka 1100b.so MODER&=(~1100)=x..x00xx
		GPIO_PinHandle->pGPIO->MODER &= (~(3<<(2*GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber))); //I guess I can use 3 instead of 0x3
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	791b      	ldrb	r3, [r3, #4]
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	2103      	movs	r1, #3
 8000706:	4099      	lsls	r1, r3
 8000708:	000b      	movs	r3, r1
 800070a:	43db      	mvns	r3, r3
 800070c:	0019      	movs	r1, r3
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	400a      	ands	r2, r1
 8000714:	601a      	str	r2, [r3, #0]
		//now set
		GPIO_PinHandle->pGPIO->MODER |= (GPIO_PinHandle->GPIO_PinConfig.GPIO_PinMode<<(2*GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	795b      	ldrb	r3, [r3, #5]
 8000720:	0019      	movs	r1, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	791b      	ldrb	r3, [r3, #4]
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	4099      	lsls	r1, r3
 800072a:	000b      	movs	r3, r1
 800072c:	0019      	movs	r1, r3
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	430a      	orrs	r2, r1
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	e0af      	b.n	8000898 <GPIO_PinInit+0x1bc>
	}
	else{ //interrupts
		//Configure the edge trigger (EXTI FTSR and RTSR). EXTI line "y" is for pins "y"; example, EXTI15 is for GPIOA15..GPIOF15
		if ((GPIO_PinHandle->GPIO_PinConfig.GPIO_PinMode)==GPIO_FALL_TRIG){
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	795b      	ldrb	r3, [r3, #5]
 800073c:	2b04      	cmp	r3, #4
 800073e:	d117      	bne.n	8000770 <GPIO_PinInit+0x94>
			//set falling edge trigger
			EXTI->FTSR |= (1<<GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000740:	4ba5      	ldr	r3, [pc, #660]	; (80009d8 <GPIO_PinInit+0x2fc>)
 8000742:	68da      	ldr	r2, [r3, #12]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	791b      	ldrb	r3, [r3, #4]
 8000748:	0019      	movs	r1, r3
 800074a:	2301      	movs	r3, #1
 800074c:	408b      	lsls	r3, r1
 800074e:	0019      	movs	r1, r3
 8000750:	4ba1      	ldr	r3, [pc, #644]	; (80009d8 <GPIO_PinInit+0x2fc>)
 8000752:	430a      	orrs	r2, r1
 8000754:	60da      	str	r2, [r3, #12]
			//clear rising edge trigger!
			EXTI->RTSR &= ~(1<<GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000756:	4ba0      	ldr	r3, [pc, #640]	; (80009d8 <GPIO_PinInit+0x2fc>)
 8000758:	689a      	ldr	r2, [r3, #8]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	791b      	ldrb	r3, [r3, #4]
 800075e:	0019      	movs	r1, r3
 8000760:	2301      	movs	r3, #1
 8000762:	408b      	lsls	r3, r1
 8000764:	43db      	mvns	r3, r3
 8000766:	0019      	movs	r1, r3
 8000768:	4b9b      	ldr	r3, [pc, #620]	; (80009d8 <GPIO_PinInit+0x2fc>)
 800076a:	400a      	ands	r2, r1
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	e035      	b.n	80007dc <GPIO_PinInit+0x100>
		}
		else if ((GPIO_PinHandle->GPIO_PinConfig.GPIO_PinMode)==GPIO_RISE_TRIG){
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	795b      	ldrb	r3, [r3, #5]
 8000774:	2b05      	cmp	r3, #5
 8000776:	d117      	bne.n	80007a8 <GPIO_PinInit+0xcc>
			//set rising edge trigger
			EXTI->RTSR |= (1<<GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000778:	4b97      	ldr	r3, [pc, #604]	; (80009d8 <GPIO_PinInit+0x2fc>)
 800077a:	689a      	ldr	r2, [r3, #8]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	791b      	ldrb	r3, [r3, #4]
 8000780:	0019      	movs	r1, r3
 8000782:	2301      	movs	r3, #1
 8000784:	408b      	lsls	r3, r1
 8000786:	0019      	movs	r1, r3
 8000788:	4b93      	ldr	r3, [pc, #588]	; (80009d8 <GPIO_PinInit+0x2fc>)
 800078a:	430a      	orrs	r2, r1
 800078c:	609a      	str	r2, [r3, #8]
			//clear falling edge trigger!
			EXTI->FTSR &= ~(1<<GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber);
 800078e:	4b92      	ldr	r3, [pc, #584]	; (80009d8 <GPIO_PinInit+0x2fc>)
 8000790:	68da      	ldr	r2, [r3, #12]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	791b      	ldrb	r3, [r3, #4]
 8000796:	0019      	movs	r1, r3
 8000798:	2301      	movs	r3, #1
 800079a:	408b      	lsls	r3, r1
 800079c:	43db      	mvns	r3, r3
 800079e:	0019      	movs	r1, r3
 80007a0:	4b8d      	ldr	r3, [pc, #564]	; (80009d8 <GPIO_PinInit+0x2fc>)
 80007a2:	400a      	ands	r2, r1
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	e019      	b.n	80007dc <GPIO_PinInit+0x100>
		}
		else if ((GPIO_PinHandle->GPIO_PinConfig.GPIO_PinMode)==GPIO_FALLRISE_TRIG){
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	795b      	ldrb	r3, [r3, #5]
 80007ac:	2b06      	cmp	r3, #6
 80007ae:	d115      	bne.n	80007dc <GPIO_PinInit+0x100>
			//set both falling and rising edge triggers
			EXTI->FTSR |= (1<<GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007b0:	4b89      	ldr	r3, [pc, #548]	; (80009d8 <GPIO_PinInit+0x2fc>)
 80007b2:	68da      	ldr	r2, [r3, #12]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	791b      	ldrb	r3, [r3, #4]
 80007b8:	0019      	movs	r1, r3
 80007ba:	2301      	movs	r3, #1
 80007bc:	408b      	lsls	r3, r1
 80007be:	0019      	movs	r1, r3
 80007c0:	4b85      	ldr	r3, [pc, #532]	; (80009d8 <GPIO_PinInit+0x2fc>)
 80007c2:	430a      	orrs	r2, r1
 80007c4:	60da      	str	r2, [r3, #12]
			EXTI->RTSR |= (1<<GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007c6:	4b84      	ldr	r3, [pc, #528]	; (80009d8 <GPIO_PinInit+0x2fc>)
 80007c8:	689a      	ldr	r2, [r3, #8]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	791b      	ldrb	r3, [r3, #4]
 80007ce:	0019      	movs	r1, r3
 80007d0:	2301      	movs	r3, #1
 80007d2:	408b      	lsls	r3, r1
 80007d4:	0019      	movs	r1, r3
 80007d6:	4b80      	ldr	r3, [pc, #512]	; (80009d8 <GPIO_PinInit+0x2fc>)
 80007d8:	430a      	orrs	r2, r1
 80007da:	609a      	str	r2, [r3, #8]
		}

		//EXTICR: select the GPIO for the interruption on corresponding EXTI line through EXTICR registers (every allows just one, so it's a decision)
		//EXTICR0:for GPIO pins 0-3. Blocks of 4 bits to select A-F.EXTICR1: for GPIO pins 4-7. Blocks of 4 bits to select A-F. And so on
		//if GPIOD10-->EXTICR3 (block1,that is,from bit4) because EXTICR1 is for pins 0-3, CR2 pins 4-7 and so on. GPIOD--> 010
		temp1 = GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber/4; //to know which EXTICR
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	791a      	ldrb	r2, [r3, #4]
 80007e0:	200f      	movs	r0, #15
 80007e2:	183b      	adds	r3, r7, r0
 80007e4:	0892      	lsrs	r2, r2, #2
 80007e6:	701a      	strb	r2, [r3, #0]
		temp2 = GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber%4;//to know the block within EXTICR
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	791a      	ldrb	r2, [r3, #4]
 80007ec:	230e      	movs	r3, #14
 80007ee:	18fb      	adds	r3, r7, r3
 80007f0:	2103      	movs	r1, #3
 80007f2:	400a      	ands	r2, r1
 80007f4:	701a      	strb	r2, [r3, #0]
		//enable SYSCFG clock and configure the correspondingEXTICR
		SYSCFG_EnableClock();
 80007f6:	4b79      	ldr	r3, [pc, #484]	; (80009dc <GPIO_PinInit+0x300>)
 80007f8:	699a      	ldr	r2, [r3, #24]
 80007fa:	4b78      	ldr	r3, [pc, #480]	; (80009dc <GPIO_PinInit+0x300>)
 80007fc:	2101      	movs	r1, #1
 80007fe:	430a      	orrs	r2, r1
 8000800:	619a      	str	r2, [r3, #24]
		SYSCFG->EXTICR[temp1] |= ((GPIO_PORT_TO_NUMBER(GPIO_PinHandle->pGPIO))<< (4*temp2) );
 8000802:	4a77      	ldr	r2, [pc, #476]	; (80009e0 <GPIO_PinInit+0x304>)
 8000804:	183b      	adds	r3, r7, r0
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	3302      	adds	r3, #2
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	589a      	ldr	r2, [r3, r2]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	6819      	ldr	r1, [r3, #0]
 8000812:	2390      	movs	r3, #144	; 0x90
 8000814:	05db      	lsls	r3, r3, #23
 8000816:	4299      	cmp	r1, r3
 8000818:	d024      	beq.n	8000864 <GPIO_PinInit+0x188>
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4971      	ldr	r1, [pc, #452]	; (80009e4 <GPIO_PinInit+0x308>)
 8000820:	428b      	cmp	r3, r1
 8000822:	d01d      	beq.n	8000860 <GPIO_PinInit+0x184>
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	496f      	ldr	r1, [pc, #444]	; (80009e8 <GPIO_PinInit+0x30c>)
 800082a:	428b      	cmp	r3, r1
 800082c:	d016      	beq.n	800085c <GPIO_PinInit+0x180>
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	496e      	ldr	r1, [pc, #440]	; (80009ec <GPIO_PinInit+0x310>)
 8000834:	428b      	cmp	r3, r1
 8000836:	d00f      	beq.n	8000858 <GPIO_PinInit+0x17c>
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	496c      	ldr	r1, [pc, #432]	; (80009f0 <GPIO_PinInit+0x314>)
 800083e:	428b      	cmp	r3, r1
 8000840:	d008      	beq.n	8000854 <GPIO_PinInit+0x178>
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	496b      	ldr	r1, [pc, #428]	; (80009f4 <GPIO_PinInit+0x318>)
 8000848:	428b      	cmp	r3, r1
 800084a:	d101      	bne.n	8000850 <GPIO_PinInit+0x174>
 800084c:	2305      	movs	r3, #5
 800084e:	e00a      	b.n	8000866 <GPIO_PinInit+0x18a>
 8000850:	2300      	movs	r3, #0
 8000852:	e008      	b.n	8000866 <GPIO_PinInit+0x18a>
 8000854:	2304      	movs	r3, #4
 8000856:	e006      	b.n	8000866 <GPIO_PinInit+0x18a>
 8000858:	2303      	movs	r3, #3
 800085a:	e004      	b.n	8000866 <GPIO_PinInit+0x18a>
 800085c:	2302      	movs	r3, #2
 800085e:	e002      	b.n	8000866 <GPIO_PinInit+0x18a>
 8000860:	2301      	movs	r3, #1
 8000862:	e000      	b.n	8000866 <GPIO_PinInit+0x18a>
 8000864:	2300      	movs	r3, #0
 8000866:	210e      	movs	r1, #14
 8000868:	1879      	adds	r1, r7, r1
 800086a:	7809      	ldrb	r1, [r1, #0]
 800086c:	0089      	lsls	r1, r1, #2
 800086e:	408b      	lsls	r3, r1
 8000870:	0018      	movs	r0, r3
 8000872:	495b      	ldr	r1, [pc, #364]	; (80009e0 <GPIO_PinInit+0x304>)
 8000874:	230f      	movs	r3, #15
 8000876:	18fb      	adds	r3, r7, r3
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	4302      	orrs	r2, r0
 800087c:	3302      	adds	r3, #2
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	505a      	str	r2, [r3, r1]

		//ENABLE EXTI interrupt by means of interrupt mask register
		EXTI->IMR |= (1<<GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000882:	4b55      	ldr	r3, [pc, #340]	; (80009d8 <GPIO_PinInit+0x2fc>)
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	791b      	ldrb	r3, [r3, #4]
 800088a:	0019      	movs	r1, r3
 800088c:	2301      	movs	r3, #1
 800088e:	408b      	lsls	r3, r1
 8000890:	0019      	movs	r1, r3
 8000892:	4b51      	ldr	r3, [pc, #324]	; (80009d8 <GPIO_PinInit+0x2fc>)
 8000894:	430a      	orrs	r2, r1
 8000896:	601a      	str	r2, [r3, #0]
		/*Check specific functions for the configuration on processor side: NVIC (nested vector interrupt controller)*/
	}

	//OUTPUT TYPE. TBD:don't do if !=output mode?
	// first,reset the related bit
	GPIO_PinHandle->pGPIO->OTYPER &= (~(1<<GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	685a      	ldr	r2, [r3, #4]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	791b      	ldrb	r3, [r3, #4]
 80008a2:	0019      	movs	r1, r3
 80008a4:	2301      	movs	r3, #1
 80008a6:	408b      	lsls	r3, r1
 80008a8:	43db      	mvns	r3, r3
 80008aa:	0019      	movs	r1, r3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	400a      	ands	r2, r1
 80008b2:	605a      	str	r2, [r3, #4]
	//now set
	GPIO_PinHandle->pGPIO->OTYPER |= (GPIO_PinHandle->GPIO_PinConfig.GPIO_PinOutType<<(GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	685a      	ldr	r2, [r3, #4]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	799b      	ldrb	r3, [r3, #6]
 80008be:	0019      	movs	r1, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	791b      	ldrb	r3, [r3, #4]
 80008c4:	4099      	lsls	r1, r3
 80008c6:	000b      	movs	r3, r1
 80008c8:	0019      	movs	r1, r3
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	430a      	orrs	r2, r1
 80008d0:	605a      	str	r2, [r3, #4]

	//OUTPUT SPEED. TBD:don't do if !=output mode?
	// first,reset the related bits
	GPIO_PinHandle->pGPIO->OSPEEDR &= (~(3<<(2*GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber)));
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	689a      	ldr	r2, [r3, #8]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	791b      	ldrb	r3, [r3, #4]
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	2103      	movs	r1, #3
 80008e0:	4099      	lsls	r1, r3
 80008e2:	000b      	movs	r3, r1
 80008e4:	43db      	mvns	r3, r3
 80008e6:	0019      	movs	r1, r3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	400a      	ands	r2, r1
 80008ee:	609a      	str	r2, [r3, #8]
	//now set
	GPIO_PinHandle->pGPIO->OSPEEDR |= (GPIO_PinHandle->GPIO_PinConfig.GPIO_PinOutSpeed<<(2*GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	689a      	ldr	r2, [r3, #8]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	79db      	ldrb	r3, [r3, #7]
 80008fa:	0019      	movs	r1, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	791b      	ldrb	r3, [r3, #4]
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	4099      	lsls	r1, r3
 8000904:	000b      	movs	r3, r1
 8000906:	0019      	movs	r1, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	430a      	orrs	r2, r1
 800090e:	609a      	str	r2, [r3, #8]

	//PULL UP/DOWN
	// first,reset the related bits
	GPIO_PinHandle->pGPIO->PUPDR &= (~(3<<(2*GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber)));
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	68da      	ldr	r2, [r3, #12]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	791b      	ldrb	r3, [r3, #4]
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	2103      	movs	r1, #3
 800091e:	4099      	lsls	r1, r3
 8000920:	000b      	movs	r3, r1
 8000922:	43db      	mvns	r3, r3
 8000924:	0019      	movs	r1, r3
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	400a      	ands	r2, r1
 800092c:	60da      	str	r2, [r3, #12]
	//now set
	GPIO_PinHandle->pGPIO->PUPDR |= (GPIO_PinHandle->GPIO_PinConfig.GPIO_PinPullUpDown<<(2*GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber));
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	68da      	ldr	r2, [r3, #12]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	7a1b      	ldrb	r3, [r3, #8]
 8000938:	0019      	movs	r1, r3
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	791b      	ldrb	r3, [r3, #4]
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	4099      	lsls	r1, r3
 8000942:	000b      	movs	r3, r1
 8000944:	0019      	movs	r1, r3
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	430a      	orrs	r2, r1
 800094c:	60da      	str	r2, [r3, #12]

	//ALTERNATE FUNCTION
	if (GPIO_PinHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_ALTFUN){
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	795b      	ldrb	r3, [r3, #5]
 8000952:	2b02      	cmp	r3, #2
 8000954:	d13b      	bne.n	80009ce <GPIO_PinInit+0x2f2>
		//as there are 2 registers, low is for pins 0-7 and high for 8-15.in our struct,AFR[2].We need to know where to actuate
		temp1 = GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber / 8 ; //ex: pin 7-->reg 0,byte=7(last);pin12 --> reg1, byte=4
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	791a      	ldrb	r2, [r3, #4]
 800095a:	240f      	movs	r4, #15
 800095c:	193b      	adds	r3, r7, r4
 800095e:	08d2      	lsrs	r2, r2, #3
 8000960:	701a      	strb	r2, [r3, #0]
		temp2 = GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	791a      	ldrb	r2, [r3, #4]
 8000966:	250e      	movs	r5, #14
 8000968:	197b      	adds	r3, r7, r5
 800096a:	2107      	movs	r1, #7
 800096c:	400a      	ands	r2, r1
 800096e:	701a      	strb	r2, [r3, #0]
		// first,reset the related bits. in this case, 4. ~1111 is ~0x0F
		GPIO_PinHandle->pGPIO->AFR[temp1] &= (~(0xF<<(4*temp2)));
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	193a      	adds	r2, r7, r4
 8000976:	7812      	ldrb	r2, [r2, #0]
 8000978:	3208      	adds	r2, #8
 800097a:	0092      	lsls	r2, r2, #2
 800097c:	58d1      	ldr	r1, [r2, r3]
 800097e:	197b      	adds	r3, r7, r5
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	220f      	movs	r2, #15
 8000986:	409a      	lsls	r2, r3
 8000988:	0013      	movs	r3, r2
 800098a:	43db      	mvns	r3, r3
 800098c:	0018      	movs	r0, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	193a      	adds	r2, r7, r4
 8000994:	7812      	ldrb	r2, [r2, #0]
 8000996:	4001      	ands	r1, r0
 8000998:	3208      	adds	r2, #8
 800099a:	0092      	lsls	r2, r2, #2
 800099c:	50d1      	str	r1, [r2, r3]
		//now set
		GPIO_PinHandle->pGPIO->AFR[temp1] |= (GPIO_PinHandle->GPIO_PinConfig.GPIO_PinAlterFunc<<(4*temp2));
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	193a      	adds	r2, r7, r4
 80009a4:	7812      	ldrb	r2, [r2, #0]
 80009a6:	3208      	adds	r2, #8
 80009a8:	0092      	lsls	r2, r2, #2
 80009aa:	58d1      	ldr	r1, [r2, r3]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	7a5b      	ldrb	r3, [r3, #9]
 80009b0:	001a      	movs	r2, r3
 80009b2:	197b      	adds	r3, r7, r5
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	409a      	lsls	r2, r3
 80009ba:	0013      	movs	r3, r2
 80009bc:	0018      	movs	r0, r3
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	193a      	adds	r2, r7, r4
 80009c4:	7812      	ldrb	r2, [r2, #0]
 80009c6:	4301      	orrs	r1, r0
 80009c8:	3208      	adds	r2, #8
 80009ca:	0092      	lsls	r2, r2, #2
 80009cc:	50d1      	str	r1, [r2, r3]
	}
}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	46bd      	mov	sp, r7
 80009d2:	b004      	add	sp, #16
 80009d4:	bdb0      	pop	{r4, r5, r7, pc}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	40010400 	.word	0x40010400
 80009dc:	40021000 	.word	0x40021000
 80009e0:	40010000 	.word	0x40010000
 80009e4:	48000400 	.word	0x48000400
 80009e8:	48000800 	.word	0x48000800
 80009ec:	48000c00 	.word	0x48000c00
 80009f0:	48001000 	.word	0x48001000
 80009f4:	48001400 	.word	0x48001400

080009f8 <GPIO_WritePin>:
uint16_t GPIO_ReadPort(GPIO_RegStruct_t *pGPIO){
	return (uint16_t)pGPIO->IDR;
}

/**************************Write to output (pin or port)************************/
void GPIO_WritePin(GPIO_RegStruct_t *pGPIO, uint8_t pin, uint8_t output){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	0008      	movs	r0, r1
 8000a02:	0011      	movs	r1, r2
 8000a04:	1cfb      	adds	r3, r7, #3
 8000a06:	1c02      	adds	r2, r0, #0
 8000a08:	701a      	strb	r2, [r3, #0]
 8000a0a:	1cbb      	adds	r3, r7, #2
 8000a0c:	1c0a      	adds	r2, r1, #0
 8000a0e:	701a      	strb	r2, [r3, #0]
	//do not do first clear the related bit and then set.we don't want to modify the output
	//I prefer to do an if statement than using intermediate variables to clear and set
	if (output==1){
 8000a10:	1cbb      	adds	r3, r7, #2
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d10a      	bne.n	8000a2e <GPIO_WritePin+0x36>
		pGPIO->ODR |= (1<<pin);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	695b      	ldr	r3, [r3, #20]
 8000a1c:	1cfa      	adds	r2, r7, #3
 8000a1e:	7812      	ldrb	r2, [r2, #0]
 8000a20:	2101      	movs	r1, #1
 8000a22:	4091      	lsls	r1, r2
 8000a24:	000a      	movs	r2, r1
 8000a26:	431a      	orrs	r2, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	615a      	str	r2, [r3, #20]
	}
	else { //0
		pGPIO->ODR &= (~(1<<pin));
	}

}
 8000a2c:	e00a      	b.n	8000a44 <GPIO_WritePin+0x4c>
		pGPIO->ODR &= (~(1<<pin));
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	695b      	ldr	r3, [r3, #20]
 8000a32:	1cfa      	adds	r2, r7, #3
 8000a34:	7812      	ldrb	r2, [r2, #0]
 8000a36:	2101      	movs	r1, #1
 8000a38:	4091      	lsls	r1, r2
 8000a3a:	000a      	movs	r2, r1
 8000a3c:	43d2      	mvns	r2, r2
 8000a3e:	401a      	ands	r2, r3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	615a      	str	r2, [r3, #20]
}
 8000a44:	46c0      	nop			; (mov r8, r8)
 8000a46:	46bd      	mov	sp, r7
 8000a48:	b002      	add	sp, #8
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <GPIO_IRQ_EnableDisable>:
	pGPIO->ODR ^= (1<<pin); //^ is XOR. 1^0=0;0^1=1;1^1=0;0^0=0. So x^1 = !x
}

/*************************NVIC functions for IRQ*****************************************/
/*Enable or disable an IRQ*/
void GPIO_IRQ_EnableDisable(uint8_t IRQ_Number, uint8_t EnableDisable){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	0002      	movs	r2, r0
 8000a54:	1dfb      	adds	r3, r7, #7
 8000a56:	701a      	strb	r2, [r3, #0]
 8000a58:	1dbb      	adds	r3, r7, #6
 8000a5a:	1c0a      	adds	r2, r1, #0
 8000a5c:	701a      	strb	r2, [r3, #0]
	if(EnableDisable == ENABLE){ //enable by means of ISER
 8000a5e:	1dbb      	adds	r3, r7, #6
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d10b      	bne.n	8000a7e <GPIO_IRQ_EnableDisable+0x32>
		*NVIC_ISER |= ( 1 << IRQ_Number);
 8000a66:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <GPIO_IRQ_EnableDisable+0x50>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	1dfb      	adds	r3, r7, #7
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2101      	movs	r1, #1
 8000a70:	4099      	lsls	r1, r3
 8000a72:	000b      	movs	r3, r1
 8000a74:	0019      	movs	r1, r3
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <GPIO_IRQ_EnableDisable+0x50>)
 8000a78:	430a      	orrs	r2, r1
 8000a7a:	601a      	str	r2, [r3, #0]
	}
	else { //disable by means of ICER
		*NVIC_ICER |= ( 1 << IRQ_Number);
	}

}
 8000a7c:	e00a      	b.n	8000a94 <GPIO_IRQ_EnableDisable+0x48>
		*NVIC_ICER |= ( 1 << IRQ_Number);
 8000a7e:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <GPIO_IRQ_EnableDisable+0x54>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	1dfb      	adds	r3, r7, #7
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	2101      	movs	r1, #1
 8000a88:	4099      	lsls	r1, r3
 8000a8a:	000b      	movs	r3, r1
 8000a8c:	0019      	movs	r1, r3
 8000a8e:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <GPIO_IRQ_EnableDisable+0x54>)
 8000a90:	430a      	orrs	r2, r1
 8000a92:	601a      	str	r2, [r3, #0]
}
 8000a94:	46c0      	nop			; (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	b002      	add	sp, #8
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	e000e100 	.word	0xe000e100
 8000aa0:	e000e180 	.word	0xe000e180

08000aa4 <GPIO_IRQ_Handling>:
	//Clear the block and set. Better if I use intermediate variables instead of modifying many times the IPR
	uint32_t tempIPR = ((*(NVIC_IPR_BASE + numberIPR))&~(0xFF<<blockIPR));
	tempIPR |= (IRQ_Priority<<(8*blockIPR+6)); //6 is because bits 0-5 are not editable, only bits 6-7 count.
	*(NVIC_IPR_BASE + numberIPR) = tempIPR;
}
void GPIO_IRQ_Handling(uint8_t pin){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	0002      	movs	r2, r0
 8000aac:	1dfb      	adds	r3, r7, #7
 8000aae:	701a      	strb	r2, [r3, #0]
	/*ISRs (handlers) are actually application specific and implement/override(weak) handlers defined in startup*/
	/*GPIO_IRQ_Handling will be called inside the ISR handler.*/
	//Clear the pending register of the EXTI(interrupt handling depends upon the peripheral).PR of processor is automatically cleared (I think)
	if ((EXTI->PR) & (1<<pin)){ //if PR[pin]==1
 8000ab0:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <GPIO_IRQ_Handling+0x3c>)
 8000ab2:	695b      	ldr	r3, [r3, #20]
 8000ab4:	1dfa      	adds	r2, r7, #7
 8000ab6:	7812      	ldrb	r2, [r2, #0]
 8000ab8:	2101      	movs	r1, #1
 8000aba:	4091      	lsls	r1, r2
 8000abc:	000a      	movs	r2, r1
 8000abe:	4013      	ands	r3, r2
 8000ac0:	d00a      	beq.n	8000ad8 <GPIO_IRQ_Handling+0x34>
		(EXTI->PR) |= (1<<pin); //write 1 to clear the pending register
 8000ac2:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <GPIO_IRQ_Handling+0x3c>)
 8000ac4:	695a      	ldr	r2, [r3, #20]
 8000ac6:	1dfb      	adds	r3, r7, #7
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2101      	movs	r1, #1
 8000acc:	4099      	lsls	r1, r3
 8000ace:	000b      	movs	r3, r1
 8000ad0:	0019      	movs	r1, r3
 8000ad2:	4b03      	ldr	r3, [pc, #12]	; (8000ae0 <GPIO_IRQ_Handling+0x3c>)
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	615a      	str	r2, [r3, #20]
	}

}
 8000ad8:	46c0      	nop			; (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	b002      	add	sp, #8
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40010400 	.word	0x40010400

08000ae4 <SPI_ClockControl>:
static void SPI_TXE_handler(SPI_Handle_t *pSPIhandle);
static void SPI_RXNE_handler(SPI_Handle_t *pSPIhandle);
static void SPI_OVR_handler(SPI_Handle_t *pSPIhandle);

/*Enable or disable SPI peripheral clock*/
void SPI_ClockControl(SPI_Handle_t *pSPIhandle, uint8_t EnableDisable){
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	000a      	movs	r2, r1
 8000aee:	1cfb      	adds	r3, r7, #3
 8000af0:	701a      	strb	r2, [r3, #0]
	if (EnableDisable == ENABLE) {
 8000af2:	1cfb      	adds	r3, r7, #3
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d119      	bne.n	8000b2e <SPI_ClockControl+0x4a>
		if (pSPIhandle->pSPI == SPI1_I2S1){
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a19      	ldr	r2, [pc, #100]	; (8000b64 <SPI_ClockControl+0x80>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d107      	bne.n	8000b14 <SPI_ClockControl+0x30>
			SPI1_I2S1_EnableClock();
 8000b04:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <SPI_ClockControl+0x84>)
 8000b06:	699a      	ldr	r2, [r3, #24]
 8000b08:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <SPI_ClockControl+0x84>)
 8000b0a:	2180      	movs	r1, #128	; 0x80
 8000b0c:	0149      	lsls	r1, r1, #5
 8000b0e:	430a      	orrs	r2, r1
 8000b10:	619a      	str	r2, [r3, #24]
		}
		else if (pSPIhandle->pSPI == SPI2){
			SPI2_DisableClock();
		}
	}
}
 8000b12:	e023      	b.n	8000b5c <SPI_ClockControl+0x78>
		else if (pSPIhandle->pSPI == SPI2){
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a14      	ldr	r2, [pc, #80]	; (8000b6c <SPI_ClockControl+0x88>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d11e      	bne.n	8000b5c <SPI_ClockControl+0x78>
			SPI2_EnableClock();
 8000b1e:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <SPI_ClockControl+0x84>)
 8000b20:	69da      	ldr	r2, [r3, #28]
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <SPI_ClockControl+0x84>)
 8000b24:	2180      	movs	r1, #128	; 0x80
 8000b26:	01c9      	lsls	r1, r1, #7
 8000b28:	430a      	orrs	r2, r1
 8000b2a:	61da      	str	r2, [r3, #28]
}
 8000b2c:	e016      	b.n	8000b5c <SPI_ClockControl+0x78>
		if (pSPIhandle->pSPI == SPI1_I2S1){
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a0c      	ldr	r2, [pc, #48]	; (8000b64 <SPI_ClockControl+0x80>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d106      	bne.n	8000b46 <SPI_ClockControl+0x62>
			SPI1_I2S1_DisableClock();
 8000b38:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <SPI_ClockControl+0x84>)
 8000b3a:	699a      	ldr	r2, [r3, #24]
 8000b3c:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <SPI_ClockControl+0x84>)
 8000b3e:	490c      	ldr	r1, [pc, #48]	; (8000b70 <SPI_ClockControl+0x8c>)
 8000b40:	400a      	ands	r2, r1
 8000b42:	619a      	str	r2, [r3, #24]
}
 8000b44:	e00a      	b.n	8000b5c <SPI_ClockControl+0x78>
		else if (pSPIhandle->pSPI == SPI2){
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a08      	ldr	r2, [pc, #32]	; (8000b6c <SPI_ClockControl+0x88>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d105      	bne.n	8000b5c <SPI_ClockControl+0x78>
			SPI2_DisableClock();
 8000b50:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <SPI_ClockControl+0x84>)
 8000b52:	69da      	ldr	r2, [r3, #28]
 8000b54:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <SPI_ClockControl+0x84>)
 8000b56:	4907      	ldr	r1, [pc, #28]	; (8000b74 <SPI_ClockControl+0x90>)
 8000b58:	400a      	ands	r2, r1
 8000b5a:	61da      	str	r2, [r3, #28]
}
 8000b5c:	46c0      	nop			; (mov r8, r8)
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	b002      	add	sp, #8
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40013000 	.word	0x40013000
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	40003800 	.word	0x40003800
 8000b70:	ffffefff 	.word	0xffffefff
 8000b74:	ffffbfff 	.word	0xffffbfff

08000b78 <SPI_Init>:

/*SPI initialization, which does not mean to enable SPI (which is done through SPI_EnableDisable) */
void SPI_Init(SPI_Handle_t *pSPIhandle){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]

	SPI_ClockControl(pSPIhandle,ENABLE); //enable SPI peripheral clock
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2101      	movs	r1, #1
 8000b84:	0018      	movs	r0, r3
 8000b86:	f7ff ffad 	bl	8000ae4 <SPI_ClockControl>
	/*Configure CR1*/
	//first,CR1 can be reset completely as it is not related to other parts (it might be reset with memset in the app,too)
	pSPIhandle->pSPI->SPI_CR1 = 0;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]

	//master/slave
	pSPIhandle->pSPI->SPI_CR1 |= ((pSPIhandle->SPI_Config.SPI_Mode)<<SPI_CR1_MSTR); //bit MSTR set
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	791b      	ldrb	r3, [r3, #4]
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	0019      	movs	r1, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	601a      	str	r2, [r3, #0]

	//mode: full duplex/half duplex/simplex.Bits:BIDIMODE (full/half)+BIDIOE (output enabled)+RXONLY(1 if BIDIOE disabled)
	if (pSPIhandle->SPI_Config.SPI_Mode == SPI_FULLDUPLEX){
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	791b      	ldrb	r3, [r3, #4]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d108      	bne.n	8000bc2 <SPI_Init+0x4a>
		pSPIhandle->pSPI->SPI_CR1 &= ~(1<<SPI_CR1_BIDIMODE); //not necessary to set 0 because SPI_CR1 had been initialized to 0,but makes code clearer
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	493f      	ldr	r1, [pc, #252]	; (8000cb8 <SPI_Init+0x140>)
 8000bbc:	400a      	ands	r2, r1
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	e02a      	b.n	8000c18 <SPI_Init+0xa0>
	}
	else if (pSPIhandle->SPI_Config.SPI_Mode == SPI_HALFDUPLEX){
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	791b      	ldrb	r3, [r3, #4]
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	d109      	bne.n	8000bde <SPI_Init+0x66>
		pSPIhandle->pSPI->SPI_CR1 |= (1<<SPI_CR1_BIDIMODE);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2180      	movs	r1, #128	; 0x80
 8000bd6:	0209      	lsls	r1, r1, #8
 8000bd8:	430a      	orrs	r2, r1
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	e01c      	b.n	8000c18 <SPI_Init+0xa0>
	}
	else if (pSPIhandle->SPI_Config.SPI_Mode == SPI_CR1_RXONLY){
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	791b      	ldrb	r3, [r3, #4]
 8000be2:	2b0a      	cmp	r3, #10
 8000be4:	d118      	bne.n	8000c18 <SPI_Init+0xa0>
		//acc to datasheet, Keep BIDIMODE bit clear when receive only mode is active.
		pSPIhandle->pSPI->SPI_CR1 &= ~(1<<SPI_CR1_BIDIMODE);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4931      	ldr	r1, [pc, #196]	; (8000cb8 <SPI_Init+0x140>)
 8000bf2:	400a      	ands	r2, r1
 8000bf4:	601a      	str	r2, [r3, #0]
		pSPIhandle->pSPI->SPI_CR1 &= ~(1<<SPI_CR1_BIDIOE);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	492e      	ldr	r1, [pc, #184]	; (8000cbc <SPI_Init+0x144>)
 8000c02:	400a      	ands	r2, r1
 8000c04:	601a      	str	r2, [r3, #0]
		pSPIhandle->pSPI->SPI_CR1 |= (1<<SPI_CR1_RXONLY);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2180      	movs	r1, #128	; 0x80
 8000c12:	00c9      	lsls	r1, r1, #3
 8000c14:	430a      	orrs	r2, r1
 8000c16:	601a      	str	r2, [r3, #0]
	}
	//simplex TX is actually full duplex

	//Phase
	pSPIhandle->pSPI->SPI_CR1 |= (pSPIhandle->SPI_Config.SPI_Phase<<SPI_CR1_CPHA);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	7a9b      	ldrb	r3, [r3, #10]
 8000c22:	0019      	movs	r1, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	601a      	str	r2, [r3, #0]

	//Polarity
	pSPIhandle->pSPI->SPI_CR1 |= (pSPIhandle->SPI_Config.SPI_Pol<<SPI_CR1_CPOL);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	7a5b      	ldrb	r3, [r3, #9]
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	0019      	movs	r1, r3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	601a      	str	r2, [r3, #0]

	//software slave management
	pSPIhandle->pSPI->SPI_CR1 |= (pSPIhandle->SPI_Config.SPI_SWslave<<SPI_CR1_SSM);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	7a1b      	ldrb	r3, [r3, #8]
 8000c4c:	025b      	lsls	r3, r3, #9
 8000c4e:	0019      	movs	r1, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	430a      	orrs	r2, r1
 8000c56:	601a      	str	r2, [r3, #0]

	//Speed (baudrate)
	pSPIhandle->pSPI->SPI_CR1 |= (pSPIhandle->SPI_Config.SPI_Speed<<SPI_CR1_BR);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	795b      	ldrb	r3, [r3, #5]
 8000c62:	00db      	lsls	r3, r3, #3
 8000c64:	0019      	movs	r1, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	430a      	orrs	r2, r1
 8000c6c:	601a      	str	r2, [r3, #0]

	/*CR2. Not reset the whole CR2 to 0 as its bits can be modified from other parts of the code (enable interrupts)*/
	//Size --> this is in CR2!! First reset the data size (bits8-11) and then set it
	pSPIhandle->pSPI->SPI_CR2 &= (~(15<<SPI_CR2_DS)); //I had put pSPIhandle->pSPI->SPI_CR2 &= (~(7<<SPI_CR2_DS)). Why 7?
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	685a      	ldr	r2, [r3, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4911      	ldr	r1, [pc, #68]	; (8000cc0 <SPI_Init+0x148>)
 8000c7a:	400a      	ands	r2, r1
 8000c7c:	605a      	str	r2, [r3, #4]
	pSPIhandle->pSPI->SPI_CR2 |= (pSPIhandle->SPI_Config.SPI_DataSize <<SPI_CR2_DS);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	685a      	ldr	r2, [r3, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	79db      	ldrb	r3, [r3, #7]
 8000c88:	021b      	lsls	r3, r3, #8
 8000c8a:	0019      	movs	r1, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	430a      	orrs	r2, r1
 8000c92:	605a      	str	r2, [r3, #4]

	//to avoid data packing, set FIFO threshold reception to 1/4 (8-bit). Read data packing section
	if (pSPIhandle->SPI_Config.SPI_DataSize == SPI_8BIT){
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	79db      	ldrb	r3, [r3, #7]
 8000c98:	2b07      	cmp	r3, #7
 8000c9a:	d108      	bne.n	8000cae <SPI_Init+0x136>
		pSPIhandle->pSPI->SPI_CR2 |= (1<<SPI_CR2_FRXTH);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	685a      	ldr	r2, [r3, #4]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	0149      	lsls	r1, r1, #5
 8000caa:	430a      	orrs	r2, r1
 8000cac:	605a      	str	r2, [r3, #4]
	}
}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	b002      	add	sp, #8
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	ffff7fff 	.word	0xffff7fff
 8000cbc:	ffffbfff 	.word	0xffffbfff
 8000cc0:	fffff0ff 	.word	0xfffff0ff

08000cc4 <SPI_EnableDisable>:

/*SPI control: enable/disable --> bit 6 CR1 */
void SPI_EnableDisable(SPI_Handle_t *pSPIhandle, uint8_t EnableDisable){
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	000a      	movs	r2, r1
 8000cce:	1cfb      	adds	r3, r7, #3
 8000cd0:	701a      	strb	r2, [r3, #0]
	//instead of reset and set bit 6, I prefer to directly set the value
	if (EnableDisable == ENABLE){
 8000cd2:	1cfb      	adds	r3, r7, #3
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d108      	bne.n	8000cec <SPI_EnableDisable+0x28>
		pSPIhandle->pSPI->SPI_CR1 |= (1<<SPI_CR1_SPE);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2140      	movs	r1, #64	; 0x40
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	601a      	str	r2, [r3, #0]
	}
	else { //0
		pSPIhandle->pSPI->SPI_CR1 &= (~(1<<SPI_CR1_SPE));
	}
}
 8000cea:	e007      	b.n	8000cfc <SPI_EnableDisable+0x38>
		pSPIhandle->pSPI->SPI_CR1 &= (~(1<<SPI_CR1_SPE));
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2140      	movs	r1, #64	; 0x40
 8000cf8:	438a      	bics	r2, r1
 8000cfa:	601a      	str	r2, [r3, #0]
}
 8000cfc:	46c0      	nop			; (mov r8, r8)
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	b002      	add	sp, #8
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <SPI_SSOE>:
		pSPIhandle->pSPI->SPI_CR1 &= (~(1<<SPI_CR1_SSI));
	}
}

/*SSOE: SS output enable*/
void SPI_SSOE(SPI_Handle_t *pSPIhandle, uint8_t EnableDisable){
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	000a      	movs	r2, r1
 8000d0e:	1cfb      	adds	r3, r7, #3
 8000d10:	701a      	strb	r2, [r3, #0]
	if (EnableDisable == ENABLE){
 8000d12:	1cfb      	adds	r3, r7, #3
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d108      	bne.n	8000d2c <SPI_SSOE+0x28>
		pSPIhandle->pSPI->SPI_CR2 |= (1<<SPI_CR2_SSOE);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	685a      	ldr	r2, [r3, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2104      	movs	r1, #4
 8000d26:	430a      	orrs	r2, r1
 8000d28:	605a      	str	r2, [r3, #4]
	}
	else { //0
		pSPIhandle->pSPI->SPI_CR2 &= (~(1<<SPI_CR2_SSOE));
	}
}
 8000d2a:	e007      	b.n	8000d3c <SPI_SSOE+0x38>
		pSPIhandle->pSPI->SPI_CR2 &= (~(1<<SPI_CR2_SSOE));
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	685a      	ldr	r2, [r3, #4]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2104      	movs	r1, #4
 8000d38:	438a      	bics	r2, r1
 8000d3a:	605a      	str	r2, [r3, #4]
}
 8000d3c:	46c0      	nop			; (mov r8, r8)
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	b002      	add	sp, #8
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <SPI_IRQ_EnableDisable>:

}


/*IRQ Configuration and ISR handling*/
void SPI_IRQ_EnableDisable(uint8_t IRQ_Number, uint8_t EnableDisable){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	0002      	movs	r2, r0
 8000d4c:	1dfb      	adds	r3, r7, #7
 8000d4e:	701a      	strb	r2, [r3, #0]
 8000d50:	1dbb      	adds	r3, r7, #6
 8000d52:	1c0a      	adds	r2, r1, #0
 8000d54:	701a      	strb	r2, [r3, #0]
	if(EnableDisable == ENABLE){ //enable by means of ISER
 8000d56:	1dbb      	adds	r3, r7, #6
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d10b      	bne.n	8000d76 <SPI_IRQ_EnableDisable+0x32>
		*NVIC_ISER |= ( 1 << IRQ_Number);
 8000d5e:	4b0d      	ldr	r3, [pc, #52]	; (8000d94 <SPI_IRQ_EnableDisable+0x50>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	1dfb      	adds	r3, r7, #7
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2101      	movs	r1, #1
 8000d68:	4099      	lsls	r1, r3
 8000d6a:	000b      	movs	r3, r1
 8000d6c:	0019      	movs	r1, r3
 8000d6e:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <SPI_IRQ_EnableDisable+0x50>)
 8000d70:	430a      	orrs	r2, r1
 8000d72:	601a      	str	r2, [r3, #0]
	}
	else { //disable by means of ICER
		*NVIC_ICER |= ( 1 << IRQ_Number);
	}
}
 8000d74:	e00a      	b.n	8000d8c <SPI_IRQ_EnableDisable+0x48>
		*NVIC_ICER |= ( 1 << IRQ_Number);
 8000d76:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <SPI_IRQ_EnableDisable+0x54>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	1dfb      	adds	r3, r7, #7
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2101      	movs	r1, #1
 8000d80:	4099      	lsls	r1, r3
 8000d82:	000b      	movs	r3, r1
 8000d84:	0019      	movs	r1, r3
 8000d86:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <SPI_IRQ_EnableDisable+0x54>)
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	601a      	str	r2, [r3, #0]
}
 8000d8c:	46c0      	nop			; (mov r8, r8)
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	b002      	add	sp, #8
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	e000e100 	.word	0xe000e100
 8000d98:	e000e180 	.word	0xe000e180

08000d9c <SPI_IRQ_Handling>:
	uint32_t tempIPR = ((*(NVIC_IPR_BASE + numberIPR))&~(0xFF<<blockIPR));
	tempIPR |= (IRQ_Priority<<(8*blockIPR+6)); //6 is because bits 0-5 are not editable, only bits 6-7 count.
	*(NVIC_IPR_BASE + numberIPR) = tempIPR;
}

void SPI_IRQ_Handling(SPI_Handle_t *pSPIhandle){
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
	//to handle the possible interrupts related to SPI:TXE,RXNE,MODF,OVR,FRE,CRCERR
	//Call the handler related to the interrupt if register is true as long as it is enabled
	//TXE TX empty (enable control:TXEIE).if set, TX buffer empty so it can be loaded.
	if ( (pSPIhandle->pSPI->SPI_CR2 & (1<<SPI_CR2_TXEIE)) && (pSPIhandle->pSPI->SPI_SR & (1<<SPI_SR_TXE)) ){ //could use SPI_GetFlagStatus
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	2280      	movs	r2, #128	; 0x80
 8000dac:	4013      	ands	r3, r2
 8000dae:	d009      	beq.n	8000dc4 <SPI_IRQ_Handling+0x28>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	2202      	movs	r2, #2
 8000db8:	4013      	ands	r3, r2
 8000dba:	d003      	beq.n	8000dc4 <SPI_IRQ_Handling+0x28>
		SPI_TXE_handler(pSPIhandle);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f000 f824 	bl	8000e0c <SPI_TXE_handler>
	}

	//RXNE RX not empty (enable control:RXNEIE). if set, RX not empty so it has data to be read.
	if ( (pSPIhandle->pSPI->SPI_CR2 & (1<<SPI_CR2_RXNEIE)) && (pSPIhandle->pSPI->SPI_SR & (1<<SPI_SR_RXNE)) ){ //could use SPI_GetFlagStatus
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	2240      	movs	r2, #64	; 0x40
 8000dcc:	4013      	ands	r3, r2
 8000dce:	d009      	beq.n	8000de4 <SPI_IRQ_Handling+0x48>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	4013      	ands	r3, r2
 8000dda:	d003      	beq.n	8000de4 <SPI_IRQ_Handling+0x48>
		SPI_RXNE_handler(pSPIhandle);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	0018      	movs	r0, r3
 8000de0:	f000 f85d 	bl	8000e9e <SPI_RXNE_handler>
	MODF bit is set when the SS pin goes high during transmission.*/
	//To be implemented if someday I use multimaster

	/*OVR. Overrun. (enable control:ERRIE)occurs when data is received by a master or slave and the RXFIFO has not enough space to store
	 this received data.*/
	if ( (pSPIhandle->pSPI->SPI_CR2 & (1<<SPI_CR2_ERRIE)) && (pSPIhandle->pSPI->SPI_SR & (1<<SPI_SR_OVR)) ){ //could use SPI_GetFlagStatus
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	2220      	movs	r2, #32
 8000dec:	4013      	ands	r3, r2
 8000dee:	d009      	beq.n	8000e04 <SPI_IRQ_Handling+0x68>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	2240      	movs	r2, #64	; 0x40
 8000df8:	4013      	ands	r3, r2
 8000dfa:	d003      	beq.n	8000e04 <SPI_IRQ_Handling+0x68>
		SPI_OVR_handler(pSPIhandle);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f000 f898 	bl	8000f34 <SPI_OVR_handler>
	//FRE. TI frame format error.
	//To be implemented when I use TI mode (it seems that TI and Motorola modes are related to SSPFSSOUT output, which many devices don't use).

	//CRCERR
	//To be implemented
}
 8000e04:	46c0      	nop			; (mov r8, r8)
 8000e06:	46bd      	mov	sp, r7
 8000e08:	b002      	add	sp, #8
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <SPI_TXE_handler>:

/*interrupt handlers*/
static void SPI_TXE_handler(SPI_Handle_t *pSPIhandle){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
	/*When transmission is enabled, a sequence begins and continues while any data is present in the TXFIFO of the master.*/
	//Let's limit it to 8 and 16 bits frame. Every char is 1 byte
	//Load the data into DR, move the pointer (buffer) and decrease length
	if (pSPIhandle->SPI_Config.SPI_DataSize == SPI_8BIT){
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	79db      	ldrb	r3, [r3, #7]
 8000e18:	2b07      	cmp	r3, #7
 8000e1a:	d111      	bne.n	8000e40 <SPI_TXE_handler+0x34>
		/*this sends 2 bytes <--pSPIhandle->pSPI->SPI_DR = *(pSPIhandle->SPI_Comm.TX_buffer);*/
		//data packing happens. it transmits 16-bit unless we cast into uint8_t
		*((uint8_t*)&pSPIhandle->pSPI->SPI_DR) = *(pSPIhandle->SPI_Comm.TX_buffer);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	691a      	ldr	r2, [r3, #16]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	330c      	adds	r3, #12
 8000e26:	7812      	ldrb	r2, [r2, #0]
 8000e28:	701a      	strb	r2, [r3, #0]
		pSPIhandle->SPI_Comm.TX_buffer++;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	691b      	ldr	r3, [r3, #16]
 8000e2e:	1c5a      	adds	r2, r3, #1
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	611a      	str	r2, [r3, #16]
		pSPIhandle->SPI_Comm.TX_length--;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	1e5a      	subs	r2, r3, #1
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	e013      	b.n	8000e68 <SPI_TXE_handler+0x5c>
	}
	else if (pSPIhandle->SPI_Config.SPI_DataSize == SPI_16BIT){
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	79db      	ldrb	r3, [r3, #7]
 8000e44:	2b0f      	cmp	r3, #15
 8000e46:	d10f      	bne.n	8000e68 <SPI_TXE_handler+0x5c>
		//TX_buffer is defined as 8-bit.additional treatment is necessary
		pSPIhandle->pSPI->SPI_DR = *((uint16_t*)(pSPIhandle->SPI_Comm.TX_buffer));
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	691b      	ldr	r3, [r3, #16]
 8000e4c:	881a      	ldrh	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	60da      	str	r2, [r3, #12]
		pSPIhandle->SPI_Comm.TX_buffer+=2;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	691b      	ldr	r3, [r3, #16]
 8000e58:	1c9a      	adds	r2, r3, #2
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	611a      	str	r2, [r3, #16]
		pSPIhandle->SPI_Comm.TX_length-=2;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	1e9a      	subs	r2, r3, #2
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	60da      	str	r2, [r3, #12]
	}
	//(I don't use else because DS allows more lengths)

	//Close transmission when no more bytes in the buffer
	if (pSPIhandle->SPI_Comm.TX_length == 0){
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d112      	bne.n	8000e96 <SPI_TXE_handler+0x8a>
		pSPIhandle->pSPI->SPI_CR2 &= (~( 1 << SPI_CR2_TXEIE)); //disable the TX interrupt.It will be enabled by SPI_Send in the next sending
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	685a      	ldr	r2, [r3, #4]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2180      	movs	r1, #128	; 0x80
 8000e7c:	438a      	bics	r2, r1
 8000e7e:	605a      	str	r2, [r3, #4]
		pSPIhandle->SPI_Comm.TX_buffer = NULL; //null pointer
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2200      	movs	r2, #0
 8000e84:	611a      	str	r2, [r3, #16]
		pSPIhandle->SPI_Comm.TX_state = SPI_READY; //important for loops in main!
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	751a      	strb	r2, [r3, #20]
		SPI_App_Callback(pSPIhandle,SPI_TX_FINISHED); //Inform the main application
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2100      	movs	r1, #0
 8000e90:	0018      	movs	r0, r3
 8000e92:	f000 f8a8 	bl	8000fe6 <SPI_App_Callback>
	}
}
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	b002      	add	sp, #8
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <SPI_RXNE_handler>:

static void SPI_RXNE_handler(SPI_Handle_t *pSPIhandle){
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
	//Let's limit it to 8 and 16 bits frame. Every char is 1 byte
	//Load the data into DR, move the pointer (buffer) and decrease length
	if (pSPIhandle->SPI_Config.SPI_DataSize == SPI_8BIT){
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	79db      	ldrb	r3, [r3, #7]
 8000eaa:	2b07      	cmp	r3, #7
 8000eac:	d111      	bne.n	8000ed2 <SPI_RXNE_handler+0x34>
		*(pSPIhandle->SPI_Comm.RX_buffer) = ((uint8_t)pSPIhandle->pSPI->SPI_DR) ;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	68da      	ldr	r2, [r3, #12]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	69db      	ldr	r3, [r3, #28]
 8000eb8:	b2d2      	uxtb	r2, r2
 8000eba:	701a      	strb	r2, [r3, #0]
		pSPIhandle->SPI_Comm.RX_buffer++;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	69db      	ldr	r3, [r3, #28]
 8000ec0:	1c5a      	adds	r2, r3, #1
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	61da      	str	r2, [r3, #28]
		pSPIhandle->SPI_Comm.RX_length--;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	699b      	ldr	r3, [r3, #24]
 8000eca:	1e5a      	subs	r2, r3, #1
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	619a      	str	r2, [r3, #24]
 8000ed0:	e014      	b.n	8000efc <SPI_RXNE_handler+0x5e>
	}
	else if (pSPIhandle->SPI_Config.SPI_DataSize == SPI_16BIT){
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	79db      	ldrb	r3, [r3, #7]
 8000ed6:	2b0f      	cmp	r3, #15
 8000ed8:	d110      	bne.n	8000efc <SPI_RXNE_handler+0x5e>
		//RX_buffer is defined as 8-bit.additional treatment is necessary
		*((uint16_t*)pSPIhandle->SPI_Comm.RX_buffer) = ((uint16_t)pSPIhandle->pSPI->SPI_DR) ;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	68da      	ldr	r2, [r3, #12]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	69db      	ldr	r3, [r3, #28]
 8000ee4:	b292      	uxth	r2, r2
 8000ee6:	801a      	strh	r2, [r3, #0]
		pSPIhandle->SPI_Comm.RX_buffer+=2;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	69db      	ldr	r3, [r3, #28]
 8000eec:	1c9a      	adds	r2, r3, #2
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	61da      	str	r2, [r3, #28]
		pSPIhandle->SPI_Comm.RX_length-=2;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	699b      	ldr	r3, [r3, #24]
 8000ef6:	1e9a      	subs	r2, r3, #2
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	619a      	str	r2, [r3, #24]
	}
	//(I don't use else because DS allows more lengths)

	//Close reception when no more bytes in the buffer
	if (pSPIhandle->SPI_Comm.RX_length == 0){
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d113      	bne.n	8000f2c <SPI_RXNE_handler+0x8e>
		pSPIhandle->pSPI->SPI_CR2 &= (~( 1 << SPI_CR2_RXNEIE)); //disable the RX interrupt.It will be enabled by SPI_Receive in the next sending
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	685a      	ldr	r2, [r3, #4]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2140      	movs	r1, #64	; 0x40
 8000f10:	438a      	bics	r2, r1
 8000f12:	605a      	str	r2, [r3, #4]
		pSPIhandle->SPI_Comm.RX_buffer = NULL; //null pointer
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2200      	movs	r2, #0
 8000f18:	61da      	str	r2, [r3, #28]
		pSPIhandle->SPI_Comm.RX_state = SPI_READY; //important for loops in main!
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2220      	movs	r2, #32
 8000f1e:	2100      	movs	r1, #0
 8000f20:	5499      	strb	r1, [r3, r2]
		SPI_App_Callback(pSPIhandle,SPI_RX_FINISHED); //Inform the main application
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2101      	movs	r1, #1
 8000f26:	0018      	movs	r0, r3
 8000f28:	f000 f85d 	bl	8000fe6 <SPI_App_Callback>
	}
}
 8000f2c:	46c0      	nop			; (mov r8, r8)
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	b002      	add	sp, #8
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <SPI_OVR_handler>:

static void SPI_OVR_handler(SPI_Handle_t *pSPIhandle){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	//Clearing OVR bit is done by a read access to the SPI_DR register followed by a read access to the SPI_SR register
	//if the error happens during transmission,as this error is related to RXFIFO,we won't clear it here. If so, the app will do it
	if (pSPIhandle->SPI_Comm.TX_state != SPI_DURING_TX){ //clear
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	7d1b      	ldrb	r3, [r3, #20]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d007      	beq.n	8000f54 <SPI_OVR_handler+0x20>
		uint32_t reading; //maybe with uint8_t enough to read DR and SR?
		reading = pSPIhandle->pSPI->SPI_DR;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	60fb      	str	r3, [r7, #12]
		reading = pSPIhandle->pSPI->SPI_SR;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	60fb      	str	r3, [r7, #12]
	}
	//inform the main application
	SPI_App_Callback(pSPIhandle,SPI_OVR_EVENT);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2102      	movs	r1, #2
 8000f58:	0018      	movs	r0, r3
 8000f5a:	f000 f844 	bl	8000fe6 <SPI_App_Callback>
}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	46bd      	mov	sp, r7
 8000f62:	b004      	add	sp, #16
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <SPI_Send>:

/*Send or read data (through interrupts, not polling). Master always starts communication */
void SPI_Send(SPI_Handle_t *pSPIhandle, uint8_t *pTXbuffer, uint32_t length){
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b084      	sub	sp, #16
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	60f8      	str	r0, [r7, #12]
 8000f6e:	60b9      	str	r1, [r7, #8]
 8000f70:	607a      	str	r2, [r7, #4]
	//set TX state as busy (SPI_DURING_TX) and configure the transmission
	if (pSPIhandle->SPI_Comm.TX_state != SPI_DURING_TX){
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	7d1b      	ldrb	r3, [r3, #20]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d010      	beq.n	8000f9c <SPI_Send+0x36>
		pSPIhandle->SPI_Comm.TX_state = SPI_DURING_TX;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	751a      	strb	r2, [r3, #20]
		pSPIhandle->SPI_Comm.TX_buffer = pTXbuffer;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	68ba      	ldr	r2, [r7, #8]
 8000f84:	611a      	str	r2, [r3, #16]
		pSPIhandle->SPI_Comm.TX_length = length;
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	60da      	str	r2, [r3, #12]
		pSPIhandle->pSPI->SPI_CR2 |= (1 << SPI_CR2_TXEIE);//enable the TX interrupt to start transmission
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	685a      	ldr	r2, [r3, #4]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2180      	movs	r1, #128	; 0x80
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	605a      	str	r2, [r3, #4]
	}
}
 8000f9c:	46c0      	nop			; (mov r8, r8)
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	b004      	add	sp, #16
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <SPI_Read>:
void SPI_Read(SPI_Handle_t *pSPIhandle, volatile uint8_t *pRXbuffer, uint32_t length){
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
	//set RX state as busy (SPI_DURING_RX) and configure the reading process (DR fetches from RX buffer).
	if (pSPIhandle->SPI_Comm.RX_state != SPI_DURING_RX){
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2220      	movs	r2, #32
 8000fb4:	5c9b      	ldrb	r3, [r3, r2]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d011      	beq.n	8000fde <SPI_Read+0x3a>
		pSPIhandle->SPI_Comm.RX_state = SPI_DURING_RX;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	2220      	movs	r2, #32
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	5499      	strb	r1, [r3, r2]
		pSPIhandle->SPI_Comm.RX_buffer = pRXbuffer;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	68ba      	ldr	r2, [r7, #8]
 8000fc6:	61da      	str	r2, [r3, #28]
		pSPIhandle->SPI_Comm.RX_length = length;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	619a      	str	r2, [r3, #24]
		pSPIhandle->pSPI->SPI_CR2 |= (1 << SPI_CR2_RXNEIE);//enable the RX interrupt to start reception
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	685a      	ldr	r2, [r3, #4]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2140      	movs	r1, #64	; 0x40
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	605a      	str	r2, [r3, #4]
	}
}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	b004      	add	sp, #16
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <SPI_App_Callback>:

/*Callback to application */
__attribute__((weak)) void SPI_App_Callback(SPI_Handle_t *pSPIhandle,uint8_t Event){
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
 8000fee:	000a      	movs	r2, r1
 8000ff0:	1cfb      	adds	r3, r7, #3
 8000ff2:	701a      	strb	r2, [r3, #0]
	//This function will be implemented in every particular application. Thus, the weak attribute
}
 8000ff4:	46c0      	nop			; (mov r8, r8)
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	b002      	add	sp, #8
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <__libc_init_array>:
 8000ffc:	b570      	push	{r4, r5, r6, lr}
 8000ffe:	2600      	movs	r6, #0
 8001000:	4d0c      	ldr	r5, [pc, #48]	; (8001034 <__libc_init_array+0x38>)
 8001002:	4c0d      	ldr	r4, [pc, #52]	; (8001038 <__libc_init_array+0x3c>)
 8001004:	1b64      	subs	r4, r4, r5
 8001006:	10a4      	asrs	r4, r4, #2
 8001008:	42a6      	cmp	r6, r4
 800100a:	d109      	bne.n	8001020 <__libc_init_array+0x24>
 800100c:	2600      	movs	r6, #0
 800100e:	f000 f821 	bl	8001054 <_init>
 8001012:	4d0a      	ldr	r5, [pc, #40]	; (800103c <__libc_init_array+0x40>)
 8001014:	4c0a      	ldr	r4, [pc, #40]	; (8001040 <__libc_init_array+0x44>)
 8001016:	1b64      	subs	r4, r4, r5
 8001018:	10a4      	asrs	r4, r4, #2
 800101a:	42a6      	cmp	r6, r4
 800101c:	d105      	bne.n	800102a <__libc_init_array+0x2e>
 800101e:	bd70      	pop	{r4, r5, r6, pc}
 8001020:	00b3      	lsls	r3, r6, #2
 8001022:	58eb      	ldr	r3, [r5, r3]
 8001024:	4798      	blx	r3
 8001026:	3601      	adds	r6, #1
 8001028:	e7ee      	b.n	8001008 <__libc_init_array+0xc>
 800102a:	00b3      	lsls	r3, r6, #2
 800102c:	58eb      	ldr	r3, [r5, r3]
 800102e:	4798      	blx	r3
 8001030:	3601      	adds	r6, #1
 8001032:	e7f2      	b.n	800101a <__libc_init_array+0x1e>
 8001034:	0800106c 	.word	0x0800106c
 8001038:	0800106c 	.word	0x0800106c
 800103c:	0800106c 	.word	0x0800106c
 8001040:	08001070 	.word	0x08001070

08001044 <memset>:
 8001044:	0003      	movs	r3, r0
 8001046:	1882      	adds	r2, r0, r2
 8001048:	4293      	cmp	r3, r2
 800104a:	d100      	bne.n	800104e <memset+0xa>
 800104c:	4770      	bx	lr
 800104e:	7019      	strb	r1, [r3, #0]
 8001050:	3301      	adds	r3, #1
 8001052:	e7f9      	b.n	8001048 <memset+0x4>

08001054 <_init>:
 8001054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800105a:	bc08      	pop	{r3}
 800105c:	469e      	mov	lr, r3
 800105e:	4770      	bx	lr

08001060 <_fini>:
 8001060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001066:	bc08      	pop	{r3}
 8001068:	469e      	mov	lr, r3
 800106a:	4770      	bx	lr
