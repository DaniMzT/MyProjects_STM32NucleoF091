
Train.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002910  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  080029d0  080029d0  000129d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b90  08002b90  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002b90  08002b90  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b90  08002b90  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b90  08002b90  00012b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b94  08002b94  00012b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002b98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000070  08002c08  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  08002c08  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001628  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000057b  00000000  00000000  000216c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001b8  00000000  00000000  00021c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000170  00000000  00000000  00021df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002907  00000000  00000000  00021f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001f2b  00000000  00000000  0002486f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009a34  00000000  00000000  0002679a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000301ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001108  00000000  00000000  00030220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080029b8 	.word	0x080029b8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080029b8 	.word	0x080029b8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b086      	sub	sp, #24
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800024c:	4a14      	ldr	r2, [pc, #80]	; (80002a0 <_sbrk+0x5c>)
 800024e:	4b15      	ldr	r3, [pc, #84]	; (80002a4 <_sbrk+0x60>)
 8000250:	1ad3      	subs	r3, r2, r3
 8000252:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000254:	697b      	ldr	r3, [r7, #20]
 8000256:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000258:	4b13      	ldr	r3, [pc, #76]	; (80002a8 <_sbrk+0x64>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d102      	bne.n	8000266 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000260:	4b11      	ldr	r3, [pc, #68]	; (80002a8 <_sbrk+0x64>)
 8000262:	4a12      	ldr	r2, [pc, #72]	; (80002ac <_sbrk+0x68>)
 8000264:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000266:	4b10      	ldr	r3, [pc, #64]	; (80002a8 <_sbrk+0x64>)
 8000268:	681a      	ldr	r2, [r3, #0]
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	18d3      	adds	r3, r2, r3
 800026e:	693a      	ldr	r2, [r7, #16]
 8000270:	429a      	cmp	r2, r3
 8000272:	d207      	bcs.n	8000284 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000274:	f001 f882 	bl	800137c <__errno>
 8000278:	0003      	movs	r3, r0
 800027a:	220c      	movs	r2, #12
 800027c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800027e:	2301      	movs	r3, #1
 8000280:	425b      	negs	r3, r3
 8000282:	e009      	b.n	8000298 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000284:	4b08      	ldr	r3, [pc, #32]	; (80002a8 <_sbrk+0x64>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800028a:	4b07      	ldr	r3, [pc, #28]	; (80002a8 <_sbrk+0x64>)
 800028c:	681a      	ldr	r2, [r3, #0]
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	18d2      	adds	r2, r2, r3
 8000292:	4b05      	ldr	r3, [pc, #20]	; (80002a8 <_sbrk+0x64>)
 8000294:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000296:	68fb      	ldr	r3, [r7, #12]
}
 8000298:	0018      	movs	r0, r3
 800029a:	46bd      	mov	sp, r7
 800029c:	b006      	add	sp, #24
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	20008000 	.word	0x20008000
 80002a4:	00000400 	.word	0x00000400
 80002a8:	2000008c 	.word	0x2000008c
 80002ac:	200001a8 	.word	0x200001a8

080002b0 <delay>:
	}
	return length;
}

void delay(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
	// some delay for the debouncing of the buttons
	for(uint32_t i = 0 ; i < 300000/2 ; i ++);
 80002b6:	2300      	movs	r3, #0
 80002b8:	607b      	str	r3, [r7, #4]
 80002ba:	e002      	b.n	80002c2 <delay+0x12>
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	3301      	adds	r3, #1
 80002c0:	607b      	str	r3, [r7, #4]
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	4a03      	ldr	r2, [pc, #12]	; (80002d4 <delay+0x24>)
 80002c6:	4293      	cmp	r3, r2
 80002c8:	d9f8      	bls.n	80002bc <delay+0xc>
}
 80002ca:	46c0      	nop			; (mov r8, r8)
 80002cc:	46c0      	nop			; (mov r8, r8)
 80002ce:	46bd      	mov	sp, r7
 80002d0:	b002      	add	sp, #8
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	000249ef 	.word	0x000249ef

080002d8 <main>:
//flush DR
void flushDR(SPI_Handle_t *pSPIhandle, volatile uint8_t *rxbuffer, uint8_t length);

/**********************************************START MAIN********************************************************************/
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); //for debugging in IDE
 80002de:	f002 faf3 	bl	80028c8 <initialise_monitor_handles>
	printf("THIS STARTS\n");
 80002e2:	4b59      	ldr	r3, [pc, #356]	; (8000448 <main+0x170>)
 80002e4:	0018      	movs	r0, r3
 80002e6:	f001 f907 	bl	80014f8 <puts>

	//initialize structures to 0 to avoid garbage values
	memset(&buttons,0,sizeof(buttons));
 80002ea:	4b58      	ldr	r3, [pc, #352]	; (800044c <main+0x174>)
 80002ec:	220c      	movs	r2, #12
 80002ee:	2100      	movs	r1, #0
 80002f0:	0018      	movs	r0, r3
 80002f2:	f001 f86d 	bl	80013d0 <memset>
	memset(&leds,0,sizeof(leds));
 80002f6:	4b56      	ldr	r3, [pc, #344]	; (8000450 <main+0x178>)
 80002f8:	220c      	movs	r2, #12
 80002fa:	2100      	movs	r1, #0
 80002fc:	0018      	movs	r0, r3
 80002fe:	f001 f867 	bl	80013d0 <memset>

	/*GPIOs for the SPI handled by spiGPIO -->SPI1 PA4:NSS PA4:SCK PA4:MISO PA4:MOSI*/
	GPIO_PinHandle_t spiGPIOs;
	memset(&spiGPIOs,0,sizeof(spiGPIOs));
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	220c      	movs	r2, #12
 8000306:	2100      	movs	r1, #0
 8000308:	0018      	movs	r0, r3
 800030a:	f001 f861 	bl	80013d0 <memset>
	memset(&spi1,0,sizeof(spi1));
 800030e:	4b51      	ldr	r3, [pc, #324]	; (8000454 <main+0x17c>)
 8000310:	2224      	movs	r2, #36	; 0x24
 8000312:	2100      	movs	r1, #0
 8000314:	0018      	movs	r0, r3
 8000316:	f001 f85b 	bl	80013d0 <memset>

	//Configurations and initilizations
	peripheral_Config_Ini();
 800031a:	f000 f963 	bl	80005e4 <peripheral_Config_Ini>

	/*configure interrupts (without priorities atm)*/
	//Button OnOff (GPIOB0)
	GPIO_IRQ_EnableDisable(IRQ_EXTI2_3, ENABLE);
 800031e:	2101      	movs	r1, #1
 8000320:	2006      	movs	r0, #6
 8000322:	f000 fd6d 	bl	8000e00 <GPIO_IRQ_EnableDisable>
	//Button Emergency (GPIOB2)
	GPIO_IRQ_EnableDisable(IRQ_EXTI4_15, ENABLE);
 8000326:	2101      	movs	r1, #1
 8000328:	2007      	movs	r0, #7
 800032a:	f000 fd69 	bl	8000e00 <GPIO_IRQ_EnableDisable>
	//SPI1
	SPI_IRQ_EnableDisable(IRQ_SPI1, ENABLE);
 800032e:	2101      	movs	r1, #1
 8000330:	2019      	movs	r0, #25
 8000332:	f000 fed3 	bl	80010dc <SPI_IRQ_EnableDisable>

	/* Loop forever */
	while (1){
		//if state changes, send print command and the content. Think about a way to do it with interrupt due to value change
		if (stateChanged) {
 8000336:	4b48      	ldr	r3, [pc, #288]	; (8000458 <main+0x180>)
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d0fb      	beq.n	8000336 <main+0x5e>
			//enable SPI and disable it at the end?

			//Reading data register to flush previous data
			flushDR(&spi1, myRXbuffer, 1);
 800033e:	4947      	ldr	r1, [pc, #284]	; (800045c <main+0x184>)
 8000340:	4b44      	ldr	r3, [pc, #272]	; (8000454 <main+0x17c>)
 8000342:	2201      	movs	r2, #1
 8000344:	0018      	movs	r0, r3
 8000346:	f000 fa61 	bl	800080c <flushDR>

			//Send print command.Ard should store it in its RX buffer and put ACK in TX.Master should receive garbage in shift reg.
			myTXbuffer[0] = SPI_COMMAND_PRINT;
 800034a:	4b45      	ldr	r3, [pc, #276]	; (8000460 <main+0x188>)
 800034c:	2250      	movs	r2, #80	; 0x50
 800034e:	701a      	strb	r2, [r3, #0]
			SPI_Send(&spi1, myTXbuffer, 1);
 8000350:	4943      	ldr	r1, [pc, #268]	; (8000460 <main+0x188>)
 8000352:	4b40      	ldr	r3, [pc, #256]	; (8000454 <main+0x17c>)
 8000354:	2201      	movs	r2, #1
 8000356:	0018      	movs	r0, r3
 8000358:	f000 ffd0 	bl	80012fc <SPI_Send>
			//SPI_Send(&spi1, (uint8_t*)SPI_COMMAND_PRINT, 1);
			while (spi1.SPI_Comm.TX_state != SPI_READY);
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	4b3d      	ldr	r3, [pc, #244]	; (8000454 <main+0x17c>)
 8000360:	7d1b      	ldrb	r3, [r3, #20]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d1fb      	bne.n	800035e <main+0x86>
			printf("Command print sent\n");
 8000366:	4b3f      	ldr	r3, [pc, #252]	; (8000464 <main+0x18c>)
 8000368:	0018      	movs	r0, r3
 800036a:	f001 f8c5 	bl	80014f8 <puts>

			//Read master RX to clear it off for the next reading
			SPI_Read(&spi1, myRXbuffer, 1); //1 byte to be read
 800036e:	493b      	ldr	r1, [pc, #236]	; (800045c <main+0x184>)
 8000370:	4b38      	ldr	r3, [pc, #224]	; (8000454 <main+0x17c>)
 8000372:	2201      	movs	r2, #1
 8000374:	0018      	movs	r0, r3
 8000376:	f000 ffe0 	bl	800133a <SPI_Read>
			while (spi1.SPI_Comm.RX_state != SPI_READY);
 800037a:	46c0      	nop			; (mov r8, r8)
 800037c:	4b35      	ldr	r3, [pc, #212]	; (8000454 <main+0x17c>)
 800037e:	2220      	movs	r2, #32
 8000380:	5c9b      	ldrb	r3, [r3, r2]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d1fa      	bne.n	800037c <main+0xa4>
			printf("Read what was in Ard\n");
 8000386:	4b38      	ldr	r3, [pc, #224]	; (8000468 <main+0x190>)
 8000388:	0018      	movs	r0, r3
 800038a:	f001 f8b5 	bl	80014f8 <puts>

			//Send dummy data to Ard so that master receives ACK/NACK
			SPI_Send(&spi1, &dummy_byte, 1); //length 1 byte
 800038e:	4937      	ldr	r1, [pc, #220]	; (800046c <main+0x194>)
 8000390:	4b30      	ldr	r3, [pc, #192]	; (8000454 <main+0x17c>)
 8000392:	2201      	movs	r2, #1
 8000394:	0018      	movs	r0, r3
 8000396:	f000 ffb1 	bl	80012fc <SPI_Send>
			while (spi1.SPI_Comm.TX_state != SPI_READY);
 800039a:	46c0      	nop			; (mov r8, r8)
 800039c:	4b2d      	ldr	r3, [pc, #180]	; (8000454 <main+0x17c>)
 800039e:	7d1b      	ldrb	r3, [r3, #20]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d1fb      	bne.n	800039c <main+0xc4>
			printf("Dummy byte sent to get ACK\n");
 80003a4:	4b32      	ldr	r3, [pc, #200]	; (8000470 <main+0x198>)
 80003a6:	0018      	movs	r0, r3
 80003a8:	f001 f8a6 	bl	80014f8 <puts>

			//Read master RX to get ACK/NACK
			SPI_Read(&spi1, myRXbuffer, 1); //1 byte to be read
 80003ac:	492b      	ldr	r1, [pc, #172]	; (800045c <main+0x184>)
 80003ae:	4b29      	ldr	r3, [pc, #164]	; (8000454 <main+0x17c>)
 80003b0:	2201      	movs	r2, #1
 80003b2:	0018      	movs	r0, r3
 80003b4:	f000 ffc1 	bl	800133a <SPI_Read>
			while (spi1.SPI_Comm.RX_state != SPI_READY);
 80003b8:	46c0      	nop			; (mov r8, r8)
 80003ba:	4b26      	ldr	r3, [pc, #152]	; (8000454 <main+0x17c>)
 80003bc:	2220      	movs	r2, #32
 80003be:	5c9b      	ldrb	r3, [r3, r2]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d1fa      	bne.n	80003ba <main+0xe2>
			printf("should read ACK\n");
 80003c4:	4b2b      	ldr	r3, [pc, #172]	; (8000474 <main+0x19c>)
 80003c6:	0018      	movs	r0, r3
 80003c8:	f001 f896 	bl	80014f8 <puts>

			//if ACK, send length+currentState and receive response
			if (*myRXbuffer == SPI_ARD_ACK){
 80003cc:	4b23      	ldr	r3, [pc, #140]	; (800045c <main+0x184>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	b2db      	uxtb	r3, r3
 80003d2:	2ba1      	cmp	r3, #161	; 0xa1
 80003d4:	d130      	bne.n	8000438 <main+0x160>
				myTXbuffer[0] = 8; //in bits
 80003d6:	4b22      	ldr	r3, [pc, #136]	; (8000460 <main+0x188>)
 80003d8:	2208      	movs	r2, #8
 80003da:	701a      	strb	r2, [r3, #0]
				myTXbuffer[1] = currentState;
 80003dc:	4b26      	ldr	r3, [pc, #152]	; (8000478 <main+0x1a0>)
 80003de:	781a      	ldrb	r2, [r3, #0]
 80003e0:	4b1f      	ldr	r3, [pc, #124]	; (8000460 <main+0x188>)
 80003e2:	705a      	strb	r2, [r3, #1]
				SPI_Send(&spi1, myTXbuffer, 2); //length is 2
 80003e4:	491e      	ldr	r1, [pc, #120]	; (8000460 <main+0x188>)
 80003e6:	4b1b      	ldr	r3, [pc, #108]	; (8000454 <main+0x17c>)
 80003e8:	2202      	movs	r2, #2
 80003ea:	0018      	movs	r0, r3
 80003ec:	f000 ff86 	bl	80012fc <SPI_Send>
				while (spi1.SPI_Comm.TX_state != SPI_READY);
 80003f0:	46c0      	nop			; (mov r8, r8)
 80003f2:	4b18      	ldr	r3, [pc, #96]	; (8000454 <main+0x17c>)
 80003f4:	7d1b      	ldrb	r3, [r3, #20]
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d1fb      	bne.n	80003f2 <main+0x11a>
				printf("Sent length+currentState\n");
 80003fa:	4b20      	ldr	r3, [pc, #128]	; (800047c <main+0x1a4>)
 80003fc:	0018      	movs	r0, r3
 80003fe:	f001 f87b 	bl	80014f8 <puts>

				SPI_Read(&spi1, myRXbuffer, 2); //2 bytes to be read (dummy read).
 8000402:	4916      	ldr	r1, [pc, #88]	; (800045c <main+0x184>)
 8000404:	4b13      	ldr	r3, [pc, #76]	; (8000454 <main+0x17c>)
 8000406:	2202      	movs	r2, #2
 8000408:	0018      	movs	r0, r3
 800040a:	f000 ff96 	bl	800133a <SPI_Read>
				while (spi1.SPI_Comm.RX_state != SPI_READY);
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	4b10      	ldr	r3, [pc, #64]	; (8000454 <main+0x17c>)
 8000412:	2220      	movs	r2, #32
 8000414:	5c9b      	ldrb	r3, [r3, r2]
 8000416:	2b00      	cmp	r3, #0
 8000418:	d1fa      	bne.n	8000410 <main+0x138>
				printf("dummy read due to length+curState sent: %s/n", myRXbuffer);
 800041a:	4a10      	ldr	r2, [pc, #64]	; (800045c <main+0x184>)
 800041c:	4b18      	ldr	r3, [pc, #96]	; (8000480 <main+0x1a8>)
 800041e:	0011      	movs	r1, r2
 8000420:	0018      	movs	r0, r3
 8000422:	f000 ffdd 	bl	80013e0 <iprintf>

				//myTXbuffer = "statusChanged: ";
				printf("status changed to: %d/n",currentState);
 8000426:	4b14      	ldr	r3, [pc, #80]	; (8000478 <main+0x1a0>)
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	001a      	movs	r2, r3
 800042c:	4b15      	ldr	r3, [pc, #84]	; (8000484 <main+0x1ac>)
 800042e:	0011      	movs	r1, r2
 8000430:	0018      	movs	r0, r3
 8000432:	f000 ffd5 	bl	80013e0 <iprintf>
 8000436:	e003      	b.n	8000440 <main+0x168>
			}
			else{
				printf("no ACK received\n");
 8000438:	4b13      	ldr	r3, [pc, #76]	; (8000488 <main+0x1b0>)
 800043a:	0018      	movs	r0, r3
 800043c:	f001 f85c 	bl	80014f8 <puts>
			}

			//clear the flag of current state in order to capture state changes
			stateChanged = 0;
 8000440:	4b05      	ldr	r3, [pc, #20]	; (8000458 <main+0x180>)
 8000442:	2200      	movs	r2, #0
 8000444:	701a      	strb	r2, [r3, #0]
		if (stateChanged) {
 8000446:	e776      	b.n	8000336 <main+0x5e>
 8000448:	080029d0 	.word	0x080029d0
 800044c:	20000090 	.word	0x20000090
 8000450:	2000009c 	.word	0x2000009c
 8000454:	200000b4 	.word	0x200000b4
 8000458:	200000d9 	.word	0x200000d9
 800045c:	200000e0 	.word	0x200000e0
 8000460:	200000dc 	.word	0x200000dc
 8000464:	080029dc 	.word	0x080029dc
 8000468:	080029f0 	.word	0x080029f0
 800046c:	20000000 	.word	0x20000000
 8000470:	08002a08 	.word	0x08002a08
 8000474:	08002a24 	.word	0x08002a24
 8000478:	200000d8 	.word	0x200000d8
 800047c:	08002a34 	.word	0x08002a34
 8000480:	08002a50 	.word	0x08002a50
 8000484:	08002a80 	.word	0x08002a80
 8000488:	08002a98 	.word	0x08002a98

0800048c <EXTI2_3_IRQHandler>:
	}
}
/**********************************************END MAIN********************************************************************/

/***********************************************ISR handlers****************************************************************/
void EXTI2_3_IRQHandler(void){ //when button on-off
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
	delay();
 8000490:	f7ff ff0e 	bl	80002b0 <delay>
	GPIO_IRQ_Handling(PIN_BUTTON_OFFON);
 8000494:	2003      	movs	r0, #3
 8000496:	f000 fcdf 	bl	8000e58 <GPIO_IRQ_Handling>
	if (currentState == OFF){
 800049a:	4b2a      	ldr	r3, [pc, #168]	; (8000544 <EXTI2_3_IRQHandler+0xb8>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d122      	bne.n	80004e8 <EXTI2_3_IRQHandler+0x5c>
		currentState = ON;
 80004a2:	4b28      	ldr	r3, [pc, #160]	; (8000544 <EXTI2_3_IRQHandler+0xb8>)
 80004a4:	2201      	movs	r2, #1
 80004a6:	701a      	strb	r2, [r3, #0]
		stateChanged = 1;
 80004a8:	4b27      	ldr	r3, [pc, #156]	; (8000548 <EXTI2_3_IRQHandler+0xbc>)
 80004aa:	2201      	movs	r2, #1
 80004ac:	701a      	strb	r2, [r3, #0]
		GPIO_WritePin(GPIOA,PIN_LED0,0);
 80004ae:	2390      	movs	r3, #144	; 0x90
 80004b0:	05db      	lsls	r3, r3, #23
 80004b2:	2200      	movs	r2, #0
 80004b4:	2100      	movs	r1, #0
 80004b6:	0018      	movs	r0, r3
 80004b8:	f000 fc78 	bl	8000dac <GPIO_WritePin>
		GPIO_WritePin(GPIOA,PIN_LED1,1);
 80004bc:	2390      	movs	r3, #144	; 0x90
 80004be:	05db      	lsls	r3, r3, #23
 80004c0:	2201      	movs	r2, #1
 80004c2:	2101      	movs	r1, #1
 80004c4:	0018      	movs	r0, r3
 80004c6:	f000 fc71 	bl	8000dac <GPIO_WritePin>
		GPIO_WritePin(GPIOA,PIN_LED2,1);
 80004ca:	2390      	movs	r3, #144	; 0x90
 80004cc:	05db      	lsls	r3, r3, #23
 80004ce:	2201      	movs	r2, #1
 80004d0:	2109      	movs	r1, #9
 80004d2:	0018      	movs	r0, r3
 80004d4:	f000 fc6a 	bl	8000dac <GPIO_WritePin>
		GPIO_WritePin(GPIOA,PIN_LED3,0);
 80004d8:	2390      	movs	r3, #144	; 0x90
 80004da:	05db      	lsls	r3, r3, #23
 80004dc:	2200      	movs	r2, #0
 80004de:	210a      	movs	r1, #10
 80004e0:	0018      	movs	r0, r3
 80004e2:	f000 fc63 	bl	8000dac <GPIO_WritePin>
 80004e6:	e021      	b.n	800052c <EXTI2_3_IRQHandler+0xa0>
	}
	else{
		currentState = OFF;
 80004e8:	4b16      	ldr	r3, [pc, #88]	; (8000544 <EXTI2_3_IRQHandler+0xb8>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	701a      	strb	r2, [r3, #0]
		stateChanged = 1;
 80004ee:	4b16      	ldr	r3, [pc, #88]	; (8000548 <EXTI2_3_IRQHandler+0xbc>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	701a      	strb	r2, [r3, #0]
		GPIO_WritePin(GPIOA,PIN_LED0,0);
 80004f4:	2390      	movs	r3, #144	; 0x90
 80004f6:	05db      	lsls	r3, r3, #23
 80004f8:	2200      	movs	r2, #0
 80004fa:	2100      	movs	r1, #0
 80004fc:	0018      	movs	r0, r3
 80004fe:	f000 fc55 	bl	8000dac <GPIO_WritePin>
		GPIO_WritePin(GPIOA,PIN_LED1,0);
 8000502:	2390      	movs	r3, #144	; 0x90
 8000504:	05db      	lsls	r3, r3, #23
 8000506:	2200      	movs	r2, #0
 8000508:	2101      	movs	r1, #1
 800050a:	0018      	movs	r0, r3
 800050c:	f000 fc4e 	bl	8000dac <GPIO_WritePin>
		GPIO_WritePin(GPIOA,PIN_LED2,0);
 8000510:	2390      	movs	r3, #144	; 0x90
 8000512:	05db      	lsls	r3, r3, #23
 8000514:	2200      	movs	r2, #0
 8000516:	2109      	movs	r1, #9
 8000518:	0018      	movs	r0, r3
 800051a:	f000 fc47 	bl	8000dac <GPIO_WritePin>
		GPIO_WritePin(GPIOA,PIN_LED3,0);
 800051e:	2390      	movs	r3, #144	; 0x90
 8000520:	05db      	lsls	r3, r3, #23
 8000522:	2200      	movs	r2, #0
 8000524:	210a      	movs	r1, #10
 8000526:	0018      	movs	r0, r3
 8000528:	f000 fc40 	bl	8000dac <GPIO_WritePin>
	}
	printf("%d\n",currentState);
 800052c:	4b05      	ldr	r3, [pc, #20]	; (8000544 <EXTI2_3_IRQHandler+0xb8>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	001a      	movs	r2, r3
 8000532:	4b06      	ldr	r3, [pc, #24]	; (800054c <EXTI2_3_IRQHandler+0xc0>)
 8000534:	0011      	movs	r1, r2
 8000536:	0018      	movs	r0, r3
 8000538:	f000 ff52 	bl	80013e0 <iprintf>
}
 800053c:	46c0      	nop			; (mov r8, r8)
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	200000d8 	.word	0x200000d8
 8000548:	200000d9 	.word	0x200000d9
 800054c:	08002aa8 	.word	0x08002aa8

08000550 <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler(void){
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
	delay();
 8000554:	f7ff feac 	bl	80002b0 <delay>
	GPIO_IRQ_Handling(PIN_BUTTON_EMERGENCY);
 8000558:	2005      	movs	r0, #5
 800055a:	f000 fc7d 	bl	8000e58 <GPIO_IRQ_Handling>
	if (currentState != EMERGENCY){
 800055e:	4b18      	ldr	r3, [pc, #96]	; (80005c0 <EXTI4_15_IRQHandler+0x70>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b02      	cmp	r3, #2
 8000564:	d002      	beq.n	800056c <EXTI4_15_IRQHandler+0x1c>
		stateChanged = 1;
 8000566:	4b17      	ldr	r3, [pc, #92]	; (80005c4 <EXTI4_15_IRQHandler+0x74>)
 8000568:	2201      	movs	r2, #1
 800056a:	701a      	strb	r2, [r3, #0]
	}
	currentState = EMERGENCY;
 800056c:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <EXTI4_15_IRQHandler+0x70>)
 800056e:	2202      	movs	r2, #2
 8000570:	701a      	strb	r2, [r3, #0]
	printf("%d\n",currentState);
 8000572:	4b13      	ldr	r3, [pc, #76]	; (80005c0 <EXTI4_15_IRQHandler+0x70>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	001a      	movs	r2, r3
 8000578:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <EXTI4_15_IRQHandler+0x78>)
 800057a:	0011      	movs	r1, r2
 800057c:	0018      	movs	r0, r3
 800057e:	f000 ff2f 	bl	80013e0 <iprintf>
	GPIO_WritePin(GPIOA,PIN_LED0,1);
 8000582:	2390      	movs	r3, #144	; 0x90
 8000584:	05db      	lsls	r3, r3, #23
 8000586:	2201      	movs	r2, #1
 8000588:	2100      	movs	r1, #0
 800058a:	0018      	movs	r0, r3
 800058c:	f000 fc0e 	bl	8000dac <GPIO_WritePin>
	GPIO_WritePin(GPIOA,PIN_LED1,1);
 8000590:	2390      	movs	r3, #144	; 0x90
 8000592:	05db      	lsls	r3, r3, #23
 8000594:	2201      	movs	r2, #1
 8000596:	2101      	movs	r1, #1
 8000598:	0018      	movs	r0, r3
 800059a:	f000 fc07 	bl	8000dac <GPIO_WritePin>
	GPIO_WritePin(GPIOA,PIN_LED2,1);
 800059e:	2390      	movs	r3, #144	; 0x90
 80005a0:	05db      	lsls	r3, r3, #23
 80005a2:	2201      	movs	r2, #1
 80005a4:	2109      	movs	r1, #9
 80005a6:	0018      	movs	r0, r3
 80005a8:	f000 fc00 	bl	8000dac <GPIO_WritePin>
	GPIO_WritePin(GPIOA,PIN_LED3,1);
 80005ac:	2390      	movs	r3, #144	; 0x90
 80005ae:	05db      	lsls	r3, r3, #23
 80005b0:	2201      	movs	r2, #1
 80005b2:	210a      	movs	r1, #10
 80005b4:	0018      	movs	r0, r3
 80005b6:	f000 fbf9 	bl	8000dac <GPIO_WritePin>

}
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	200000d8 	.word	0x200000d8
 80005c4:	200000d9 	.word	0x200000d9
 80005c8:	08002aa8 	.word	0x08002aa8

080005cc <SPI1_IRQHandler>:

//SPI IRQ handler for SPI1
void SPI1_IRQHandler(void){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	SPI_IRQ_Handling(&spi1);
 80005d0:	4b03      	ldr	r3, [pc, #12]	; (80005e0 <SPI1_IRQHandler+0x14>)
 80005d2:	0018      	movs	r0, r3
 80005d4:	f000 fdae 	bl	8001134 <SPI_IRQ_Handling>
}
 80005d8:	46c0      	nop			; (mov r8, r8)
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	200000b4 	.word	0x200000b4

080005e4 <peripheral_Config_Ini>:

/**********************************************END IRQ********************************************************************/

/*****************************Configurations and initializations************************************************************/
void peripheral_Config_Ini(void){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0

	//LED0
	leds.pGPIO = GPIOA;
 80005e8:	4b5f      	ldr	r3, [pc, #380]	; (8000768 <peripheral_Config_Ini+0x184>)
 80005ea:	2290      	movs	r2, #144	; 0x90
 80005ec:	05d2      	lsls	r2, r2, #23
 80005ee:	601a      	str	r2, [r3, #0]
	leds.GPIO_PinConfig.GPIO_PinNumber = PIN_LED0;
 80005f0:	4b5d      	ldr	r3, [pc, #372]	; (8000768 <peripheral_Config_Ini+0x184>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	711a      	strb	r2, [r3, #4]
	leds.GPIO_PinConfig.GPIO_PinMode = GPIO_OUT;
 80005f6:	4b5c      	ldr	r3, [pc, #368]	; (8000768 <peripheral_Config_Ini+0x184>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	715a      	strb	r2, [r3, #5]
	leds.GPIO_PinConfig.GPIO_PinOutType = GPIO_PUSHPULL;
 80005fc:	4b5a      	ldr	r3, [pc, #360]	; (8000768 <peripheral_Config_Ini+0x184>)
 80005fe:	2200      	movs	r2, #0
 8000600:	719a      	strb	r2, [r3, #6]
	leds.GPIO_PinConfig.GPIO_PinOutSpeed = GPIO_SLOWSPEED; //GPIO_MEDIUMSPEED
 8000602:	4b59      	ldr	r3, [pc, #356]	; (8000768 <peripheral_Config_Ini+0x184>)
 8000604:	2200      	movs	r2, #0
 8000606:	71da      	strb	r2, [r3, #7]
	leds.GPIO_PinConfig.GPIO_PinPullUpDown = GPIO_NOPULL;
 8000608:	4b57      	ldr	r3, [pc, #348]	; (8000768 <peripheral_Config_Ini+0x184>)
 800060a:	2200      	movs	r2, #0
 800060c:	721a      	strb	r2, [r3, #8]
	//Initialization LED0
	GPIO_PinInit(&leds);
 800060e:	4b56      	ldr	r3, [pc, #344]	; (8000768 <peripheral_Config_Ini+0x184>)
 8000610:	0018      	movs	r0, r3
 8000612:	f000 fa3d 	bl	8000a90 <GPIO_PinInit>

	//LED1.Port,Mode,OutType,OutSpeed and PullUpDown same as LED0
	leds.GPIO_PinConfig.GPIO_PinNumber = PIN_LED1;
 8000616:	4b54      	ldr	r3, [pc, #336]	; (8000768 <peripheral_Config_Ini+0x184>)
 8000618:	2201      	movs	r2, #1
 800061a:	711a      	strb	r2, [r3, #4]
	//Initialization LED1
	GPIO_PinInit(&leds);
 800061c:	4b52      	ldr	r3, [pc, #328]	; (8000768 <peripheral_Config_Ini+0x184>)
 800061e:	0018      	movs	r0, r3
 8000620:	f000 fa36 	bl	8000a90 <GPIO_PinInit>

	//LED2.Port,Mode,OutType,OutSpeed and PullUpDown same as LED0
	leds.GPIO_PinConfig.GPIO_PinNumber = PIN_LED2;
 8000624:	4b50      	ldr	r3, [pc, #320]	; (8000768 <peripheral_Config_Ini+0x184>)
 8000626:	2209      	movs	r2, #9
 8000628:	711a      	strb	r2, [r3, #4]
	//Initialization LED2
	GPIO_PinInit(&leds);
 800062a:	4b4f      	ldr	r3, [pc, #316]	; (8000768 <peripheral_Config_Ini+0x184>)
 800062c:	0018      	movs	r0, r3
 800062e:	f000 fa2f 	bl	8000a90 <GPIO_PinInit>

	//LED3.Port,Mode,OutType,OutSpeed and PullUpDown same as LED0
	leds.GPIO_PinConfig.GPIO_PinNumber = PIN_LED3;
 8000632:	4b4d      	ldr	r3, [pc, #308]	; (8000768 <peripheral_Config_Ini+0x184>)
 8000634:	220a      	movs	r2, #10
 8000636:	711a      	strb	r2, [r3, #4]
	//Initialization LED3
	GPIO_PinInit(&leds);
 8000638:	4b4b      	ldr	r3, [pc, #300]	; (8000768 <peripheral_Config_Ini+0x184>)
 800063a:	0018      	movs	r0, r3
 800063c:	f000 fa28 	bl	8000a90 <GPIO_PinInit>

	//LEDs OFF
	GPIO_WritePin(GPIOA,PIN_LED0,1);
 8000640:	2390      	movs	r3, #144	; 0x90
 8000642:	05db      	lsls	r3, r3, #23
 8000644:	2201      	movs	r2, #1
 8000646:	2100      	movs	r1, #0
 8000648:	0018      	movs	r0, r3
 800064a:	f000 fbaf 	bl	8000dac <GPIO_WritePin>
	GPIO_WritePin(GPIOA,PIN_LED1,0);
 800064e:	2390      	movs	r3, #144	; 0x90
 8000650:	05db      	lsls	r3, r3, #23
 8000652:	2200      	movs	r2, #0
 8000654:	2101      	movs	r1, #1
 8000656:	0018      	movs	r0, r3
 8000658:	f000 fba8 	bl	8000dac <GPIO_WritePin>
	GPIO_WritePin(GPIOA,PIN_LED2,0);
 800065c:	2390      	movs	r3, #144	; 0x90
 800065e:	05db      	lsls	r3, r3, #23
 8000660:	2200      	movs	r2, #0
 8000662:	2109      	movs	r1, #9
 8000664:	0018      	movs	r0, r3
 8000666:	f000 fba1 	bl	8000dac <GPIO_WritePin>
	GPIO_WritePin(GPIOA,PIN_LED3,1);
 800066a:	2390      	movs	r3, #144	; 0x90
 800066c:	05db      	lsls	r3, r3, #23
 800066e:	2201      	movs	r2, #1
 8000670:	210a      	movs	r1, #10
 8000672:	0018      	movs	r0, r3
 8000674:	f000 fb9a 	bl	8000dac <GPIO_WritePin>

	//BUTTON ON-OFF
	buttons.pGPIO = GPIOB;
 8000678:	4b3c      	ldr	r3, [pc, #240]	; (800076c <peripheral_Config_Ini+0x188>)
 800067a:	4a3d      	ldr	r2, [pc, #244]	; (8000770 <peripheral_Config_Ini+0x18c>)
 800067c:	601a      	str	r2, [r3, #0]
	buttons.GPIO_PinConfig.GPIO_PinNumber = PIN_BUTTON_OFFON;
 800067e:	4b3b      	ldr	r3, [pc, #236]	; (800076c <peripheral_Config_Ini+0x188>)
 8000680:	2203      	movs	r2, #3
 8000682:	711a      	strb	r2, [r3, #4]
	buttons.GPIO_PinConfig.GPIO_PinMode = GPIO_FALL_TRIG; //interrupt falling edge
 8000684:	4b39      	ldr	r3, [pc, #228]	; (800076c <peripheral_Config_Ini+0x188>)
 8000686:	2204      	movs	r2, #4
 8000688:	715a      	strb	r2, [r3, #5]
	buttons.GPIO_PinConfig.GPIO_PinPullUpDown = GPIO_PULLUP; //pull up (3.3 by default)
 800068a:	4b38      	ldr	r3, [pc, #224]	; (800076c <peripheral_Config_Ini+0x188>)
 800068c:	2201      	movs	r2, #1
 800068e:	721a      	strb	r2, [r3, #8]
	//initialization button on-off
	GPIO_PinInit(&buttons);
 8000690:	4b36      	ldr	r3, [pc, #216]	; (800076c <peripheral_Config_Ini+0x188>)
 8000692:	0018      	movs	r0, r3
 8000694:	f000 f9fc 	bl	8000a90 <GPIO_PinInit>

	//EMERGENCY BUTTON
	buttons.pGPIO = GPIOB;
 8000698:	4b34      	ldr	r3, [pc, #208]	; (800076c <peripheral_Config_Ini+0x188>)
 800069a:	4a35      	ldr	r2, [pc, #212]	; (8000770 <peripheral_Config_Ini+0x18c>)
 800069c:	601a      	str	r2, [r3, #0]
	buttons.GPIO_PinConfig.GPIO_PinNumber = PIN_BUTTON_EMERGENCY;
 800069e:	4b33      	ldr	r3, [pc, #204]	; (800076c <peripheral_Config_Ini+0x188>)
 80006a0:	2205      	movs	r2, #5
 80006a2:	711a      	strb	r2, [r3, #4]
	buttons.GPIO_PinConfig.GPIO_PinMode = GPIO_FALL_TRIG;
 80006a4:	4b31      	ldr	r3, [pc, #196]	; (800076c <peripheral_Config_Ini+0x188>)
 80006a6:	2204      	movs	r2, #4
 80006a8:	715a      	strb	r2, [r3, #5]
	buttons.GPIO_PinConfig.GPIO_PinPullUpDown = GPIO_PULLUP;
 80006aa:	4b30      	ldr	r3, [pc, #192]	; (800076c <peripheral_Config_Ini+0x188>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	721a      	strb	r2, [r3, #8]
	//initialization emergency button
	GPIO_PinInit(&buttons);
 80006b0:	4b2e      	ldr	r3, [pc, #184]	; (800076c <peripheral_Config_Ini+0x188>)
 80006b2:	0018      	movs	r0, r3
 80006b4:	f000 f9ec 	bl	8000a90 <GPIO_PinInit>

	//GPIOs for SPI: SPI1 PA4:NSS PA5:SCK PA6:MISO PA7:MOSI
	spiGPIOs.pGPIO = GPIOA;
 80006b8:	4b2e      	ldr	r3, [pc, #184]	; (8000774 <peripheral_Config_Ini+0x190>)
 80006ba:	2290      	movs	r2, #144	; 0x90
 80006bc:	05d2      	lsls	r2, r2, #23
 80006be:	601a      	str	r2, [r3, #0]
	spiGPIOs.GPIO_PinConfig.GPIO_PinMode = GPIO_ALTFUN;
 80006c0:	4b2c      	ldr	r3, [pc, #176]	; (8000774 <peripheral_Config_Ini+0x190>)
 80006c2:	2202      	movs	r2, #2
 80006c4:	715a      	strb	r2, [r3, #5]
	spiGPIOs.GPIO_PinConfig.GPIO_PinOutType = GPIO_PUSHPULL;
 80006c6:	4b2b      	ldr	r3, [pc, #172]	; (8000774 <peripheral_Config_Ini+0x190>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	719a      	strb	r2, [r3, #6]
	spiGPIOs.GPIO_PinConfig.GPIO_PinOutSpeed = GPIO_HIGHSPEED; //FAST SPEED
 80006cc:	4b29      	ldr	r3, [pc, #164]	; (8000774 <peripheral_Config_Ini+0x190>)
 80006ce:	2203      	movs	r2, #3
 80006d0:	71da      	strb	r2, [r3, #7]
	spiGPIOs.GPIO_PinConfig.GPIO_PinPullUpDown = GPIO_NOPULL;
 80006d2:	4b28      	ldr	r3, [pc, #160]	; (8000774 <peripheral_Config_Ini+0x190>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	721a      	strb	r2, [r3, #8]
	//SCK
	spiGPIOs.GPIO_PinConfig.GPIO_PinNumber = PIN_SPI1_SCK;//SCK
 80006d8:	4b26      	ldr	r3, [pc, #152]	; (8000774 <peripheral_Config_Ini+0x190>)
 80006da:	2205      	movs	r2, #5
 80006dc:	711a      	strb	r2, [r3, #4]
	GPIO_PinInit(&spiGPIOs);
 80006de:	4b25      	ldr	r3, [pc, #148]	; (8000774 <peripheral_Config_Ini+0x190>)
 80006e0:	0018      	movs	r0, r3
 80006e2:	f000 f9d5 	bl	8000a90 <GPIO_PinInit>
	//MISO
	spiGPIOs.GPIO_PinConfig.GPIO_PinNumber = PIN_SPI1_MISO;//MISO
 80006e6:	4b23      	ldr	r3, [pc, #140]	; (8000774 <peripheral_Config_Ini+0x190>)
 80006e8:	2206      	movs	r2, #6
 80006ea:	711a      	strb	r2, [r3, #4]
	GPIO_PinInit(&spiGPIOs);
 80006ec:	4b21      	ldr	r3, [pc, #132]	; (8000774 <peripheral_Config_Ini+0x190>)
 80006ee:	0018      	movs	r0, r3
 80006f0:	f000 f9ce 	bl	8000a90 <GPIO_PinInit>
	//MOSI
	spiGPIOs.GPIO_PinConfig.GPIO_PinNumber = PIN_SPI1_MOSI;//MOSI
 80006f4:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <peripheral_Config_Ini+0x190>)
 80006f6:	2207      	movs	r2, #7
 80006f8:	711a      	strb	r2, [r3, #4]
	GPIO_PinInit(&spiGPIOs);
 80006fa:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <peripheral_Config_Ini+0x190>)
 80006fc:	0018      	movs	r0, r3
 80006fe:	f000 f9c7 	bl	8000a90 <GPIO_PinInit>
	//NSS
	spiGPIOs.GPIO_PinConfig.GPIO_PinNumber = PIN_SPI1_NSS;//NSS
 8000702:	4b1c      	ldr	r3, [pc, #112]	; (8000774 <peripheral_Config_Ini+0x190>)
 8000704:	2204      	movs	r2, #4
 8000706:	711a      	strb	r2, [r3, #4]
	spiGPIOs.GPIO_PinConfig.GPIO_PinPullUpDown = GPIO_PULLUP;
 8000708:	4b1a      	ldr	r3, [pc, #104]	; (8000774 <peripheral_Config_Ini+0x190>)
 800070a:	2201      	movs	r2, #1
 800070c:	721a      	strb	r2, [r3, #8]
	GPIO_PinInit(&spiGPIOs);
 800070e:	4b19      	ldr	r3, [pc, #100]	; (8000774 <peripheral_Config_Ini+0x190>)
 8000710:	0018      	movs	r0, r3
 8000712:	f000 f9bd 	bl	8000a90 <GPIO_PinInit>

	/*SPI handle configuration and initialization*/
	//SPI configuration
	spi1.pSPI = SPI1_I2S1;
 8000716:	4b18      	ldr	r3, [pc, #96]	; (8000778 <peripheral_Config_Ini+0x194>)
 8000718:	4a18      	ldr	r2, [pc, #96]	; (800077c <peripheral_Config_Ini+0x198>)
 800071a:	601a      	str	r2, [r3, #0]
	spi1.SPI_Config.SPI_Mode = SPI_MASTER;
 800071c:	4b16      	ldr	r3, [pc, #88]	; (8000778 <peripheral_Config_Ini+0x194>)
 800071e:	2201      	movs	r2, #1
 8000720:	711a      	strb	r2, [r3, #4]
	spi1.SPI_Config.SPI_Speed = SPI_SPEED_2;
 8000722:	4b15      	ldr	r3, [pc, #84]	; (8000778 <peripheral_Config_Ini+0x194>)
 8000724:	2200      	movs	r2, #0
 8000726:	715a      	strb	r2, [r3, #5]
	spi1.SPI_Config.SPI_CommType = SPI_FULLDUPLEX;
 8000728:	4b13      	ldr	r3, [pc, #76]	; (8000778 <peripheral_Config_Ini+0x194>)
 800072a:	2201      	movs	r2, #1
 800072c:	719a      	strb	r2, [r3, #6]
	spi1.SPI_Config.SPI_DataSize = SPI_8BIT;
 800072e:	4b12      	ldr	r3, [pc, #72]	; (8000778 <peripheral_Config_Ini+0x194>)
 8000730:	2207      	movs	r2, #7
 8000732:	71da      	strb	r2, [r3, #7]
	spi1.SPI_Config.SPI_SWslave = SPI_HW_MGMT;
 8000734:	4b10      	ldr	r3, [pc, #64]	; (8000778 <peripheral_Config_Ini+0x194>)
 8000736:	2200      	movs	r2, #0
 8000738:	721a      	strb	r2, [r3, #8]
	spi1.SPI_Config.SPI_Pol = SPI_CLK_IDLE_0;
 800073a:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <peripheral_Config_Ini+0x194>)
 800073c:	2200      	movs	r2, #0
 800073e:	725a      	strb	r2, [r3, #9]
	spi1.SPI_Config.SPI_Phase = SPI_CLK_CAPT_FIRST;
 8000740:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <peripheral_Config_Ini+0x194>)
 8000742:	2200      	movs	r2, #0
 8000744:	729a      	strb	r2, [r3, #10]

	//SPI initialization
	SPI_Init(&spi1);
 8000746:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <peripheral_Config_Ini+0x194>)
 8000748:	0018      	movs	r0, r3
 800074a:	f000 fbef 	bl	8000f2c <SPI_Init>

	//Set SSOE to 1 to make NSS output enable
	SPI_SSOE(&spi1,ENABLE);
 800074e:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <peripheral_Config_Ini+0x194>)
 8000750:	2101      	movs	r1, #1
 8000752:	0018      	movs	r0, r3
 8000754:	f000 fca2 	bl	800109c <SPI_SSOE>

	//Enable SPI peripheral
	SPI_EnableDisable(&spi1,ENABLE);
 8000758:	4b07      	ldr	r3, [pc, #28]	; (8000778 <peripheral_Config_Ini+0x194>)
 800075a:	2101      	movs	r1, #1
 800075c:	0018      	movs	r0, r3
 800075e:	f000 fc7d 	bl	800105c <SPI_EnableDisable>
}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	2000009c 	.word	0x2000009c
 800076c:	20000090 	.word	0x20000090
 8000770:	48000400 	.word	0x48000400
 8000774:	200000a8 	.word	0x200000a8
 8000778:	200000b4 	.word	0x200000b4
 800077c:	40013000 	.word	0x40013000

08000780 <SPI_App_Callback>:

/*callback,declared in spi.h,called from tx/rx handlers when finished
 * I use it just for debugging to avoid reading registers from debugger (if read,SR modified)
 */
void SPI_App_Callback(SPI_Handle_t *pSPIhandle,uint8_t Event){
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	000a      	movs	r2, r1
 800078a:	1cfb      	adds	r3, r7, #3
 800078c:	701a      	strb	r2, [r3, #0]
	static uint8_t index_print; //necessary to be static?
	//Reading buffer after reading handler finished
	if (Event == SPI_RX_FINISHED){
 800078e:	1cfb      	adds	r3, r7, #3
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b01      	cmp	r3, #1
 8000794:	d12b      	bne.n	80007ee <SPI_App_Callback+0x6e>
		for (index_print=0;index_print<2;index_print++){
 8000796:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <SPI_App_Callback+0x78>)
 8000798:	2200      	movs	r2, #0
 800079a:	701a      	strb	r2, [r3, #0]
 800079c:	e023      	b.n	80007e6 <SPI_App_Callback+0x66>
			printedRX[index_print] = myRXbuffer[index_print];
 800079e:	4b16      	ldr	r3, [pc, #88]	; (80007f8 <SPI_App_Callback+0x78>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	0019      	movs	r1, r3
 80007a4:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <SPI_App_Callback+0x78>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	001a      	movs	r2, r3
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <SPI_App_Callback+0x7c>)
 80007ac:	5c5b      	ldrb	r3, [r3, r1]
 80007ae:	b2d9      	uxtb	r1, r3
 80007b0:	4b13      	ldr	r3, [pc, #76]	; (8000800 <SPI_App_Callback+0x80>)
 80007b2:	5499      	strb	r1, [r3, r2]
			printf("printed RX index: %d\n", index_print);
 80007b4:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <SPI_App_Callback+0x78>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	001a      	movs	r2, r3
 80007ba:	4b12      	ldr	r3, [pc, #72]	; (8000804 <SPI_App_Callback+0x84>)
 80007bc:	0011      	movs	r1, r2
 80007be:	0018      	movs	r0, r3
 80007c0:	f000 fe0e 	bl	80013e0 <iprintf>
			printf("%d\n",printedRX[index_print]);
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <SPI_App_Callback+0x78>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	001a      	movs	r2, r3
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <SPI_App_Callback+0x80>)
 80007cc:	5c9b      	ldrb	r3, [r3, r2]
 80007ce:	001a      	movs	r2, r3
 80007d0:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <SPI_App_Callback+0x88>)
 80007d2:	0011      	movs	r1, r2
 80007d4:	0018      	movs	r0, r3
 80007d6:	f000 fe03 	bl	80013e0 <iprintf>
		for (index_print=0;index_print<2;index_print++){
 80007da:	4b07      	ldr	r3, [pc, #28]	; (80007f8 <SPI_App_Callback+0x78>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	3301      	adds	r3, #1
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <SPI_App_Callback+0x78>)
 80007e4:	701a      	strb	r2, [r3, #0]
 80007e6:	4b04      	ldr	r3, [pc, #16]	; (80007f8 <SPI_App_Callback+0x78>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d9d7      	bls.n	800079e <SPI_App_Callback+0x1e>
		}
	}
}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	46bd      	mov	sp, r7
 80007f2:	b002      	add	sp, #8
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	200000e6 	.word	0x200000e6
 80007fc:	200000e0 	.word	0x200000e0
 8000800:	200000e4 	.word	0x200000e4
 8000804:	08002aac 	.word	0x08002aac
 8000808:	08002aa8 	.word	0x08002aa8

0800080c <flushDR>:

/*Flush DR by reading it*/
void flushDR(SPI_Handle_t *pSPIhandle, volatile uint8_t *rxbuffer, uint8_t length){
 800080c:	b590      	push	{r4, r7, lr}
 800080e:	b087      	sub	sp, #28
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	1dfb      	adds	r3, r7, #7
 8000818:	701a      	strb	r2, [r3, #0]
	uint8_t indexFlush;
	pSPIhandle->SPI_Comm.RX_state = SPI_DURING_RX;
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	2220      	movs	r2, #32
 800081e:	2101      	movs	r1, #1
 8000820:	5499      	strb	r1, [r3, r2]
	pSPIhandle->SPI_Comm.RX_buffer = rxbuffer;
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	68ba      	ldr	r2, [r7, #8]
 8000826:	61da      	str	r2, [r3, #28]
	pSPIhandle->SPI_Comm.RX_length = 1;
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	2201      	movs	r2, #1
 800082c:	619a      	str	r2, [r3, #24]
	if (pSPIhandle->SPI_Config.SPI_DataSize == SPI_8BIT){
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	79db      	ldrb	r3, [r3, #7]
 8000832:	2b07      	cmp	r3, #7
 8000834:	d107      	bne.n	8000846 <flushDR+0x3a>
			*(pSPIhandle->SPI_Comm.RX_buffer) = ((uint8_t)pSPIhandle->pSPI->SPI_DR) ;
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	68da      	ldr	r2, [r3, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	69db      	ldr	r3, [r3, #28]
 8000840:	b2d2      	uxtb	r2, r2
 8000842:	701a      	strb	r2, [r3, #0]
 8000844:	e00a      	b.n	800085c <flushDR+0x50>
	}
	else if (pSPIhandle->SPI_Config.SPI_DataSize == SPI_16BIT){
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	79db      	ldrb	r3, [r3, #7]
 800084a:	2b0f      	cmp	r3, #15
 800084c:	d106      	bne.n	800085c <flushDR+0x50>
		//RX_buffer is defined as 8-bit.additional treatment is necessary
		*((uint16_t*)pSPIhandle->SPI_Comm.RX_buffer) = ((uint16_t)pSPIhandle->pSPI->SPI_DR) ;
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	68da      	ldr	r2, [r3, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	69db      	ldr	r3, [r3, #28]
 8000858:	b292      	uxth	r2, r2
 800085a:	801a      	strh	r2, [r3, #0]
	}
	for (indexFlush=0;indexFlush<2;indexFlush++){
 800085c:	2317      	movs	r3, #23
 800085e:	18fb      	adds	r3, r7, r3
 8000860:	2200      	movs	r2, #0
 8000862:	701a      	strb	r2, [r3, #0]
 8000864:	e023      	b.n	80008ae <flushDR+0xa2>
		rxbuffer[indexFlush] = (pSPIhandle->SPI_Comm.RX_buffer)[indexFlush];
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	69da      	ldr	r2, [r3, #28]
 800086a:	2417      	movs	r4, #23
 800086c:	193b      	adds	r3, r7, r4
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	18d2      	adds	r2, r2, r3
 8000872:	193b      	adds	r3, r7, r4
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	68b9      	ldr	r1, [r7, #8]
 8000878:	18cb      	adds	r3, r1, r3
 800087a:	7812      	ldrb	r2, [r2, #0]
 800087c:	701a      	strb	r2, [r3, #0]
		printf("flushed RX index: %d\n", indexFlush);
 800087e:	193b      	adds	r3, r7, r4
 8000880:	781a      	ldrb	r2, [r3, #0]
 8000882:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <flushDR+0xc4>)
 8000884:	0011      	movs	r1, r2
 8000886:	0018      	movs	r0, r3
 8000888:	f000 fdaa 	bl	80013e0 <iprintf>
		printf("%d\n",rxbuffer[indexFlush]);
 800088c:	193b      	adds	r3, r7, r4
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	68ba      	ldr	r2, [r7, #8]
 8000892:	18d3      	adds	r3, r2, r3
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	b2db      	uxtb	r3, r3
 8000898:	001a      	movs	r2, r3
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <flushDR+0xc8>)
 800089c:	0011      	movs	r1, r2
 800089e:	0018      	movs	r0, r3
 80008a0:	f000 fd9e 	bl	80013e0 <iprintf>
	for (indexFlush=0;indexFlush<2;indexFlush++){
 80008a4:	193b      	adds	r3, r7, r4
 80008a6:	781a      	ldrb	r2, [r3, #0]
 80008a8:	193b      	adds	r3, r7, r4
 80008aa:	3201      	adds	r2, #1
 80008ac:	701a      	strb	r2, [r3, #0]
 80008ae:	2317      	movs	r3, #23
 80008b0:	18fb      	adds	r3, r7, r3
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d9d6      	bls.n	8000866 <flushDR+0x5a>
	}
	pSPIhandle->SPI_Comm.RX_buffer = NULL; //null pointer
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
	pSPIhandle->SPI_Comm.RX_state = SPI_READY;
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	2220      	movs	r2, #32
 80008c2:	2100      	movs	r1, #0
 80008c4:	5499      	strb	r1, [r3, r2]
}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	46bd      	mov	sp, r7
 80008ca:	b007      	add	sp, #28
 80008cc:	bd90      	pop	{r4, r7, pc}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	08002ac4 	.word	0x08002ac4
 80008d4:	08002aa8 	.word	0x08002aa8

080008d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008d8:	480d      	ldr	r0, [pc, #52]	; (8000910 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008dc:	e000      	b.n	80008e0 <Reset_Handler+0x8>
 80008de:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e0:	480c      	ldr	r0, [pc, #48]	; (8000914 <LoopForever+0x6>)
  ldr r1, =_edata
 80008e2:	490d      	ldr	r1, [pc, #52]	; (8000918 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008e4:	4a0d      	ldr	r2, [pc, #52]	; (800091c <LoopForever+0xe>)
  movs r3, #0
 80008e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e8:	e002      	b.n	80008f0 <LoopCopyDataInit>

080008ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ee:	3304      	adds	r3, #4

080008f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f4:	d3f9      	bcc.n	80008ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f6:	4a0a      	ldr	r2, [pc, #40]	; (8000920 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008f8:	4c0a      	ldr	r4, [pc, #40]	; (8000924 <LoopForever+0x16>)
  movs r3, #0
 80008fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008fc:	e001      	b.n	8000902 <LoopFillZerobss>

080008fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000900:	3204      	adds	r2, #4

08000902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000904:	d3fb      	bcc.n	80008fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000906:	f000 fd3f 	bl	8001388 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800090a:	f7ff fce5 	bl	80002d8 <main>

0800090e <LoopForever>:

LoopForever:
    b LoopForever
 800090e:	e7fe      	b.n	800090e <LoopForever>
  ldr   r0, =_estack
 8000910:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000918:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800091c:	08002b98 	.word	0x08002b98
  ldr r2, =_sbss
 8000920:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000924:	200001a4 	.word	0x200001a4

08000928 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000928:	e7fe      	b.n	8000928 <ADC_COMP_IRQHandler>
	...

0800092c <GPIO_ClockControl>:
 *      Author: danim
 */

#include "gpio.h"
/*********GPIO clock control***************/
void GPIO_ClockControl(GPIO_RegStruct_t *pGPIO, uint8_t EnableDisable){
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	000a      	movs	r2, r1
 8000936:	1cfb      	adds	r3, r7, #3
 8000938:	701a      	strb	r2, [r3, #0]

	if (EnableDisable == ENABLE) {
 800093a:	1cfb      	adds	r3, r7, #3
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b01      	cmp	r3, #1
 8000940:	d148      	bne.n	80009d4 <GPIO_ClockControl+0xa8>
		if (pGPIO==GPIOA) { //I can't do switch-case with pointers! that's why I use if
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	2390      	movs	r3, #144	; 0x90
 8000946:	05db      	lsls	r3, r3, #23
 8000948:	429a      	cmp	r2, r3
 800094a:	d107      	bne.n	800095c <GPIO_ClockControl+0x30>
			GPIOA_EnableClock();
 800094c:	4b44      	ldr	r3, [pc, #272]	; (8000a60 <GPIO_ClockControl+0x134>)
 800094e:	695a      	ldr	r2, [r3, #20]
 8000950:	4b43      	ldr	r3, [pc, #268]	; (8000a60 <GPIO_ClockControl+0x134>)
 8000952:	2180      	movs	r1, #128	; 0x80
 8000954:	0289      	lsls	r1, r1, #10
 8000956:	430a      	orrs	r2, r1
 8000958:	615a      	str	r2, [r3, #20]
		}
		else if (pGPIO==GPIOF){
			GPIOF_DisableClock();
		}
	}
}
 800095a:	e07d      	b.n	8000a58 <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOB){
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4a41      	ldr	r2, [pc, #260]	; (8000a64 <GPIO_ClockControl+0x138>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d107      	bne.n	8000974 <GPIO_ClockControl+0x48>
			GPIOB_EnableClock();
 8000964:	4b3e      	ldr	r3, [pc, #248]	; (8000a60 <GPIO_ClockControl+0x134>)
 8000966:	695a      	ldr	r2, [r3, #20]
 8000968:	4b3d      	ldr	r3, [pc, #244]	; (8000a60 <GPIO_ClockControl+0x134>)
 800096a:	2180      	movs	r1, #128	; 0x80
 800096c:	02c9      	lsls	r1, r1, #11
 800096e:	430a      	orrs	r2, r1
 8000970:	615a      	str	r2, [r3, #20]
}
 8000972:	e071      	b.n	8000a58 <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOC){
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4a3c      	ldr	r2, [pc, #240]	; (8000a68 <GPIO_ClockControl+0x13c>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d107      	bne.n	800098c <GPIO_ClockControl+0x60>
			GPIOC_EnableClock();
 800097c:	4b38      	ldr	r3, [pc, #224]	; (8000a60 <GPIO_ClockControl+0x134>)
 800097e:	695a      	ldr	r2, [r3, #20]
 8000980:	4b37      	ldr	r3, [pc, #220]	; (8000a60 <GPIO_ClockControl+0x134>)
 8000982:	2180      	movs	r1, #128	; 0x80
 8000984:	0309      	lsls	r1, r1, #12
 8000986:	430a      	orrs	r2, r1
 8000988:	615a      	str	r2, [r3, #20]
}
 800098a:	e065      	b.n	8000a58 <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOD){
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4a37      	ldr	r2, [pc, #220]	; (8000a6c <GPIO_ClockControl+0x140>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d107      	bne.n	80009a4 <GPIO_ClockControl+0x78>
			GPIOD_EnableClock();
 8000994:	4b32      	ldr	r3, [pc, #200]	; (8000a60 <GPIO_ClockControl+0x134>)
 8000996:	695a      	ldr	r2, [r3, #20]
 8000998:	4b31      	ldr	r3, [pc, #196]	; (8000a60 <GPIO_ClockControl+0x134>)
 800099a:	2180      	movs	r1, #128	; 0x80
 800099c:	0349      	lsls	r1, r1, #13
 800099e:	430a      	orrs	r2, r1
 80009a0:	615a      	str	r2, [r3, #20]
}
 80009a2:	e059      	b.n	8000a58 <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOE){
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4a32      	ldr	r2, [pc, #200]	; (8000a70 <GPIO_ClockControl+0x144>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d107      	bne.n	80009bc <GPIO_ClockControl+0x90>
			GPIOE_EnableClock();
 80009ac:	4b2c      	ldr	r3, [pc, #176]	; (8000a60 <GPIO_ClockControl+0x134>)
 80009ae:	695a      	ldr	r2, [r3, #20]
 80009b0:	4b2b      	ldr	r3, [pc, #172]	; (8000a60 <GPIO_ClockControl+0x134>)
 80009b2:	2180      	movs	r1, #128	; 0x80
 80009b4:	0389      	lsls	r1, r1, #14
 80009b6:	430a      	orrs	r2, r1
 80009b8:	615a      	str	r2, [r3, #20]
}
 80009ba:	e04d      	b.n	8000a58 <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOF){
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4a2d      	ldr	r2, [pc, #180]	; (8000a74 <GPIO_ClockControl+0x148>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d149      	bne.n	8000a58 <GPIO_ClockControl+0x12c>
			GPIOF_EnableClock();
 80009c4:	4b26      	ldr	r3, [pc, #152]	; (8000a60 <GPIO_ClockControl+0x134>)
 80009c6:	695a      	ldr	r2, [r3, #20]
 80009c8:	4b25      	ldr	r3, [pc, #148]	; (8000a60 <GPIO_ClockControl+0x134>)
 80009ca:	2180      	movs	r1, #128	; 0x80
 80009cc:	03c9      	lsls	r1, r1, #15
 80009ce:	430a      	orrs	r2, r1
 80009d0:	615a      	str	r2, [r3, #20]
}
 80009d2:	e041      	b.n	8000a58 <GPIO_ClockControl+0x12c>
		if (pGPIO==GPIOA) { //I can't do switch-case with pointers! that's why I use if
 80009d4:	687a      	ldr	r2, [r7, #4]
 80009d6:	2390      	movs	r3, #144	; 0x90
 80009d8:	05db      	lsls	r3, r3, #23
 80009da:	429a      	cmp	r2, r3
 80009dc:	d106      	bne.n	80009ec <GPIO_ClockControl+0xc0>
			GPIOA_DisableClock();
 80009de:	4b20      	ldr	r3, [pc, #128]	; (8000a60 <GPIO_ClockControl+0x134>)
 80009e0:	695a      	ldr	r2, [r3, #20]
 80009e2:	4b1f      	ldr	r3, [pc, #124]	; (8000a60 <GPIO_ClockControl+0x134>)
 80009e4:	4924      	ldr	r1, [pc, #144]	; (8000a78 <GPIO_ClockControl+0x14c>)
 80009e6:	400a      	ands	r2, r1
 80009e8:	615a      	str	r2, [r3, #20]
}
 80009ea:	e035      	b.n	8000a58 <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOB){
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4a1d      	ldr	r2, [pc, #116]	; (8000a64 <GPIO_ClockControl+0x138>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d106      	bne.n	8000a02 <GPIO_ClockControl+0xd6>
			GPIOB_DisableClock();
 80009f4:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <GPIO_ClockControl+0x134>)
 80009f6:	695a      	ldr	r2, [r3, #20]
 80009f8:	4b19      	ldr	r3, [pc, #100]	; (8000a60 <GPIO_ClockControl+0x134>)
 80009fa:	4920      	ldr	r1, [pc, #128]	; (8000a7c <GPIO_ClockControl+0x150>)
 80009fc:	400a      	ands	r2, r1
 80009fe:	615a      	str	r2, [r3, #20]
}
 8000a00:	e02a      	b.n	8000a58 <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOC){
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a18      	ldr	r2, [pc, #96]	; (8000a68 <GPIO_ClockControl+0x13c>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d106      	bne.n	8000a18 <GPIO_ClockControl+0xec>
			GPIOC_DisableClock();
 8000a0a:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <GPIO_ClockControl+0x134>)
 8000a0c:	695a      	ldr	r2, [r3, #20]
 8000a0e:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <GPIO_ClockControl+0x134>)
 8000a10:	491b      	ldr	r1, [pc, #108]	; (8000a80 <GPIO_ClockControl+0x154>)
 8000a12:	400a      	ands	r2, r1
 8000a14:	615a      	str	r2, [r3, #20]
}
 8000a16:	e01f      	b.n	8000a58 <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOD){
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a14      	ldr	r2, [pc, #80]	; (8000a6c <GPIO_ClockControl+0x140>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d106      	bne.n	8000a2e <GPIO_ClockControl+0x102>
			GPIOD_DisableClock();
 8000a20:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <GPIO_ClockControl+0x134>)
 8000a22:	695a      	ldr	r2, [r3, #20]
 8000a24:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <GPIO_ClockControl+0x134>)
 8000a26:	4917      	ldr	r1, [pc, #92]	; (8000a84 <GPIO_ClockControl+0x158>)
 8000a28:	400a      	ands	r2, r1
 8000a2a:	615a      	str	r2, [r3, #20]
}
 8000a2c:	e014      	b.n	8000a58 <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOE){
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a0f      	ldr	r2, [pc, #60]	; (8000a70 <GPIO_ClockControl+0x144>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d106      	bne.n	8000a44 <GPIO_ClockControl+0x118>
			GPIOE_DisableClock();
 8000a36:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <GPIO_ClockControl+0x134>)
 8000a38:	695a      	ldr	r2, [r3, #20]
 8000a3a:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <GPIO_ClockControl+0x134>)
 8000a3c:	4912      	ldr	r1, [pc, #72]	; (8000a88 <GPIO_ClockControl+0x15c>)
 8000a3e:	400a      	ands	r2, r1
 8000a40:	615a      	str	r2, [r3, #20]
}
 8000a42:	e009      	b.n	8000a58 <GPIO_ClockControl+0x12c>
		else if (pGPIO==GPIOF){
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4a0b      	ldr	r2, [pc, #44]	; (8000a74 <GPIO_ClockControl+0x148>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d105      	bne.n	8000a58 <GPIO_ClockControl+0x12c>
			GPIOF_DisableClock();
 8000a4c:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <GPIO_ClockControl+0x134>)
 8000a4e:	695a      	ldr	r2, [r3, #20]
 8000a50:	4b03      	ldr	r3, [pc, #12]	; (8000a60 <GPIO_ClockControl+0x134>)
 8000a52:	490e      	ldr	r1, [pc, #56]	; (8000a8c <GPIO_ClockControl+0x160>)
 8000a54:	400a      	ands	r2, r1
 8000a56:	615a      	str	r2, [r3, #20]
}
 8000a58:	46c0      	nop			; (mov r8, r8)
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	b002      	add	sp, #8
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40021000 	.word	0x40021000
 8000a64:	48000400 	.word	0x48000400
 8000a68:	48000800 	.word	0x48000800
 8000a6c:	48000c00 	.word	0x48000c00
 8000a70:	48001000 	.word	0x48001000
 8000a74:	48001400 	.word	0x48001400
 8000a78:	fffdffff 	.word	0xfffdffff
 8000a7c:	fffbffff 	.word	0xfffbffff
 8000a80:	fff7ffff 	.word	0xfff7ffff
 8000a84:	ffefffff 	.word	0xffefffff
 8000a88:	ffdfffff 	.word	0xffdfffff
 8000a8c:	ffbfffff 	.word	0xffbfffff

08000a90 <GPIO_PinInit>:
/*********GPIO pin initialization*************/
void GPIO_PinInit(GPIO_PinHandle_t *GPIO_PinHandle){
 8000a90:	b5b0      	push	{r4, r5, r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	//local variables used for temporary values in operations
	uint8_t temp1;
	uint8_t temp2;

	//enable GPIO port clock
	GPIO_ClockControl(GPIO_PinHandle->pGPIO,ENABLE);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f7ff ff44 	bl	800092c <GPIO_ClockControl>

	//configure MODE: if not interrupt, mode is input/output/analog/alternate function
	if ((GPIO_PinHandle->GPIO_PinConfig.GPIO_PinMode)<=GPIO_ANA){
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	795b      	ldrb	r3, [r3, #5]
 8000aa8:	2b03      	cmp	r3, #3
 8000aaa:	d81f      	bhi.n	8000aec <GPIO_PinInit+0x5c>
		// first,reset the 2 bits related to pin.ex:pin number 1 is for MODER bits 2 and 3. 3<<2*pin is 3<<2 aka 1100b.so MODER&=(~1100)=x..x00xx
		GPIO_PinHandle->pGPIO->MODER &= (~(3<<(2*GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber))); //I guess I can use 3 instead of 0x3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	791b      	ldrb	r3, [r3, #4]
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	2103      	movs	r1, #3
 8000aba:	4099      	lsls	r1, r3
 8000abc:	000b      	movs	r3, r1
 8000abe:	43db      	mvns	r3, r3
 8000ac0:	0019      	movs	r1, r3
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	400a      	ands	r2, r1
 8000ac8:	601a      	str	r2, [r3, #0]
		//now set
		GPIO_PinHandle->pGPIO->MODER |= (GPIO_PinHandle->GPIO_PinConfig.GPIO_PinMode<<(2*GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	795b      	ldrb	r3, [r3, #5]
 8000ad4:	0019      	movs	r1, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	791b      	ldrb	r3, [r3, #4]
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	4099      	lsls	r1, r3
 8000ade:	000b      	movs	r3, r1
 8000ae0:	0019      	movs	r1, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	e0af      	b.n	8000c4c <GPIO_PinInit+0x1bc>
	}
	else{ //interrupts
		//Configure the edge trigger (EXTI FTSR and RTSR). EXTI line "y" is for pins "y"; example, EXTI15 is for GPIOA15..GPIOF15
		if ((GPIO_PinHandle->GPIO_PinConfig.GPIO_PinMode)==GPIO_FALL_TRIG){
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	795b      	ldrb	r3, [r3, #5]
 8000af0:	2b04      	cmp	r3, #4
 8000af2:	d117      	bne.n	8000b24 <GPIO_PinInit+0x94>
			//set falling edge trigger
			EXTI->FTSR |= (1<<GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000af4:	4ba5      	ldr	r3, [pc, #660]	; (8000d8c <GPIO_PinInit+0x2fc>)
 8000af6:	68da      	ldr	r2, [r3, #12]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	791b      	ldrb	r3, [r3, #4]
 8000afc:	0019      	movs	r1, r3
 8000afe:	2301      	movs	r3, #1
 8000b00:	408b      	lsls	r3, r1
 8000b02:	0019      	movs	r1, r3
 8000b04:	4ba1      	ldr	r3, [pc, #644]	; (8000d8c <GPIO_PinInit+0x2fc>)
 8000b06:	430a      	orrs	r2, r1
 8000b08:	60da      	str	r2, [r3, #12]
			//clear rising edge trigger!
			EXTI->RTSR &= ~(1<<GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b0a:	4ba0      	ldr	r3, [pc, #640]	; (8000d8c <GPIO_PinInit+0x2fc>)
 8000b0c:	689a      	ldr	r2, [r3, #8]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	791b      	ldrb	r3, [r3, #4]
 8000b12:	0019      	movs	r1, r3
 8000b14:	2301      	movs	r3, #1
 8000b16:	408b      	lsls	r3, r1
 8000b18:	43db      	mvns	r3, r3
 8000b1a:	0019      	movs	r1, r3
 8000b1c:	4b9b      	ldr	r3, [pc, #620]	; (8000d8c <GPIO_PinInit+0x2fc>)
 8000b1e:	400a      	ands	r2, r1
 8000b20:	609a      	str	r2, [r3, #8]
 8000b22:	e035      	b.n	8000b90 <GPIO_PinInit+0x100>
		}
		else if ((GPIO_PinHandle->GPIO_PinConfig.GPIO_PinMode)==GPIO_RISE_TRIG){
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	795b      	ldrb	r3, [r3, #5]
 8000b28:	2b05      	cmp	r3, #5
 8000b2a:	d117      	bne.n	8000b5c <GPIO_PinInit+0xcc>
			//set rising edge trigger
			EXTI->RTSR |= (1<<GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b2c:	4b97      	ldr	r3, [pc, #604]	; (8000d8c <GPIO_PinInit+0x2fc>)
 8000b2e:	689a      	ldr	r2, [r3, #8]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	791b      	ldrb	r3, [r3, #4]
 8000b34:	0019      	movs	r1, r3
 8000b36:	2301      	movs	r3, #1
 8000b38:	408b      	lsls	r3, r1
 8000b3a:	0019      	movs	r1, r3
 8000b3c:	4b93      	ldr	r3, [pc, #588]	; (8000d8c <GPIO_PinInit+0x2fc>)
 8000b3e:	430a      	orrs	r2, r1
 8000b40:	609a      	str	r2, [r3, #8]
			//clear falling edge trigger!
			EXTI->FTSR &= ~(1<<GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b42:	4b92      	ldr	r3, [pc, #584]	; (8000d8c <GPIO_PinInit+0x2fc>)
 8000b44:	68da      	ldr	r2, [r3, #12]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	791b      	ldrb	r3, [r3, #4]
 8000b4a:	0019      	movs	r1, r3
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	408b      	lsls	r3, r1
 8000b50:	43db      	mvns	r3, r3
 8000b52:	0019      	movs	r1, r3
 8000b54:	4b8d      	ldr	r3, [pc, #564]	; (8000d8c <GPIO_PinInit+0x2fc>)
 8000b56:	400a      	ands	r2, r1
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	e019      	b.n	8000b90 <GPIO_PinInit+0x100>
		}
		else if ((GPIO_PinHandle->GPIO_PinConfig.GPIO_PinMode)==GPIO_FALLRISE_TRIG){
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	795b      	ldrb	r3, [r3, #5]
 8000b60:	2b06      	cmp	r3, #6
 8000b62:	d115      	bne.n	8000b90 <GPIO_PinInit+0x100>
			//set both falling and rising edge triggers
			EXTI->FTSR |= (1<<GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b64:	4b89      	ldr	r3, [pc, #548]	; (8000d8c <GPIO_PinInit+0x2fc>)
 8000b66:	68da      	ldr	r2, [r3, #12]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	791b      	ldrb	r3, [r3, #4]
 8000b6c:	0019      	movs	r1, r3
 8000b6e:	2301      	movs	r3, #1
 8000b70:	408b      	lsls	r3, r1
 8000b72:	0019      	movs	r1, r3
 8000b74:	4b85      	ldr	r3, [pc, #532]	; (8000d8c <GPIO_PinInit+0x2fc>)
 8000b76:	430a      	orrs	r2, r1
 8000b78:	60da      	str	r2, [r3, #12]
			EXTI->RTSR |= (1<<GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b7a:	4b84      	ldr	r3, [pc, #528]	; (8000d8c <GPIO_PinInit+0x2fc>)
 8000b7c:	689a      	ldr	r2, [r3, #8]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	791b      	ldrb	r3, [r3, #4]
 8000b82:	0019      	movs	r1, r3
 8000b84:	2301      	movs	r3, #1
 8000b86:	408b      	lsls	r3, r1
 8000b88:	0019      	movs	r1, r3
 8000b8a:	4b80      	ldr	r3, [pc, #512]	; (8000d8c <GPIO_PinInit+0x2fc>)
 8000b8c:	430a      	orrs	r2, r1
 8000b8e:	609a      	str	r2, [r3, #8]
		}

		//EXTICR: select the GPIO for the interruption on corresponding EXTI line through EXTICR registers (every allows just one, so it's a decision)
		//EXTICR0:for GPIO pins 0-3. Blocks of 4 bits to select A-F.EXTICR1: for GPIO pins 4-7. Blocks of 4 bits to select A-F. And so on
		//if GPIOD10-->EXTICR3 (block1,that is,from bit4) because EXTICR1 is for pins 0-3, CR2 pins 4-7 and so on. GPIOD--> 010
		temp1 = GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber/4; //to know which EXTICR
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	791a      	ldrb	r2, [r3, #4]
 8000b94:	200f      	movs	r0, #15
 8000b96:	183b      	adds	r3, r7, r0
 8000b98:	0892      	lsrs	r2, r2, #2
 8000b9a:	701a      	strb	r2, [r3, #0]
		temp2 = GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber%4;//to know the block within EXTICR
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	791a      	ldrb	r2, [r3, #4]
 8000ba0:	230e      	movs	r3, #14
 8000ba2:	18fb      	adds	r3, r7, r3
 8000ba4:	2103      	movs	r1, #3
 8000ba6:	400a      	ands	r2, r1
 8000ba8:	701a      	strb	r2, [r3, #0]
		//enable SYSCFG clock and configure the correspondingEXTICR
		SYSCFG_EnableClock();
 8000baa:	4b79      	ldr	r3, [pc, #484]	; (8000d90 <GPIO_PinInit+0x300>)
 8000bac:	699a      	ldr	r2, [r3, #24]
 8000bae:	4b78      	ldr	r3, [pc, #480]	; (8000d90 <GPIO_PinInit+0x300>)
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	430a      	orrs	r2, r1
 8000bb4:	619a      	str	r2, [r3, #24]
		SYSCFG->EXTICR[temp1] |= ((GPIO_PORT_TO_NUMBER(GPIO_PinHandle->pGPIO))<< (4*temp2) );
 8000bb6:	4a77      	ldr	r2, [pc, #476]	; (8000d94 <GPIO_PinInit+0x304>)
 8000bb8:	183b      	adds	r3, r7, r0
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	3302      	adds	r3, #2
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	589a      	ldr	r2, [r3, r2]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6819      	ldr	r1, [r3, #0]
 8000bc6:	2390      	movs	r3, #144	; 0x90
 8000bc8:	05db      	lsls	r3, r3, #23
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	d024      	beq.n	8000c18 <GPIO_PinInit+0x188>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4971      	ldr	r1, [pc, #452]	; (8000d98 <GPIO_PinInit+0x308>)
 8000bd4:	428b      	cmp	r3, r1
 8000bd6:	d01d      	beq.n	8000c14 <GPIO_PinInit+0x184>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	496f      	ldr	r1, [pc, #444]	; (8000d9c <GPIO_PinInit+0x30c>)
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d016      	beq.n	8000c10 <GPIO_PinInit+0x180>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	496e      	ldr	r1, [pc, #440]	; (8000da0 <GPIO_PinInit+0x310>)
 8000be8:	428b      	cmp	r3, r1
 8000bea:	d00f      	beq.n	8000c0c <GPIO_PinInit+0x17c>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	496c      	ldr	r1, [pc, #432]	; (8000da4 <GPIO_PinInit+0x314>)
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d008      	beq.n	8000c08 <GPIO_PinInit+0x178>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	496b      	ldr	r1, [pc, #428]	; (8000da8 <GPIO_PinInit+0x318>)
 8000bfc:	428b      	cmp	r3, r1
 8000bfe:	d101      	bne.n	8000c04 <GPIO_PinInit+0x174>
 8000c00:	2305      	movs	r3, #5
 8000c02:	e00a      	b.n	8000c1a <GPIO_PinInit+0x18a>
 8000c04:	2300      	movs	r3, #0
 8000c06:	e008      	b.n	8000c1a <GPIO_PinInit+0x18a>
 8000c08:	2304      	movs	r3, #4
 8000c0a:	e006      	b.n	8000c1a <GPIO_PinInit+0x18a>
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	e004      	b.n	8000c1a <GPIO_PinInit+0x18a>
 8000c10:	2302      	movs	r3, #2
 8000c12:	e002      	b.n	8000c1a <GPIO_PinInit+0x18a>
 8000c14:	2301      	movs	r3, #1
 8000c16:	e000      	b.n	8000c1a <GPIO_PinInit+0x18a>
 8000c18:	2300      	movs	r3, #0
 8000c1a:	210e      	movs	r1, #14
 8000c1c:	1879      	adds	r1, r7, r1
 8000c1e:	7809      	ldrb	r1, [r1, #0]
 8000c20:	0089      	lsls	r1, r1, #2
 8000c22:	408b      	lsls	r3, r1
 8000c24:	0018      	movs	r0, r3
 8000c26:	495b      	ldr	r1, [pc, #364]	; (8000d94 <GPIO_PinInit+0x304>)
 8000c28:	230f      	movs	r3, #15
 8000c2a:	18fb      	adds	r3, r7, r3
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	4302      	orrs	r2, r0
 8000c30:	3302      	adds	r3, #2
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	505a      	str	r2, [r3, r1]

		//ENABLE EXTI interrupt by means of interrupt mask register
		EXTI->IMR |= (1<<GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c36:	4b55      	ldr	r3, [pc, #340]	; (8000d8c <GPIO_PinInit+0x2fc>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	791b      	ldrb	r3, [r3, #4]
 8000c3e:	0019      	movs	r1, r3
 8000c40:	2301      	movs	r3, #1
 8000c42:	408b      	lsls	r3, r1
 8000c44:	0019      	movs	r1, r3
 8000c46:	4b51      	ldr	r3, [pc, #324]	; (8000d8c <GPIO_PinInit+0x2fc>)
 8000c48:	430a      	orrs	r2, r1
 8000c4a:	601a      	str	r2, [r3, #0]
		/*Check specific functions for the configuration on processor side: NVIC (nested vector interrupt controller)*/
	}

	//OUTPUT TYPE. TBD:don't do if !=output mode?
	// first,reset the related bit
	GPIO_PinHandle->pGPIO->OTYPER &= (~(1<<GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	685a      	ldr	r2, [r3, #4]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	791b      	ldrb	r3, [r3, #4]
 8000c56:	0019      	movs	r1, r3
 8000c58:	2301      	movs	r3, #1
 8000c5a:	408b      	lsls	r3, r1
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	0019      	movs	r1, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	400a      	ands	r2, r1
 8000c66:	605a      	str	r2, [r3, #4]
	//now set
	GPIO_PinHandle->pGPIO->OTYPER |= (GPIO_PinHandle->GPIO_PinConfig.GPIO_PinOutType<<(GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	685a      	ldr	r2, [r3, #4]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	799b      	ldrb	r3, [r3, #6]
 8000c72:	0019      	movs	r1, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	791b      	ldrb	r3, [r3, #4]
 8000c78:	4099      	lsls	r1, r3
 8000c7a:	000b      	movs	r3, r1
 8000c7c:	0019      	movs	r1, r3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	430a      	orrs	r2, r1
 8000c84:	605a      	str	r2, [r3, #4]

	//OUTPUT SPEED. TBD:don't do if !=output mode?
	// first,reset the related bits
	GPIO_PinHandle->pGPIO->OSPEEDR &= (~(3<<(2*GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber)));
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	689a      	ldr	r2, [r3, #8]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	791b      	ldrb	r3, [r3, #4]
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	2103      	movs	r1, #3
 8000c94:	4099      	lsls	r1, r3
 8000c96:	000b      	movs	r3, r1
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	0019      	movs	r1, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	400a      	ands	r2, r1
 8000ca2:	609a      	str	r2, [r3, #8]
	//now set
	GPIO_PinHandle->pGPIO->OSPEEDR |= (GPIO_PinHandle->GPIO_PinConfig.GPIO_PinOutSpeed<<(2*GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	689a      	ldr	r2, [r3, #8]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	79db      	ldrb	r3, [r3, #7]
 8000cae:	0019      	movs	r1, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	791b      	ldrb	r3, [r3, #4]
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	4099      	lsls	r1, r3
 8000cb8:	000b      	movs	r3, r1
 8000cba:	0019      	movs	r1, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	609a      	str	r2, [r3, #8]

	//PULL UP/DOWN
	// first,reset the related bits
	GPIO_PinHandle->pGPIO->PUPDR &= (~(3<<(2*GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber)));
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	68da      	ldr	r2, [r3, #12]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	791b      	ldrb	r3, [r3, #4]
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	2103      	movs	r1, #3
 8000cd2:	4099      	lsls	r1, r3
 8000cd4:	000b      	movs	r3, r1
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	0019      	movs	r1, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	400a      	ands	r2, r1
 8000ce0:	60da      	str	r2, [r3, #12]
	//now set
	GPIO_PinHandle->pGPIO->PUPDR |= (GPIO_PinHandle->GPIO_PinConfig.GPIO_PinPullUpDown<<(2*GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	68da      	ldr	r2, [r3, #12]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	7a1b      	ldrb	r3, [r3, #8]
 8000cec:	0019      	movs	r1, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	791b      	ldrb	r3, [r3, #4]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	4099      	lsls	r1, r3
 8000cf6:	000b      	movs	r3, r1
 8000cf8:	0019      	movs	r1, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	430a      	orrs	r2, r1
 8000d00:	60da      	str	r2, [r3, #12]

	//ALTERNATE FUNCTION
	if (GPIO_PinHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_ALTFUN){
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	795b      	ldrb	r3, [r3, #5]
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	d13b      	bne.n	8000d82 <GPIO_PinInit+0x2f2>
		//as there are 2 registers, low is for pins 0-7 and high for 8-15.in our struct,AFR[2].We need to know where to actuate
		temp1 = GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber / 8 ; //ex: pin 7-->reg 0,byte=7(last);pin12 --> reg1, byte=4
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	791a      	ldrb	r2, [r3, #4]
 8000d0e:	240f      	movs	r4, #15
 8000d10:	193b      	adds	r3, r7, r4
 8000d12:	08d2      	lsrs	r2, r2, #3
 8000d14:	701a      	strb	r2, [r3, #0]
		temp2 = GPIO_PinHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	791a      	ldrb	r2, [r3, #4]
 8000d1a:	250e      	movs	r5, #14
 8000d1c:	197b      	adds	r3, r7, r5
 8000d1e:	2107      	movs	r1, #7
 8000d20:	400a      	ands	r2, r1
 8000d22:	701a      	strb	r2, [r3, #0]
		// first,reset the related bits. in this case, 4. ~1111 is ~0x0F
		GPIO_PinHandle->pGPIO->AFR[temp1] &= (~(0xF<<(4*temp2)));
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	193a      	adds	r2, r7, r4
 8000d2a:	7812      	ldrb	r2, [r2, #0]
 8000d2c:	3208      	adds	r2, #8
 8000d2e:	0092      	lsls	r2, r2, #2
 8000d30:	58d1      	ldr	r1, [r2, r3]
 8000d32:	197b      	adds	r3, r7, r5
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	220f      	movs	r2, #15
 8000d3a:	409a      	lsls	r2, r3
 8000d3c:	0013      	movs	r3, r2
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	0018      	movs	r0, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	193a      	adds	r2, r7, r4
 8000d48:	7812      	ldrb	r2, [r2, #0]
 8000d4a:	4001      	ands	r1, r0
 8000d4c:	3208      	adds	r2, #8
 8000d4e:	0092      	lsls	r2, r2, #2
 8000d50:	50d1      	str	r1, [r2, r3]
		//now set
		GPIO_PinHandle->pGPIO->AFR[temp1] |= (GPIO_PinHandle->GPIO_PinConfig.GPIO_PinAlterFunc<<(4*temp2));
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	193a      	adds	r2, r7, r4
 8000d58:	7812      	ldrb	r2, [r2, #0]
 8000d5a:	3208      	adds	r2, #8
 8000d5c:	0092      	lsls	r2, r2, #2
 8000d5e:	58d1      	ldr	r1, [r2, r3]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	7a5b      	ldrb	r3, [r3, #9]
 8000d64:	001a      	movs	r2, r3
 8000d66:	197b      	adds	r3, r7, r5
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	409a      	lsls	r2, r3
 8000d6e:	0013      	movs	r3, r2
 8000d70:	0018      	movs	r0, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	193a      	adds	r2, r7, r4
 8000d78:	7812      	ldrb	r2, [r2, #0]
 8000d7a:	4301      	orrs	r1, r0
 8000d7c:	3208      	adds	r2, #8
 8000d7e:	0092      	lsls	r2, r2, #2
 8000d80:	50d1      	str	r1, [r2, r3]
	}
}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	46bd      	mov	sp, r7
 8000d86:	b004      	add	sp, #16
 8000d88:	bdb0      	pop	{r4, r5, r7, pc}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	40010400 	.word	0x40010400
 8000d90:	40021000 	.word	0x40021000
 8000d94:	40010000 	.word	0x40010000
 8000d98:	48000400 	.word	0x48000400
 8000d9c:	48000800 	.word	0x48000800
 8000da0:	48000c00 	.word	0x48000c00
 8000da4:	48001000 	.word	0x48001000
 8000da8:	48001400 	.word	0x48001400

08000dac <GPIO_WritePin>:
uint16_t GPIO_ReadPort(GPIO_RegStruct_t *pGPIO){
	return (uint16_t)pGPIO->IDR;
}

/**************************Write to output (pin or port)************************/
void GPIO_WritePin(GPIO_RegStruct_t *pGPIO, uint8_t pin, uint8_t output){
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	0008      	movs	r0, r1
 8000db6:	0011      	movs	r1, r2
 8000db8:	1cfb      	adds	r3, r7, #3
 8000dba:	1c02      	adds	r2, r0, #0
 8000dbc:	701a      	strb	r2, [r3, #0]
 8000dbe:	1cbb      	adds	r3, r7, #2
 8000dc0:	1c0a      	adds	r2, r1, #0
 8000dc2:	701a      	strb	r2, [r3, #0]
	//do not do first clear the related bit and then set.we don't want to modify the output
	//I prefer to do an if statement than using intermediate variables to clear and set
	if (output==1){
 8000dc4:	1cbb      	adds	r3, r7, #2
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d10a      	bne.n	8000de2 <GPIO_WritePin+0x36>
		pGPIO->ODR |= (1<<pin);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	695b      	ldr	r3, [r3, #20]
 8000dd0:	1cfa      	adds	r2, r7, #3
 8000dd2:	7812      	ldrb	r2, [r2, #0]
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	4091      	lsls	r1, r2
 8000dd8:	000a      	movs	r2, r1
 8000dda:	431a      	orrs	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	615a      	str	r2, [r3, #20]
	}
	else { //0
		pGPIO->ODR &= (~(1<<pin));
	}

}
 8000de0:	e00a      	b.n	8000df8 <GPIO_WritePin+0x4c>
		pGPIO->ODR &= (~(1<<pin));
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	1cfa      	adds	r2, r7, #3
 8000de8:	7812      	ldrb	r2, [r2, #0]
 8000dea:	2101      	movs	r1, #1
 8000dec:	4091      	lsls	r1, r2
 8000dee:	000a      	movs	r2, r1
 8000df0:	43d2      	mvns	r2, r2
 8000df2:	401a      	ands	r2, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	615a      	str	r2, [r3, #20]
}
 8000df8:	46c0      	nop			; (mov r8, r8)
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	b002      	add	sp, #8
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <GPIO_IRQ_EnableDisable>:
	pGPIO->ODR ^= (1<<pin); //^ is XOR. 1^0=0;0^1=1;1^1=0;0^0=0. So x^1 = !x
}

/*************************NVIC functions for IRQ*****************************************/
/*Enable or disable an IRQ*/
void GPIO_IRQ_EnableDisable(uint8_t IRQ_Number, uint8_t EnableDisable){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	0002      	movs	r2, r0
 8000e08:	1dfb      	adds	r3, r7, #7
 8000e0a:	701a      	strb	r2, [r3, #0]
 8000e0c:	1dbb      	adds	r3, r7, #6
 8000e0e:	1c0a      	adds	r2, r1, #0
 8000e10:	701a      	strb	r2, [r3, #0]
	if(EnableDisable == ENABLE){ //enable by means of ISER
 8000e12:	1dbb      	adds	r3, r7, #6
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d10b      	bne.n	8000e32 <GPIO_IRQ_EnableDisable+0x32>
		*NVIC_ISER |= ( 1 << IRQ_Number);
 8000e1a:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <GPIO_IRQ_EnableDisable+0x50>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	1dfb      	adds	r3, r7, #7
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	2101      	movs	r1, #1
 8000e24:	4099      	lsls	r1, r3
 8000e26:	000b      	movs	r3, r1
 8000e28:	0019      	movs	r1, r3
 8000e2a:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <GPIO_IRQ_EnableDisable+0x50>)
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	601a      	str	r2, [r3, #0]
	}
	else { //disable by means of ICER
		*NVIC_ICER |= ( 1 << IRQ_Number);
	}

}
 8000e30:	e00a      	b.n	8000e48 <GPIO_IRQ_EnableDisable+0x48>
		*NVIC_ICER |= ( 1 << IRQ_Number);
 8000e32:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <GPIO_IRQ_EnableDisable+0x54>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	1dfb      	adds	r3, r7, #7
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	4099      	lsls	r1, r3
 8000e3e:	000b      	movs	r3, r1
 8000e40:	0019      	movs	r1, r3
 8000e42:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <GPIO_IRQ_EnableDisable+0x54>)
 8000e44:	430a      	orrs	r2, r1
 8000e46:	601a      	str	r2, [r3, #0]
}
 8000e48:	46c0      	nop			; (mov r8, r8)
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b002      	add	sp, #8
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	e000e100 	.word	0xe000e100
 8000e54:	e000e180 	.word	0xe000e180

08000e58 <GPIO_IRQ_Handling>:
	//Clear the block and set. Better if I use intermediate variables instead of modifying many times the IPR
	uint32_t tempIPR = ((*(NVIC_IPR_BASE + numberIPR))&~(0xFF<<blockIPR));
	tempIPR |= (IRQ_Priority<<(8*blockIPR+6)); //6 is because bits 0-5 are not editable, only bits 6-7 count.
	*(NVIC_IPR_BASE + numberIPR) = tempIPR;
}
void GPIO_IRQ_Handling(uint8_t pin){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	0002      	movs	r2, r0
 8000e60:	1dfb      	adds	r3, r7, #7
 8000e62:	701a      	strb	r2, [r3, #0]
	/*ISRs (handlers) are actually application specific and implement/override(weak) handlers defined in startup*/
	/*GPIO_IRQ_Handling will be called inside the ISR handler.*/
	//Clear the pending register of the EXTI(interrupt handling depends upon the peripheral).PR of processor is automatically cleared (I think)
	if ((EXTI->PR) & (1<<pin)){ //if PR[pin]==1
 8000e64:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <GPIO_IRQ_Handling+0x3c>)
 8000e66:	695b      	ldr	r3, [r3, #20]
 8000e68:	1dfa      	adds	r2, r7, #7
 8000e6a:	7812      	ldrb	r2, [r2, #0]
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	4091      	lsls	r1, r2
 8000e70:	000a      	movs	r2, r1
 8000e72:	4013      	ands	r3, r2
 8000e74:	d00a      	beq.n	8000e8c <GPIO_IRQ_Handling+0x34>
		(EXTI->PR) |= (1<<pin); //write 1 to clear the pending register
 8000e76:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <GPIO_IRQ_Handling+0x3c>)
 8000e78:	695a      	ldr	r2, [r3, #20]
 8000e7a:	1dfb      	adds	r3, r7, #7
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2101      	movs	r1, #1
 8000e80:	4099      	lsls	r1, r3
 8000e82:	000b      	movs	r3, r1
 8000e84:	0019      	movs	r1, r3
 8000e86:	4b03      	ldr	r3, [pc, #12]	; (8000e94 <GPIO_IRQ_Handling+0x3c>)
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	615a      	str	r2, [r3, #20]
	}

}
 8000e8c:	46c0      	nop			; (mov r8, r8)
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	b002      	add	sp, #8
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40010400 	.word	0x40010400

08000e98 <SPI_ClockControl>:
static void SPI_TXE_handler(SPI_Handle_t *pSPIhandle);
static void SPI_RXNE_handler(SPI_Handle_t *pSPIhandle);
static void SPI_OVR_handler(SPI_Handle_t *pSPIhandle);

/*Enable or disable SPI peripheral clock*/
void SPI_ClockControl(SPI_Handle_t *pSPIhandle, uint8_t EnableDisable){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	000a      	movs	r2, r1
 8000ea2:	1cfb      	adds	r3, r7, #3
 8000ea4:	701a      	strb	r2, [r3, #0]
	if (EnableDisable == ENABLE) {
 8000ea6:	1cfb      	adds	r3, r7, #3
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d119      	bne.n	8000ee2 <SPI_ClockControl+0x4a>
		if (pSPIhandle->pSPI == SPI1_I2S1){
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a19      	ldr	r2, [pc, #100]	; (8000f18 <SPI_ClockControl+0x80>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d107      	bne.n	8000ec8 <SPI_ClockControl+0x30>
			SPI1_I2S1_EnableClock();
 8000eb8:	4b18      	ldr	r3, [pc, #96]	; (8000f1c <SPI_ClockControl+0x84>)
 8000eba:	699a      	ldr	r2, [r3, #24]
 8000ebc:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <SPI_ClockControl+0x84>)
 8000ebe:	2180      	movs	r1, #128	; 0x80
 8000ec0:	0149      	lsls	r1, r1, #5
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	619a      	str	r2, [r3, #24]
		}
		else if (pSPIhandle->pSPI == SPI2){
			SPI2_DisableClock();
		}
	}
}
 8000ec6:	e023      	b.n	8000f10 <SPI_ClockControl+0x78>
		else if (pSPIhandle->pSPI == SPI2){
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a14      	ldr	r2, [pc, #80]	; (8000f20 <SPI_ClockControl+0x88>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d11e      	bne.n	8000f10 <SPI_ClockControl+0x78>
			SPI2_EnableClock();
 8000ed2:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <SPI_ClockControl+0x84>)
 8000ed4:	69da      	ldr	r2, [r3, #28]
 8000ed6:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <SPI_ClockControl+0x84>)
 8000ed8:	2180      	movs	r1, #128	; 0x80
 8000eda:	01c9      	lsls	r1, r1, #7
 8000edc:	430a      	orrs	r2, r1
 8000ede:	61da      	str	r2, [r3, #28]
}
 8000ee0:	e016      	b.n	8000f10 <SPI_ClockControl+0x78>
		if (pSPIhandle->pSPI == SPI1_I2S1){
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a0c      	ldr	r2, [pc, #48]	; (8000f18 <SPI_ClockControl+0x80>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d106      	bne.n	8000efa <SPI_ClockControl+0x62>
			SPI1_I2S1_DisableClock();
 8000eec:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <SPI_ClockControl+0x84>)
 8000eee:	699a      	ldr	r2, [r3, #24]
 8000ef0:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <SPI_ClockControl+0x84>)
 8000ef2:	490c      	ldr	r1, [pc, #48]	; (8000f24 <SPI_ClockControl+0x8c>)
 8000ef4:	400a      	ands	r2, r1
 8000ef6:	619a      	str	r2, [r3, #24]
}
 8000ef8:	e00a      	b.n	8000f10 <SPI_ClockControl+0x78>
		else if (pSPIhandle->pSPI == SPI2){
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a08      	ldr	r2, [pc, #32]	; (8000f20 <SPI_ClockControl+0x88>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d105      	bne.n	8000f10 <SPI_ClockControl+0x78>
			SPI2_DisableClock();
 8000f04:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <SPI_ClockControl+0x84>)
 8000f06:	69da      	ldr	r2, [r3, #28]
 8000f08:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <SPI_ClockControl+0x84>)
 8000f0a:	4907      	ldr	r1, [pc, #28]	; (8000f28 <SPI_ClockControl+0x90>)
 8000f0c:	400a      	ands	r2, r1
 8000f0e:	61da      	str	r2, [r3, #28]
}
 8000f10:	46c0      	nop			; (mov r8, r8)
 8000f12:	46bd      	mov	sp, r7
 8000f14:	b002      	add	sp, #8
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40013000 	.word	0x40013000
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	40003800 	.word	0x40003800
 8000f24:	ffffefff 	.word	0xffffefff
 8000f28:	ffffbfff 	.word	0xffffbfff

08000f2c <SPI_Init>:

/*SPI initialization, which does not mean to enable SPI (which is done through SPI_EnableDisable) */
void SPI_Init(SPI_Handle_t *pSPIhandle){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]

	SPI_ClockControl(pSPIhandle,ENABLE); //enable SPI peripheral clock
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2101      	movs	r1, #1
 8000f38:	0018      	movs	r0, r3
 8000f3a:	f7ff ffad 	bl	8000e98 <SPI_ClockControl>
	/*Configure CR1*/
	//first,CR1 can be reset completely as it is not related to other parts (it might be reset with memset in the app,too)
	pSPIhandle->pSPI->SPI_CR1 = 0;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]

	//master/slave
	pSPIhandle->pSPI->SPI_CR1 |= ((pSPIhandle->SPI_Config.SPI_Mode)<<SPI_CR1_MSTR); //bit MSTR set
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	791b      	ldrb	r3, [r3, #4]
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	0019      	movs	r1, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	601a      	str	r2, [r3, #0]

	//mode: full duplex/half duplex/simplex.Bits:BIDIMODE (full/half)+BIDIOE (output enabled)+RXONLY(1 if BIDIOE disabled)
	if (pSPIhandle->SPI_Config.SPI_Mode == SPI_FULLDUPLEX){
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	791b      	ldrb	r3, [r3, #4]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d108      	bne.n	8000f76 <SPI_Init+0x4a>
		pSPIhandle->pSPI->SPI_CR1 &= ~(1<<SPI_CR1_BIDIMODE); //not necessary to set 0 because SPI_CR1 had been initialized to 0,but makes code clearer
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4938      	ldr	r1, [pc, #224]	; (8001050 <SPI_Init+0x124>)
 8000f70:	400a      	ands	r2, r1
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	e02a      	b.n	8000fcc <SPI_Init+0xa0>
	}
	else if (pSPIhandle->SPI_Config.SPI_Mode == SPI_HALFDUPLEX){
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	791b      	ldrb	r3, [r3, #4]
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d109      	bne.n	8000f92 <SPI_Init+0x66>
		pSPIhandle->pSPI->SPI_CR1 |= (1<<SPI_CR1_BIDIMODE);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2180      	movs	r1, #128	; 0x80
 8000f8a:	0209      	lsls	r1, r1, #8
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	e01c      	b.n	8000fcc <SPI_Init+0xa0>
	}
	else if (pSPIhandle->SPI_Config.SPI_Mode == SPI_CR1_RXONLY){
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	791b      	ldrb	r3, [r3, #4]
 8000f96:	2b0a      	cmp	r3, #10
 8000f98:	d118      	bne.n	8000fcc <SPI_Init+0xa0>
		//acc to datasheet, Keep BIDIMODE bit clear when receive only mode is active.
		pSPIhandle->pSPI->SPI_CR1 &= ~(1<<SPI_CR1_BIDIMODE);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	492a      	ldr	r1, [pc, #168]	; (8001050 <SPI_Init+0x124>)
 8000fa6:	400a      	ands	r2, r1
 8000fa8:	601a      	str	r2, [r3, #0]
		pSPIhandle->pSPI->SPI_CR1 &= ~(1<<SPI_CR1_BIDIOE);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4927      	ldr	r1, [pc, #156]	; (8001054 <SPI_Init+0x128>)
 8000fb6:	400a      	ands	r2, r1
 8000fb8:	601a      	str	r2, [r3, #0]
		pSPIhandle->pSPI->SPI_CR1 |= (1<<SPI_CR1_RXONLY);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2180      	movs	r1, #128	; 0x80
 8000fc6:	00c9      	lsls	r1, r1, #3
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	601a      	str	r2, [r3, #0]
	}
	//simplex TX is actually full duplex

	//Phase
	pSPIhandle->pSPI->SPI_CR1 |= (pSPIhandle->SPI_Config.SPI_Phase<<SPI_CR1_CPHA);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	7a9b      	ldrb	r3, [r3, #10]
 8000fd6:	0019      	movs	r1, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	601a      	str	r2, [r3, #0]

	//Polarity
	pSPIhandle->pSPI->SPI_CR1 |= (pSPIhandle->SPI_Config.SPI_Pol<<SPI_CR1_CPOL);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	7a5b      	ldrb	r3, [r3, #9]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	0019      	movs	r1, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	601a      	str	r2, [r3, #0]

	//software slave management
	pSPIhandle->pSPI->SPI_CR1 |= (pSPIhandle->SPI_Config.SPI_SWslave<<SPI_CR1_SSM);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	7a1b      	ldrb	r3, [r3, #8]
 8001000:	025b      	lsls	r3, r3, #9
 8001002:	0019      	movs	r1, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	430a      	orrs	r2, r1
 800100a:	601a      	str	r2, [r3, #0]

	//Speed (baudrate)
	pSPIhandle->pSPI->SPI_CR1 |= (pSPIhandle->SPI_Config.SPI_Speed<<SPI_CR1_BR);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	795b      	ldrb	r3, [r3, #5]
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	0019      	movs	r1, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	430a      	orrs	r2, r1
 8001020:	601a      	str	r2, [r3, #0]

	/*CR2. Not reset the whole CR2 to 0 as its bits can be modified from other parts of the code (enable interrupts)*/
	//Size --> this is in CR2!! First reset the position (DS[0],bit8) and then set it
	pSPIhandle->pSPI->SPI_CR2 &= (~(7<<SPI_CR2_DS));
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	685a      	ldr	r2, [r3, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	490a      	ldr	r1, [pc, #40]	; (8001058 <SPI_Init+0x12c>)
 800102e:	400a      	ands	r2, r1
 8001030:	605a      	str	r2, [r3, #4]
	pSPIhandle->pSPI->SPI_CR2 |= (pSPIhandle->SPI_Config.SPI_DataSize <<SPI_CR2_DS);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	685a      	ldr	r2, [r3, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	79db      	ldrb	r3, [r3, #7]
 800103c:	021b      	lsls	r3, r3, #8
 800103e:	0019      	movs	r1, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	430a      	orrs	r2, r1
 8001046:	605a      	str	r2, [r3, #4]
}
 8001048:	46c0      	nop			; (mov r8, r8)
 800104a:	46bd      	mov	sp, r7
 800104c:	b002      	add	sp, #8
 800104e:	bd80      	pop	{r7, pc}
 8001050:	ffff7fff 	.word	0xffff7fff
 8001054:	ffffbfff 	.word	0xffffbfff
 8001058:	fffff8ff 	.word	0xfffff8ff

0800105c <SPI_EnableDisable>:

/*SPI control: enable/disable --> bit 6 CR1 */
void SPI_EnableDisable(SPI_Handle_t *pSPIhandle, uint8_t EnableDisable){
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	000a      	movs	r2, r1
 8001066:	1cfb      	adds	r3, r7, #3
 8001068:	701a      	strb	r2, [r3, #0]
	//instead of reset and set bit 6, I prefer to directly set the value
	if (EnableDisable == ENABLE){
 800106a:	1cfb      	adds	r3, r7, #3
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d108      	bne.n	8001084 <SPI_EnableDisable+0x28>
		pSPIhandle->pSPI->SPI_CR1 |= (1<<SPI_CR1_SPE);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2140      	movs	r1, #64	; 0x40
 800107e:	430a      	orrs	r2, r1
 8001080:	601a      	str	r2, [r3, #0]
	}
	else { //0
		pSPIhandle->pSPI->SPI_CR1 &= (~(1<<SPI_CR1_SPE));
	}
}
 8001082:	e007      	b.n	8001094 <SPI_EnableDisable+0x38>
		pSPIhandle->pSPI->SPI_CR1 &= (~(1<<SPI_CR1_SPE));
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2140      	movs	r1, #64	; 0x40
 8001090:	438a      	bics	r2, r1
 8001092:	601a      	str	r2, [r3, #0]
}
 8001094:	46c0      	nop			; (mov r8, r8)
 8001096:	46bd      	mov	sp, r7
 8001098:	b002      	add	sp, #8
 800109a:	bd80      	pop	{r7, pc}

0800109c <SPI_SSOE>:
		pSPIhandle->pSPI->SPI_CR1 &= (~(1<<SPI_CR1_SSI));
	}
}

/*SSOE: SS output enable*/
void SPI_SSOE(SPI_Handle_t *pSPIhandle, uint8_t EnableDisable){
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	000a      	movs	r2, r1
 80010a6:	1cfb      	adds	r3, r7, #3
 80010a8:	701a      	strb	r2, [r3, #0]
	if (EnableDisable == ENABLE){
 80010aa:	1cfb      	adds	r3, r7, #3
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d108      	bne.n	80010c4 <SPI_SSOE+0x28>
		pSPIhandle->pSPI->SPI_CR2 |= (1<<SPI_CR2_SSOE);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	685a      	ldr	r2, [r3, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2104      	movs	r1, #4
 80010be:	430a      	orrs	r2, r1
 80010c0:	605a      	str	r2, [r3, #4]
	}
	else { //0
		pSPIhandle->pSPI->SPI_CR2 &= (~(1<<SPI_CR2_SSOE));
	}
}
 80010c2:	e007      	b.n	80010d4 <SPI_SSOE+0x38>
		pSPIhandle->pSPI->SPI_CR2 &= (~(1<<SPI_CR2_SSOE));
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	685a      	ldr	r2, [r3, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2104      	movs	r1, #4
 80010d0:	438a      	bics	r2, r1
 80010d2:	605a      	str	r2, [r3, #4]
}
 80010d4:	46c0      	nop			; (mov r8, r8)
 80010d6:	46bd      	mov	sp, r7
 80010d8:	b002      	add	sp, #8
 80010da:	bd80      	pop	{r7, pc}

080010dc <SPI_IRQ_EnableDisable>:

}


/*IRQ Configuration and ISR handling*/
void SPI_IRQ_EnableDisable(uint8_t IRQ_Number, uint8_t EnableDisable){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	0002      	movs	r2, r0
 80010e4:	1dfb      	adds	r3, r7, #7
 80010e6:	701a      	strb	r2, [r3, #0]
 80010e8:	1dbb      	adds	r3, r7, #6
 80010ea:	1c0a      	adds	r2, r1, #0
 80010ec:	701a      	strb	r2, [r3, #0]
	if(EnableDisable == ENABLE){ //enable by means of ISER
 80010ee:	1dbb      	adds	r3, r7, #6
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d10b      	bne.n	800110e <SPI_IRQ_EnableDisable+0x32>
		*NVIC_ISER |= ( 1 << IRQ_Number);
 80010f6:	4b0d      	ldr	r3, [pc, #52]	; (800112c <SPI_IRQ_EnableDisable+0x50>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	1dfb      	adds	r3, r7, #7
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2101      	movs	r1, #1
 8001100:	4099      	lsls	r1, r3
 8001102:	000b      	movs	r3, r1
 8001104:	0019      	movs	r1, r3
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <SPI_IRQ_EnableDisable+0x50>)
 8001108:	430a      	orrs	r2, r1
 800110a:	601a      	str	r2, [r3, #0]
	}
	else { //disable by means of ICER
		*NVIC_ICER |= ( 1 << IRQ_Number);
	}
}
 800110c:	e00a      	b.n	8001124 <SPI_IRQ_EnableDisable+0x48>
		*NVIC_ICER |= ( 1 << IRQ_Number);
 800110e:	4b08      	ldr	r3, [pc, #32]	; (8001130 <SPI_IRQ_EnableDisable+0x54>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	1dfb      	adds	r3, r7, #7
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2101      	movs	r1, #1
 8001118:	4099      	lsls	r1, r3
 800111a:	000b      	movs	r3, r1
 800111c:	0019      	movs	r1, r3
 800111e:	4b04      	ldr	r3, [pc, #16]	; (8001130 <SPI_IRQ_EnableDisable+0x54>)
 8001120:	430a      	orrs	r2, r1
 8001122:	601a      	str	r2, [r3, #0]
}
 8001124:	46c0      	nop			; (mov r8, r8)
 8001126:	46bd      	mov	sp, r7
 8001128:	b002      	add	sp, #8
 800112a:	bd80      	pop	{r7, pc}
 800112c:	e000e100 	.word	0xe000e100
 8001130:	e000e180 	.word	0xe000e180

08001134 <SPI_IRQ_Handling>:
	uint32_t tempIPR = ((*(NVIC_IPR_BASE + numberIPR))&~(0xFF<<blockIPR));
	tempIPR |= (IRQ_Priority<<(8*blockIPR+6)); //6 is because bits 0-5 are not editable, only bits 6-7 count.
	*(NVIC_IPR_BASE + numberIPR) = tempIPR;
}

void SPI_IRQ_Handling(SPI_Handle_t *pSPIhandle){
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
	//to handle the possible interrupts related to SPI:TXE,RXNE,MODF,OVR,FRE,CRCERR
	//Call the handler related to the interrupt if register is true as long as it is enabled
	//TXE TX empty (enable control:TXEIE).if set, TX buffer empty so it can be loaded.
	if ( (pSPIhandle->pSPI->SPI_CR2 & (1<<SPI_CR2_TXEIE)) && (pSPIhandle->pSPI->SPI_SR & (1<<SPI_SR_TXE)) ){ //could use SPI_GetFlagStatus
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2280      	movs	r2, #128	; 0x80
 8001144:	4013      	ands	r3, r2
 8001146:	d009      	beq.n	800115c <SPI_IRQ_Handling+0x28>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	2202      	movs	r2, #2
 8001150:	4013      	ands	r3, r2
 8001152:	d003      	beq.n	800115c <SPI_IRQ_Handling+0x28>
		SPI_TXE_handler(pSPIhandle);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	0018      	movs	r0, r3
 8001158:	f000 f824 	bl	80011a4 <SPI_TXE_handler>
	}

	//RXNE RX not empty (enable control:RXNEIE). if set, RX not empty so it has data to be read.
	if ( (pSPIhandle->pSPI->SPI_CR2 & (1<<SPI_CR2_RXNEIE)) && (pSPIhandle->pSPI->SPI_SR & (1<<SPI_SR_RXNE)) ){ //could use SPI_GetFlagStatus
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	2240      	movs	r2, #64	; 0x40
 8001164:	4013      	ands	r3, r2
 8001166:	d009      	beq.n	800117c <SPI_IRQ_Handling+0x48>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	2201      	movs	r2, #1
 8001170:	4013      	ands	r3, r2
 8001172:	d003      	beq.n	800117c <SPI_IRQ_Handling+0x48>
		SPI_RXNE_handler(pSPIhandle);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	0018      	movs	r0, r3
 8001178:	f000 f85c 	bl	8001234 <SPI_RXNE_handler>
	MODF bit is set when the SS pin goes high during transmission.*/
	//To be implemented if someday I use multimaster

	/*OVR. Overrun. (enable control:ERRIE)occurs when data is received by a master or slave and the RXFIFO has not enough space to store
	 this received data.*/
	if ( (pSPIhandle->pSPI->SPI_CR2 & (1<<SPI_CR2_ERRIE)) && (pSPIhandle->pSPI->SPI_SR & (1<<SPI_SR_OVR)) ){ //could use SPI_GetFlagStatus
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	2220      	movs	r2, #32
 8001184:	4013      	ands	r3, r2
 8001186:	d009      	beq.n	800119c <SPI_IRQ_Handling+0x68>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	2240      	movs	r2, #64	; 0x40
 8001190:	4013      	ands	r3, r2
 8001192:	d003      	beq.n	800119c <SPI_IRQ_Handling+0x68>
		SPI_OVR_handler(pSPIhandle);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	0018      	movs	r0, r3
 8001198:	f000 f897 	bl	80012ca <SPI_OVR_handler>
	//FRE. TI frame format error.
	//To be implemented when I use TI mode (it seems that TI and Motorola modes are related to SSPFSSOUT output, which many devices don't use).

	//CRCERR
	//To be implemented
}
 800119c:	46c0      	nop			; (mov r8, r8)
 800119e:	46bd      	mov	sp, r7
 80011a0:	b002      	add	sp, #8
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <SPI_TXE_handler>:

/*interrupt handlers*/
static void SPI_TXE_handler(SPI_Handle_t *pSPIhandle){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	/*When transmission is enabled, a sequence begins and continues while any data is present in the TXFIFO of the master.*/
	//Let's limit it to 8 and 16 bits frame. Every char is 1 byte
	//Load the data into DR, move the pointer (buffer) and decrease length
	if (pSPIhandle->SPI_Config.SPI_DataSize == SPI_8BIT){
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	79db      	ldrb	r3, [r3, #7]
 80011b0:	2b07      	cmp	r3, #7
 80011b2:	d110      	bne.n	80011d6 <SPI_TXE_handler+0x32>
		pSPIhandle->pSPI->SPI_DR = *(pSPIhandle->SPI_Comm.TX_buffer);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	781a      	ldrb	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	60da      	str	r2, [r3, #12]
		pSPIhandle->SPI_Comm.TX_buffer++;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	691b      	ldr	r3, [r3, #16]
 80011c4:	1c5a      	adds	r2, r3, #1
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	611a      	str	r2, [r3, #16]
		pSPIhandle->SPI_Comm.TX_length--;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	68db      	ldr	r3, [r3, #12]
 80011ce:	1e5a      	subs	r2, r3, #1
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	60da      	str	r2, [r3, #12]
 80011d4:	e013      	b.n	80011fe <SPI_TXE_handler+0x5a>
	}
	else if (pSPIhandle->SPI_Config.SPI_DataSize == SPI_16BIT){
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	79db      	ldrb	r3, [r3, #7]
 80011da:	2b0f      	cmp	r3, #15
 80011dc:	d10f      	bne.n	80011fe <SPI_TXE_handler+0x5a>
		//TX_buffer is defined as 8-bit.additional treatment is necessary
		pSPIhandle->pSPI->SPI_DR = *((uint16_t*)(pSPIhandle->SPI_Comm.TX_buffer));
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	881a      	ldrh	r2, [r3, #0]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	60da      	str	r2, [r3, #12]
		pSPIhandle->SPI_Comm.TX_buffer+=2;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	691b      	ldr	r3, [r3, #16]
 80011ee:	1c9a      	adds	r2, r3, #2
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	611a      	str	r2, [r3, #16]
		pSPIhandle->SPI_Comm.TX_length-=2;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	1e9a      	subs	r2, r3, #2
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	60da      	str	r2, [r3, #12]
	}
	//(I don't use else because DS allows more lengths)

	//Close transmission when no more bytes in the buffer
	if (pSPIhandle->SPI_Comm.TX_length == 0){
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d112      	bne.n	800122c <SPI_TXE_handler+0x88>
		pSPIhandle->pSPI->SPI_CR2 &= (~( 1 << SPI_CR2_TXEIE)); //disable the TX interrupt.It will be enabled by SPI_Send in the next sending
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	685a      	ldr	r2, [r3, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2180      	movs	r1, #128	; 0x80
 8001212:	438a      	bics	r2, r1
 8001214:	605a      	str	r2, [r3, #4]
		pSPIhandle->SPI_Comm.TX_buffer = NULL; //null pointer
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
		pSPIhandle->SPI_Comm.TX_state = SPI_READY; //important for loops in main!
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	751a      	strb	r2, [r3, #20]
		SPI_App_Callback(pSPIhandle,SPI_TX_FINISHED); //Inform the main application
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2100      	movs	r1, #0
 8001226:	0018      	movs	r0, r3
 8001228:	f7ff faaa 	bl	8000780 <SPI_App_Callback>
	}
}
 800122c:	46c0      	nop			; (mov r8, r8)
 800122e:	46bd      	mov	sp, r7
 8001230:	b002      	add	sp, #8
 8001232:	bd80      	pop	{r7, pc}

08001234 <SPI_RXNE_handler>:

static void SPI_RXNE_handler(SPI_Handle_t *pSPIhandle){
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	//Let's limit it to 8 and 16 bits frame. Every char is 1 byte
	//Load the data into DR, move the pointer (buffer) and decrease length
	if (pSPIhandle->SPI_Config.SPI_DataSize == SPI_8BIT){
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	79db      	ldrb	r3, [r3, #7]
 8001240:	2b07      	cmp	r3, #7
 8001242:	d111      	bne.n	8001268 <SPI_RXNE_handler+0x34>
		*(pSPIhandle->SPI_Comm.RX_buffer) = ((uint8_t)pSPIhandle->pSPI->SPI_DR) ;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	68da      	ldr	r2, [r3, #12]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	69db      	ldr	r3, [r3, #28]
 800124e:	b2d2      	uxtb	r2, r2
 8001250:	701a      	strb	r2, [r3, #0]
		pSPIhandle->SPI_Comm.RX_buffer++;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	1c5a      	adds	r2, r3, #1
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	61da      	str	r2, [r3, #28]
		pSPIhandle->SPI_Comm.RX_length--;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	1e5a      	subs	r2, r3, #1
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	619a      	str	r2, [r3, #24]
 8001266:	e014      	b.n	8001292 <SPI_RXNE_handler+0x5e>
	}
	else if (pSPIhandle->SPI_Config.SPI_DataSize == SPI_16BIT){
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	79db      	ldrb	r3, [r3, #7]
 800126c:	2b0f      	cmp	r3, #15
 800126e:	d110      	bne.n	8001292 <SPI_RXNE_handler+0x5e>
		//RX_buffer is defined as 8-bit.additional treatment is necessary
		*((uint16_t*)pSPIhandle->SPI_Comm.RX_buffer) = ((uint16_t)pSPIhandle->pSPI->SPI_DR) ;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	68da      	ldr	r2, [r3, #12]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	b292      	uxth	r2, r2
 800127c:	801a      	strh	r2, [r3, #0]
		pSPIhandle->SPI_Comm.RX_buffer+=2;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	1c9a      	adds	r2, r3, #2
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	61da      	str	r2, [r3, #28]
		pSPIhandle->SPI_Comm.RX_length-=2;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	1e9a      	subs	r2, r3, #2
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	619a      	str	r2, [r3, #24]
	}
	//(I don't use else because DS allows more lengths)

	//Close reception when no more bytes in the buffer
	if (pSPIhandle->SPI_Comm.RX_length == 0){
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d113      	bne.n	80012c2 <SPI_RXNE_handler+0x8e>
		pSPIhandle->pSPI->SPI_CR2 &= (~( 1 << SPI_CR2_RXNEIE)); //disable the RX interrupt.It will be enabled by SPI_Receive in the next sending
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2140      	movs	r1, #64	; 0x40
 80012a6:	438a      	bics	r2, r1
 80012a8:	605a      	str	r2, [r3, #4]
		pSPIhandle->SPI_Comm.RX_buffer = NULL; //null pointer
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	61da      	str	r2, [r3, #28]
		pSPIhandle->SPI_Comm.RX_state = SPI_READY; //important for loops in main!
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2220      	movs	r2, #32
 80012b4:	2100      	movs	r1, #0
 80012b6:	5499      	strb	r1, [r3, r2]
		SPI_App_Callback(pSPIhandle,SPI_RX_FINISHED); //Inform the main application
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2101      	movs	r1, #1
 80012bc:	0018      	movs	r0, r3
 80012be:	f7ff fa5f 	bl	8000780 <SPI_App_Callback>
	}
}
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	46bd      	mov	sp, r7
 80012c6:	b002      	add	sp, #8
 80012c8:	bd80      	pop	{r7, pc}

080012ca <SPI_OVR_handler>:

static void SPI_OVR_handler(SPI_Handle_t *pSPIhandle){
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b084      	sub	sp, #16
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
	//Clearing OVR bit is done by a read access to the SPI_DR register followed by a read access to the SPI_SR register
	//if the error happens during transmission,as this error is related to RXFIFO,we won't clear it here. If so, the app will do it
	if (pSPIhandle->SPI_Comm.TX_state != SPI_DURING_TX){ //clear
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	7d1b      	ldrb	r3, [r3, #20]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d007      	beq.n	80012ea <SPI_OVR_handler+0x20>
		uint32_t reading; //maybe with uint8_t enough to read DR and SR?
		reading = pSPIhandle->pSPI->SPI_DR;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	60fb      	str	r3, [r7, #12]
		reading = pSPIhandle->pSPI->SPI_SR;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	60fb      	str	r3, [r7, #12]
	}
	//inform the main application
	SPI_App_Callback(pSPIhandle,SPI_OVR_EVENT);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2102      	movs	r1, #2
 80012ee:	0018      	movs	r0, r3
 80012f0:	f7ff fa46 	bl	8000780 <SPI_App_Callback>
}
 80012f4:	46c0      	nop			; (mov r8, r8)
 80012f6:	46bd      	mov	sp, r7
 80012f8:	b004      	add	sp, #16
 80012fa:	bd80      	pop	{r7, pc}

080012fc <SPI_Send>:

/*Send or read data (through interrupts, not polling). Master always starts communication */
void SPI_Send(SPI_Handle_t *pSPIhandle, uint8_t *pTXbuffer, uint32_t length){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
	//set TX state as busy (SPI_DURING_TX) and configure the transmission
	if (pSPIhandle->SPI_Comm.TX_state != SPI_DURING_TX){
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	7d1b      	ldrb	r3, [r3, #20]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d010      	beq.n	8001332 <SPI_Send+0x36>
		pSPIhandle->SPI_Comm.TX_state = SPI_DURING_TX;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2201      	movs	r2, #1
 8001314:	751a      	strb	r2, [r3, #20]
		pSPIhandle->SPI_Comm.TX_buffer = pTXbuffer;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	68ba      	ldr	r2, [r7, #8]
 800131a:	611a      	str	r2, [r3, #16]
		pSPIhandle->SPI_Comm.TX_length = length;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	60da      	str	r2, [r3, #12]
		pSPIhandle->pSPI->SPI_CR2 |= (1 << SPI_CR2_TXEIE);//enable the TX interrupt to start transmission
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	685a      	ldr	r2, [r3, #4]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2180      	movs	r1, #128	; 0x80
 800132e:	430a      	orrs	r2, r1
 8001330:	605a      	str	r2, [r3, #4]
	}
}
 8001332:	46c0      	nop			; (mov r8, r8)
 8001334:	46bd      	mov	sp, r7
 8001336:	b004      	add	sp, #16
 8001338:	bd80      	pop	{r7, pc}

0800133a <SPI_Read>:
void SPI_Read(SPI_Handle_t *pSPIhandle, volatile uint8_t *pRXbuffer, uint32_t length){
 800133a:	b580      	push	{r7, lr}
 800133c:	b084      	sub	sp, #16
 800133e:	af00      	add	r7, sp, #0
 8001340:	60f8      	str	r0, [r7, #12]
 8001342:	60b9      	str	r1, [r7, #8]
 8001344:	607a      	str	r2, [r7, #4]
	//set RX state as busy (SPI_DURING_RX) and configure the reading process (DR fetches from RX buffer).
	if (pSPIhandle->SPI_Comm.RX_state != SPI_DURING_RX){
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2220      	movs	r2, #32
 800134a:	5c9b      	ldrb	r3, [r3, r2]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d011      	beq.n	8001374 <SPI_Read+0x3a>
		pSPIhandle->SPI_Comm.RX_state = SPI_DURING_RX;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2220      	movs	r2, #32
 8001354:	2101      	movs	r1, #1
 8001356:	5499      	strb	r1, [r3, r2]
		pSPIhandle->SPI_Comm.RX_buffer = pRXbuffer;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	61da      	str	r2, [r3, #28]
		pSPIhandle->SPI_Comm.RX_length = length;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	619a      	str	r2, [r3, #24]
		pSPIhandle->pSPI->SPI_CR2 |= (1 << SPI_CR2_RXNEIE);//enable the RX interrupt to start reception
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	685a      	ldr	r2, [r3, #4]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2140      	movs	r1, #64	; 0x40
 8001370:	430a      	orrs	r2, r1
 8001372:	605a      	str	r2, [r3, #4]
	}
}
 8001374:	46c0      	nop			; (mov r8, r8)
 8001376:	46bd      	mov	sp, r7
 8001378:	b004      	add	sp, #16
 800137a:	bd80      	pop	{r7, pc}

0800137c <__errno>:
 800137c:	4b01      	ldr	r3, [pc, #4]	; (8001384 <__errno+0x8>)
 800137e:	6818      	ldr	r0, [r3, #0]
 8001380:	4770      	bx	lr
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	20000004 	.word	0x20000004

08001388 <__libc_init_array>:
 8001388:	b570      	push	{r4, r5, r6, lr}
 800138a:	2600      	movs	r6, #0
 800138c:	4d0c      	ldr	r5, [pc, #48]	; (80013c0 <__libc_init_array+0x38>)
 800138e:	4c0d      	ldr	r4, [pc, #52]	; (80013c4 <__libc_init_array+0x3c>)
 8001390:	1b64      	subs	r4, r4, r5
 8001392:	10a4      	asrs	r4, r4, #2
 8001394:	42a6      	cmp	r6, r4
 8001396:	d109      	bne.n	80013ac <__libc_init_array+0x24>
 8001398:	2600      	movs	r6, #0
 800139a:	f001 fb0d 	bl	80029b8 <_init>
 800139e:	4d0a      	ldr	r5, [pc, #40]	; (80013c8 <__libc_init_array+0x40>)
 80013a0:	4c0a      	ldr	r4, [pc, #40]	; (80013cc <__libc_init_array+0x44>)
 80013a2:	1b64      	subs	r4, r4, r5
 80013a4:	10a4      	asrs	r4, r4, #2
 80013a6:	42a6      	cmp	r6, r4
 80013a8:	d105      	bne.n	80013b6 <__libc_init_array+0x2e>
 80013aa:	bd70      	pop	{r4, r5, r6, pc}
 80013ac:	00b3      	lsls	r3, r6, #2
 80013ae:	58eb      	ldr	r3, [r5, r3]
 80013b0:	4798      	blx	r3
 80013b2:	3601      	adds	r6, #1
 80013b4:	e7ee      	b.n	8001394 <__libc_init_array+0xc>
 80013b6:	00b3      	lsls	r3, r6, #2
 80013b8:	58eb      	ldr	r3, [r5, r3]
 80013ba:	4798      	blx	r3
 80013bc:	3601      	adds	r6, #1
 80013be:	e7f2      	b.n	80013a6 <__libc_init_array+0x1e>
 80013c0:	08002b90 	.word	0x08002b90
 80013c4:	08002b90 	.word	0x08002b90
 80013c8:	08002b90 	.word	0x08002b90
 80013cc:	08002b94 	.word	0x08002b94

080013d0 <memset>:
 80013d0:	0003      	movs	r3, r0
 80013d2:	1882      	adds	r2, r0, r2
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d100      	bne.n	80013da <memset+0xa>
 80013d8:	4770      	bx	lr
 80013da:	7019      	strb	r1, [r3, #0]
 80013dc:	3301      	adds	r3, #1
 80013de:	e7f9      	b.n	80013d4 <memset+0x4>

080013e0 <iprintf>:
 80013e0:	b40f      	push	{r0, r1, r2, r3}
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <iprintf+0x30>)
 80013e4:	b513      	push	{r0, r1, r4, lr}
 80013e6:	681c      	ldr	r4, [r3, #0]
 80013e8:	2c00      	cmp	r4, #0
 80013ea:	d005      	beq.n	80013f8 <iprintf+0x18>
 80013ec:	69a3      	ldr	r3, [r4, #24]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d102      	bne.n	80013f8 <iprintf+0x18>
 80013f2:	0020      	movs	r0, r4
 80013f4:	f000 fa86 	bl	8001904 <__sinit>
 80013f8:	ab05      	add	r3, sp, #20
 80013fa:	0020      	movs	r0, r4
 80013fc:	9a04      	ldr	r2, [sp, #16]
 80013fe:	68a1      	ldr	r1, [r4, #8]
 8001400:	9301      	str	r3, [sp, #4]
 8001402:	f000 fc99 	bl	8001d38 <_vfiprintf_r>
 8001406:	bc16      	pop	{r1, r2, r4}
 8001408:	bc08      	pop	{r3}
 800140a:	b004      	add	sp, #16
 800140c:	4718      	bx	r3
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	20000004 	.word	0x20000004

08001414 <_puts_r>:
 8001414:	b570      	push	{r4, r5, r6, lr}
 8001416:	0005      	movs	r5, r0
 8001418:	000e      	movs	r6, r1
 800141a:	2800      	cmp	r0, #0
 800141c:	d004      	beq.n	8001428 <_puts_r+0x14>
 800141e:	6983      	ldr	r3, [r0, #24]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d101      	bne.n	8001428 <_puts_r+0x14>
 8001424:	f000 fa6e 	bl	8001904 <__sinit>
 8001428:	69ab      	ldr	r3, [r5, #24]
 800142a:	68ac      	ldr	r4, [r5, #8]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d102      	bne.n	8001436 <_puts_r+0x22>
 8001430:	0028      	movs	r0, r5
 8001432:	f000 fa67 	bl	8001904 <__sinit>
 8001436:	4b2d      	ldr	r3, [pc, #180]	; (80014ec <_puts_r+0xd8>)
 8001438:	429c      	cmp	r4, r3
 800143a:	d122      	bne.n	8001482 <_puts_r+0x6e>
 800143c:	686c      	ldr	r4, [r5, #4]
 800143e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001440:	07db      	lsls	r3, r3, #31
 8001442:	d405      	bmi.n	8001450 <_puts_r+0x3c>
 8001444:	89a3      	ldrh	r3, [r4, #12]
 8001446:	059b      	lsls	r3, r3, #22
 8001448:	d402      	bmi.n	8001450 <_puts_r+0x3c>
 800144a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800144c:	f000 fafb 	bl	8001a46 <__retarget_lock_acquire_recursive>
 8001450:	89a3      	ldrh	r3, [r4, #12]
 8001452:	071b      	lsls	r3, r3, #28
 8001454:	d502      	bpl.n	800145c <_puts_r+0x48>
 8001456:	6923      	ldr	r3, [r4, #16]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d129      	bne.n	80014b0 <_puts_r+0x9c>
 800145c:	0021      	movs	r1, r4
 800145e:	0028      	movs	r0, r5
 8001460:	f000 f8aa 	bl	80015b8 <__swsetup_r>
 8001464:	2800      	cmp	r0, #0
 8001466:	d023      	beq.n	80014b0 <_puts_r+0x9c>
 8001468:	2501      	movs	r5, #1
 800146a:	426d      	negs	r5, r5
 800146c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800146e:	07db      	lsls	r3, r3, #31
 8001470:	d405      	bmi.n	800147e <_puts_r+0x6a>
 8001472:	89a3      	ldrh	r3, [r4, #12]
 8001474:	059b      	lsls	r3, r3, #22
 8001476:	d402      	bmi.n	800147e <_puts_r+0x6a>
 8001478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800147a:	f000 fae5 	bl	8001a48 <__retarget_lock_release_recursive>
 800147e:	0028      	movs	r0, r5
 8001480:	bd70      	pop	{r4, r5, r6, pc}
 8001482:	4b1b      	ldr	r3, [pc, #108]	; (80014f0 <_puts_r+0xdc>)
 8001484:	429c      	cmp	r4, r3
 8001486:	d101      	bne.n	800148c <_puts_r+0x78>
 8001488:	68ac      	ldr	r4, [r5, #8]
 800148a:	e7d8      	b.n	800143e <_puts_r+0x2a>
 800148c:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <_puts_r+0xe0>)
 800148e:	429c      	cmp	r4, r3
 8001490:	d1d5      	bne.n	800143e <_puts_r+0x2a>
 8001492:	68ec      	ldr	r4, [r5, #12]
 8001494:	e7d3      	b.n	800143e <_puts_r+0x2a>
 8001496:	3601      	adds	r6, #1
 8001498:	60a3      	str	r3, [r4, #8]
 800149a:	2b00      	cmp	r3, #0
 800149c:	da04      	bge.n	80014a8 <_puts_r+0x94>
 800149e:	69a2      	ldr	r2, [r4, #24]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	dc16      	bgt.n	80014d2 <_puts_r+0xbe>
 80014a4:	290a      	cmp	r1, #10
 80014a6:	d014      	beq.n	80014d2 <_puts_r+0xbe>
 80014a8:	6823      	ldr	r3, [r4, #0]
 80014aa:	1c5a      	adds	r2, r3, #1
 80014ac:	6022      	str	r2, [r4, #0]
 80014ae:	7019      	strb	r1, [r3, #0]
 80014b0:	68a3      	ldr	r3, [r4, #8]
 80014b2:	7831      	ldrb	r1, [r6, #0]
 80014b4:	3b01      	subs	r3, #1
 80014b6:	2900      	cmp	r1, #0
 80014b8:	d1ed      	bne.n	8001496 <_puts_r+0x82>
 80014ba:	60a3      	str	r3, [r4, #8]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	da0f      	bge.n	80014e0 <_puts_r+0xcc>
 80014c0:	0028      	movs	r0, r5
 80014c2:	0022      	movs	r2, r4
 80014c4:	310a      	adds	r1, #10
 80014c6:	f000 f821 	bl	800150c <__swbuf_r>
 80014ca:	250a      	movs	r5, #10
 80014cc:	1c43      	adds	r3, r0, #1
 80014ce:	d1cd      	bne.n	800146c <_puts_r+0x58>
 80014d0:	e7ca      	b.n	8001468 <_puts_r+0x54>
 80014d2:	0022      	movs	r2, r4
 80014d4:	0028      	movs	r0, r5
 80014d6:	f000 f819 	bl	800150c <__swbuf_r>
 80014da:	1c43      	adds	r3, r0, #1
 80014dc:	d1e8      	bne.n	80014b0 <_puts_r+0x9c>
 80014de:	e7c3      	b.n	8001468 <_puts_r+0x54>
 80014e0:	250a      	movs	r5, #10
 80014e2:	6823      	ldr	r3, [r4, #0]
 80014e4:	1c5a      	adds	r2, r3, #1
 80014e6:	6022      	str	r2, [r4, #0]
 80014e8:	701d      	strb	r5, [r3, #0]
 80014ea:	e7bf      	b.n	800146c <_puts_r+0x58>
 80014ec:	08002b00 	.word	0x08002b00
 80014f0:	08002b20 	.word	0x08002b20
 80014f4:	08002ae0 	.word	0x08002ae0

080014f8 <puts>:
 80014f8:	b510      	push	{r4, lr}
 80014fa:	4b03      	ldr	r3, [pc, #12]	; (8001508 <puts+0x10>)
 80014fc:	0001      	movs	r1, r0
 80014fe:	6818      	ldr	r0, [r3, #0]
 8001500:	f7ff ff88 	bl	8001414 <_puts_r>
 8001504:	bd10      	pop	{r4, pc}
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	20000004 	.word	0x20000004

0800150c <__swbuf_r>:
 800150c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800150e:	0005      	movs	r5, r0
 8001510:	000e      	movs	r6, r1
 8001512:	0014      	movs	r4, r2
 8001514:	2800      	cmp	r0, #0
 8001516:	d004      	beq.n	8001522 <__swbuf_r+0x16>
 8001518:	6983      	ldr	r3, [r0, #24]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <__swbuf_r+0x16>
 800151e:	f000 f9f1 	bl	8001904 <__sinit>
 8001522:	4b22      	ldr	r3, [pc, #136]	; (80015ac <__swbuf_r+0xa0>)
 8001524:	429c      	cmp	r4, r3
 8001526:	d12e      	bne.n	8001586 <__swbuf_r+0x7a>
 8001528:	686c      	ldr	r4, [r5, #4]
 800152a:	69a3      	ldr	r3, [r4, #24]
 800152c:	60a3      	str	r3, [r4, #8]
 800152e:	89a3      	ldrh	r3, [r4, #12]
 8001530:	071b      	lsls	r3, r3, #28
 8001532:	d532      	bpl.n	800159a <__swbuf_r+0x8e>
 8001534:	6923      	ldr	r3, [r4, #16]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d02f      	beq.n	800159a <__swbuf_r+0x8e>
 800153a:	6823      	ldr	r3, [r4, #0]
 800153c:	6922      	ldr	r2, [r4, #16]
 800153e:	b2f7      	uxtb	r7, r6
 8001540:	1a98      	subs	r0, r3, r2
 8001542:	6963      	ldr	r3, [r4, #20]
 8001544:	b2f6      	uxtb	r6, r6
 8001546:	4283      	cmp	r3, r0
 8001548:	dc05      	bgt.n	8001556 <__swbuf_r+0x4a>
 800154a:	0021      	movs	r1, r4
 800154c:	0028      	movs	r0, r5
 800154e:	f000 f937 	bl	80017c0 <_fflush_r>
 8001552:	2800      	cmp	r0, #0
 8001554:	d127      	bne.n	80015a6 <__swbuf_r+0x9a>
 8001556:	68a3      	ldr	r3, [r4, #8]
 8001558:	3001      	adds	r0, #1
 800155a:	3b01      	subs	r3, #1
 800155c:	60a3      	str	r3, [r4, #8]
 800155e:	6823      	ldr	r3, [r4, #0]
 8001560:	1c5a      	adds	r2, r3, #1
 8001562:	6022      	str	r2, [r4, #0]
 8001564:	701f      	strb	r7, [r3, #0]
 8001566:	6963      	ldr	r3, [r4, #20]
 8001568:	4283      	cmp	r3, r0
 800156a:	d004      	beq.n	8001576 <__swbuf_r+0x6a>
 800156c:	89a3      	ldrh	r3, [r4, #12]
 800156e:	07db      	lsls	r3, r3, #31
 8001570:	d507      	bpl.n	8001582 <__swbuf_r+0x76>
 8001572:	2e0a      	cmp	r6, #10
 8001574:	d105      	bne.n	8001582 <__swbuf_r+0x76>
 8001576:	0021      	movs	r1, r4
 8001578:	0028      	movs	r0, r5
 800157a:	f000 f921 	bl	80017c0 <_fflush_r>
 800157e:	2800      	cmp	r0, #0
 8001580:	d111      	bne.n	80015a6 <__swbuf_r+0x9a>
 8001582:	0030      	movs	r0, r6
 8001584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001586:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <__swbuf_r+0xa4>)
 8001588:	429c      	cmp	r4, r3
 800158a:	d101      	bne.n	8001590 <__swbuf_r+0x84>
 800158c:	68ac      	ldr	r4, [r5, #8]
 800158e:	e7cc      	b.n	800152a <__swbuf_r+0x1e>
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <__swbuf_r+0xa8>)
 8001592:	429c      	cmp	r4, r3
 8001594:	d1c9      	bne.n	800152a <__swbuf_r+0x1e>
 8001596:	68ec      	ldr	r4, [r5, #12]
 8001598:	e7c7      	b.n	800152a <__swbuf_r+0x1e>
 800159a:	0021      	movs	r1, r4
 800159c:	0028      	movs	r0, r5
 800159e:	f000 f80b 	bl	80015b8 <__swsetup_r>
 80015a2:	2800      	cmp	r0, #0
 80015a4:	d0c9      	beq.n	800153a <__swbuf_r+0x2e>
 80015a6:	2601      	movs	r6, #1
 80015a8:	4276      	negs	r6, r6
 80015aa:	e7ea      	b.n	8001582 <__swbuf_r+0x76>
 80015ac:	08002b00 	.word	0x08002b00
 80015b0:	08002b20 	.word	0x08002b20
 80015b4:	08002ae0 	.word	0x08002ae0

080015b8 <__swsetup_r>:
 80015b8:	4b37      	ldr	r3, [pc, #220]	; (8001698 <__swsetup_r+0xe0>)
 80015ba:	b570      	push	{r4, r5, r6, lr}
 80015bc:	681d      	ldr	r5, [r3, #0]
 80015be:	0006      	movs	r6, r0
 80015c0:	000c      	movs	r4, r1
 80015c2:	2d00      	cmp	r5, #0
 80015c4:	d005      	beq.n	80015d2 <__swsetup_r+0x1a>
 80015c6:	69ab      	ldr	r3, [r5, #24]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d102      	bne.n	80015d2 <__swsetup_r+0x1a>
 80015cc:	0028      	movs	r0, r5
 80015ce:	f000 f999 	bl	8001904 <__sinit>
 80015d2:	4b32      	ldr	r3, [pc, #200]	; (800169c <__swsetup_r+0xe4>)
 80015d4:	429c      	cmp	r4, r3
 80015d6:	d10f      	bne.n	80015f8 <__swsetup_r+0x40>
 80015d8:	686c      	ldr	r4, [r5, #4]
 80015da:	230c      	movs	r3, #12
 80015dc:	5ee2      	ldrsh	r2, [r4, r3]
 80015de:	b293      	uxth	r3, r2
 80015e0:	0711      	lsls	r1, r2, #28
 80015e2:	d42d      	bmi.n	8001640 <__swsetup_r+0x88>
 80015e4:	06d9      	lsls	r1, r3, #27
 80015e6:	d411      	bmi.n	800160c <__swsetup_r+0x54>
 80015e8:	2309      	movs	r3, #9
 80015ea:	2001      	movs	r0, #1
 80015ec:	6033      	str	r3, [r6, #0]
 80015ee:	3337      	adds	r3, #55	; 0x37
 80015f0:	4313      	orrs	r3, r2
 80015f2:	81a3      	strh	r3, [r4, #12]
 80015f4:	4240      	negs	r0, r0
 80015f6:	bd70      	pop	{r4, r5, r6, pc}
 80015f8:	4b29      	ldr	r3, [pc, #164]	; (80016a0 <__swsetup_r+0xe8>)
 80015fa:	429c      	cmp	r4, r3
 80015fc:	d101      	bne.n	8001602 <__swsetup_r+0x4a>
 80015fe:	68ac      	ldr	r4, [r5, #8]
 8001600:	e7eb      	b.n	80015da <__swsetup_r+0x22>
 8001602:	4b28      	ldr	r3, [pc, #160]	; (80016a4 <__swsetup_r+0xec>)
 8001604:	429c      	cmp	r4, r3
 8001606:	d1e8      	bne.n	80015da <__swsetup_r+0x22>
 8001608:	68ec      	ldr	r4, [r5, #12]
 800160a:	e7e6      	b.n	80015da <__swsetup_r+0x22>
 800160c:	075b      	lsls	r3, r3, #29
 800160e:	d513      	bpl.n	8001638 <__swsetup_r+0x80>
 8001610:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001612:	2900      	cmp	r1, #0
 8001614:	d008      	beq.n	8001628 <__swsetup_r+0x70>
 8001616:	0023      	movs	r3, r4
 8001618:	3344      	adds	r3, #68	; 0x44
 800161a:	4299      	cmp	r1, r3
 800161c:	d002      	beq.n	8001624 <__swsetup_r+0x6c>
 800161e:	0030      	movs	r0, r6
 8001620:	f000 fa80 	bl	8001b24 <_free_r>
 8001624:	2300      	movs	r3, #0
 8001626:	6363      	str	r3, [r4, #52]	; 0x34
 8001628:	2224      	movs	r2, #36	; 0x24
 800162a:	89a3      	ldrh	r3, [r4, #12]
 800162c:	4393      	bics	r3, r2
 800162e:	81a3      	strh	r3, [r4, #12]
 8001630:	2300      	movs	r3, #0
 8001632:	6063      	str	r3, [r4, #4]
 8001634:	6923      	ldr	r3, [r4, #16]
 8001636:	6023      	str	r3, [r4, #0]
 8001638:	2308      	movs	r3, #8
 800163a:	89a2      	ldrh	r2, [r4, #12]
 800163c:	4313      	orrs	r3, r2
 800163e:	81a3      	strh	r3, [r4, #12]
 8001640:	6923      	ldr	r3, [r4, #16]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d10b      	bne.n	800165e <__swsetup_r+0xa6>
 8001646:	21a0      	movs	r1, #160	; 0xa0
 8001648:	2280      	movs	r2, #128	; 0x80
 800164a:	89a3      	ldrh	r3, [r4, #12]
 800164c:	0089      	lsls	r1, r1, #2
 800164e:	0092      	lsls	r2, r2, #2
 8001650:	400b      	ands	r3, r1
 8001652:	4293      	cmp	r3, r2
 8001654:	d003      	beq.n	800165e <__swsetup_r+0xa6>
 8001656:	0021      	movs	r1, r4
 8001658:	0030      	movs	r0, r6
 800165a:	f000 fa1f 	bl	8001a9c <__smakebuf_r>
 800165e:	220c      	movs	r2, #12
 8001660:	5ea3      	ldrsh	r3, [r4, r2]
 8001662:	2001      	movs	r0, #1
 8001664:	001a      	movs	r2, r3
 8001666:	b299      	uxth	r1, r3
 8001668:	4002      	ands	r2, r0
 800166a:	4203      	tst	r3, r0
 800166c:	d00f      	beq.n	800168e <__swsetup_r+0xd6>
 800166e:	2200      	movs	r2, #0
 8001670:	60a2      	str	r2, [r4, #8]
 8001672:	6962      	ldr	r2, [r4, #20]
 8001674:	4252      	negs	r2, r2
 8001676:	61a2      	str	r2, [r4, #24]
 8001678:	2000      	movs	r0, #0
 800167a:	6922      	ldr	r2, [r4, #16]
 800167c:	4282      	cmp	r2, r0
 800167e:	d1ba      	bne.n	80015f6 <__swsetup_r+0x3e>
 8001680:	060a      	lsls	r2, r1, #24
 8001682:	d5b8      	bpl.n	80015f6 <__swsetup_r+0x3e>
 8001684:	2240      	movs	r2, #64	; 0x40
 8001686:	4313      	orrs	r3, r2
 8001688:	81a3      	strh	r3, [r4, #12]
 800168a:	3801      	subs	r0, #1
 800168c:	e7b3      	b.n	80015f6 <__swsetup_r+0x3e>
 800168e:	0788      	lsls	r0, r1, #30
 8001690:	d400      	bmi.n	8001694 <__swsetup_r+0xdc>
 8001692:	6962      	ldr	r2, [r4, #20]
 8001694:	60a2      	str	r2, [r4, #8]
 8001696:	e7ef      	b.n	8001678 <__swsetup_r+0xc0>
 8001698:	20000004 	.word	0x20000004
 800169c:	08002b00 	.word	0x08002b00
 80016a0:	08002b20 	.word	0x08002b20
 80016a4:	08002ae0 	.word	0x08002ae0

080016a8 <__sflush_r>:
 80016a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80016aa:	898b      	ldrh	r3, [r1, #12]
 80016ac:	0005      	movs	r5, r0
 80016ae:	000c      	movs	r4, r1
 80016b0:	071a      	lsls	r2, r3, #28
 80016b2:	d45f      	bmi.n	8001774 <__sflush_r+0xcc>
 80016b4:	684a      	ldr	r2, [r1, #4]
 80016b6:	2a00      	cmp	r2, #0
 80016b8:	dc04      	bgt.n	80016c4 <__sflush_r+0x1c>
 80016ba:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80016bc:	2a00      	cmp	r2, #0
 80016be:	dc01      	bgt.n	80016c4 <__sflush_r+0x1c>
 80016c0:	2000      	movs	r0, #0
 80016c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80016c4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80016c6:	2f00      	cmp	r7, #0
 80016c8:	d0fa      	beq.n	80016c0 <__sflush_r+0x18>
 80016ca:	2200      	movs	r2, #0
 80016cc:	2180      	movs	r1, #128	; 0x80
 80016ce:	682e      	ldr	r6, [r5, #0]
 80016d0:	602a      	str	r2, [r5, #0]
 80016d2:	001a      	movs	r2, r3
 80016d4:	0149      	lsls	r1, r1, #5
 80016d6:	400a      	ands	r2, r1
 80016d8:	420b      	tst	r3, r1
 80016da:	d034      	beq.n	8001746 <__sflush_r+0x9e>
 80016dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80016de:	89a3      	ldrh	r3, [r4, #12]
 80016e0:	075b      	lsls	r3, r3, #29
 80016e2:	d506      	bpl.n	80016f2 <__sflush_r+0x4a>
 80016e4:	6863      	ldr	r3, [r4, #4]
 80016e6:	1ac0      	subs	r0, r0, r3
 80016e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <__sflush_r+0x4a>
 80016ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016f0:	1ac0      	subs	r0, r0, r3
 80016f2:	0002      	movs	r2, r0
 80016f4:	6a21      	ldr	r1, [r4, #32]
 80016f6:	2300      	movs	r3, #0
 80016f8:	0028      	movs	r0, r5
 80016fa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80016fc:	47b8      	blx	r7
 80016fe:	89a1      	ldrh	r1, [r4, #12]
 8001700:	1c43      	adds	r3, r0, #1
 8001702:	d106      	bne.n	8001712 <__sflush_r+0x6a>
 8001704:	682b      	ldr	r3, [r5, #0]
 8001706:	2b1d      	cmp	r3, #29
 8001708:	d831      	bhi.n	800176e <__sflush_r+0xc6>
 800170a:	4a2c      	ldr	r2, [pc, #176]	; (80017bc <__sflush_r+0x114>)
 800170c:	40da      	lsrs	r2, r3
 800170e:	07d3      	lsls	r3, r2, #31
 8001710:	d52d      	bpl.n	800176e <__sflush_r+0xc6>
 8001712:	2300      	movs	r3, #0
 8001714:	6063      	str	r3, [r4, #4]
 8001716:	6923      	ldr	r3, [r4, #16]
 8001718:	6023      	str	r3, [r4, #0]
 800171a:	04cb      	lsls	r3, r1, #19
 800171c:	d505      	bpl.n	800172a <__sflush_r+0x82>
 800171e:	1c43      	adds	r3, r0, #1
 8001720:	d102      	bne.n	8001728 <__sflush_r+0x80>
 8001722:	682b      	ldr	r3, [r5, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d100      	bne.n	800172a <__sflush_r+0x82>
 8001728:	6560      	str	r0, [r4, #84]	; 0x54
 800172a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800172c:	602e      	str	r6, [r5, #0]
 800172e:	2900      	cmp	r1, #0
 8001730:	d0c6      	beq.n	80016c0 <__sflush_r+0x18>
 8001732:	0023      	movs	r3, r4
 8001734:	3344      	adds	r3, #68	; 0x44
 8001736:	4299      	cmp	r1, r3
 8001738:	d002      	beq.n	8001740 <__sflush_r+0x98>
 800173a:	0028      	movs	r0, r5
 800173c:	f000 f9f2 	bl	8001b24 <_free_r>
 8001740:	2000      	movs	r0, #0
 8001742:	6360      	str	r0, [r4, #52]	; 0x34
 8001744:	e7bd      	b.n	80016c2 <__sflush_r+0x1a>
 8001746:	2301      	movs	r3, #1
 8001748:	0028      	movs	r0, r5
 800174a:	6a21      	ldr	r1, [r4, #32]
 800174c:	47b8      	blx	r7
 800174e:	1c43      	adds	r3, r0, #1
 8001750:	d1c5      	bne.n	80016de <__sflush_r+0x36>
 8001752:	682b      	ldr	r3, [r5, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0c2      	beq.n	80016de <__sflush_r+0x36>
 8001758:	2b1d      	cmp	r3, #29
 800175a:	d001      	beq.n	8001760 <__sflush_r+0xb8>
 800175c:	2b16      	cmp	r3, #22
 800175e:	d101      	bne.n	8001764 <__sflush_r+0xbc>
 8001760:	602e      	str	r6, [r5, #0]
 8001762:	e7ad      	b.n	80016c0 <__sflush_r+0x18>
 8001764:	2340      	movs	r3, #64	; 0x40
 8001766:	89a2      	ldrh	r2, [r4, #12]
 8001768:	4313      	orrs	r3, r2
 800176a:	81a3      	strh	r3, [r4, #12]
 800176c:	e7a9      	b.n	80016c2 <__sflush_r+0x1a>
 800176e:	2340      	movs	r3, #64	; 0x40
 8001770:	430b      	orrs	r3, r1
 8001772:	e7fa      	b.n	800176a <__sflush_r+0xc2>
 8001774:	690f      	ldr	r7, [r1, #16]
 8001776:	2f00      	cmp	r7, #0
 8001778:	d0a2      	beq.n	80016c0 <__sflush_r+0x18>
 800177a:	680a      	ldr	r2, [r1, #0]
 800177c:	600f      	str	r7, [r1, #0]
 800177e:	1bd2      	subs	r2, r2, r7
 8001780:	9201      	str	r2, [sp, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	079b      	lsls	r3, r3, #30
 8001786:	d100      	bne.n	800178a <__sflush_r+0xe2>
 8001788:	694a      	ldr	r2, [r1, #20]
 800178a:	60a2      	str	r2, [r4, #8]
 800178c:	9b01      	ldr	r3, [sp, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	dc00      	bgt.n	8001794 <__sflush_r+0xec>
 8001792:	e795      	b.n	80016c0 <__sflush_r+0x18>
 8001794:	003a      	movs	r2, r7
 8001796:	0028      	movs	r0, r5
 8001798:	9b01      	ldr	r3, [sp, #4]
 800179a:	6a21      	ldr	r1, [r4, #32]
 800179c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800179e:	47b0      	blx	r6
 80017a0:	2800      	cmp	r0, #0
 80017a2:	dc06      	bgt.n	80017b2 <__sflush_r+0x10a>
 80017a4:	2340      	movs	r3, #64	; 0x40
 80017a6:	2001      	movs	r0, #1
 80017a8:	89a2      	ldrh	r2, [r4, #12]
 80017aa:	4240      	negs	r0, r0
 80017ac:	4313      	orrs	r3, r2
 80017ae:	81a3      	strh	r3, [r4, #12]
 80017b0:	e787      	b.n	80016c2 <__sflush_r+0x1a>
 80017b2:	9b01      	ldr	r3, [sp, #4]
 80017b4:	183f      	adds	r7, r7, r0
 80017b6:	1a1b      	subs	r3, r3, r0
 80017b8:	9301      	str	r3, [sp, #4]
 80017ba:	e7e7      	b.n	800178c <__sflush_r+0xe4>
 80017bc:	20400001 	.word	0x20400001

080017c0 <_fflush_r>:
 80017c0:	690b      	ldr	r3, [r1, #16]
 80017c2:	b570      	push	{r4, r5, r6, lr}
 80017c4:	0005      	movs	r5, r0
 80017c6:	000c      	movs	r4, r1
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d102      	bne.n	80017d2 <_fflush_r+0x12>
 80017cc:	2500      	movs	r5, #0
 80017ce:	0028      	movs	r0, r5
 80017d0:	bd70      	pop	{r4, r5, r6, pc}
 80017d2:	2800      	cmp	r0, #0
 80017d4:	d004      	beq.n	80017e0 <_fflush_r+0x20>
 80017d6:	6983      	ldr	r3, [r0, #24]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <_fflush_r+0x20>
 80017dc:	f000 f892 	bl	8001904 <__sinit>
 80017e0:	4b14      	ldr	r3, [pc, #80]	; (8001834 <_fflush_r+0x74>)
 80017e2:	429c      	cmp	r4, r3
 80017e4:	d11b      	bne.n	800181e <_fflush_r+0x5e>
 80017e6:	686c      	ldr	r4, [r5, #4]
 80017e8:	220c      	movs	r2, #12
 80017ea:	5ea3      	ldrsh	r3, [r4, r2]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0ed      	beq.n	80017cc <_fflush_r+0xc>
 80017f0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80017f2:	07d2      	lsls	r2, r2, #31
 80017f4:	d404      	bmi.n	8001800 <_fflush_r+0x40>
 80017f6:	059b      	lsls	r3, r3, #22
 80017f8:	d402      	bmi.n	8001800 <_fflush_r+0x40>
 80017fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80017fc:	f000 f923 	bl	8001a46 <__retarget_lock_acquire_recursive>
 8001800:	0028      	movs	r0, r5
 8001802:	0021      	movs	r1, r4
 8001804:	f7ff ff50 	bl	80016a8 <__sflush_r>
 8001808:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800180a:	0005      	movs	r5, r0
 800180c:	07db      	lsls	r3, r3, #31
 800180e:	d4de      	bmi.n	80017ce <_fflush_r+0xe>
 8001810:	89a3      	ldrh	r3, [r4, #12]
 8001812:	059b      	lsls	r3, r3, #22
 8001814:	d4db      	bmi.n	80017ce <_fflush_r+0xe>
 8001816:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001818:	f000 f916 	bl	8001a48 <__retarget_lock_release_recursive>
 800181c:	e7d7      	b.n	80017ce <_fflush_r+0xe>
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <_fflush_r+0x78>)
 8001820:	429c      	cmp	r4, r3
 8001822:	d101      	bne.n	8001828 <_fflush_r+0x68>
 8001824:	68ac      	ldr	r4, [r5, #8]
 8001826:	e7df      	b.n	80017e8 <_fflush_r+0x28>
 8001828:	4b04      	ldr	r3, [pc, #16]	; (800183c <_fflush_r+0x7c>)
 800182a:	429c      	cmp	r4, r3
 800182c:	d1dc      	bne.n	80017e8 <_fflush_r+0x28>
 800182e:	68ec      	ldr	r4, [r5, #12]
 8001830:	e7da      	b.n	80017e8 <_fflush_r+0x28>
 8001832:	46c0      	nop			; (mov r8, r8)
 8001834:	08002b00 	.word	0x08002b00
 8001838:	08002b20 	.word	0x08002b20
 800183c:	08002ae0 	.word	0x08002ae0

08001840 <std>:
 8001840:	2300      	movs	r3, #0
 8001842:	b510      	push	{r4, lr}
 8001844:	0004      	movs	r4, r0
 8001846:	6003      	str	r3, [r0, #0]
 8001848:	6043      	str	r3, [r0, #4]
 800184a:	6083      	str	r3, [r0, #8]
 800184c:	8181      	strh	r1, [r0, #12]
 800184e:	6643      	str	r3, [r0, #100]	; 0x64
 8001850:	0019      	movs	r1, r3
 8001852:	81c2      	strh	r2, [r0, #14]
 8001854:	6103      	str	r3, [r0, #16]
 8001856:	6143      	str	r3, [r0, #20]
 8001858:	6183      	str	r3, [r0, #24]
 800185a:	2208      	movs	r2, #8
 800185c:	305c      	adds	r0, #92	; 0x5c
 800185e:	f7ff fdb7 	bl	80013d0 <memset>
 8001862:	4b05      	ldr	r3, [pc, #20]	; (8001878 <std+0x38>)
 8001864:	6224      	str	r4, [r4, #32]
 8001866:	6263      	str	r3, [r4, #36]	; 0x24
 8001868:	4b04      	ldr	r3, [pc, #16]	; (800187c <std+0x3c>)
 800186a:	62a3      	str	r3, [r4, #40]	; 0x28
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <std+0x40>)
 800186e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001870:	4b04      	ldr	r3, [pc, #16]	; (8001884 <std+0x44>)
 8001872:	6323      	str	r3, [r4, #48]	; 0x30
 8001874:	bd10      	pop	{r4, pc}
 8001876:	46c0      	nop			; (mov r8, r8)
 8001878:	080022d5 	.word	0x080022d5
 800187c:	080022fd 	.word	0x080022fd
 8001880:	08002335 	.word	0x08002335
 8001884:	08002361 	.word	0x08002361

08001888 <_cleanup_r>:
 8001888:	b510      	push	{r4, lr}
 800188a:	4902      	ldr	r1, [pc, #8]	; (8001894 <_cleanup_r+0xc>)
 800188c:	f000 f8ba 	bl	8001a04 <_fwalk_reent>
 8001890:	bd10      	pop	{r4, pc}
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	080017c1 	.word	0x080017c1

08001898 <__sfmoreglue>:
 8001898:	b570      	push	{r4, r5, r6, lr}
 800189a:	2568      	movs	r5, #104	; 0x68
 800189c:	1e4a      	subs	r2, r1, #1
 800189e:	4355      	muls	r5, r2
 80018a0:	000e      	movs	r6, r1
 80018a2:	0029      	movs	r1, r5
 80018a4:	3174      	adds	r1, #116	; 0x74
 80018a6:	f000 f9a9 	bl	8001bfc <_malloc_r>
 80018aa:	1e04      	subs	r4, r0, #0
 80018ac:	d008      	beq.n	80018c0 <__sfmoreglue+0x28>
 80018ae:	2100      	movs	r1, #0
 80018b0:	002a      	movs	r2, r5
 80018b2:	6001      	str	r1, [r0, #0]
 80018b4:	6046      	str	r6, [r0, #4]
 80018b6:	300c      	adds	r0, #12
 80018b8:	60a0      	str	r0, [r4, #8]
 80018ba:	3268      	adds	r2, #104	; 0x68
 80018bc:	f7ff fd88 	bl	80013d0 <memset>
 80018c0:	0020      	movs	r0, r4
 80018c2:	bd70      	pop	{r4, r5, r6, pc}

080018c4 <__sfp_lock_acquire>:
 80018c4:	b510      	push	{r4, lr}
 80018c6:	4802      	ldr	r0, [pc, #8]	; (80018d0 <__sfp_lock_acquire+0xc>)
 80018c8:	f000 f8bd 	bl	8001a46 <__retarget_lock_acquire_recursive>
 80018cc:	bd10      	pop	{r4, pc}
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	200000e8 	.word	0x200000e8

080018d4 <__sfp_lock_release>:
 80018d4:	b510      	push	{r4, lr}
 80018d6:	4802      	ldr	r0, [pc, #8]	; (80018e0 <__sfp_lock_release+0xc>)
 80018d8:	f000 f8b6 	bl	8001a48 <__retarget_lock_release_recursive>
 80018dc:	bd10      	pop	{r4, pc}
 80018de:	46c0      	nop			; (mov r8, r8)
 80018e0:	200000e8 	.word	0x200000e8

080018e4 <__sinit_lock_acquire>:
 80018e4:	b510      	push	{r4, lr}
 80018e6:	4802      	ldr	r0, [pc, #8]	; (80018f0 <__sinit_lock_acquire+0xc>)
 80018e8:	f000 f8ad 	bl	8001a46 <__retarget_lock_acquire_recursive>
 80018ec:	bd10      	pop	{r4, pc}
 80018ee:	46c0      	nop			; (mov r8, r8)
 80018f0:	200000e9 	.word	0x200000e9

080018f4 <__sinit_lock_release>:
 80018f4:	b510      	push	{r4, lr}
 80018f6:	4802      	ldr	r0, [pc, #8]	; (8001900 <__sinit_lock_release+0xc>)
 80018f8:	f000 f8a6 	bl	8001a48 <__retarget_lock_release_recursive>
 80018fc:	bd10      	pop	{r4, pc}
 80018fe:	46c0      	nop			; (mov r8, r8)
 8001900:	200000e9 	.word	0x200000e9

08001904 <__sinit>:
 8001904:	b513      	push	{r0, r1, r4, lr}
 8001906:	0004      	movs	r4, r0
 8001908:	f7ff ffec 	bl	80018e4 <__sinit_lock_acquire>
 800190c:	69a3      	ldr	r3, [r4, #24]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d002      	beq.n	8001918 <__sinit+0x14>
 8001912:	f7ff ffef 	bl	80018f4 <__sinit_lock_release>
 8001916:	bd13      	pop	{r0, r1, r4, pc}
 8001918:	64a3      	str	r3, [r4, #72]	; 0x48
 800191a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800191c:	6523      	str	r3, [r4, #80]	; 0x50
 800191e:	4b13      	ldr	r3, [pc, #76]	; (800196c <__sinit+0x68>)
 8001920:	4a13      	ldr	r2, [pc, #76]	; (8001970 <__sinit+0x6c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	62a2      	str	r2, [r4, #40]	; 0x28
 8001926:	9301      	str	r3, [sp, #4]
 8001928:	42a3      	cmp	r3, r4
 800192a:	d101      	bne.n	8001930 <__sinit+0x2c>
 800192c:	2301      	movs	r3, #1
 800192e:	61a3      	str	r3, [r4, #24]
 8001930:	0020      	movs	r0, r4
 8001932:	f000 f81f 	bl	8001974 <__sfp>
 8001936:	6060      	str	r0, [r4, #4]
 8001938:	0020      	movs	r0, r4
 800193a:	f000 f81b 	bl	8001974 <__sfp>
 800193e:	60a0      	str	r0, [r4, #8]
 8001940:	0020      	movs	r0, r4
 8001942:	f000 f817 	bl	8001974 <__sfp>
 8001946:	2200      	movs	r2, #0
 8001948:	2104      	movs	r1, #4
 800194a:	60e0      	str	r0, [r4, #12]
 800194c:	6860      	ldr	r0, [r4, #4]
 800194e:	f7ff ff77 	bl	8001840 <std>
 8001952:	2201      	movs	r2, #1
 8001954:	2109      	movs	r1, #9
 8001956:	68a0      	ldr	r0, [r4, #8]
 8001958:	f7ff ff72 	bl	8001840 <std>
 800195c:	2202      	movs	r2, #2
 800195e:	2112      	movs	r1, #18
 8001960:	68e0      	ldr	r0, [r4, #12]
 8001962:	f7ff ff6d 	bl	8001840 <std>
 8001966:	2301      	movs	r3, #1
 8001968:	61a3      	str	r3, [r4, #24]
 800196a:	e7d2      	b.n	8001912 <__sinit+0xe>
 800196c:	08002adc 	.word	0x08002adc
 8001970:	08001889 	.word	0x08001889

08001974 <__sfp>:
 8001974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001976:	0007      	movs	r7, r0
 8001978:	f7ff ffa4 	bl	80018c4 <__sfp_lock_acquire>
 800197c:	4b1f      	ldr	r3, [pc, #124]	; (80019fc <__sfp+0x88>)
 800197e:	681e      	ldr	r6, [r3, #0]
 8001980:	69b3      	ldr	r3, [r6, #24]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d102      	bne.n	800198c <__sfp+0x18>
 8001986:	0030      	movs	r0, r6
 8001988:	f7ff ffbc 	bl	8001904 <__sinit>
 800198c:	3648      	adds	r6, #72	; 0x48
 800198e:	68b4      	ldr	r4, [r6, #8]
 8001990:	6873      	ldr	r3, [r6, #4]
 8001992:	3b01      	subs	r3, #1
 8001994:	d504      	bpl.n	80019a0 <__sfp+0x2c>
 8001996:	6833      	ldr	r3, [r6, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d022      	beq.n	80019e2 <__sfp+0x6e>
 800199c:	6836      	ldr	r6, [r6, #0]
 800199e:	e7f6      	b.n	800198e <__sfp+0x1a>
 80019a0:	220c      	movs	r2, #12
 80019a2:	5ea5      	ldrsh	r5, [r4, r2]
 80019a4:	2d00      	cmp	r5, #0
 80019a6:	d11a      	bne.n	80019de <__sfp+0x6a>
 80019a8:	0020      	movs	r0, r4
 80019aa:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <__sfp+0x8c>)
 80019ac:	3058      	adds	r0, #88	; 0x58
 80019ae:	60e3      	str	r3, [r4, #12]
 80019b0:	6665      	str	r5, [r4, #100]	; 0x64
 80019b2:	f000 f847 	bl	8001a44 <__retarget_lock_init_recursive>
 80019b6:	f7ff ff8d 	bl	80018d4 <__sfp_lock_release>
 80019ba:	0020      	movs	r0, r4
 80019bc:	2208      	movs	r2, #8
 80019be:	0029      	movs	r1, r5
 80019c0:	6025      	str	r5, [r4, #0]
 80019c2:	60a5      	str	r5, [r4, #8]
 80019c4:	6065      	str	r5, [r4, #4]
 80019c6:	6125      	str	r5, [r4, #16]
 80019c8:	6165      	str	r5, [r4, #20]
 80019ca:	61a5      	str	r5, [r4, #24]
 80019cc:	305c      	adds	r0, #92	; 0x5c
 80019ce:	f7ff fcff 	bl	80013d0 <memset>
 80019d2:	6365      	str	r5, [r4, #52]	; 0x34
 80019d4:	63a5      	str	r5, [r4, #56]	; 0x38
 80019d6:	64a5      	str	r5, [r4, #72]	; 0x48
 80019d8:	64e5      	str	r5, [r4, #76]	; 0x4c
 80019da:	0020      	movs	r0, r4
 80019dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019de:	3468      	adds	r4, #104	; 0x68
 80019e0:	e7d7      	b.n	8001992 <__sfp+0x1e>
 80019e2:	2104      	movs	r1, #4
 80019e4:	0038      	movs	r0, r7
 80019e6:	f7ff ff57 	bl	8001898 <__sfmoreglue>
 80019ea:	1e04      	subs	r4, r0, #0
 80019ec:	6030      	str	r0, [r6, #0]
 80019ee:	d1d5      	bne.n	800199c <__sfp+0x28>
 80019f0:	f7ff ff70 	bl	80018d4 <__sfp_lock_release>
 80019f4:	230c      	movs	r3, #12
 80019f6:	603b      	str	r3, [r7, #0]
 80019f8:	e7ef      	b.n	80019da <__sfp+0x66>
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	08002adc 	.word	0x08002adc
 8001a00:	ffff0001 	.word	0xffff0001

08001a04 <_fwalk_reent>:
 8001a04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001a06:	0004      	movs	r4, r0
 8001a08:	0006      	movs	r6, r0
 8001a0a:	2700      	movs	r7, #0
 8001a0c:	9101      	str	r1, [sp, #4]
 8001a0e:	3448      	adds	r4, #72	; 0x48
 8001a10:	6863      	ldr	r3, [r4, #4]
 8001a12:	68a5      	ldr	r5, [r4, #8]
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	9b00      	ldr	r3, [sp, #0]
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	d504      	bpl.n	8001a28 <_fwalk_reent+0x24>
 8001a1e:	6824      	ldr	r4, [r4, #0]
 8001a20:	2c00      	cmp	r4, #0
 8001a22:	d1f5      	bne.n	8001a10 <_fwalk_reent+0xc>
 8001a24:	0038      	movs	r0, r7
 8001a26:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001a28:	89ab      	ldrh	r3, [r5, #12]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d908      	bls.n	8001a40 <_fwalk_reent+0x3c>
 8001a2e:	220e      	movs	r2, #14
 8001a30:	5eab      	ldrsh	r3, [r5, r2]
 8001a32:	3301      	adds	r3, #1
 8001a34:	d004      	beq.n	8001a40 <_fwalk_reent+0x3c>
 8001a36:	0029      	movs	r1, r5
 8001a38:	0030      	movs	r0, r6
 8001a3a:	9b01      	ldr	r3, [sp, #4]
 8001a3c:	4798      	blx	r3
 8001a3e:	4307      	orrs	r7, r0
 8001a40:	3568      	adds	r5, #104	; 0x68
 8001a42:	e7e8      	b.n	8001a16 <_fwalk_reent+0x12>

08001a44 <__retarget_lock_init_recursive>:
 8001a44:	4770      	bx	lr

08001a46 <__retarget_lock_acquire_recursive>:
 8001a46:	4770      	bx	lr

08001a48 <__retarget_lock_release_recursive>:
 8001a48:	4770      	bx	lr
	...

08001a4c <__swhatbuf_r>:
 8001a4c:	b570      	push	{r4, r5, r6, lr}
 8001a4e:	000e      	movs	r6, r1
 8001a50:	001d      	movs	r5, r3
 8001a52:	230e      	movs	r3, #14
 8001a54:	5ec9      	ldrsh	r1, [r1, r3]
 8001a56:	0014      	movs	r4, r2
 8001a58:	b096      	sub	sp, #88	; 0x58
 8001a5a:	2900      	cmp	r1, #0
 8001a5c:	da08      	bge.n	8001a70 <__swhatbuf_r+0x24>
 8001a5e:	220c      	movs	r2, #12
 8001a60:	5eb3      	ldrsh	r3, [r6, r2]
 8001a62:	2200      	movs	r2, #0
 8001a64:	602a      	str	r2, [r5, #0]
 8001a66:	061b      	lsls	r3, r3, #24
 8001a68:	d411      	bmi.n	8001a8e <__swhatbuf_r+0x42>
 8001a6a:	2380      	movs	r3, #128	; 0x80
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	e00f      	b.n	8001a90 <__swhatbuf_r+0x44>
 8001a70:	466a      	mov	r2, sp
 8001a72:	f000 fca1 	bl	80023b8 <_fstat_r>
 8001a76:	2800      	cmp	r0, #0
 8001a78:	dbf1      	blt.n	8001a5e <__swhatbuf_r+0x12>
 8001a7a:	23f0      	movs	r3, #240	; 0xf0
 8001a7c:	9901      	ldr	r1, [sp, #4]
 8001a7e:	021b      	lsls	r3, r3, #8
 8001a80:	4019      	ands	r1, r3
 8001a82:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <__swhatbuf_r+0x4c>)
 8001a84:	18c9      	adds	r1, r1, r3
 8001a86:	424b      	negs	r3, r1
 8001a88:	4159      	adcs	r1, r3
 8001a8a:	6029      	str	r1, [r5, #0]
 8001a8c:	e7ed      	b.n	8001a6a <__swhatbuf_r+0x1e>
 8001a8e:	2340      	movs	r3, #64	; 0x40
 8001a90:	2000      	movs	r0, #0
 8001a92:	6023      	str	r3, [r4, #0]
 8001a94:	b016      	add	sp, #88	; 0x58
 8001a96:	bd70      	pop	{r4, r5, r6, pc}
 8001a98:	ffffe000 	.word	0xffffe000

08001a9c <__smakebuf_r>:
 8001a9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001a9e:	2602      	movs	r6, #2
 8001aa0:	898b      	ldrh	r3, [r1, #12]
 8001aa2:	0005      	movs	r5, r0
 8001aa4:	000c      	movs	r4, r1
 8001aa6:	4233      	tst	r3, r6
 8001aa8:	d006      	beq.n	8001ab8 <__smakebuf_r+0x1c>
 8001aaa:	0023      	movs	r3, r4
 8001aac:	3347      	adds	r3, #71	; 0x47
 8001aae:	6023      	str	r3, [r4, #0]
 8001ab0:	6123      	str	r3, [r4, #16]
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	6163      	str	r3, [r4, #20]
 8001ab6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001ab8:	466a      	mov	r2, sp
 8001aba:	ab01      	add	r3, sp, #4
 8001abc:	f7ff ffc6 	bl	8001a4c <__swhatbuf_r>
 8001ac0:	9900      	ldr	r1, [sp, #0]
 8001ac2:	0007      	movs	r7, r0
 8001ac4:	0028      	movs	r0, r5
 8001ac6:	f000 f899 	bl	8001bfc <_malloc_r>
 8001aca:	2800      	cmp	r0, #0
 8001acc:	d108      	bne.n	8001ae0 <__smakebuf_r+0x44>
 8001ace:	220c      	movs	r2, #12
 8001ad0:	5ea3      	ldrsh	r3, [r4, r2]
 8001ad2:	059a      	lsls	r2, r3, #22
 8001ad4:	d4ef      	bmi.n	8001ab6 <__smakebuf_r+0x1a>
 8001ad6:	2203      	movs	r2, #3
 8001ad8:	4393      	bics	r3, r2
 8001ada:	431e      	orrs	r6, r3
 8001adc:	81a6      	strh	r6, [r4, #12]
 8001ade:	e7e4      	b.n	8001aaa <__smakebuf_r+0xe>
 8001ae0:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <__smakebuf_r+0x84>)
 8001ae2:	62ab      	str	r3, [r5, #40]	; 0x28
 8001ae4:	2380      	movs	r3, #128	; 0x80
 8001ae6:	89a2      	ldrh	r2, [r4, #12]
 8001ae8:	6020      	str	r0, [r4, #0]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	81a3      	strh	r3, [r4, #12]
 8001aee:	9b00      	ldr	r3, [sp, #0]
 8001af0:	6120      	str	r0, [r4, #16]
 8001af2:	6163      	str	r3, [r4, #20]
 8001af4:	9b01      	ldr	r3, [sp, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d00d      	beq.n	8001b16 <__smakebuf_r+0x7a>
 8001afa:	0028      	movs	r0, r5
 8001afc:	230e      	movs	r3, #14
 8001afe:	5ee1      	ldrsh	r1, [r4, r3]
 8001b00:	f000 fc6c 	bl	80023dc <_isatty_r>
 8001b04:	2800      	cmp	r0, #0
 8001b06:	d006      	beq.n	8001b16 <__smakebuf_r+0x7a>
 8001b08:	2203      	movs	r2, #3
 8001b0a:	89a3      	ldrh	r3, [r4, #12]
 8001b0c:	4393      	bics	r3, r2
 8001b0e:	001a      	movs	r2, r3
 8001b10:	2301      	movs	r3, #1
 8001b12:	4313      	orrs	r3, r2
 8001b14:	81a3      	strh	r3, [r4, #12]
 8001b16:	89a0      	ldrh	r0, [r4, #12]
 8001b18:	4307      	orrs	r7, r0
 8001b1a:	81a7      	strh	r7, [r4, #12]
 8001b1c:	e7cb      	b.n	8001ab6 <__smakebuf_r+0x1a>
 8001b1e:	46c0      	nop			; (mov r8, r8)
 8001b20:	08001889 	.word	0x08001889

08001b24 <_free_r>:
 8001b24:	b570      	push	{r4, r5, r6, lr}
 8001b26:	0005      	movs	r5, r0
 8001b28:	2900      	cmp	r1, #0
 8001b2a:	d010      	beq.n	8001b4e <_free_r+0x2a>
 8001b2c:	1f0c      	subs	r4, r1, #4
 8001b2e:	6823      	ldr	r3, [r4, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	da00      	bge.n	8001b36 <_free_r+0x12>
 8001b34:	18e4      	adds	r4, r4, r3
 8001b36:	0028      	movs	r0, r5
 8001b38:	f000 fc82 	bl	8002440 <__malloc_lock>
 8001b3c:	4a1d      	ldr	r2, [pc, #116]	; (8001bb4 <_free_r+0x90>)
 8001b3e:	6813      	ldr	r3, [r2, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d105      	bne.n	8001b50 <_free_r+0x2c>
 8001b44:	6063      	str	r3, [r4, #4]
 8001b46:	6014      	str	r4, [r2, #0]
 8001b48:	0028      	movs	r0, r5
 8001b4a:	f000 fc81 	bl	8002450 <__malloc_unlock>
 8001b4e:	bd70      	pop	{r4, r5, r6, pc}
 8001b50:	42a3      	cmp	r3, r4
 8001b52:	d908      	bls.n	8001b66 <_free_r+0x42>
 8001b54:	6821      	ldr	r1, [r4, #0]
 8001b56:	1860      	adds	r0, r4, r1
 8001b58:	4283      	cmp	r3, r0
 8001b5a:	d1f3      	bne.n	8001b44 <_free_r+0x20>
 8001b5c:	6818      	ldr	r0, [r3, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	1841      	adds	r1, r0, r1
 8001b62:	6021      	str	r1, [r4, #0]
 8001b64:	e7ee      	b.n	8001b44 <_free_r+0x20>
 8001b66:	001a      	movs	r2, r3
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <_free_r+0x4e>
 8001b6e:	42a3      	cmp	r3, r4
 8001b70:	d9f9      	bls.n	8001b66 <_free_r+0x42>
 8001b72:	6811      	ldr	r1, [r2, #0]
 8001b74:	1850      	adds	r0, r2, r1
 8001b76:	42a0      	cmp	r0, r4
 8001b78:	d10b      	bne.n	8001b92 <_free_r+0x6e>
 8001b7a:	6820      	ldr	r0, [r4, #0]
 8001b7c:	1809      	adds	r1, r1, r0
 8001b7e:	1850      	adds	r0, r2, r1
 8001b80:	6011      	str	r1, [r2, #0]
 8001b82:	4283      	cmp	r3, r0
 8001b84:	d1e0      	bne.n	8001b48 <_free_r+0x24>
 8001b86:	6818      	ldr	r0, [r3, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	1841      	adds	r1, r0, r1
 8001b8c:	6011      	str	r1, [r2, #0]
 8001b8e:	6053      	str	r3, [r2, #4]
 8001b90:	e7da      	b.n	8001b48 <_free_r+0x24>
 8001b92:	42a0      	cmp	r0, r4
 8001b94:	d902      	bls.n	8001b9c <_free_r+0x78>
 8001b96:	230c      	movs	r3, #12
 8001b98:	602b      	str	r3, [r5, #0]
 8001b9a:	e7d5      	b.n	8001b48 <_free_r+0x24>
 8001b9c:	6821      	ldr	r1, [r4, #0]
 8001b9e:	1860      	adds	r0, r4, r1
 8001ba0:	4283      	cmp	r3, r0
 8001ba2:	d103      	bne.n	8001bac <_free_r+0x88>
 8001ba4:	6818      	ldr	r0, [r3, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	1841      	adds	r1, r0, r1
 8001baa:	6021      	str	r1, [r4, #0]
 8001bac:	6063      	str	r3, [r4, #4]
 8001bae:	6054      	str	r4, [r2, #4]
 8001bb0:	e7ca      	b.n	8001b48 <_free_r+0x24>
 8001bb2:	46c0      	nop			; (mov r8, r8)
 8001bb4:	200000ec 	.word	0x200000ec

08001bb8 <sbrk_aligned>:
 8001bb8:	b570      	push	{r4, r5, r6, lr}
 8001bba:	4e0f      	ldr	r6, [pc, #60]	; (8001bf8 <sbrk_aligned+0x40>)
 8001bbc:	000d      	movs	r5, r1
 8001bbe:	6831      	ldr	r1, [r6, #0]
 8001bc0:	0004      	movs	r4, r0
 8001bc2:	2900      	cmp	r1, #0
 8001bc4:	d102      	bne.n	8001bcc <sbrk_aligned+0x14>
 8001bc6:	f000 fb73 	bl	80022b0 <_sbrk_r>
 8001bca:	6030      	str	r0, [r6, #0]
 8001bcc:	0029      	movs	r1, r5
 8001bce:	0020      	movs	r0, r4
 8001bd0:	f000 fb6e 	bl	80022b0 <_sbrk_r>
 8001bd4:	1c43      	adds	r3, r0, #1
 8001bd6:	d00a      	beq.n	8001bee <sbrk_aligned+0x36>
 8001bd8:	2303      	movs	r3, #3
 8001bda:	1cc5      	adds	r5, r0, #3
 8001bdc:	439d      	bics	r5, r3
 8001bde:	42a8      	cmp	r0, r5
 8001be0:	d007      	beq.n	8001bf2 <sbrk_aligned+0x3a>
 8001be2:	1a29      	subs	r1, r5, r0
 8001be4:	0020      	movs	r0, r4
 8001be6:	f000 fb63 	bl	80022b0 <_sbrk_r>
 8001bea:	1c43      	adds	r3, r0, #1
 8001bec:	d101      	bne.n	8001bf2 <sbrk_aligned+0x3a>
 8001bee:	2501      	movs	r5, #1
 8001bf0:	426d      	negs	r5, r5
 8001bf2:	0028      	movs	r0, r5
 8001bf4:	bd70      	pop	{r4, r5, r6, pc}
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	200000f0 	.word	0x200000f0

08001bfc <_malloc_r>:
 8001bfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001bfe:	2203      	movs	r2, #3
 8001c00:	1ccb      	adds	r3, r1, #3
 8001c02:	4393      	bics	r3, r2
 8001c04:	3308      	adds	r3, #8
 8001c06:	0006      	movs	r6, r0
 8001c08:	001f      	movs	r7, r3
 8001c0a:	2b0c      	cmp	r3, #12
 8001c0c:	d232      	bcs.n	8001c74 <_malloc_r+0x78>
 8001c0e:	270c      	movs	r7, #12
 8001c10:	42b9      	cmp	r1, r7
 8001c12:	d831      	bhi.n	8001c78 <_malloc_r+0x7c>
 8001c14:	0030      	movs	r0, r6
 8001c16:	f000 fc13 	bl	8002440 <__malloc_lock>
 8001c1a:	4d32      	ldr	r5, [pc, #200]	; (8001ce4 <_malloc_r+0xe8>)
 8001c1c:	682b      	ldr	r3, [r5, #0]
 8001c1e:	001c      	movs	r4, r3
 8001c20:	2c00      	cmp	r4, #0
 8001c22:	d12e      	bne.n	8001c82 <_malloc_r+0x86>
 8001c24:	0039      	movs	r1, r7
 8001c26:	0030      	movs	r0, r6
 8001c28:	f7ff ffc6 	bl	8001bb8 <sbrk_aligned>
 8001c2c:	0004      	movs	r4, r0
 8001c2e:	1c43      	adds	r3, r0, #1
 8001c30:	d11e      	bne.n	8001c70 <_malloc_r+0x74>
 8001c32:	682c      	ldr	r4, [r5, #0]
 8001c34:	0025      	movs	r5, r4
 8001c36:	2d00      	cmp	r5, #0
 8001c38:	d14a      	bne.n	8001cd0 <_malloc_r+0xd4>
 8001c3a:	6823      	ldr	r3, [r4, #0]
 8001c3c:	0029      	movs	r1, r5
 8001c3e:	18e3      	adds	r3, r4, r3
 8001c40:	0030      	movs	r0, r6
 8001c42:	9301      	str	r3, [sp, #4]
 8001c44:	f000 fb34 	bl	80022b0 <_sbrk_r>
 8001c48:	9b01      	ldr	r3, [sp, #4]
 8001c4a:	4283      	cmp	r3, r0
 8001c4c:	d143      	bne.n	8001cd6 <_malloc_r+0xda>
 8001c4e:	6823      	ldr	r3, [r4, #0]
 8001c50:	3703      	adds	r7, #3
 8001c52:	1aff      	subs	r7, r7, r3
 8001c54:	2303      	movs	r3, #3
 8001c56:	439f      	bics	r7, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	2f0c      	cmp	r7, #12
 8001c5c:	d200      	bcs.n	8001c60 <_malloc_r+0x64>
 8001c5e:	270c      	movs	r7, #12
 8001c60:	0039      	movs	r1, r7
 8001c62:	0030      	movs	r0, r6
 8001c64:	f7ff ffa8 	bl	8001bb8 <sbrk_aligned>
 8001c68:	1c43      	adds	r3, r0, #1
 8001c6a:	d034      	beq.n	8001cd6 <_malloc_r+0xda>
 8001c6c:	6823      	ldr	r3, [r4, #0]
 8001c6e:	19df      	adds	r7, r3, r7
 8001c70:	6027      	str	r7, [r4, #0]
 8001c72:	e013      	b.n	8001c9c <_malloc_r+0xa0>
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	dacb      	bge.n	8001c10 <_malloc_r+0x14>
 8001c78:	230c      	movs	r3, #12
 8001c7a:	2500      	movs	r5, #0
 8001c7c:	6033      	str	r3, [r6, #0]
 8001c7e:	0028      	movs	r0, r5
 8001c80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001c82:	6822      	ldr	r2, [r4, #0]
 8001c84:	1bd1      	subs	r1, r2, r7
 8001c86:	d420      	bmi.n	8001cca <_malloc_r+0xce>
 8001c88:	290b      	cmp	r1, #11
 8001c8a:	d917      	bls.n	8001cbc <_malloc_r+0xc0>
 8001c8c:	19e2      	adds	r2, r4, r7
 8001c8e:	6027      	str	r7, [r4, #0]
 8001c90:	42a3      	cmp	r3, r4
 8001c92:	d111      	bne.n	8001cb8 <_malloc_r+0xbc>
 8001c94:	602a      	str	r2, [r5, #0]
 8001c96:	6863      	ldr	r3, [r4, #4]
 8001c98:	6011      	str	r1, [r2, #0]
 8001c9a:	6053      	str	r3, [r2, #4]
 8001c9c:	0030      	movs	r0, r6
 8001c9e:	0025      	movs	r5, r4
 8001ca0:	f000 fbd6 	bl	8002450 <__malloc_unlock>
 8001ca4:	2207      	movs	r2, #7
 8001ca6:	350b      	adds	r5, #11
 8001ca8:	1d23      	adds	r3, r4, #4
 8001caa:	4395      	bics	r5, r2
 8001cac:	1aea      	subs	r2, r5, r3
 8001cae:	429d      	cmp	r5, r3
 8001cb0:	d0e5      	beq.n	8001c7e <_malloc_r+0x82>
 8001cb2:	1b5b      	subs	r3, r3, r5
 8001cb4:	50a3      	str	r3, [r4, r2]
 8001cb6:	e7e2      	b.n	8001c7e <_malloc_r+0x82>
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	e7ec      	b.n	8001c96 <_malloc_r+0x9a>
 8001cbc:	6862      	ldr	r2, [r4, #4]
 8001cbe:	42a3      	cmp	r3, r4
 8001cc0:	d101      	bne.n	8001cc6 <_malloc_r+0xca>
 8001cc2:	602a      	str	r2, [r5, #0]
 8001cc4:	e7ea      	b.n	8001c9c <_malloc_r+0xa0>
 8001cc6:	605a      	str	r2, [r3, #4]
 8001cc8:	e7e8      	b.n	8001c9c <_malloc_r+0xa0>
 8001cca:	0023      	movs	r3, r4
 8001ccc:	6864      	ldr	r4, [r4, #4]
 8001cce:	e7a7      	b.n	8001c20 <_malloc_r+0x24>
 8001cd0:	002c      	movs	r4, r5
 8001cd2:	686d      	ldr	r5, [r5, #4]
 8001cd4:	e7af      	b.n	8001c36 <_malloc_r+0x3a>
 8001cd6:	230c      	movs	r3, #12
 8001cd8:	0030      	movs	r0, r6
 8001cda:	6033      	str	r3, [r6, #0]
 8001cdc:	f000 fbb8 	bl	8002450 <__malloc_unlock>
 8001ce0:	e7cd      	b.n	8001c7e <_malloc_r+0x82>
 8001ce2:	46c0      	nop			; (mov r8, r8)
 8001ce4:	200000ec 	.word	0x200000ec

08001ce8 <__sfputc_r>:
 8001ce8:	6893      	ldr	r3, [r2, #8]
 8001cea:	b510      	push	{r4, lr}
 8001cec:	3b01      	subs	r3, #1
 8001cee:	6093      	str	r3, [r2, #8]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	da04      	bge.n	8001cfe <__sfputc_r+0x16>
 8001cf4:	6994      	ldr	r4, [r2, #24]
 8001cf6:	42a3      	cmp	r3, r4
 8001cf8:	db07      	blt.n	8001d0a <__sfputc_r+0x22>
 8001cfa:	290a      	cmp	r1, #10
 8001cfc:	d005      	beq.n	8001d0a <__sfputc_r+0x22>
 8001cfe:	6813      	ldr	r3, [r2, #0]
 8001d00:	1c58      	adds	r0, r3, #1
 8001d02:	6010      	str	r0, [r2, #0]
 8001d04:	7019      	strb	r1, [r3, #0]
 8001d06:	0008      	movs	r0, r1
 8001d08:	bd10      	pop	{r4, pc}
 8001d0a:	f7ff fbff 	bl	800150c <__swbuf_r>
 8001d0e:	0001      	movs	r1, r0
 8001d10:	e7f9      	b.n	8001d06 <__sfputc_r+0x1e>

08001d12 <__sfputs_r>:
 8001d12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d14:	0006      	movs	r6, r0
 8001d16:	000f      	movs	r7, r1
 8001d18:	0014      	movs	r4, r2
 8001d1a:	18d5      	adds	r5, r2, r3
 8001d1c:	42ac      	cmp	r4, r5
 8001d1e:	d101      	bne.n	8001d24 <__sfputs_r+0x12>
 8001d20:	2000      	movs	r0, #0
 8001d22:	e007      	b.n	8001d34 <__sfputs_r+0x22>
 8001d24:	7821      	ldrb	r1, [r4, #0]
 8001d26:	003a      	movs	r2, r7
 8001d28:	0030      	movs	r0, r6
 8001d2a:	f7ff ffdd 	bl	8001ce8 <__sfputc_r>
 8001d2e:	3401      	adds	r4, #1
 8001d30:	1c43      	adds	r3, r0, #1
 8001d32:	d1f3      	bne.n	8001d1c <__sfputs_r+0xa>
 8001d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001d38 <_vfiprintf_r>:
 8001d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d3a:	b0a1      	sub	sp, #132	; 0x84
 8001d3c:	0006      	movs	r6, r0
 8001d3e:	000c      	movs	r4, r1
 8001d40:	001f      	movs	r7, r3
 8001d42:	9203      	str	r2, [sp, #12]
 8001d44:	2800      	cmp	r0, #0
 8001d46:	d004      	beq.n	8001d52 <_vfiprintf_r+0x1a>
 8001d48:	6983      	ldr	r3, [r0, #24]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <_vfiprintf_r+0x1a>
 8001d4e:	f7ff fdd9 	bl	8001904 <__sinit>
 8001d52:	4b8e      	ldr	r3, [pc, #568]	; (8001f8c <_vfiprintf_r+0x254>)
 8001d54:	429c      	cmp	r4, r3
 8001d56:	d11c      	bne.n	8001d92 <_vfiprintf_r+0x5a>
 8001d58:	6874      	ldr	r4, [r6, #4]
 8001d5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001d5c:	07db      	lsls	r3, r3, #31
 8001d5e:	d405      	bmi.n	8001d6c <_vfiprintf_r+0x34>
 8001d60:	89a3      	ldrh	r3, [r4, #12]
 8001d62:	059b      	lsls	r3, r3, #22
 8001d64:	d402      	bmi.n	8001d6c <_vfiprintf_r+0x34>
 8001d66:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d68:	f7ff fe6d 	bl	8001a46 <__retarget_lock_acquire_recursive>
 8001d6c:	89a3      	ldrh	r3, [r4, #12]
 8001d6e:	071b      	lsls	r3, r3, #28
 8001d70:	d502      	bpl.n	8001d78 <_vfiprintf_r+0x40>
 8001d72:	6923      	ldr	r3, [r4, #16]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d11d      	bne.n	8001db4 <_vfiprintf_r+0x7c>
 8001d78:	0021      	movs	r1, r4
 8001d7a:	0030      	movs	r0, r6
 8001d7c:	f7ff fc1c 	bl	80015b8 <__swsetup_r>
 8001d80:	2800      	cmp	r0, #0
 8001d82:	d017      	beq.n	8001db4 <_vfiprintf_r+0x7c>
 8001d84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001d86:	07db      	lsls	r3, r3, #31
 8001d88:	d50d      	bpl.n	8001da6 <_vfiprintf_r+0x6e>
 8001d8a:	2001      	movs	r0, #1
 8001d8c:	4240      	negs	r0, r0
 8001d8e:	b021      	add	sp, #132	; 0x84
 8001d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d92:	4b7f      	ldr	r3, [pc, #508]	; (8001f90 <_vfiprintf_r+0x258>)
 8001d94:	429c      	cmp	r4, r3
 8001d96:	d101      	bne.n	8001d9c <_vfiprintf_r+0x64>
 8001d98:	68b4      	ldr	r4, [r6, #8]
 8001d9a:	e7de      	b.n	8001d5a <_vfiprintf_r+0x22>
 8001d9c:	4b7d      	ldr	r3, [pc, #500]	; (8001f94 <_vfiprintf_r+0x25c>)
 8001d9e:	429c      	cmp	r4, r3
 8001da0:	d1db      	bne.n	8001d5a <_vfiprintf_r+0x22>
 8001da2:	68f4      	ldr	r4, [r6, #12]
 8001da4:	e7d9      	b.n	8001d5a <_vfiprintf_r+0x22>
 8001da6:	89a3      	ldrh	r3, [r4, #12]
 8001da8:	059b      	lsls	r3, r3, #22
 8001daa:	d4ee      	bmi.n	8001d8a <_vfiprintf_r+0x52>
 8001dac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001dae:	f7ff fe4b 	bl	8001a48 <__retarget_lock_release_recursive>
 8001db2:	e7ea      	b.n	8001d8a <_vfiprintf_r+0x52>
 8001db4:	2300      	movs	r3, #0
 8001db6:	ad08      	add	r5, sp, #32
 8001db8:	616b      	str	r3, [r5, #20]
 8001dba:	3320      	adds	r3, #32
 8001dbc:	766b      	strb	r3, [r5, #25]
 8001dbe:	3310      	adds	r3, #16
 8001dc0:	76ab      	strb	r3, [r5, #26]
 8001dc2:	9707      	str	r7, [sp, #28]
 8001dc4:	9f03      	ldr	r7, [sp, #12]
 8001dc6:	783b      	ldrb	r3, [r7, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <_vfiprintf_r+0x98>
 8001dcc:	2b25      	cmp	r3, #37	; 0x25
 8001dce:	d14e      	bne.n	8001e6e <_vfiprintf_r+0x136>
 8001dd0:	9b03      	ldr	r3, [sp, #12]
 8001dd2:	1afb      	subs	r3, r7, r3
 8001dd4:	9305      	str	r3, [sp, #20]
 8001dd6:	9b03      	ldr	r3, [sp, #12]
 8001dd8:	429f      	cmp	r7, r3
 8001dda:	d00d      	beq.n	8001df8 <_vfiprintf_r+0xc0>
 8001ddc:	9b05      	ldr	r3, [sp, #20]
 8001dde:	0021      	movs	r1, r4
 8001de0:	0030      	movs	r0, r6
 8001de2:	9a03      	ldr	r2, [sp, #12]
 8001de4:	f7ff ff95 	bl	8001d12 <__sfputs_r>
 8001de8:	1c43      	adds	r3, r0, #1
 8001dea:	d100      	bne.n	8001dee <_vfiprintf_r+0xb6>
 8001dec:	e0b5      	b.n	8001f5a <_vfiprintf_r+0x222>
 8001dee:	696a      	ldr	r2, [r5, #20]
 8001df0:	9b05      	ldr	r3, [sp, #20]
 8001df2:	4694      	mov	ip, r2
 8001df4:	4463      	add	r3, ip
 8001df6:	616b      	str	r3, [r5, #20]
 8001df8:	783b      	ldrb	r3, [r7, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d100      	bne.n	8001e00 <_vfiprintf_r+0xc8>
 8001dfe:	e0ac      	b.n	8001f5a <_vfiprintf_r+0x222>
 8001e00:	2201      	movs	r2, #1
 8001e02:	1c7b      	adds	r3, r7, #1
 8001e04:	9303      	str	r3, [sp, #12]
 8001e06:	2300      	movs	r3, #0
 8001e08:	4252      	negs	r2, r2
 8001e0a:	606a      	str	r2, [r5, #4]
 8001e0c:	a904      	add	r1, sp, #16
 8001e0e:	3254      	adds	r2, #84	; 0x54
 8001e10:	1852      	adds	r2, r2, r1
 8001e12:	602b      	str	r3, [r5, #0]
 8001e14:	60eb      	str	r3, [r5, #12]
 8001e16:	60ab      	str	r3, [r5, #8]
 8001e18:	7013      	strb	r3, [r2, #0]
 8001e1a:	65ab      	str	r3, [r5, #88]	; 0x58
 8001e1c:	9b03      	ldr	r3, [sp, #12]
 8001e1e:	2205      	movs	r2, #5
 8001e20:	7819      	ldrb	r1, [r3, #0]
 8001e22:	485d      	ldr	r0, [pc, #372]	; (8001f98 <_vfiprintf_r+0x260>)
 8001e24:	f000 fb00 	bl	8002428 <memchr>
 8001e28:	9b03      	ldr	r3, [sp, #12]
 8001e2a:	1c5f      	adds	r7, r3, #1
 8001e2c:	2800      	cmp	r0, #0
 8001e2e:	d120      	bne.n	8001e72 <_vfiprintf_r+0x13a>
 8001e30:	682a      	ldr	r2, [r5, #0]
 8001e32:	06d3      	lsls	r3, r2, #27
 8001e34:	d504      	bpl.n	8001e40 <_vfiprintf_r+0x108>
 8001e36:	2353      	movs	r3, #83	; 0x53
 8001e38:	a904      	add	r1, sp, #16
 8001e3a:	185b      	adds	r3, r3, r1
 8001e3c:	2120      	movs	r1, #32
 8001e3e:	7019      	strb	r1, [r3, #0]
 8001e40:	0713      	lsls	r3, r2, #28
 8001e42:	d504      	bpl.n	8001e4e <_vfiprintf_r+0x116>
 8001e44:	2353      	movs	r3, #83	; 0x53
 8001e46:	a904      	add	r1, sp, #16
 8001e48:	185b      	adds	r3, r3, r1
 8001e4a:	212b      	movs	r1, #43	; 0x2b
 8001e4c:	7019      	strb	r1, [r3, #0]
 8001e4e:	9b03      	ldr	r3, [sp, #12]
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b2a      	cmp	r3, #42	; 0x2a
 8001e54:	d016      	beq.n	8001e84 <_vfiprintf_r+0x14c>
 8001e56:	2100      	movs	r1, #0
 8001e58:	68eb      	ldr	r3, [r5, #12]
 8001e5a:	9f03      	ldr	r7, [sp, #12]
 8001e5c:	783a      	ldrb	r2, [r7, #0]
 8001e5e:	1c78      	adds	r0, r7, #1
 8001e60:	3a30      	subs	r2, #48	; 0x30
 8001e62:	4684      	mov	ip, r0
 8001e64:	2a09      	cmp	r2, #9
 8001e66:	d94f      	bls.n	8001f08 <_vfiprintf_r+0x1d0>
 8001e68:	2900      	cmp	r1, #0
 8001e6a:	d111      	bne.n	8001e90 <_vfiprintf_r+0x158>
 8001e6c:	e017      	b.n	8001e9e <_vfiprintf_r+0x166>
 8001e6e:	3701      	adds	r7, #1
 8001e70:	e7a9      	b.n	8001dc6 <_vfiprintf_r+0x8e>
 8001e72:	4b49      	ldr	r3, [pc, #292]	; (8001f98 <_vfiprintf_r+0x260>)
 8001e74:	682a      	ldr	r2, [r5, #0]
 8001e76:	1ac0      	subs	r0, r0, r3
 8001e78:	2301      	movs	r3, #1
 8001e7a:	4083      	lsls	r3, r0
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	602b      	str	r3, [r5, #0]
 8001e80:	9703      	str	r7, [sp, #12]
 8001e82:	e7cb      	b.n	8001e1c <_vfiprintf_r+0xe4>
 8001e84:	9b07      	ldr	r3, [sp, #28]
 8001e86:	1d19      	adds	r1, r3, #4
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	9107      	str	r1, [sp, #28]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	db01      	blt.n	8001e94 <_vfiprintf_r+0x15c>
 8001e90:	930b      	str	r3, [sp, #44]	; 0x2c
 8001e92:	e004      	b.n	8001e9e <_vfiprintf_r+0x166>
 8001e94:	425b      	negs	r3, r3
 8001e96:	60eb      	str	r3, [r5, #12]
 8001e98:	2302      	movs	r3, #2
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	602b      	str	r3, [r5, #0]
 8001e9e:	783b      	ldrb	r3, [r7, #0]
 8001ea0:	2b2e      	cmp	r3, #46	; 0x2e
 8001ea2:	d10a      	bne.n	8001eba <_vfiprintf_r+0x182>
 8001ea4:	787b      	ldrb	r3, [r7, #1]
 8001ea6:	2b2a      	cmp	r3, #42	; 0x2a
 8001ea8:	d137      	bne.n	8001f1a <_vfiprintf_r+0x1e2>
 8001eaa:	9b07      	ldr	r3, [sp, #28]
 8001eac:	3702      	adds	r7, #2
 8001eae:	1d1a      	adds	r2, r3, #4
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	9207      	str	r2, [sp, #28]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	db2d      	blt.n	8001f14 <_vfiprintf_r+0x1dc>
 8001eb8:	9309      	str	r3, [sp, #36]	; 0x24
 8001eba:	2203      	movs	r2, #3
 8001ebc:	7839      	ldrb	r1, [r7, #0]
 8001ebe:	4837      	ldr	r0, [pc, #220]	; (8001f9c <_vfiprintf_r+0x264>)
 8001ec0:	f000 fab2 	bl	8002428 <memchr>
 8001ec4:	2800      	cmp	r0, #0
 8001ec6:	d007      	beq.n	8001ed8 <_vfiprintf_r+0x1a0>
 8001ec8:	4b34      	ldr	r3, [pc, #208]	; (8001f9c <_vfiprintf_r+0x264>)
 8001eca:	682a      	ldr	r2, [r5, #0]
 8001ecc:	1ac0      	subs	r0, r0, r3
 8001ece:	2340      	movs	r3, #64	; 0x40
 8001ed0:	4083      	lsls	r3, r0
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	3701      	adds	r7, #1
 8001ed6:	602b      	str	r3, [r5, #0]
 8001ed8:	7839      	ldrb	r1, [r7, #0]
 8001eda:	1c7b      	adds	r3, r7, #1
 8001edc:	2206      	movs	r2, #6
 8001ede:	4830      	ldr	r0, [pc, #192]	; (8001fa0 <_vfiprintf_r+0x268>)
 8001ee0:	9303      	str	r3, [sp, #12]
 8001ee2:	7629      	strb	r1, [r5, #24]
 8001ee4:	f000 faa0 	bl	8002428 <memchr>
 8001ee8:	2800      	cmp	r0, #0
 8001eea:	d045      	beq.n	8001f78 <_vfiprintf_r+0x240>
 8001eec:	4b2d      	ldr	r3, [pc, #180]	; (8001fa4 <_vfiprintf_r+0x26c>)
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d127      	bne.n	8001f42 <_vfiprintf_r+0x20a>
 8001ef2:	2207      	movs	r2, #7
 8001ef4:	9b07      	ldr	r3, [sp, #28]
 8001ef6:	3307      	adds	r3, #7
 8001ef8:	4393      	bics	r3, r2
 8001efa:	3308      	adds	r3, #8
 8001efc:	9307      	str	r3, [sp, #28]
 8001efe:	696b      	ldr	r3, [r5, #20]
 8001f00:	9a04      	ldr	r2, [sp, #16]
 8001f02:	189b      	adds	r3, r3, r2
 8001f04:	616b      	str	r3, [r5, #20]
 8001f06:	e75d      	b.n	8001dc4 <_vfiprintf_r+0x8c>
 8001f08:	210a      	movs	r1, #10
 8001f0a:	434b      	muls	r3, r1
 8001f0c:	4667      	mov	r7, ip
 8001f0e:	189b      	adds	r3, r3, r2
 8001f10:	3909      	subs	r1, #9
 8001f12:	e7a3      	b.n	8001e5c <_vfiprintf_r+0x124>
 8001f14:	2301      	movs	r3, #1
 8001f16:	425b      	negs	r3, r3
 8001f18:	e7ce      	b.n	8001eb8 <_vfiprintf_r+0x180>
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	001a      	movs	r2, r3
 8001f1e:	3701      	adds	r7, #1
 8001f20:	606b      	str	r3, [r5, #4]
 8001f22:	7839      	ldrb	r1, [r7, #0]
 8001f24:	1c78      	adds	r0, r7, #1
 8001f26:	3930      	subs	r1, #48	; 0x30
 8001f28:	4684      	mov	ip, r0
 8001f2a:	2909      	cmp	r1, #9
 8001f2c:	d903      	bls.n	8001f36 <_vfiprintf_r+0x1fe>
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0c3      	beq.n	8001eba <_vfiprintf_r+0x182>
 8001f32:	9209      	str	r2, [sp, #36]	; 0x24
 8001f34:	e7c1      	b.n	8001eba <_vfiprintf_r+0x182>
 8001f36:	230a      	movs	r3, #10
 8001f38:	435a      	muls	r2, r3
 8001f3a:	4667      	mov	r7, ip
 8001f3c:	1852      	adds	r2, r2, r1
 8001f3e:	3b09      	subs	r3, #9
 8001f40:	e7ef      	b.n	8001f22 <_vfiprintf_r+0x1ea>
 8001f42:	ab07      	add	r3, sp, #28
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	0022      	movs	r2, r4
 8001f48:	0029      	movs	r1, r5
 8001f4a:	0030      	movs	r0, r6
 8001f4c:	4b16      	ldr	r3, [pc, #88]	; (8001fa8 <_vfiprintf_r+0x270>)
 8001f4e:	e000      	b.n	8001f52 <_vfiprintf_r+0x21a>
 8001f50:	bf00      	nop
 8001f52:	9004      	str	r0, [sp, #16]
 8001f54:	9b04      	ldr	r3, [sp, #16]
 8001f56:	3301      	adds	r3, #1
 8001f58:	d1d1      	bne.n	8001efe <_vfiprintf_r+0x1c6>
 8001f5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001f5c:	07db      	lsls	r3, r3, #31
 8001f5e:	d405      	bmi.n	8001f6c <_vfiprintf_r+0x234>
 8001f60:	89a3      	ldrh	r3, [r4, #12]
 8001f62:	059b      	lsls	r3, r3, #22
 8001f64:	d402      	bmi.n	8001f6c <_vfiprintf_r+0x234>
 8001f66:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f68:	f7ff fd6e 	bl	8001a48 <__retarget_lock_release_recursive>
 8001f6c:	89a3      	ldrh	r3, [r4, #12]
 8001f6e:	065b      	lsls	r3, r3, #25
 8001f70:	d500      	bpl.n	8001f74 <_vfiprintf_r+0x23c>
 8001f72:	e70a      	b.n	8001d8a <_vfiprintf_r+0x52>
 8001f74:	980d      	ldr	r0, [sp, #52]	; 0x34
 8001f76:	e70a      	b.n	8001d8e <_vfiprintf_r+0x56>
 8001f78:	ab07      	add	r3, sp, #28
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	0022      	movs	r2, r4
 8001f7e:	0029      	movs	r1, r5
 8001f80:	0030      	movs	r0, r6
 8001f82:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <_vfiprintf_r+0x270>)
 8001f84:	f000 f882 	bl	800208c <_printf_i>
 8001f88:	e7e3      	b.n	8001f52 <_vfiprintf_r+0x21a>
 8001f8a:	46c0      	nop			; (mov r8, r8)
 8001f8c:	08002b00 	.word	0x08002b00
 8001f90:	08002b20 	.word	0x08002b20
 8001f94:	08002ae0 	.word	0x08002ae0
 8001f98:	08002b40 	.word	0x08002b40
 8001f9c:	08002b46 	.word	0x08002b46
 8001fa0:	08002b4a 	.word	0x08002b4a
 8001fa4:	00000000 	.word	0x00000000
 8001fa8:	08001d13 	.word	0x08001d13

08001fac <_printf_common>:
 8001fac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001fae:	0015      	movs	r5, r2
 8001fb0:	9301      	str	r3, [sp, #4]
 8001fb2:	688a      	ldr	r2, [r1, #8]
 8001fb4:	690b      	ldr	r3, [r1, #16]
 8001fb6:	000c      	movs	r4, r1
 8001fb8:	9000      	str	r0, [sp, #0]
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	da00      	bge.n	8001fc0 <_printf_common+0x14>
 8001fbe:	0013      	movs	r3, r2
 8001fc0:	0022      	movs	r2, r4
 8001fc2:	602b      	str	r3, [r5, #0]
 8001fc4:	3243      	adds	r2, #67	; 0x43
 8001fc6:	7812      	ldrb	r2, [r2, #0]
 8001fc8:	2a00      	cmp	r2, #0
 8001fca:	d001      	beq.n	8001fd0 <_printf_common+0x24>
 8001fcc:	3301      	adds	r3, #1
 8001fce:	602b      	str	r3, [r5, #0]
 8001fd0:	6823      	ldr	r3, [r4, #0]
 8001fd2:	069b      	lsls	r3, r3, #26
 8001fd4:	d502      	bpl.n	8001fdc <_printf_common+0x30>
 8001fd6:	682b      	ldr	r3, [r5, #0]
 8001fd8:	3302      	adds	r3, #2
 8001fda:	602b      	str	r3, [r5, #0]
 8001fdc:	6822      	ldr	r2, [r4, #0]
 8001fde:	2306      	movs	r3, #6
 8001fe0:	0017      	movs	r7, r2
 8001fe2:	401f      	ands	r7, r3
 8001fe4:	421a      	tst	r2, r3
 8001fe6:	d027      	beq.n	8002038 <_printf_common+0x8c>
 8001fe8:	0023      	movs	r3, r4
 8001fea:	3343      	adds	r3, #67	; 0x43
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	1e5a      	subs	r2, r3, #1
 8001ff0:	4193      	sbcs	r3, r2
 8001ff2:	6822      	ldr	r2, [r4, #0]
 8001ff4:	0692      	lsls	r2, r2, #26
 8001ff6:	d430      	bmi.n	800205a <_printf_common+0xae>
 8001ff8:	0022      	movs	r2, r4
 8001ffa:	9901      	ldr	r1, [sp, #4]
 8001ffc:	9800      	ldr	r0, [sp, #0]
 8001ffe:	9e08      	ldr	r6, [sp, #32]
 8002000:	3243      	adds	r2, #67	; 0x43
 8002002:	47b0      	blx	r6
 8002004:	1c43      	adds	r3, r0, #1
 8002006:	d025      	beq.n	8002054 <_printf_common+0xa8>
 8002008:	2306      	movs	r3, #6
 800200a:	6820      	ldr	r0, [r4, #0]
 800200c:	682a      	ldr	r2, [r5, #0]
 800200e:	68e1      	ldr	r1, [r4, #12]
 8002010:	2500      	movs	r5, #0
 8002012:	4003      	ands	r3, r0
 8002014:	2b04      	cmp	r3, #4
 8002016:	d103      	bne.n	8002020 <_printf_common+0x74>
 8002018:	1a8d      	subs	r5, r1, r2
 800201a:	43eb      	mvns	r3, r5
 800201c:	17db      	asrs	r3, r3, #31
 800201e:	401d      	ands	r5, r3
 8002020:	68a3      	ldr	r3, [r4, #8]
 8002022:	6922      	ldr	r2, [r4, #16]
 8002024:	4293      	cmp	r3, r2
 8002026:	dd01      	ble.n	800202c <_printf_common+0x80>
 8002028:	1a9b      	subs	r3, r3, r2
 800202a:	18ed      	adds	r5, r5, r3
 800202c:	2700      	movs	r7, #0
 800202e:	42bd      	cmp	r5, r7
 8002030:	d120      	bne.n	8002074 <_printf_common+0xc8>
 8002032:	2000      	movs	r0, #0
 8002034:	e010      	b.n	8002058 <_printf_common+0xac>
 8002036:	3701      	adds	r7, #1
 8002038:	68e3      	ldr	r3, [r4, #12]
 800203a:	682a      	ldr	r2, [r5, #0]
 800203c:	1a9b      	subs	r3, r3, r2
 800203e:	42bb      	cmp	r3, r7
 8002040:	ddd2      	ble.n	8001fe8 <_printf_common+0x3c>
 8002042:	0022      	movs	r2, r4
 8002044:	2301      	movs	r3, #1
 8002046:	9901      	ldr	r1, [sp, #4]
 8002048:	9800      	ldr	r0, [sp, #0]
 800204a:	9e08      	ldr	r6, [sp, #32]
 800204c:	3219      	adds	r2, #25
 800204e:	47b0      	blx	r6
 8002050:	1c43      	adds	r3, r0, #1
 8002052:	d1f0      	bne.n	8002036 <_printf_common+0x8a>
 8002054:	2001      	movs	r0, #1
 8002056:	4240      	negs	r0, r0
 8002058:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800205a:	2030      	movs	r0, #48	; 0x30
 800205c:	18e1      	adds	r1, r4, r3
 800205e:	3143      	adds	r1, #67	; 0x43
 8002060:	7008      	strb	r0, [r1, #0]
 8002062:	0021      	movs	r1, r4
 8002064:	1c5a      	adds	r2, r3, #1
 8002066:	3145      	adds	r1, #69	; 0x45
 8002068:	7809      	ldrb	r1, [r1, #0]
 800206a:	18a2      	adds	r2, r4, r2
 800206c:	3243      	adds	r2, #67	; 0x43
 800206e:	3302      	adds	r3, #2
 8002070:	7011      	strb	r1, [r2, #0]
 8002072:	e7c1      	b.n	8001ff8 <_printf_common+0x4c>
 8002074:	0022      	movs	r2, r4
 8002076:	2301      	movs	r3, #1
 8002078:	9901      	ldr	r1, [sp, #4]
 800207a:	9800      	ldr	r0, [sp, #0]
 800207c:	9e08      	ldr	r6, [sp, #32]
 800207e:	321a      	adds	r2, #26
 8002080:	47b0      	blx	r6
 8002082:	1c43      	adds	r3, r0, #1
 8002084:	d0e6      	beq.n	8002054 <_printf_common+0xa8>
 8002086:	3701      	adds	r7, #1
 8002088:	e7d1      	b.n	800202e <_printf_common+0x82>
	...

0800208c <_printf_i>:
 800208c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800208e:	b08b      	sub	sp, #44	; 0x2c
 8002090:	9206      	str	r2, [sp, #24]
 8002092:	000a      	movs	r2, r1
 8002094:	3243      	adds	r2, #67	; 0x43
 8002096:	9307      	str	r3, [sp, #28]
 8002098:	9005      	str	r0, [sp, #20]
 800209a:	9204      	str	r2, [sp, #16]
 800209c:	7e0a      	ldrb	r2, [r1, #24]
 800209e:	000c      	movs	r4, r1
 80020a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80020a2:	2a78      	cmp	r2, #120	; 0x78
 80020a4:	d807      	bhi.n	80020b6 <_printf_i+0x2a>
 80020a6:	2a62      	cmp	r2, #98	; 0x62
 80020a8:	d809      	bhi.n	80020be <_printf_i+0x32>
 80020aa:	2a00      	cmp	r2, #0
 80020ac:	d100      	bne.n	80020b0 <_printf_i+0x24>
 80020ae:	e0c1      	b.n	8002234 <_printf_i+0x1a8>
 80020b0:	2a58      	cmp	r2, #88	; 0x58
 80020b2:	d100      	bne.n	80020b6 <_printf_i+0x2a>
 80020b4:	e08c      	b.n	80021d0 <_printf_i+0x144>
 80020b6:	0026      	movs	r6, r4
 80020b8:	3642      	adds	r6, #66	; 0x42
 80020ba:	7032      	strb	r2, [r6, #0]
 80020bc:	e022      	b.n	8002104 <_printf_i+0x78>
 80020be:	0010      	movs	r0, r2
 80020c0:	3863      	subs	r0, #99	; 0x63
 80020c2:	2815      	cmp	r0, #21
 80020c4:	d8f7      	bhi.n	80020b6 <_printf_i+0x2a>
 80020c6:	f7fe f827 	bl	8000118 <__gnu_thumb1_case_shi>
 80020ca:	0016      	.short	0x0016
 80020cc:	fff6001f 	.word	0xfff6001f
 80020d0:	fff6fff6 	.word	0xfff6fff6
 80020d4:	001ffff6 	.word	0x001ffff6
 80020d8:	fff6fff6 	.word	0xfff6fff6
 80020dc:	fff6fff6 	.word	0xfff6fff6
 80020e0:	003600a8 	.word	0x003600a8
 80020e4:	fff6009a 	.word	0xfff6009a
 80020e8:	00b9fff6 	.word	0x00b9fff6
 80020ec:	0036fff6 	.word	0x0036fff6
 80020f0:	fff6fff6 	.word	0xfff6fff6
 80020f4:	009e      	.short	0x009e
 80020f6:	0026      	movs	r6, r4
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	3642      	adds	r6, #66	; 0x42
 80020fc:	1d11      	adds	r1, r2, #4
 80020fe:	6019      	str	r1, [r3, #0]
 8002100:	6813      	ldr	r3, [r2, #0]
 8002102:	7033      	strb	r3, [r6, #0]
 8002104:	2301      	movs	r3, #1
 8002106:	e0a7      	b.n	8002258 <_printf_i+0x1cc>
 8002108:	6808      	ldr	r0, [r1, #0]
 800210a:	6819      	ldr	r1, [r3, #0]
 800210c:	1d0a      	adds	r2, r1, #4
 800210e:	0605      	lsls	r5, r0, #24
 8002110:	d50b      	bpl.n	800212a <_printf_i+0x9e>
 8002112:	680d      	ldr	r5, [r1, #0]
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	2d00      	cmp	r5, #0
 8002118:	da03      	bge.n	8002122 <_printf_i+0x96>
 800211a:	232d      	movs	r3, #45	; 0x2d
 800211c:	9a04      	ldr	r2, [sp, #16]
 800211e:	426d      	negs	r5, r5
 8002120:	7013      	strb	r3, [r2, #0]
 8002122:	4b61      	ldr	r3, [pc, #388]	; (80022a8 <_printf_i+0x21c>)
 8002124:	270a      	movs	r7, #10
 8002126:	9303      	str	r3, [sp, #12]
 8002128:	e01b      	b.n	8002162 <_printf_i+0xd6>
 800212a:	680d      	ldr	r5, [r1, #0]
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	0641      	lsls	r1, r0, #25
 8002130:	d5f1      	bpl.n	8002116 <_printf_i+0x8a>
 8002132:	b22d      	sxth	r5, r5
 8002134:	e7ef      	b.n	8002116 <_printf_i+0x8a>
 8002136:	680d      	ldr	r5, [r1, #0]
 8002138:	6819      	ldr	r1, [r3, #0]
 800213a:	1d08      	adds	r0, r1, #4
 800213c:	6018      	str	r0, [r3, #0]
 800213e:	062e      	lsls	r6, r5, #24
 8002140:	d501      	bpl.n	8002146 <_printf_i+0xba>
 8002142:	680d      	ldr	r5, [r1, #0]
 8002144:	e003      	b.n	800214e <_printf_i+0xc2>
 8002146:	066d      	lsls	r5, r5, #25
 8002148:	d5fb      	bpl.n	8002142 <_printf_i+0xb6>
 800214a:	680d      	ldr	r5, [r1, #0]
 800214c:	b2ad      	uxth	r5, r5
 800214e:	4b56      	ldr	r3, [pc, #344]	; (80022a8 <_printf_i+0x21c>)
 8002150:	2708      	movs	r7, #8
 8002152:	9303      	str	r3, [sp, #12]
 8002154:	2a6f      	cmp	r2, #111	; 0x6f
 8002156:	d000      	beq.n	800215a <_printf_i+0xce>
 8002158:	3702      	adds	r7, #2
 800215a:	0023      	movs	r3, r4
 800215c:	2200      	movs	r2, #0
 800215e:	3343      	adds	r3, #67	; 0x43
 8002160:	701a      	strb	r2, [r3, #0]
 8002162:	6863      	ldr	r3, [r4, #4]
 8002164:	60a3      	str	r3, [r4, #8]
 8002166:	2b00      	cmp	r3, #0
 8002168:	db03      	blt.n	8002172 <_printf_i+0xe6>
 800216a:	2204      	movs	r2, #4
 800216c:	6821      	ldr	r1, [r4, #0]
 800216e:	4391      	bics	r1, r2
 8002170:	6021      	str	r1, [r4, #0]
 8002172:	2d00      	cmp	r5, #0
 8002174:	d102      	bne.n	800217c <_printf_i+0xf0>
 8002176:	9e04      	ldr	r6, [sp, #16]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00c      	beq.n	8002196 <_printf_i+0x10a>
 800217c:	9e04      	ldr	r6, [sp, #16]
 800217e:	0028      	movs	r0, r5
 8002180:	0039      	movs	r1, r7
 8002182:	f7fe f859 	bl	8000238 <__aeabi_uidivmod>
 8002186:	9b03      	ldr	r3, [sp, #12]
 8002188:	3e01      	subs	r6, #1
 800218a:	5c5b      	ldrb	r3, [r3, r1]
 800218c:	7033      	strb	r3, [r6, #0]
 800218e:	002b      	movs	r3, r5
 8002190:	0005      	movs	r5, r0
 8002192:	429f      	cmp	r7, r3
 8002194:	d9f3      	bls.n	800217e <_printf_i+0xf2>
 8002196:	2f08      	cmp	r7, #8
 8002198:	d109      	bne.n	80021ae <_printf_i+0x122>
 800219a:	6823      	ldr	r3, [r4, #0]
 800219c:	07db      	lsls	r3, r3, #31
 800219e:	d506      	bpl.n	80021ae <_printf_i+0x122>
 80021a0:	6863      	ldr	r3, [r4, #4]
 80021a2:	6922      	ldr	r2, [r4, #16]
 80021a4:	4293      	cmp	r3, r2
 80021a6:	dc02      	bgt.n	80021ae <_printf_i+0x122>
 80021a8:	2330      	movs	r3, #48	; 0x30
 80021aa:	3e01      	subs	r6, #1
 80021ac:	7033      	strb	r3, [r6, #0]
 80021ae:	9b04      	ldr	r3, [sp, #16]
 80021b0:	1b9b      	subs	r3, r3, r6
 80021b2:	6123      	str	r3, [r4, #16]
 80021b4:	9b07      	ldr	r3, [sp, #28]
 80021b6:	0021      	movs	r1, r4
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	9805      	ldr	r0, [sp, #20]
 80021bc:	9b06      	ldr	r3, [sp, #24]
 80021be:	aa09      	add	r2, sp, #36	; 0x24
 80021c0:	f7ff fef4 	bl	8001fac <_printf_common>
 80021c4:	1c43      	adds	r3, r0, #1
 80021c6:	d14c      	bne.n	8002262 <_printf_i+0x1d6>
 80021c8:	2001      	movs	r0, #1
 80021ca:	4240      	negs	r0, r0
 80021cc:	b00b      	add	sp, #44	; 0x2c
 80021ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021d0:	3145      	adds	r1, #69	; 0x45
 80021d2:	700a      	strb	r2, [r1, #0]
 80021d4:	4a34      	ldr	r2, [pc, #208]	; (80022a8 <_printf_i+0x21c>)
 80021d6:	9203      	str	r2, [sp, #12]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	6821      	ldr	r1, [r4, #0]
 80021dc:	ca20      	ldmia	r2!, {r5}
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	0608      	lsls	r0, r1, #24
 80021e2:	d516      	bpl.n	8002212 <_printf_i+0x186>
 80021e4:	07cb      	lsls	r3, r1, #31
 80021e6:	d502      	bpl.n	80021ee <_printf_i+0x162>
 80021e8:	2320      	movs	r3, #32
 80021ea:	4319      	orrs	r1, r3
 80021ec:	6021      	str	r1, [r4, #0]
 80021ee:	2710      	movs	r7, #16
 80021f0:	2d00      	cmp	r5, #0
 80021f2:	d1b2      	bne.n	800215a <_printf_i+0xce>
 80021f4:	2320      	movs	r3, #32
 80021f6:	6822      	ldr	r2, [r4, #0]
 80021f8:	439a      	bics	r2, r3
 80021fa:	6022      	str	r2, [r4, #0]
 80021fc:	e7ad      	b.n	800215a <_printf_i+0xce>
 80021fe:	2220      	movs	r2, #32
 8002200:	6809      	ldr	r1, [r1, #0]
 8002202:	430a      	orrs	r2, r1
 8002204:	6022      	str	r2, [r4, #0]
 8002206:	0022      	movs	r2, r4
 8002208:	2178      	movs	r1, #120	; 0x78
 800220a:	3245      	adds	r2, #69	; 0x45
 800220c:	7011      	strb	r1, [r2, #0]
 800220e:	4a27      	ldr	r2, [pc, #156]	; (80022ac <_printf_i+0x220>)
 8002210:	e7e1      	b.n	80021d6 <_printf_i+0x14a>
 8002212:	0648      	lsls	r0, r1, #25
 8002214:	d5e6      	bpl.n	80021e4 <_printf_i+0x158>
 8002216:	b2ad      	uxth	r5, r5
 8002218:	e7e4      	b.n	80021e4 <_printf_i+0x158>
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	680d      	ldr	r5, [r1, #0]
 800221e:	1d10      	adds	r0, r2, #4
 8002220:	6949      	ldr	r1, [r1, #20]
 8002222:	6018      	str	r0, [r3, #0]
 8002224:	6813      	ldr	r3, [r2, #0]
 8002226:	062e      	lsls	r6, r5, #24
 8002228:	d501      	bpl.n	800222e <_printf_i+0x1a2>
 800222a:	6019      	str	r1, [r3, #0]
 800222c:	e002      	b.n	8002234 <_printf_i+0x1a8>
 800222e:	066d      	lsls	r5, r5, #25
 8002230:	d5fb      	bpl.n	800222a <_printf_i+0x19e>
 8002232:	8019      	strh	r1, [r3, #0]
 8002234:	2300      	movs	r3, #0
 8002236:	9e04      	ldr	r6, [sp, #16]
 8002238:	6123      	str	r3, [r4, #16]
 800223a:	e7bb      	b.n	80021b4 <_printf_i+0x128>
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	1d11      	adds	r1, r2, #4
 8002240:	6019      	str	r1, [r3, #0]
 8002242:	6816      	ldr	r6, [r2, #0]
 8002244:	2100      	movs	r1, #0
 8002246:	0030      	movs	r0, r6
 8002248:	6862      	ldr	r2, [r4, #4]
 800224a:	f000 f8ed 	bl	8002428 <memchr>
 800224e:	2800      	cmp	r0, #0
 8002250:	d001      	beq.n	8002256 <_printf_i+0x1ca>
 8002252:	1b80      	subs	r0, r0, r6
 8002254:	6060      	str	r0, [r4, #4]
 8002256:	6863      	ldr	r3, [r4, #4]
 8002258:	6123      	str	r3, [r4, #16]
 800225a:	2300      	movs	r3, #0
 800225c:	9a04      	ldr	r2, [sp, #16]
 800225e:	7013      	strb	r3, [r2, #0]
 8002260:	e7a8      	b.n	80021b4 <_printf_i+0x128>
 8002262:	6923      	ldr	r3, [r4, #16]
 8002264:	0032      	movs	r2, r6
 8002266:	9906      	ldr	r1, [sp, #24]
 8002268:	9805      	ldr	r0, [sp, #20]
 800226a:	9d07      	ldr	r5, [sp, #28]
 800226c:	47a8      	blx	r5
 800226e:	1c43      	adds	r3, r0, #1
 8002270:	d0aa      	beq.n	80021c8 <_printf_i+0x13c>
 8002272:	6823      	ldr	r3, [r4, #0]
 8002274:	079b      	lsls	r3, r3, #30
 8002276:	d415      	bmi.n	80022a4 <_printf_i+0x218>
 8002278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800227a:	68e0      	ldr	r0, [r4, #12]
 800227c:	4298      	cmp	r0, r3
 800227e:	daa5      	bge.n	80021cc <_printf_i+0x140>
 8002280:	0018      	movs	r0, r3
 8002282:	e7a3      	b.n	80021cc <_printf_i+0x140>
 8002284:	0022      	movs	r2, r4
 8002286:	2301      	movs	r3, #1
 8002288:	9906      	ldr	r1, [sp, #24]
 800228a:	9805      	ldr	r0, [sp, #20]
 800228c:	9e07      	ldr	r6, [sp, #28]
 800228e:	3219      	adds	r2, #25
 8002290:	47b0      	blx	r6
 8002292:	1c43      	adds	r3, r0, #1
 8002294:	d098      	beq.n	80021c8 <_printf_i+0x13c>
 8002296:	3501      	adds	r5, #1
 8002298:	68e3      	ldr	r3, [r4, #12]
 800229a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800229c:	1a9b      	subs	r3, r3, r2
 800229e:	42ab      	cmp	r3, r5
 80022a0:	dcf0      	bgt.n	8002284 <_printf_i+0x1f8>
 80022a2:	e7e9      	b.n	8002278 <_printf_i+0x1ec>
 80022a4:	2500      	movs	r5, #0
 80022a6:	e7f7      	b.n	8002298 <_printf_i+0x20c>
 80022a8:	08002b51 	.word	0x08002b51
 80022ac:	08002b62 	.word	0x08002b62

080022b0 <_sbrk_r>:
 80022b0:	2300      	movs	r3, #0
 80022b2:	b570      	push	{r4, r5, r6, lr}
 80022b4:	4d06      	ldr	r5, [pc, #24]	; (80022d0 <_sbrk_r+0x20>)
 80022b6:	0004      	movs	r4, r0
 80022b8:	0008      	movs	r0, r1
 80022ba:	602b      	str	r3, [r5, #0]
 80022bc:	f7fd ffc2 	bl	8000244 <_sbrk>
 80022c0:	1c43      	adds	r3, r0, #1
 80022c2:	d103      	bne.n	80022cc <_sbrk_r+0x1c>
 80022c4:	682b      	ldr	r3, [r5, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d000      	beq.n	80022cc <_sbrk_r+0x1c>
 80022ca:	6023      	str	r3, [r4, #0]
 80022cc:	bd70      	pop	{r4, r5, r6, pc}
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	200000f4 	.word	0x200000f4

080022d4 <__sread>:
 80022d4:	b570      	push	{r4, r5, r6, lr}
 80022d6:	000c      	movs	r4, r1
 80022d8:	250e      	movs	r5, #14
 80022da:	5f49      	ldrsh	r1, [r1, r5]
 80022dc:	f000 f8c0 	bl	8002460 <_read_r>
 80022e0:	2800      	cmp	r0, #0
 80022e2:	db03      	blt.n	80022ec <__sread+0x18>
 80022e4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80022e6:	181b      	adds	r3, r3, r0
 80022e8:	6563      	str	r3, [r4, #84]	; 0x54
 80022ea:	bd70      	pop	{r4, r5, r6, pc}
 80022ec:	89a3      	ldrh	r3, [r4, #12]
 80022ee:	4a02      	ldr	r2, [pc, #8]	; (80022f8 <__sread+0x24>)
 80022f0:	4013      	ands	r3, r2
 80022f2:	81a3      	strh	r3, [r4, #12]
 80022f4:	e7f9      	b.n	80022ea <__sread+0x16>
 80022f6:	46c0      	nop			; (mov r8, r8)
 80022f8:	ffffefff 	.word	0xffffefff

080022fc <__swrite>:
 80022fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022fe:	001f      	movs	r7, r3
 8002300:	898b      	ldrh	r3, [r1, #12]
 8002302:	0005      	movs	r5, r0
 8002304:	000c      	movs	r4, r1
 8002306:	0016      	movs	r6, r2
 8002308:	05db      	lsls	r3, r3, #23
 800230a:	d505      	bpl.n	8002318 <__swrite+0x1c>
 800230c:	230e      	movs	r3, #14
 800230e:	5ec9      	ldrsh	r1, [r1, r3]
 8002310:	2200      	movs	r2, #0
 8002312:	2302      	movs	r3, #2
 8002314:	f000 f874 	bl	8002400 <_lseek_r>
 8002318:	89a3      	ldrh	r3, [r4, #12]
 800231a:	4a05      	ldr	r2, [pc, #20]	; (8002330 <__swrite+0x34>)
 800231c:	0028      	movs	r0, r5
 800231e:	4013      	ands	r3, r2
 8002320:	81a3      	strh	r3, [r4, #12]
 8002322:	0032      	movs	r2, r6
 8002324:	230e      	movs	r3, #14
 8002326:	5ee1      	ldrsh	r1, [r4, r3]
 8002328:	003b      	movs	r3, r7
 800232a:	f000 f81f 	bl	800236c <_write_r>
 800232e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002330:	ffffefff 	.word	0xffffefff

08002334 <__sseek>:
 8002334:	b570      	push	{r4, r5, r6, lr}
 8002336:	000c      	movs	r4, r1
 8002338:	250e      	movs	r5, #14
 800233a:	5f49      	ldrsh	r1, [r1, r5]
 800233c:	f000 f860 	bl	8002400 <_lseek_r>
 8002340:	89a3      	ldrh	r3, [r4, #12]
 8002342:	1c42      	adds	r2, r0, #1
 8002344:	d103      	bne.n	800234e <__sseek+0x1a>
 8002346:	4a05      	ldr	r2, [pc, #20]	; (800235c <__sseek+0x28>)
 8002348:	4013      	ands	r3, r2
 800234a:	81a3      	strh	r3, [r4, #12]
 800234c:	bd70      	pop	{r4, r5, r6, pc}
 800234e:	2280      	movs	r2, #128	; 0x80
 8002350:	0152      	lsls	r2, r2, #5
 8002352:	4313      	orrs	r3, r2
 8002354:	81a3      	strh	r3, [r4, #12]
 8002356:	6560      	str	r0, [r4, #84]	; 0x54
 8002358:	e7f8      	b.n	800234c <__sseek+0x18>
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	ffffefff 	.word	0xffffefff

08002360 <__sclose>:
 8002360:	b510      	push	{r4, lr}
 8002362:	230e      	movs	r3, #14
 8002364:	5ec9      	ldrsh	r1, [r1, r3]
 8002366:	f000 f815 	bl	8002394 <_close_r>
 800236a:	bd10      	pop	{r4, pc}

0800236c <_write_r>:
 800236c:	b570      	push	{r4, r5, r6, lr}
 800236e:	0004      	movs	r4, r0
 8002370:	0008      	movs	r0, r1
 8002372:	0011      	movs	r1, r2
 8002374:	001a      	movs	r2, r3
 8002376:	2300      	movs	r3, #0
 8002378:	4d05      	ldr	r5, [pc, #20]	; (8002390 <_write_r+0x24>)
 800237a:	602b      	str	r3, [r5, #0]
 800237c:	f000 f92b 	bl	80025d6 <_write>
 8002380:	1c43      	adds	r3, r0, #1
 8002382:	d103      	bne.n	800238c <_write_r+0x20>
 8002384:	682b      	ldr	r3, [r5, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d000      	beq.n	800238c <_write_r+0x20>
 800238a:	6023      	str	r3, [r4, #0]
 800238c:	bd70      	pop	{r4, r5, r6, pc}
 800238e:	46c0      	nop			; (mov r8, r8)
 8002390:	200000f4 	.word	0x200000f4

08002394 <_close_r>:
 8002394:	2300      	movs	r3, #0
 8002396:	b570      	push	{r4, r5, r6, lr}
 8002398:	4d06      	ldr	r5, [pc, #24]	; (80023b4 <_close_r+0x20>)
 800239a:	0004      	movs	r4, r0
 800239c:	0008      	movs	r0, r1
 800239e:	602b      	str	r3, [r5, #0]
 80023a0:	f000 f944 	bl	800262c <_close>
 80023a4:	1c43      	adds	r3, r0, #1
 80023a6:	d103      	bne.n	80023b0 <_close_r+0x1c>
 80023a8:	682b      	ldr	r3, [r5, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d000      	beq.n	80023b0 <_close_r+0x1c>
 80023ae:	6023      	str	r3, [r4, #0]
 80023b0:	bd70      	pop	{r4, r5, r6, pc}
 80023b2:	46c0      	nop			; (mov r8, r8)
 80023b4:	200000f4 	.word	0x200000f4

080023b8 <_fstat_r>:
 80023b8:	2300      	movs	r3, #0
 80023ba:	b570      	push	{r4, r5, r6, lr}
 80023bc:	4d06      	ldr	r5, [pc, #24]	; (80023d8 <_fstat_r+0x20>)
 80023be:	0004      	movs	r4, r0
 80023c0:	0008      	movs	r0, r1
 80023c2:	0011      	movs	r1, r2
 80023c4:	602b      	str	r3, [r5, #0]
 80023c6:	f000 f979 	bl	80026bc <_fstat>
 80023ca:	1c43      	adds	r3, r0, #1
 80023cc:	d103      	bne.n	80023d6 <_fstat_r+0x1e>
 80023ce:	682b      	ldr	r3, [r5, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d000      	beq.n	80023d6 <_fstat_r+0x1e>
 80023d4:	6023      	str	r3, [r4, #0]
 80023d6:	bd70      	pop	{r4, r5, r6, pc}
 80023d8:	200000f4 	.word	0x200000f4

080023dc <_isatty_r>:
 80023dc:	2300      	movs	r3, #0
 80023de:	b570      	push	{r4, r5, r6, lr}
 80023e0:	4d06      	ldr	r5, [pc, #24]	; (80023fc <_isatty_r+0x20>)
 80023e2:	0004      	movs	r4, r0
 80023e4:	0008      	movs	r0, r1
 80023e6:	602b      	str	r3, [r5, #0]
 80023e8:	f000 fac8 	bl	800297c <_isatty>
 80023ec:	1c43      	adds	r3, r0, #1
 80023ee:	d103      	bne.n	80023f8 <_isatty_r+0x1c>
 80023f0:	682b      	ldr	r3, [r5, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d000      	beq.n	80023f8 <_isatty_r+0x1c>
 80023f6:	6023      	str	r3, [r4, #0]
 80023f8:	bd70      	pop	{r4, r5, r6, pc}
 80023fa:	46c0      	nop			; (mov r8, r8)
 80023fc:	200000f4 	.word	0x200000f4

08002400 <_lseek_r>:
 8002400:	b570      	push	{r4, r5, r6, lr}
 8002402:	0004      	movs	r4, r0
 8002404:	0008      	movs	r0, r1
 8002406:	0011      	movs	r1, r2
 8002408:	001a      	movs	r2, r3
 800240a:	2300      	movs	r3, #0
 800240c:	4d05      	ldr	r5, [pc, #20]	; (8002424 <_lseek_r+0x24>)
 800240e:	602b      	str	r3, [r5, #0]
 8002410:	f000 f8cd 	bl	80025ae <_lseek>
 8002414:	1c43      	adds	r3, r0, #1
 8002416:	d103      	bne.n	8002420 <_lseek_r+0x20>
 8002418:	682b      	ldr	r3, [r5, #0]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d000      	beq.n	8002420 <_lseek_r+0x20>
 800241e:	6023      	str	r3, [r4, #0]
 8002420:	bd70      	pop	{r4, r5, r6, pc}
 8002422:	46c0      	nop			; (mov r8, r8)
 8002424:	200000f4 	.word	0x200000f4

08002428 <memchr>:
 8002428:	b2c9      	uxtb	r1, r1
 800242a:	1882      	adds	r2, r0, r2
 800242c:	4290      	cmp	r0, r2
 800242e:	d101      	bne.n	8002434 <memchr+0xc>
 8002430:	2000      	movs	r0, #0
 8002432:	4770      	bx	lr
 8002434:	7803      	ldrb	r3, [r0, #0]
 8002436:	428b      	cmp	r3, r1
 8002438:	d0fb      	beq.n	8002432 <memchr+0xa>
 800243a:	3001      	adds	r0, #1
 800243c:	e7f6      	b.n	800242c <memchr+0x4>
	...

08002440 <__malloc_lock>:
 8002440:	b510      	push	{r4, lr}
 8002442:	4802      	ldr	r0, [pc, #8]	; (800244c <__malloc_lock+0xc>)
 8002444:	f7ff faff 	bl	8001a46 <__retarget_lock_acquire_recursive>
 8002448:	bd10      	pop	{r4, pc}
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	200000e7 	.word	0x200000e7

08002450 <__malloc_unlock>:
 8002450:	b510      	push	{r4, lr}
 8002452:	4802      	ldr	r0, [pc, #8]	; (800245c <__malloc_unlock+0xc>)
 8002454:	f7ff faf8 	bl	8001a48 <__retarget_lock_release_recursive>
 8002458:	bd10      	pop	{r4, pc}
 800245a:	46c0      	nop			; (mov r8, r8)
 800245c:	200000e7 	.word	0x200000e7

08002460 <_read_r>:
 8002460:	b570      	push	{r4, r5, r6, lr}
 8002462:	0004      	movs	r4, r0
 8002464:	0008      	movs	r0, r1
 8002466:	0011      	movs	r1, r2
 8002468:	001a      	movs	r2, r3
 800246a:	2300      	movs	r3, #0
 800246c:	4d05      	ldr	r5, [pc, #20]	; (8002484 <_read_r+0x24>)
 800246e:	602b      	str	r3, [r5, #0]
 8002470:	f000 f848 	bl	8002504 <_read>
 8002474:	1c43      	adds	r3, r0, #1
 8002476:	d103      	bne.n	8002480 <_read_r+0x20>
 8002478:	682b      	ldr	r3, [r5, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d000      	beq.n	8002480 <_read_r+0x20>
 800247e:	6023      	str	r3, [r4, #0]
 8002480:	bd70      	pop	{r4, r5, r6, pc}
 8002482:	46c0      	nop			; (mov r8, r8)
 8002484:	200000f4 	.word	0x200000f4

08002488 <findslot>:
 8002488:	4b0a      	ldr	r3, [pc, #40]	; (80024b4 <findslot+0x2c>)
 800248a:	b510      	push	{r4, lr}
 800248c:	0004      	movs	r4, r0
 800248e:	6818      	ldr	r0, [r3, #0]
 8002490:	2800      	cmp	r0, #0
 8002492:	d004      	beq.n	800249e <findslot+0x16>
 8002494:	6983      	ldr	r3, [r0, #24]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <findslot+0x16>
 800249a:	f7ff fa33 	bl	8001904 <__sinit>
 800249e:	2000      	movs	r0, #0
 80024a0:	2c13      	cmp	r4, #19
 80024a2:	d805      	bhi.n	80024b0 <findslot+0x28>
 80024a4:	4b04      	ldr	r3, [pc, #16]	; (80024b8 <findslot+0x30>)
 80024a6:	00e4      	lsls	r4, r4, #3
 80024a8:	58e2      	ldr	r2, [r4, r3]
 80024aa:	3201      	adds	r2, #1
 80024ac:	d000      	beq.n	80024b0 <findslot+0x28>
 80024ae:	18e0      	adds	r0, r4, r3
 80024b0:	bd10      	pop	{r4, pc}
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	20000004 	.word	0x20000004
 80024b8:	20000104 	.word	0x20000104

080024bc <error>:
 80024bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024be:	0004      	movs	r4, r0
 80024c0:	f7fe ff5c 	bl	800137c <__errno>
 80024c4:	2613      	movs	r6, #19
 80024c6:	0005      	movs	r5, r0
 80024c8:	2700      	movs	r7, #0
 80024ca:	1c30      	adds	r0, r6, #0
 80024cc:	1c39      	adds	r1, r7, #0
 80024ce:	beab      	bkpt	0x00ab
 80024d0:	1c06      	adds	r6, r0, #0
 80024d2:	602e      	str	r6, [r5, #0]
 80024d4:	0020      	movs	r0, r4
 80024d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080024d8 <checkerror>:
 80024d8:	b510      	push	{r4, lr}
 80024da:	1c43      	adds	r3, r0, #1
 80024dc:	d101      	bne.n	80024e2 <checkerror+0xa>
 80024de:	f7ff ffed 	bl	80024bc <error>
 80024e2:	bd10      	pop	{r4, pc}

080024e4 <_swiread>:
 80024e4:	b530      	push	{r4, r5, lr}
 80024e6:	b085      	sub	sp, #20
 80024e8:	ad01      	add	r5, sp, #4
 80024ea:	9001      	str	r0, [sp, #4]
 80024ec:	9102      	str	r1, [sp, #8]
 80024ee:	9203      	str	r2, [sp, #12]
 80024f0:	2406      	movs	r4, #6
 80024f2:	1c20      	adds	r0, r4, #0
 80024f4:	1c29      	adds	r1, r5, #0
 80024f6:	beab      	bkpt	0x00ab
 80024f8:	1c04      	adds	r4, r0, #0
 80024fa:	0020      	movs	r0, r4
 80024fc:	f7ff ffec 	bl	80024d8 <checkerror>
 8002500:	b005      	add	sp, #20
 8002502:	bd30      	pop	{r4, r5, pc}

08002504 <_read>:
 8002504:	b570      	push	{r4, r5, r6, lr}
 8002506:	000e      	movs	r6, r1
 8002508:	0015      	movs	r5, r2
 800250a:	f7ff ffbd 	bl	8002488 <findslot>
 800250e:	1e04      	subs	r4, r0, #0
 8002510:	d106      	bne.n	8002520 <_read+0x1c>
 8002512:	f7fe ff33 	bl	800137c <__errno>
 8002516:	2309      	movs	r3, #9
 8002518:	6003      	str	r3, [r0, #0]
 800251a:	2001      	movs	r0, #1
 800251c:	4240      	negs	r0, r0
 800251e:	bd70      	pop	{r4, r5, r6, pc}
 8002520:	002a      	movs	r2, r5
 8002522:	0031      	movs	r1, r6
 8002524:	6800      	ldr	r0, [r0, #0]
 8002526:	f7ff ffdd 	bl	80024e4 <_swiread>
 800252a:	1c43      	adds	r3, r0, #1
 800252c:	d0f7      	beq.n	800251e <_read+0x1a>
 800252e:	6863      	ldr	r3, [r4, #4]
 8002530:	1a28      	subs	r0, r5, r0
 8002532:	181b      	adds	r3, r3, r0
 8002534:	6063      	str	r3, [r4, #4]
 8002536:	e7f2      	b.n	800251e <_read+0x1a>

08002538 <_swilseek>:
 8002538:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800253a:	000c      	movs	r4, r1
 800253c:	0016      	movs	r6, r2
 800253e:	f7ff ffa3 	bl	8002488 <findslot>
 8002542:	1e05      	subs	r5, r0, #0
 8002544:	d107      	bne.n	8002556 <_swilseek+0x1e>
 8002546:	f7fe ff19 	bl	800137c <__errno>
 800254a:	2309      	movs	r3, #9
 800254c:	6003      	str	r3, [r0, #0]
 800254e:	2401      	movs	r4, #1
 8002550:	4264      	negs	r4, r4
 8002552:	0020      	movs	r0, r4
 8002554:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002556:	2e02      	cmp	r6, #2
 8002558:	d903      	bls.n	8002562 <_swilseek+0x2a>
 800255a:	f7fe ff0f 	bl	800137c <__errno>
 800255e:	2316      	movs	r3, #22
 8002560:	e7f4      	b.n	800254c <_swilseek+0x14>
 8002562:	2e01      	cmp	r6, #1
 8002564:	d112      	bne.n	800258c <_swilseek+0x54>
 8002566:	6843      	ldr	r3, [r0, #4]
 8002568:	18e4      	adds	r4, r4, r3
 800256a:	d4f6      	bmi.n	800255a <_swilseek+0x22>
 800256c:	466f      	mov	r7, sp
 800256e:	682b      	ldr	r3, [r5, #0]
 8002570:	260a      	movs	r6, #10
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	607c      	str	r4, [r7, #4]
 8002576:	1c30      	adds	r0, r6, #0
 8002578:	1c39      	adds	r1, r7, #0
 800257a:	beab      	bkpt	0x00ab
 800257c:	1c06      	adds	r6, r0, #0
 800257e:	0030      	movs	r0, r6
 8002580:	f7ff ffaa 	bl	80024d8 <checkerror>
 8002584:	2800      	cmp	r0, #0
 8002586:	dbe2      	blt.n	800254e <_swilseek+0x16>
 8002588:	606c      	str	r4, [r5, #4]
 800258a:	e7e2      	b.n	8002552 <_swilseek+0x1a>
 800258c:	2e02      	cmp	r6, #2
 800258e:	d1ed      	bne.n	800256c <_swilseek+0x34>
 8002590:	6803      	ldr	r3, [r0, #0]
 8002592:	466f      	mov	r7, sp
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	360a      	adds	r6, #10
 8002598:	1c30      	adds	r0, r6, #0
 800259a:	1c39      	adds	r1, r7, #0
 800259c:	beab      	bkpt	0x00ab
 800259e:	1c06      	adds	r6, r0, #0
 80025a0:	0030      	movs	r0, r6
 80025a2:	f7ff ff99 	bl	80024d8 <checkerror>
 80025a6:	1824      	adds	r4, r4, r0
 80025a8:	1c43      	adds	r3, r0, #1
 80025aa:	d1df      	bne.n	800256c <_swilseek+0x34>
 80025ac:	e7cf      	b.n	800254e <_swilseek+0x16>

080025ae <_lseek>:
 80025ae:	b510      	push	{r4, lr}
 80025b0:	f7ff ffc2 	bl	8002538 <_swilseek>
 80025b4:	bd10      	pop	{r4, pc}

080025b6 <_swiwrite>:
 80025b6:	b530      	push	{r4, r5, lr}
 80025b8:	b085      	sub	sp, #20
 80025ba:	ad01      	add	r5, sp, #4
 80025bc:	9001      	str	r0, [sp, #4]
 80025be:	9102      	str	r1, [sp, #8]
 80025c0:	9203      	str	r2, [sp, #12]
 80025c2:	2405      	movs	r4, #5
 80025c4:	1c20      	adds	r0, r4, #0
 80025c6:	1c29      	adds	r1, r5, #0
 80025c8:	beab      	bkpt	0x00ab
 80025ca:	1c04      	adds	r4, r0, #0
 80025cc:	0020      	movs	r0, r4
 80025ce:	f7ff ff83 	bl	80024d8 <checkerror>
 80025d2:	b005      	add	sp, #20
 80025d4:	bd30      	pop	{r4, r5, pc}

080025d6 <_write>:
 80025d6:	b570      	push	{r4, r5, r6, lr}
 80025d8:	000e      	movs	r6, r1
 80025da:	0015      	movs	r5, r2
 80025dc:	f7ff ff54 	bl	8002488 <findslot>
 80025e0:	1e04      	subs	r4, r0, #0
 80025e2:	d106      	bne.n	80025f2 <_write+0x1c>
 80025e4:	f7fe feca 	bl	800137c <__errno>
 80025e8:	2309      	movs	r3, #9
 80025ea:	6003      	str	r3, [r0, #0]
 80025ec:	2001      	movs	r0, #1
 80025ee:	4240      	negs	r0, r0
 80025f0:	e00f      	b.n	8002612 <_write+0x3c>
 80025f2:	002a      	movs	r2, r5
 80025f4:	0031      	movs	r1, r6
 80025f6:	6800      	ldr	r0, [r0, #0]
 80025f8:	f7ff ffdd 	bl	80025b6 <_swiwrite>
 80025fc:	1e03      	subs	r3, r0, #0
 80025fe:	dbf5      	blt.n	80025ec <_write+0x16>
 8002600:	6862      	ldr	r2, [r4, #4]
 8002602:	1a28      	subs	r0, r5, r0
 8002604:	1812      	adds	r2, r2, r0
 8002606:	6062      	str	r2, [r4, #4]
 8002608:	42ab      	cmp	r3, r5
 800260a:	d102      	bne.n	8002612 <_write+0x3c>
 800260c:	2000      	movs	r0, #0
 800260e:	f7ff ff55 	bl	80024bc <error>
 8002612:	bd70      	pop	{r4, r5, r6, pc}

08002614 <_swiclose>:
 8002614:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002616:	2402      	movs	r4, #2
 8002618:	9001      	str	r0, [sp, #4]
 800261a:	ad01      	add	r5, sp, #4
 800261c:	1c20      	adds	r0, r4, #0
 800261e:	1c29      	adds	r1, r5, #0
 8002620:	beab      	bkpt	0x00ab
 8002622:	1c04      	adds	r4, r0, #0
 8002624:	0020      	movs	r0, r4
 8002626:	f7ff ff57 	bl	80024d8 <checkerror>
 800262a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800262c <_close>:
 800262c:	b570      	push	{r4, r5, r6, lr}
 800262e:	0005      	movs	r5, r0
 8002630:	f7ff ff2a 	bl	8002488 <findslot>
 8002634:	1e04      	subs	r4, r0, #0
 8002636:	d106      	bne.n	8002646 <_close+0x1a>
 8002638:	f7fe fea0 	bl	800137c <__errno>
 800263c:	2309      	movs	r3, #9
 800263e:	6003      	str	r3, [r0, #0]
 8002640:	2001      	movs	r0, #1
 8002642:	4240      	negs	r0, r0
 8002644:	bd70      	pop	{r4, r5, r6, pc}
 8002646:	3d01      	subs	r5, #1
 8002648:	2d01      	cmp	r5, #1
 800264a:	d809      	bhi.n	8002660 <_close+0x34>
 800264c:	4b09      	ldr	r3, [pc, #36]	; (8002674 <_close+0x48>)
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	429a      	cmp	r2, r3
 8002654:	d104      	bne.n	8002660 <_close+0x34>
 8002656:	2301      	movs	r3, #1
 8002658:	425b      	negs	r3, r3
 800265a:	6003      	str	r3, [r0, #0]
 800265c:	2000      	movs	r0, #0
 800265e:	e7f1      	b.n	8002644 <_close+0x18>
 8002660:	6820      	ldr	r0, [r4, #0]
 8002662:	f7ff ffd7 	bl	8002614 <_swiclose>
 8002666:	2800      	cmp	r0, #0
 8002668:	d1ec      	bne.n	8002644 <_close+0x18>
 800266a:	2301      	movs	r3, #1
 800266c:	425b      	negs	r3, r3
 800266e:	6023      	str	r3, [r4, #0]
 8002670:	e7e8      	b.n	8002644 <_close+0x18>
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	20000104 	.word	0x20000104

08002678 <_swistat>:
 8002678:	b570      	push	{r4, r5, r6, lr}
 800267a:	000c      	movs	r4, r1
 800267c:	f7ff ff04 	bl	8002488 <findslot>
 8002680:	1e05      	subs	r5, r0, #0
 8002682:	d106      	bne.n	8002692 <_swistat+0x1a>
 8002684:	f7fe fe7a 	bl	800137c <__errno>
 8002688:	2309      	movs	r3, #9
 800268a:	6003      	str	r3, [r0, #0]
 800268c:	2001      	movs	r0, #1
 800268e:	4240      	negs	r0, r0
 8002690:	bd70      	pop	{r4, r5, r6, pc}
 8002692:	2380      	movs	r3, #128	; 0x80
 8002694:	6862      	ldr	r2, [r4, #4]
 8002696:	019b      	lsls	r3, r3, #6
 8002698:	4313      	orrs	r3, r2
 800269a:	6063      	str	r3, [r4, #4]
 800269c:	2380      	movs	r3, #128	; 0x80
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	260c      	movs	r6, #12
 80026a2:	64a3      	str	r3, [r4, #72]	; 0x48
 80026a4:	1c30      	adds	r0, r6, #0
 80026a6:	1c29      	adds	r1, r5, #0
 80026a8:	beab      	bkpt	0x00ab
 80026aa:	1c05      	adds	r5, r0, #0
 80026ac:	0028      	movs	r0, r5
 80026ae:	f7ff ff13 	bl	80024d8 <checkerror>
 80026b2:	1c43      	adds	r3, r0, #1
 80026b4:	d0ec      	beq.n	8002690 <_swistat+0x18>
 80026b6:	6120      	str	r0, [r4, #16]
 80026b8:	2000      	movs	r0, #0
 80026ba:	e7e9      	b.n	8002690 <_swistat+0x18>

080026bc <_fstat>:
 80026bc:	b570      	push	{r4, r5, r6, lr}
 80026be:	000c      	movs	r4, r1
 80026c0:	0005      	movs	r5, r0
 80026c2:	2258      	movs	r2, #88	; 0x58
 80026c4:	2100      	movs	r1, #0
 80026c6:	0020      	movs	r0, r4
 80026c8:	f7fe fe82 	bl	80013d0 <memset>
 80026cc:	0028      	movs	r0, r5
 80026ce:	0021      	movs	r1, r4
 80026d0:	f7ff ffd2 	bl	8002678 <_swistat>
 80026d4:	bd70      	pop	{r4, r5, r6, pc}

080026d6 <_stat>:
 80026d6:	b570      	push	{r4, r5, r6, lr}
 80026d8:	000d      	movs	r5, r1
 80026da:	0004      	movs	r4, r0
 80026dc:	2258      	movs	r2, #88	; 0x58
 80026de:	2100      	movs	r1, #0
 80026e0:	0028      	movs	r0, r5
 80026e2:	f7fe fe75 	bl	80013d0 <memset>
 80026e6:	0020      	movs	r0, r4
 80026e8:	2100      	movs	r1, #0
 80026ea:	f000 f813 	bl	8002714 <_swiopen>
 80026ee:	0004      	movs	r4, r0
 80026f0:	1c43      	adds	r3, r0, #1
 80026f2:	d00c      	beq.n	800270e <_stat+0x38>
 80026f4:	2381      	movs	r3, #129	; 0x81
 80026f6:	686a      	ldr	r2, [r5, #4]
 80026f8:	021b      	lsls	r3, r3, #8
 80026fa:	4313      	orrs	r3, r2
 80026fc:	0029      	movs	r1, r5
 80026fe:	606b      	str	r3, [r5, #4]
 8002700:	f7ff ffba 	bl	8002678 <_swistat>
 8002704:	0005      	movs	r5, r0
 8002706:	0020      	movs	r0, r4
 8002708:	f7ff ff90 	bl	800262c <_close>
 800270c:	002c      	movs	r4, r5
 800270e:	0020      	movs	r0, r4
 8002710:	bd70      	pop	{r4, r5, r6, pc}
	...

08002714 <_swiopen>:
 8002714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002716:	000d      	movs	r5, r1
 8002718:	2600      	movs	r6, #0
 800271a:	b099      	sub	sp, #100	; 0x64
 800271c:	9000      	str	r0, [sp, #0]
 800271e:	00f3      	lsls	r3, r6, #3
 8002720:	9301      	str	r3, [sp, #4]
 8002722:	4b29      	ldr	r3, [pc, #164]	; (80027c8 <_swiopen+0xb4>)
 8002724:	00f2      	lsls	r2, r6, #3
 8002726:	589c      	ldr	r4, [r3, r2]
 8002728:	1c63      	adds	r3, r4, #1
 800272a:	d038      	beq.n	800279e <_swiopen+0x8a>
 800272c:	3601      	adds	r6, #1
 800272e:	2e14      	cmp	r6, #20
 8002730:	d1f5      	bne.n	800271e <_swiopen+0xa>
 8002732:	f7fe fe23 	bl	800137c <__errno>
 8002736:	2401      	movs	r4, #1
 8002738:	2318      	movs	r3, #24
 800273a:	4264      	negs	r4, r4
 800273c:	6003      	str	r3, [r0, #0]
 800273e:	e03f      	b.n	80027c0 <_swiopen+0xac>
 8002740:	2302      	movs	r3, #2
 8002742:	03ec      	lsls	r4, r5, #15
 8002744:	0fe4      	lsrs	r4, r4, #31
 8002746:	421d      	tst	r5, r3
 8002748:	d000      	beq.n	800274c <_swiopen+0x38>
 800274a:	431c      	orrs	r4, r3
 800274c:	4b1f      	ldr	r3, [pc, #124]	; (80027cc <_swiopen+0xb8>)
 800274e:	421d      	tst	r5, r3
 8002750:	d001      	beq.n	8002756 <_swiopen+0x42>
 8002752:	2304      	movs	r3, #4
 8002754:	431c      	orrs	r4, r3
 8002756:	2308      	movs	r3, #8
 8002758:	421d      	tst	r5, r3
 800275a:	d002      	beq.n	8002762 <_swiopen+0x4e>
 800275c:	2204      	movs	r2, #4
 800275e:	4394      	bics	r4, r2
 8002760:	431c      	orrs	r4, r3
 8002762:	9b00      	ldr	r3, [sp, #0]
 8002764:	0018      	movs	r0, r3
 8002766:	9302      	str	r3, [sp, #8]
 8002768:	f7fd fcce 	bl	8000108 <strlen>
 800276c:	607c      	str	r4, [r7, #4]
 800276e:	60b8      	str	r0, [r7, #8]
 8002770:	2401      	movs	r4, #1
 8002772:	1c20      	adds	r0, r4, #0
 8002774:	1c39      	adds	r1, r7, #0
 8002776:	beab      	bkpt	0x00ab
 8002778:	1c04      	adds	r4, r0, #0
 800277a:	2c00      	cmp	r4, #0
 800277c:	db0a      	blt.n	8002794 <_swiopen+0x80>
 800277e:	4b12      	ldr	r3, [pc, #72]	; (80027c8 <_swiopen+0xb4>)
 8002780:	00f2      	lsls	r2, r6, #3
 8002782:	509c      	str	r4, [r3, r2]
 8002784:	0013      	movs	r3, r2
 8002786:	4a10      	ldr	r2, [pc, #64]	; (80027c8 <_swiopen+0xb4>)
 8002788:	0034      	movs	r4, r6
 800278a:	4694      	mov	ip, r2
 800278c:	2200      	movs	r2, #0
 800278e:	4463      	add	r3, ip
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	e015      	b.n	80027c0 <_swiopen+0xac>
 8002794:	0020      	movs	r0, r4
 8002796:	f7ff fe91 	bl	80024bc <error>
 800279a:	0004      	movs	r4, r0
 800279c:	e010      	b.n	80027c0 <_swiopen+0xac>
 800279e:	23a0      	movs	r3, #160	; 0xa0
 80027a0:	002a      	movs	r2, r5
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	401a      	ands	r2, r3
 80027a6:	af02      	add	r7, sp, #8
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d1c9      	bne.n	8002740 <_swiopen+0x2c>
 80027ac:	0039      	movs	r1, r7
 80027ae:	9800      	ldr	r0, [sp, #0]
 80027b0:	f7ff ff91 	bl	80026d6 <_stat>
 80027b4:	1c43      	adds	r3, r0, #1
 80027b6:	d0c3      	beq.n	8002740 <_swiopen+0x2c>
 80027b8:	f7fe fde0 	bl	800137c <__errno>
 80027bc:	2311      	movs	r3, #17
 80027be:	6003      	str	r3, [r0, #0]
 80027c0:	0020      	movs	r0, r4
 80027c2:	b019      	add	sp, #100	; 0x64
 80027c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	20000104 	.word	0x20000104
 80027cc:	00000601 	.word	0x00000601

080027d0 <_get_semihosting_exts>:
 80027d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027d2:	b085      	sub	sp, #20
 80027d4:	9000      	str	r0, [sp, #0]
 80027d6:	9101      	str	r1, [sp, #4]
 80027d8:	4827      	ldr	r0, [pc, #156]	; (8002878 <_get_semihosting_exts+0xa8>)
 80027da:	2100      	movs	r1, #0
 80027dc:	0015      	movs	r5, r2
 80027de:	f7ff ff99 	bl	8002714 <_swiopen>
 80027e2:	0004      	movs	r4, r0
 80027e4:	002a      	movs	r2, r5
 80027e6:	2100      	movs	r1, #0
 80027e8:	9800      	ldr	r0, [sp, #0]
 80027ea:	f7fe fdf1 	bl	80013d0 <memset>
 80027ee:	1c63      	adds	r3, r4, #1
 80027f0:	d015      	beq.n	800281e <_get_semihosting_exts+0x4e>
 80027f2:	0020      	movs	r0, r4
 80027f4:	f7ff fe48 	bl	8002488 <findslot>
 80027f8:	260c      	movs	r6, #12
 80027fa:	0007      	movs	r7, r0
 80027fc:	1c30      	adds	r0, r6, #0
 80027fe:	1c39      	adds	r1, r7, #0
 8002800:	beab      	bkpt	0x00ab
 8002802:	1c06      	adds	r6, r0, #0
 8002804:	0030      	movs	r0, r6
 8002806:	f7ff fe67 	bl	80024d8 <checkerror>
 800280a:	2803      	cmp	r0, #3
 800280c:	dd02      	ble.n	8002814 <_get_semihosting_exts+0x44>
 800280e:	3803      	subs	r0, #3
 8002810:	42a8      	cmp	r0, r5
 8002812:	dc07      	bgt.n	8002824 <_get_semihosting_exts+0x54>
 8002814:	0020      	movs	r0, r4
 8002816:	2401      	movs	r4, #1
 8002818:	f7ff ff08 	bl	800262c <_close>
 800281c:	4264      	negs	r4, r4
 800281e:	0020      	movs	r0, r4
 8002820:	b005      	add	sp, #20
 8002822:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002824:	ae03      	add	r6, sp, #12
 8002826:	2204      	movs	r2, #4
 8002828:	0031      	movs	r1, r6
 800282a:	0020      	movs	r0, r4
 800282c:	f7ff fe6a 	bl	8002504 <_read>
 8002830:	2803      	cmp	r0, #3
 8002832:	ddef      	ble.n	8002814 <_get_semihosting_exts+0x44>
 8002834:	7833      	ldrb	r3, [r6, #0]
 8002836:	2b53      	cmp	r3, #83	; 0x53
 8002838:	d1ec      	bne.n	8002814 <_get_semihosting_exts+0x44>
 800283a:	7873      	ldrb	r3, [r6, #1]
 800283c:	2b48      	cmp	r3, #72	; 0x48
 800283e:	d1e9      	bne.n	8002814 <_get_semihosting_exts+0x44>
 8002840:	78b3      	ldrb	r3, [r6, #2]
 8002842:	2b46      	cmp	r3, #70	; 0x46
 8002844:	d1e6      	bne.n	8002814 <_get_semihosting_exts+0x44>
 8002846:	78f3      	ldrb	r3, [r6, #3]
 8002848:	2b42      	cmp	r3, #66	; 0x42
 800284a:	d1e3      	bne.n	8002814 <_get_semihosting_exts+0x44>
 800284c:	2201      	movs	r2, #1
 800284e:	0020      	movs	r0, r4
 8002850:	9901      	ldr	r1, [sp, #4]
 8002852:	f7ff fe71 	bl	8002538 <_swilseek>
 8002856:	2800      	cmp	r0, #0
 8002858:	dbdc      	blt.n	8002814 <_get_semihosting_exts+0x44>
 800285a:	002a      	movs	r2, r5
 800285c:	9900      	ldr	r1, [sp, #0]
 800285e:	0020      	movs	r0, r4
 8002860:	f7ff fe50 	bl	8002504 <_read>
 8002864:	0005      	movs	r5, r0
 8002866:	0020      	movs	r0, r4
 8002868:	f7ff fee0 	bl	800262c <_close>
 800286c:	0028      	movs	r0, r5
 800286e:	f7ff fe33 	bl	80024d8 <checkerror>
 8002872:	0004      	movs	r4, r0
 8002874:	e7d3      	b.n	800281e <_get_semihosting_exts+0x4e>
 8002876:	46c0      	nop			; (mov r8, r8)
 8002878:	08002b73 	.word	0x08002b73

0800287c <initialise_semihosting_exts>:
 800287c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800287e:	2401      	movs	r4, #1
 8002880:	2100      	movs	r1, #0
 8002882:	4e09      	ldr	r6, [pc, #36]	; (80028a8 <initialise_semihosting_exts+0x2c>)
 8002884:	4d09      	ldr	r5, [pc, #36]	; (80028ac <initialise_semihosting_exts+0x30>)
 8002886:	af01      	add	r7, sp, #4
 8002888:	0022      	movs	r2, r4
 800288a:	0038      	movs	r0, r7
 800288c:	6031      	str	r1, [r6, #0]
 800288e:	602c      	str	r4, [r5, #0]
 8002890:	f7ff ff9e 	bl	80027d0 <_get_semihosting_exts>
 8002894:	2800      	cmp	r0, #0
 8002896:	dd05      	ble.n	80028a4 <initialise_semihosting_exts+0x28>
 8002898:	2202      	movs	r2, #2
 800289a:	783b      	ldrb	r3, [r7, #0]
 800289c:	401c      	ands	r4, r3
 800289e:	4013      	ands	r3, r2
 80028a0:	6034      	str	r4, [r6, #0]
 80028a2:	602b      	str	r3, [r5, #0]
 80028a4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80028a6:	46c0      	nop			; (mov r8, r8)
 80028a8:	20000068 	.word	0x20000068
 80028ac:	2000006c 	.word	0x2000006c

080028b0 <_has_ext_stdout_stderr>:
 80028b0:	b510      	push	{r4, lr}
 80028b2:	4c04      	ldr	r4, [pc, #16]	; (80028c4 <_has_ext_stdout_stderr+0x14>)
 80028b4:	6823      	ldr	r3, [r4, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	da01      	bge.n	80028be <_has_ext_stdout_stderr+0xe>
 80028ba:	f7ff ffdf 	bl	800287c <initialise_semihosting_exts>
 80028be:	6820      	ldr	r0, [r4, #0]
 80028c0:	bd10      	pop	{r4, pc}
 80028c2:	46c0      	nop			; (mov r8, r8)
 80028c4:	2000006c 	.word	0x2000006c

080028c8 <initialise_monitor_handles>:
 80028c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028ca:	4b27      	ldr	r3, [pc, #156]	; (8002968 <initialise_monitor_handles+0xa0>)
 80028cc:	b085      	sub	sp, #20
 80028ce:	9301      	str	r3, [sp, #4]
 80028d0:	2500      	movs	r5, #0
 80028d2:	2303      	movs	r3, #3
 80028d4:	ac01      	add	r4, sp, #4
 80028d6:	60a3      	str	r3, [r4, #8]
 80028d8:	2701      	movs	r7, #1
 80028da:	6065      	str	r5, [r4, #4]
 80028dc:	1c38      	adds	r0, r7, #0
 80028de:	1c21      	adds	r1, r4, #0
 80028e0:	beab      	bkpt	0x00ab
 80028e2:	1c07      	adds	r7, r0, #0
 80028e4:	2101      	movs	r1, #1
 80028e6:	4b21      	ldr	r3, [pc, #132]	; (800296c <initialise_monitor_handles+0xa4>)
 80028e8:	4249      	negs	r1, r1
 80028ea:	601f      	str	r7, [r3, #0]
 80028ec:	002b      	movs	r3, r5
 80028ee:	4d20      	ldr	r5, [pc, #128]	; (8002970 <initialise_monitor_handles+0xa8>)
 80028f0:	00da      	lsls	r2, r3, #3
 80028f2:	3301      	adds	r3, #1
 80028f4:	50a9      	str	r1, [r5, r2]
 80028f6:	2b14      	cmp	r3, #20
 80028f8:	d1fa      	bne.n	80028f0 <initialise_monitor_handles+0x28>
 80028fa:	f7ff ffd9 	bl	80028b0 <_has_ext_stdout_stderr>
 80028fe:	2800      	cmp	r0, #0
 8002900:	d018      	beq.n	8002934 <initialise_monitor_handles+0x6c>
 8002902:	4b19      	ldr	r3, [pc, #100]	; (8002968 <initialise_monitor_handles+0xa0>)
 8002904:	2701      	movs	r7, #1
 8002906:	9301      	str	r3, [sp, #4]
 8002908:	2303      	movs	r3, #3
 800290a:	60a3      	str	r3, [r4, #8]
 800290c:	3301      	adds	r3, #1
 800290e:	6063      	str	r3, [r4, #4]
 8002910:	1c38      	adds	r0, r7, #0
 8002912:	1c21      	adds	r1, r4, #0
 8002914:	beab      	bkpt	0x00ab
 8002916:	1c06      	adds	r6, r0, #0
 8002918:	4b16      	ldr	r3, [pc, #88]	; (8002974 <initialise_monitor_handles+0xac>)
 800291a:	4a13      	ldr	r2, [pc, #76]	; (8002968 <initialise_monitor_handles+0xa0>)
 800291c:	601e      	str	r6, [r3, #0]
 800291e:	2303      	movs	r3, #3
 8002920:	9201      	str	r2, [sp, #4]
 8002922:	60a3      	str	r3, [r4, #8]
 8002924:	3305      	adds	r3, #5
 8002926:	6063      	str	r3, [r4, #4]
 8002928:	1c38      	adds	r0, r7, #0
 800292a:	1c21      	adds	r1, r4, #0
 800292c:	beab      	bkpt	0x00ab
 800292e:	1c04      	adds	r4, r0, #0
 8002930:	4b11      	ldr	r3, [pc, #68]	; (8002978 <initialise_monitor_handles+0xb0>)
 8002932:	601c      	str	r4, [r3, #0]
 8002934:	4f10      	ldr	r7, [pc, #64]	; (8002978 <initialise_monitor_handles+0xb0>)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	3301      	adds	r3, #1
 800293a:	d102      	bne.n	8002942 <initialise_monitor_handles+0x7a>
 800293c:	4b0d      	ldr	r3, [pc, #52]	; (8002974 <initialise_monitor_handles+0xac>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	603b      	str	r3, [r7, #0]
 8002942:	2400      	movs	r4, #0
 8002944:	4b09      	ldr	r3, [pc, #36]	; (800296c <initialise_monitor_handles+0xa4>)
 8002946:	606c      	str	r4, [r5, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	602b      	str	r3, [r5, #0]
 800294c:	f7ff ffb0 	bl	80028b0 <_has_ext_stdout_stderr>
 8002950:	42a0      	cmp	r0, r4
 8002952:	d006      	beq.n	8002962 <initialise_monitor_handles+0x9a>
 8002954:	4b07      	ldr	r3, [pc, #28]	; (8002974 <initialise_monitor_handles+0xac>)
 8002956:	60ec      	str	r4, [r5, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	616c      	str	r4, [r5, #20]
 800295c:	60ab      	str	r3, [r5, #8]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	612b      	str	r3, [r5, #16]
 8002962:	b005      	add	sp, #20
 8002964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	08002b89 	.word	0x08002b89
 800296c:	200000fc 	.word	0x200000fc
 8002970:	20000104 	.word	0x20000104
 8002974:	20000100 	.word	0x20000100
 8002978:	200000f8 	.word	0x200000f8

0800297c <_isatty>:
 800297c:	b570      	push	{r4, r5, r6, lr}
 800297e:	f7ff fd83 	bl	8002488 <findslot>
 8002982:	2509      	movs	r5, #9
 8002984:	1e04      	subs	r4, r0, #0
 8002986:	d104      	bne.n	8002992 <_isatty+0x16>
 8002988:	f7fe fcf8 	bl	800137c <__errno>
 800298c:	6005      	str	r5, [r0, #0]
 800298e:	0020      	movs	r0, r4
 8002990:	bd70      	pop	{r4, r5, r6, pc}
 8002992:	1c28      	adds	r0, r5, #0
 8002994:	1c21      	adds	r1, r4, #0
 8002996:	beab      	bkpt	0x00ab
 8002998:	1c04      	adds	r4, r0, #0
 800299a:	0020      	movs	r0, r4
 800299c:	2c01      	cmp	r4, #1
 800299e:	d0f7      	beq.n	8002990 <_isatty+0x14>
 80029a0:	f7fe fcec 	bl	800137c <__errno>
 80029a4:	2400      	movs	r4, #0
 80029a6:	0005      	movs	r5, r0
 80029a8:	2613      	movs	r6, #19
 80029aa:	1c30      	adds	r0, r6, #0
 80029ac:	1c21      	adds	r1, r4, #0
 80029ae:	beab      	bkpt	0x00ab
 80029b0:	1c06      	adds	r6, r0, #0
 80029b2:	602e      	str	r6, [r5, #0]
 80029b4:	e7eb      	b.n	800298e <_isatty+0x12>
	...

080029b8 <_init>:
 80029b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ba:	46c0      	nop			; (mov r8, r8)
 80029bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029be:	bc08      	pop	{r3}
 80029c0:	469e      	mov	lr, r3
 80029c2:	4770      	bx	lr

080029c4 <_fini>:
 80029c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ca:	bc08      	pop	{r3}
 80029cc:	469e      	mov	lr, r3
 80029ce:	4770      	bx	lr
