
Train_FreeRTOS_STM32cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006568  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  08006628  08006628  00016628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006808  08006808  00020104  2**0
                  CONTENTS
  4 .ARM          00000000  08006808  08006808  00020104  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006808  08006808  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006808  08006808  00016808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800680c  0800680c  0001680c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  08006810  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ec4  20000104  08006914  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001fc8  08006914  00021fc8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001321e  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ce9  00000000  00000000  0003334a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c8  00000000  00000000  00036038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011a0  00000000  00000000  00037300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e65a  00000000  00000000  000384a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015686  00000000  00000000  00056afa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b3528  00000000  00000000  0006c180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011f6a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b5c  00000000  00000000  0011f6f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000104 	.word	0x20000104
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006610 	.word	0x08006610

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000108 	.word	0x20000108
 8000104:	08006610 	.word	0x08006610

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800023c:	2301      	movs	r3, #1
 800023e:	425b      	negs	r3, r3
 8000240:	1d39      	adds	r1, r7, #4
 8000242:	4804      	ldr	r0, [pc, #16]	; (8000254 <__io_putchar+0x20>)
 8000244:	2201      	movs	r2, #1
 8000246:	f002 f9af 	bl	80025a8 <HAL_UART_Transmit>
  return ch;
 800024a:	687b      	ldr	r3, [r7, #4]
}
 800024c:	0018      	movs	r0, r3
 800024e:	46bd      	mov	sp, r7
 8000250:	b002      	add	sp, #8
 8000252:	bd80      	pop	{r7, pc}
 8000254:	20000120 	.word	0x20000120

08000258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  //Status from tasks (BaseType_t is the most efficient data type for the architecture;i.e.:32-bit for 32-bit architecture)
  BaseType_t task_Status;
  //Event of flags for LCD Arduino task
  xGroupFlagsLCDArduino = xEventGroupCreate();
 800025e:	f002 fdf5 	bl	8002e4c <xEventGroupCreate>
 8000262:	0002      	movs	r2, r0
 8000264:	4b34      	ldr	r3, [pc, #208]	; (8000338 <main+0xe0>)
 8000266:	601a      	str	r2, [r3, #0]
  if (xGroupFlagsLCDArduino == NULL){
 8000268:	4b33      	ldr	r3, [pc, #204]	; (8000338 <main+0xe0>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d103      	bne.n	8000278 <main+0x20>
	  printf("Not possible to create xFlagsLCDArduino event group \n");
 8000270:	4b32      	ldr	r3, [pc, #200]	; (800033c <main+0xe4>)
 8000272:	0018      	movs	r0, r3
 8000274:	f005 f9f4 	bl	8005660 <puts>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000278:	f000 fe18 	bl	8000eac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027c:	f000 f87c 	bl	8000378 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000280:	f000 f8fe 	bl	8000480 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000284:	f000 f8cc 	bl	8000420 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //I decide to set priorities higher than tskIDLE_PRIORITY.
  //FSM control highest prio as I want that OnOff/Emergency interrupts wakes the task
  task_Status = xTaskCreate(FSM_task_handler, "FSMcontrol", 200, NULL, tskIDLE_PRIORITY+2, &FSM_taskPointer);
 8000288:	492d      	ldr	r1, [pc, #180]	; (8000340 <main+0xe8>)
 800028a:	482e      	ldr	r0, [pc, #184]	; (8000344 <main+0xec>)
 800028c:	4b2e      	ldr	r3, [pc, #184]	; (8000348 <main+0xf0>)
 800028e:	9301      	str	r3, [sp, #4]
 8000290:	2302      	movs	r3, #2
 8000292:	9300      	str	r3, [sp, #0]
 8000294:	2300      	movs	r3, #0
 8000296:	22c8      	movs	r2, #200	; 0xc8
 8000298:	f003 fa89 	bl	80037ae <xTaskCreate>
 800029c:	0003      	movs	r3, r0
 800029e:	607b      	str	r3, [r7, #4]
  configASSERT(task_Status == pdPASS); //if false, then infinite loop. good for debugging
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	2b01      	cmp	r3, #1
 80002a4:	d001      	beq.n	80002aa <main+0x52>
 80002a6:	b672      	cpsid	i
 80002a8:	e7fe      	b.n	80002a8 <main+0x50>

  task_Status = xTaskCreate(Motor_Control_task_handler, "MotorControl", 200, NULL, tskIDLE_PRIORITY+1, &Motor_Control_taskPointer);
 80002aa:	4928      	ldr	r1, [pc, #160]	; (800034c <main+0xf4>)
 80002ac:	4828      	ldr	r0, [pc, #160]	; (8000350 <main+0xf8>)
 80002ae:	4b29      	ldr	r3, [pc, #164]	; (8000354 <main+0xfc>)
 80002b0:	9301      	str	r3, [sp, #4]
 80002b2:	2301      	movs	r3, #1
 80002b4:	9300      	str	r3, [sp, #0]
 80002b6:	2300      	movs	r3, #0
 80002b8:	22c8      	movs	r2, #200	; 0xc8
 80002ba:	f003 fa78 	bl	80037ae <xTaskCreate>
 80002be:	0003      	movs	r3, r0
 80002c0:	607b      	str	r3, [r7, #4]
  configASSERT(task_Status == pdPASS); //if false, then infinite loop. good for debugging
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	2b01      	cmp	r3, #1
 80002c6:	d001      	beq.n	80002cc <main+0x74>
 80002c8:	b672      	cpsid	i
 80002ca:	e7fe      	b.n	80002ca <main+0x72>

  //Create queue for reading temperature. if the queue is not created, do not create the task
  xQueue_Temperature = xQueueCreate(5, sizeof(uint16_t));
 80002cc:	2200      	movs	r2, #0
 80002ce:	2102      	movs	r1, #2
 80002d0:	2005      	movs	r0, #5
 80002d2:	f003 f821 	bl	8003318 <xQueueGenericCreate>
 80002d6:	0002      	movs	r2, r0
 80002d8:	4b1f      	ldr	r3, [pc, #124]	; (8000358 <main+0x100>)
 80002da:	601a      	str	r2, [r3, #0]
  if (xQueue_Temperature != NULL){
 80002dc:	4b1e      	ldr	r3, [pc, #120]	; (8000358 <main+0x100>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d010      	beq.n	8000306 <main+0xae>
	  task_Status = xTaskCreate(Read_Temperature_task_handler, "ReadTemperature", 200, NULL, tskIDLE_PRIORITY+1, &Read_Temperature_taskPointer);
 80002e4:	491d      	ldr	r1, [pc, #116]	; (800035c <main+0x104>)
 80002e6:	481e      	ldr	r0, [pc, #120]	; (8000360 <main+0x108>)
 80002e8:	4b1e      	ldr	r3, [pc, #120]	; (8000364 <main+0x10c>)
 80002ea:	9301      	str	r3, [sp, #4]
 80002ec:	2301      	movs	r3, #1
 80002ee:	9300      	str	r3, [sp, #0]
 80002f0:	2300      	movs	r3, #0
 80002f2:	22c8      	movs	r2, #200	; 0xc8
 80002f4:	f003 fa5b 	bl	80037ae <xTaskCreate>
 80002f8:	0003      	movs	r3, r0
 80002fa:	607b      	str	r3, [r7, #4]
	  configASSERT(task_Status == pdPASS); //if false, then infinite loop. good for debugging
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	2b01      	cmp	r3, #1
 8000300:	d005      	beq.n	800030e <main+0xb6>
 8000302:	b672      	cpsid	i
 8000304:	e7fe      	b.n	8000304 <main+0xac>
  }
  else{
	  printf("xQueue_Temperature failed to be created \n");
 8000306:	4b18      	ldr	r3, [pc, #96]	; (8000368 <main+0x110>)
 8000308:	0018      	movs	r0, r3
 800030a:	f005 f9a9 	bl	8005660 <puts>
  }

  task_Status = xTaskCreate(LCD_Arduino_task_handler, "LCDArduino", 200, NULL, tskIDLE_PRIORITY+1, &LCD_Arduino_taskPointer);
 800030e:	4917      	ldr	r1, [pc, #92]	; (800036c <main+0x114>)
 8000310:	4817      	ldr	r0, [pc, #92]	; (8000370 <main+0x118>)
 8000312:	4b18      	ldr	r3, [pc, #96]	; (8000374 <main+0x11c>)
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	9300      	str	r3, [sp, #0]
 800031a:	2300      	movs	r3, #0
 800031c:	22c8      	movs	r2, #200	; 0xc8
 800031e:	f003 fa46 	bl	80037ae <xTaskCreate>
 8000322:	0003      	movs	r3, r0
 8000324:	607b      	str	r3, [r7, #4]
  configASSERT(task_Status == pdPASS); //if false, then infinite loop. good for debugging
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	2b01      	cmp	r3, #1
 800032a:	d001      	beq.n	8000330 <main+0xd8>
 800032c:	b672      	cpsid	i
 800032e:	e7fe      	b.n	800032e <main+0xd6>

  //Start scheduler
  vTaskStartScheduler();
 8000330:	f003 fbc0 	bl	8003ab4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000334:	e7fe      	b.n	8000334 <main+0xdc>
 8000336:	46c0      	nop			; (mov r8, r8)
 8000338:	200001b8 	.word	0x200001b8
 800033c:	08006628 	.word	0x08006628
 8000340:	08006660 	.word	0x08006660
 8000344:	0800088d 	.word	0x0800088d
 8000348:	200001a8 	.word	0x200001a8
 800034c:	0800666c 	.word	0x0800666c
 8000350:	080009e1 	.word	0x080009e1
 8000354:	200001ac 	.word	0x200001ac
 8000358:	200001c0 	.word	0x200001c0
 800035c:	0800667c 	.word	0x0800667c
 8000360:	08000a1d 	.word	0x08000a1d
 8000364:	200001b0 	.word	0x200001b0
 8000368:	0800668c 	.word	0x0800668c
 800036c:	080066b8 	.word	0x080066b8
 8000370:	08000a81 	.word	0x08000a81
 8000374:	200001b4 	.word	0x200001b4

08000378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000378:	b590      	push	{r4, r7, lr}
 800037a:	b099      	sub	sp, #100	; 0x64
 800037c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800037e:	242c      	movs	r4, #44	; 0x2c
 8000380:	193b      	adds	r3, r7, r4
 8000382:	0018      	movs	r0, r3
 8000384:	2334      	movs	r3, #52	; 0x34
 8000386:	001a      	movs	r2, r3
 8000388:	2100      	movs	r1, #0
 800038a:	f005 f8d4 	bl	8005536 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800038e:	231c      	movs	r3, #28
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	0018      	movs	r0, r3
 8000394:	2310      	movs	r3, #16
 8000396:	001a      	movs	r2, r3
 8000398:	2100      	movs	r1, #0
 800039a:	f005 f8cc 	bl	8005536 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800039e:	003b      	movs	r3, r7
 80003a0:	0018      	movs	r0, r3
 80003a2:	231c      	movs	r3, #28
 80003a4:	001a      	movs	r2, r3
 80003a6:	2100      	movs	r1, #0
 80003a8:	f005 f8c5 	bl	8005536 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80003ac:	193b      	adds	r3, r7, r4
 80003ae:	2220      	movs	r2, #32
 80003b0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80003b2:	193b      	adds	r3, r7, r4
 80003b4:	2201      	movs	r2, #1
 80003b6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003b8:	193b      	adds	r3, r7, r4
 80003ba:	2200      	movs	r2, #0
 80003bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003be:	193b      	adds	r3, r7, r4
 80003c0:	0018      	movs	r0, r3
 80003c2:	f001 f803 	bl	80013cc <HAL_RCC_OscConfig>
 80003c6:	1e03      	subs	r3, r0, #0
 80003c8:	d001      	beq.n	80003ce <SystemClock_Config+0x56>
  {
    Error_Handler();
 80003ca:	f000 fbb9 	bl	8000b40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ce:	211c      	movs	r1, #28
 80003d0:	187b      	adds	r3, r7, r1
 80003d2:	2207      	movs	r2, #7
 80003d4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80003d6:	187b      	adds	r3, r7, r1
 80003d8:	2203      	movs	r2, #3
 80003da:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003dc:	187b      	adds	r3, r7, r1
 80003de:	2200      	movs	r2, #0
 80003e0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	2200      	movs	r2, #0
 80003e6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003e8:	187b      	adds	r3, r7, r1
 80003ea:	2101      	movs	r1, #1
 80003ec:	0018      	movs	r0, r3
 80003ee:	f001 fb73 	bl	8001ad8 <HAL_RCC_ClockConfig>
 80003f2:	1e03      	subs	r3, r0, #0
 80003f4:	d001      	beq.n	80003fa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003f6:	f000 fba3 	bl	8000b40 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80003fa:	003b      	movs	r3, r7
 80003fc:	2202      	movs	r2, #2
 80003fe:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000400:	003b      	movs	r3, r7
 8000402:	2200      	movs	r2, #0
 8000404:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000406:	003b      	movs	r3, r7
 8000408:	0018      	movs	r0, r3
 800040a:	f001 fd09 	bl	8001e20 <HAL_RCCEx_PeriphCLKConfig>
 800040e:	1e03      	subs	r3, r0, #0
 8000410:	d001      	beq.n	8000416 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000412:	f000 fb95 	bl	8000b40 <Error_Handler>
  }
}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	46bd      	mov	sp, r7
 800041a:	b019      	add	sp, #100	; 0x64
 800041c:	bd90      	pop	{r4, r7, pc}
	...

08000420 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000424:	4b14      	ldr	r3, [pc, #80]	; (8000478 <MX_USART2_UART_Init+0x58>)
 8000426:	4a15      	ldr	r2, [pc, #84]	; (800047c <MX_USART2_UART_Init+0x5c>)
 8000428:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800042a:	4b13      	ldr	r3, [pc, #76]	; (8000478 <MX_USART2_UART_Init+0x58>)
 800042c:	22e1      	movs	r2, #225	; 0xe1
 800042e:	0252      	lsls	r2, r2, #9
 8000430:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000432:	4b11      	ldr	r3, [pc, #68]	; (8000478 <MX_USART2_UART_Init+0x58>)
 8000434:	2200      	movs	r2, #0
 8000436:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000438:	4b0f      	ldr	r3, [pc, #60]	; (8000478 <MX_USART2_UART_Init+0x58>)
 800043a:	2200      	movs	r2, #0
 800043c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800043e:	4b0e      	ldr	r3, [pc, #56]	; (8000478 <MX_USART2_UART_Init+0x58>)
 8000440:	2200      	movs	r2, #0
 8000442:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000444:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <MX_USART2_UART_Init+0x58>)
 8000446:	220c      	movs	r2, #12
 8000448:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800044a:	4b0b      	ldr	r3, [pc, #44]	; (8000478 <MX_USART2_UART_Init+0x58>)
 800044c:	2200      	movs	r2, #0
 800044e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000450:	4b09      	ldr	r3, [pc, #36]	; (8000478 <MX_USART2_UART_Init+0x58>)
 8000452:	2200      	movs	r2, #0
 8000454:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000456:	4b08      	ldr	r3, [pc, #32]	; (8000478 <MX_USART2_UART_Init+0x58>)
 8000458:	2200      	movs	r2, #0
 800045a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <MX_USART2_UART_Init+0x58>)
 800045e:	2200      	movs	r2, #0
 8000460:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000462:	4b05      	ldr	r3, [pc, #20]	; (8000478 <MX_USART2_UART_Init+0x58>)
 8000464:	0018      	movs	r0, r3
 8000466:	f002 f84b 	bl	8002500 <HAL_UART_Init>
 800046a:	1e03      	subs	r3, r0, #0
 800046c:	d001      	beq.n	8000472 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800046e:	f000 fb67 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	20000120 	.word	0x20000120
 800047c:	40004400 	.word	0x40004400

08000480 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000480:	b590      	push	{r4, r7, lr}
 8000482:	b08b      	sub	sp, #44	; 0x2c
 8000484:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000486:	2414      	movs	r4, #20
 8000488:	193b      	adds	r3, r7, r4
 800048a:	0018      	movs	r0, r3
 800048c:	2314      	movs	r3, #20
 800048e:	001a      	movs	r2, r3
 8000490:	2100      	movs	r1, #0
 8000492:	f005 f850 	bl	8005536 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000496:	4b66      	ldr	r3, [pc, #408]	; (8000630 <MX_GPIO_Init+0x1b0>)
 8000498:	695a      	ldr	r2, [r3, #20]
 800049a:	4b65      	ldr	r3, [pc, #404]	; (8000630 <MX_GPIO_Init+0x1b0>)
 800049c:	2180      	movs	r1, #128	; 0x80
 800049e:	0309      	lsls	r1, r1, #12
 80004a0:	430a      	orrs	r2, r1
 80004a2:	615a      	str	r2, [r3, #20]
 80004a4:	4b62      	ldr	r3, [pc, #392]	; (8000630 <MX_GPIO_Init+0x1b0>)
 80004a6:	695a      	ldr	r2, [r3, #20]
 80004a8:	2380      	movs	r3, #128	; 0x80
 80004aa:	031b      	lsls	r3, r3, #12
 80004ac:	4013      	ands	r3, r2
 80004ae:	613b      	str	r3, [r7, #16]
 80004b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004b2:	4b5f      	ldr	r3, [pc, #380]	; (8000630 <MX_GPIO_Init+0x1b0>)
 80004b4:	695a      	ldr	r2, [r3, #20]
 80004b6:	4b5e      	ldr	r3, [pc, #376]	; (8000630 <MX_GPIO_Init+0x1b0>)
 80004b8:	2180      	movs	r1, #128	; 0x80
 80004ba:	03c9      	lsls	r1, r1, #15
 80004bc:	430a      	orrs	r2, r1
 80004be:	615a      	str	r2, [r3, #20]
 80004c0:	4b5b      	ldr	r3, [pc, #364]	; (8000630 <MX_GPIO_Init+0x1b0>)
 80004c2:	695a      	ldr	r2, [r3, #20]
 80004c4:	2380      	movs	r3, #128	; 0x80
 80004c6:	03db      	lsls	r3, r3, #15
 80004c8:	4013      	ands	r3, r2
 80004ca:	60fb      	str	r3, [r7, #12]
 80004cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ce:	4b58      	ldr	r3, [pc, #352]	; (8000630 <MX_GPIO_Init+0x1b0>)
 80004d0:	695a      	ldr	r2, [r3, #20]
 80004d2:	4b57      	ldr	r3, [pc, #348]	; (8000630 <MX_GPIO_Init+0x1b0>)
 80004d4:	2180      	movs	r1, #128	; 0x80
 80004d6:	0289      	lsls	r1, r1, #10
 80004d8:	430a      	orrs	r2, r1
 80004da:	615a      	str	r2, [r3, #20]
 80004dc:	4b54      	ldr	r3, [pc, #336]	; (8000630 <MX_GPIO_Init+0x1b0>)
 80004de:	695a      	ldr	r2, [r3, #20]
 80004e0:	2380      	movs	r3, #128	; 0x80
 80004e2:	029b      	lsls	r3, r3, #10
 80004e4:	4013      	ands	r3, r2
 80004e6:	60bb      	str	r3, [r7, #8]
 80004e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ea:	4b51      	ldr	r3, [pc, #324]	; (8000630 <MX_GPIO_Init+0x1b0>)
 80004ec:	695a      	ldr	r2, [r3, #20]
 80004ee:	4b50      	ldr	r3, [pc, #320]	; (8000630 <MX_GPIO_Init+0x1b0>)
 80004f0:	2180      	movs	r1, #128	; 0x80
 80004f2:	02c9      	lsls	r1, r1, #11
 80004f4:	430a      	orrs	r2, r1
 80004f6:	615a      	str	r2, [r3, #20]
 80004f8:	4b4d      	ldr	r3, [pc, #308]	; (8000630 <MX_GPIO_Init+0x1b0>)
 80004fa:	695a      	ldr	r2, [r3, #20]
 80004fc:	2380      	movs	r3, #128	; 0x80
 80004fe:	02db      	lsls	r3, r3, #11
 8000500:	4013      	ands	r3, r2
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Green_Pin|LED_Blue_Pin|LED_Red_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8000506:	494b      	ldr	r1, [pc, #300]	; (8000634 <MX_GPIO_Init+0x1b4>)
 8000508:	2390      	movs	r3, #144	; 0x90
 800050a:	05db      	lsls	r3, r3, #23
 800050c:	2200      	movs	r2, #0
 800050e:	0018      	movs	r0, r3
 8000510:	f000 ff22 	bl	8001358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000514:	193b      	adds	r3, r7, r4
 8000516:	2280      	movs	r2, #128	; 0x80
 8000518:	0192      	lsls	r2, r2, #6
 800051a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800051c:	193b      	adds	r3, r7, r4
 800051e:	2284      	movs	r2, #132	; 0x84
 8000520:	0392      	lsls	r2, r2, #14
 8000522:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000524:	193b      	adds	r3, r7, r4
 8000526:	2200      	movs	r2, #0
 8000528:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800052a:	193b      	adds	r3, r7, r4
 800052c:	4a42      	ldr	r2, [pc, #264]	; (8000638 <MX_GPIO_Init+0x1b8>)
 800052e:	0019      	movs	r1, r3
 8000530:	0010      	movs	r0, r2
 8000532:	f000 fd99 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Green_Pin LED_Blue_Pin LED_Red_Pin PA10 */
  GPIO_InitStruct.Pin = LED_Green_Pin|LED_Blue_Pin|LED_Red_Pin|GPIO_PIN_10;
 8000536:	193b      	adds	r3, r7, r4
 8000538:	4a3e      	ldr	r2, [pc, #248]	; (8000634 <MX_GPIO_Init+0x1b4>)
 800053a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053c:	193b      	adds	r3, r7, r4
 800053e:	2201      	movs	r2, #1
 8000540:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000542:	193b      	adds	r3, r7, r4
 8000544:	2200      	movs	r2, #0
 8000546:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000548:	193b      	adds	r3, r7, r4
 800054a:	2200      	movs	r2, #0
 800054c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054e:	193a      	adds	r2, r7, r4
 8000550:	2390      	movs	r3, #144	; 0x90
 8000552:	05db      	lsls	r3, r3, #23
 8000554:	0011      	movs	r1, r2
 8000556:	0018      	movs	r0, r3
 8000558:	f000 fd86 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800055c:	193b      	adds	r3, r7, r4
 800055e:	2210      	movs	r2, #16
 8000560:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000562:	193b      	adds	r3, r7, r4
 8000564:	2202      	movs	r2, #2
 8000566:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000568:	193b      	adds	r3, r7, r4
 800056a:	2200      	movs	r2, #0
 800056c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800056e:	193b      	adds	r3, r7, r4
 8000570:	2203      	movs	r2, #3
 8000572:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000574:	193b      	adds	r3, r7, r4
 8000576:	2200      	movs	r2, #0
 8000578:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800057a:	193a      	adds	r2, r7, r4
 800057c:	2390      	movs	r3, #144	; 0x90
 800057e:	05db      	lsls	r3, r3, #23
 8000580:	0011      	movs	r1, r2
 8000582:	0018      	movs	r0, r3
 8000584:	f000 fd70 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000588:	193b      	adds	r3, r7, r4
 800058a:	22e0      	movs	r2, #224	; 0xe0
 800058c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800058e:	193b      	adds	r3, r7, r4
 8000590:	2202      	movs	r2, #2
 8000592:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000594:	193b      	adds	r3, r7, r4
 8000596:	2201      	movs	r2, #1
 8000598:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800059a:	193b      	adds	r3, r7, r4
 800059c:	2203      	movs	r2, #3
 800059e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80005a0:	193b      	adds	r3, r7, r4
 80005a2:	2200      	movs	r2, #0
 80005a4:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a6:	193a      	adds	r2, r7, r4
 80005a8:	2390      	movs	r3, #144	; 0x90
 80005aa:	05db      	lsls	r3, r3, #23
 80005ac:	0011      	movs	r1, r2
 80005ae:	0018      	movs	r0, r3
 80005b0:	f000 fd5a 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pins : ButtonOnOff_Pin EmergencyStopButton_Pin */
  GPIO_InitStruct.Pin = ButtonOnOff_Pin|EmergencyStopButton_Pin;
 80005b4:	0021      	movs	r1, r4
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	2228      	movs	r2, #40	; 0x28
 80005ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005bc:	187b      	adds	r3, r7, r1
 80005be:	2288      	movs	r2, #136	; 0x88
 80005c0:	0352      	lsls	r2, r2, #13
 80005c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	2201      	movs	r2, #1
 80005c8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ca:	000c      	movs	r4, r1
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	4a1b      	ldr	r2, [pc, #108]	; (800063c <MX_GPIO_Init+0x1bc>)
 80005d0:	0019      	movs	r1, r3
 80005d2:	0010      	movs	r0, r2
 80005d4:	f000 fd48 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80005d8:	0021      	movs	r1, r4
 80005da:	187b      	adds	r3, r7, r1
 80005dc:	2290      	movs	r2, #144	; 0x90
 80005de:	0092      	lsls	r2, r2, #2
 80005e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2212      	movs	r2, #18
 80005e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2201      	movs	r2, #1
 80005ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2203      	movs	r2, #3
 80005f2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	2201      	movs	r2, #1
 80005f8:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005fa:	187b      	adds	r3, r7, r1
 80005fc:	4a0f      	ldr	r2, [pc, #60]	; (800063c <MX_GPIO_Init+0x1bc>)
 80005fe:	0019      	movs	r1, r3
 8000600:	0010      	movs	r0, r2
 8000602:	f000 fd31 	bl	8001068 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000606:	2200      	movs	r2, #0
 8000608:	2100      	movs	r1, #0
 800060a:	2006      	movs	r0, #6
 800060c:	f000 fd06 	bl	800101c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000610:	2006      	movs	r0, #6
 8000612:	f000 fd18 	bl	8001046 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000616:	2200      	movs	r2, #0
 8000618:	2100      	movs	r1, #0
 800061a:	2007      	movs	r0, #7
 800061c:	f000 fcfe 	bl	800101c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000620:	2007      	movs	r0, #7
 8000622:	f000 fd10 	bl	8001046 <HAL_NVIC_EnableIRQ>

}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	46bd      	mov	sp, r7
 800062a:	b00b      	add	sp, #44	; 0x2c
 800062c:	bd90      	pop	{r4, r7, pc}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	40021000 	.word	0x40021000
 8000634:	00000603 	.word	0x00000603
 8000638:	48000800 	.word	0x48000800
 800063c:	48000400 	.word	0x48000400

08000640 <onEntry_Off>:

/* USER CODE BEGIN 4 */
// Related to states: onEntry, during, onExit
void onEntry_Off(){
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	//turn on blue LED, turn off the rest
	HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_SET);
 8000644:	2390      	movs	r3, #144	; 0x90
 8000646:	05db      	lsls	r3, r3, #23
 8000648:	2201      	movs	r2, #1
 800064a:	2102      	movs	r1, #2
 800064c:	0018      	movs	r0, r3
 800064e:	f000 fe83 	bl	8001358 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_RESET);
 8000652:	2380      	movs	r3, #128	; 0x80
 8000654:	0099      	lsls	r1, r3, #2
 8000656:	2390      	movs	r3, #144	; 0x90
 8000658:	05db      	lsls	r3, r3, #23
 800065a:	2200      	movs	r2, #0
 800065c:	0018      	movs	r0, r3
 800065e:	f000 fe7b 	bl	8001358 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_RESET);
 8000662:	2390      	movs	r3, #144	; 0x90
 8000664:	05db      	lsls	r3, r3, #23
 8000666:	2200      	movs	r2, #0
 8000668:	2101      	movs	r1, #1
 800066a:	0018      	movs	r0, r3
 800066c:	f000 fe74 	bl	8001358 <HAL_GPIO_WritePin>
}
 8000670:	46c0      	nop			; (mov r8, r8)
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}

08000676 <during_Off>:
void during_Off(){}
 8000676:	b580      	push	{r7, lr}
 8000678:	af00      	add	r7, sp, #0
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <onExit_Off>:
void onExit_Off(){}
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
 8000684:	46c0      	nop			; (mov r8, r8)
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}

0800068a <onEntry_On>:
void onEntry_On(){
 800068a:	b580      	push	{r7, lr}
 800068c:	af00      	add	r7, sp, #0
	//turn on green LED, turn off the rest
	HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_SET);
 800068e:	2390      	movs	r3, #144	; 0x90
 8000690:	05db      	lsls	r3, r3, #23
 8000692:	2201      	movs	r2, #1
 8000694:	2101      	movs	r1, #1
 8000696:	0018      	movs	r0, r3
 8000698:	f000 fe5e 	bl	8001358 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_RESET);
 800069c:	2380      	movs	r3, #128	; 0x80
 800069e:	0099      	lsls	r1, r3, #2
 80006a0:	2390      	movs	r3, #144	; 0x90
 80006a2:	05db      	lsls	r3, r3, #23
 80006a4:	2200      	movs	r2, #0
 80006a6:	0018      	movs	r0, r3
 80006a8:	f000 fe56 	bl	8001358 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 80006ac:	2390      	movs	r3, #144	; 0x90
 80006ae:	05db      	lsls	r3, r3, #23
 80006b0:	2200      	movs	r2, #0
 80006b2:	2102      	movs	r1, #2
 80006b4:	0018      	movs	r0, r3
 80006b6:	f000 fe4f 	bl	8001358 <HAL_GPIO_WritePin>
}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <during_On>:
void during_On(){}
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	46c0      	nop			; (mov r8, r8)
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}

080006ca <onExit_On>:
void onExit_On(){}
 80006ca:	b580      	push	{r7, lr}
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <onEntry_Emergency>:
void onEntry_Emergency(){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	//turn on red LED, turn off the rest
	HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_SET);
 80006d8:	2380      	movs	r3, #128	; 0x80
 80006da:	0099      	lsls	r1, r3, #2
 80006dc:	2390      	movs	r3, #144	; 0x90
 80006de:	05db      	lsls	r3, r3, #23
 80006e0:	2201      	movs	r2, #1
 80006e2:	0018      	movs	r0, r3
 80006e4:	f000 fe38 	bl	8001358 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_RESET);
 80006e8:	2390      	movs	r3, #144	; 0x90
 80006ea:	05db      	lsls	r3, r3, #23
 80006ec:	2200      	movs	r2, #0
 80006ee:	2101      	movs	r1, #1
 80006f0:	0018      	movs	r0, r3
 80006f2:	f000 fe31 	bl	8001358 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 80006f6:	2390      	movs	r3, #144	; 0x90
 80006f8:	05db      	lsls	r3, r3, #23
 80006fa:	2200      	movs	r2, #0
 80006fc:	2102      	movs	r1, #2
 80006fe:	0018      	movs	r0, r3
 8000700:	f000 fe2a 	bl	8001358 <HAL_GPIO_WritePin>
}
 8000704:	46c0      	nop			; (mov r8, r8)
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}

0800070a <during_Emergency>:
void during_Emergency(){}
 800070a:	b580      	push	{r7, lr}
 800070c:	af00      	add	r7, sp, #0
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <onExit_Emergency>:
void onExit_Emergency(){}
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
 8000718:	46c0      	nop			; (mov r8, r8)
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <evaluate_Event_Off_to_On>:
// Evaluate events for transitions
uint8_t evaluate_Event_Off_to_On(){
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	if (uiFlagOnOff && !uiFlagEmergency){
 8000724:	4b08      	ldr	r3, [pc, #32]	; (8000748 <evaluate_Event_Off_to_On+0x28>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d008      	beq.n	800073e <evaluate_Event_Off_to_On+0x1e>
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <evaluate_Event_Off_to_On+0x2c>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d104      	bne.n	800073e <evaluate_Event_Off_to_On+0x1e>
		//clear flag
		uiFlagOnOff = FALSE;
 8000734:	4b04      	ldr	r3, [pc, #16]	; (8000748 <evaluate_Event_Off_to_On+0x28>)
 8000736:	2200      	movs	r2, #0
 8000738:	701a      	strb	r2, [r3, #0]
		return TRUE;
 800073a:	2301      	movs	r3, #1
 800073c:	e000      	b.n	8000740 <evaluate_Event_Off_to_On+0x20>
	}
	return FALSE;
 800073e:	2300      	movs	r3, #0
}
 8000740:	0018      	movs	r0, r3
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	200001a4 	.word	0x200001a4
 800074c:	200001a5 	.word	0x200001a5

08000750 <evaluate_Event_Off_to_Emergency>:
uint8_t evaluate_Event_Off_to_Emergency(){
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	if (uiFlagEmergency){
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <evaluate_Event_Off_to_Emergency+0x20>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d004      	beq.n	8000766 <evaluate_Event_Off_to_Emergency+0x16>
		//clear flag
		uiFlagEmergency = FALSE;
 800075c:	4b04      	ldr	r3, [pc, #16]	; (8000770 <evaluate_Event_Off_to_Emergency+0x20>)
 800075e:	2200      	movs	r2, #0
 8000760:	701a      	strb	r2, [r3, #0]
		return TRUE;
 8000762:	2301      	movs	r3, #1
 8000764:	e000      	b.n	8000768 <evaluate_Event_Off_to_Emergency+0x18>
	}
	return FALSE;
 8000766:	2300      	movs	r3, #0
}
 8000768:	0018      	movs	r0, r3
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	200001a5 	.word	0x200001a5

08000774 <evaluate_Event_Off_Off>:
uint8_t evaluate_Event_Off_Off(){
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
	if (!uiFlagOnOff && !uiFlagEmergency){//no change
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <evaluate_Event_Off_Off+0x20>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d105      	bne.n	800078c <evaluate_Event_Off_Off+0x18>
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <evaluate_Event_Off_Off+0x24>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d101      	bne.n	800078c <evaluate_Event_Off_Off+0x18>
		return TRUE;
 8000788:	2301      	movs	r3, #1
 800078a:	e000      	b.n	800078e <evaluate_Event_Off_Off+0x1a>
	}
	return FALSE;
 800078c:	2300      	movs	r3, #0
}
 800078e:	0018      	movs	r0, r3
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200001a4 	.word	0x200001a4
 8000798:	200001a5 	.word	0x200001a5

0800079c <evaluate_Event_On_to_Off>:
uint8_t evaluate_Event_On_to_Off(){
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	if (uiFlagOnOff && !uiFlagEmergency){
 80007a0:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <evaluate_Event_On_to_Off+0x28>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d008      	beq.n	80007ba <evaluate_Event_On_to_Off+0x1e>
 80007a8:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <evaluate_Event_On_to_Off+0x2c>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d104      	bne.n	80007ba <evaluate_Event_On_to_Off+0x1e>
		//clear flag
		uiFlagOnOff = FALSE;
 80007b0:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <evaluate_Event_On_to_Off+0x28>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	701a      	strb	r2, [r3, #0]
		return TRUE;
 80007b6:	2301      	movs	r3, #1
 80007b8:	e000      	b.n	80007bc <evaluate_Event_On_to_Off+0x20>
	}
	return FALSE;
 80007ba:	2300      	movs	r3, #0
}
 80007bc:	0018      	movs	r0, r3
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	200001a4 	.word	0x200001a4
 80007c8:	200001a5 	.word	0x200001a5

080007cc <evaluate_Event_On_to_Emergency>:
uint8_t evaluate_Event_On_to_Emergency(){
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	if (uiFlagEmergency){
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <evaluate_Event_On_to_Emergency+0x20>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d004      	beq.n	80007e2 <evaluate_Event_On_to_Emergency+0x16>
		//clear flag
		uiFlagEmergency = FALSE;
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <evaluate_Event_On_to_Emergency+0x20>)
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]
		return TRUE;
 80007de:	2301      	movs	r3, #1
 80007e0:	e000      	b.n	80007e4 <evaluate_Event_On_to_Emergency+0x18>
	}
	return FALSE;
 80007e2:	2300      	movs	r3, #0
}
 80007e4:	0018      	movs	r0, r3
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	200001a5 	.word	0x200001a5

080007f0 <evaluate_Event_On_On>:
uint8_t evaluate_Event_On_On(){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	if (!uiFlagOnOff && !uiFlagEmergency){ //no change
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <evaluate_Event_On_On+0x20>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d105      	bne.n	8000808 <evaluate_Event_On_On+0x18>
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <evaluate_Event_On_On+0x24>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d101      	bne.n	8000808 <evaluate_Event_On_On+0x18>
		return TRUE;
 8000804:	2301      	movs	r3, #1
 8000806:	e000      	b.n	800080a <evaluate_Event_On_On+0x1a>
	}
	return FALSE;
 8000808:	2300      	movs	r3, #0
}
 800080a:	0018      	movs	r0, r3
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	200001a4 	.word	0x200001a4
 8000814:	200001a5 	.word	0x200001a5

08000818 <evaluate_Event_Emergency_to_Off>:
uint8_t evaluate_Event_Emergency_to_Off(){
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	//to undo emergency state,emergency button has to be pressed again. system can switch off in the middle of an emergency state
	if (uiFlagEmergency && uiFlagOnOff){
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <evaluate_Event_Emergency_to_Off+0x2c>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d00b      	beq.n	800083c <evaluate_Event_Emergency_to_Off+0x24>
 8000824:	4b08      	ldr	r3, [pc, #32]	; (8000848 <evaluate_Event_Emergency_to_Off+0x30>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d007      	beq.n	800083c <evaluate_Event_Emergency_to_Off+0x24>
		//clear flags
		uiFlagEmergency = FALSE;
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <evaluate_Event_Emergency_to_Off+0x2c>)
 800082e:	2200      	movs	r2, #0
 8000830:	701a      	strb	r2, [r3, #0]
		uiFlagOnOff = FALSE;
 8000832:	4b05      	ldr	r3, [pc, #20]	; (8000848 <evaluate_Event_Emergency_to_Off+0x30>)
 8000834:	2200      	movs	r2, #0
 8000836:	701a      	strb	r2, [r3, #0]
		return TRUE;
 8000838:	2301      	movs	r3, #1
 800083a:	e000      	b.n	800083e <evaluate_Event_Emergency_to_Off+0x26>
	}
	return FALSE;
 800083c:	2300      	movs	r3, #0
}
 800083e:	0018      	movs	r0, r3
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	200001a5 	.word	0x200001a5
 8000848:	200001a4 	.word	0x200001a4

0800084c <evaluate_Event_Emergency_to_On>:
uint8_t evaluate_Event_Emergency_to_On(){
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
	//to undo emergency state,emergency button has to be pressed again.
	if (uiFlagEmergency){
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <evaluate_Event_Emergency_to_On+0x20>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d004      	beq.n	8000862 <evaluate_Event_Emergency_to_On+0x16>
		//clear flag
		uiFlagEmergency = FALSE;
 8000858:	4b04      	ldr	r3, [pc, #16]	; (800086c <evaluate_Event_Emergency_to_On+0x20>)
 800085a:	2200      	movs	r2, #0
 800085c:	701a      	strb	r2, [r3, #0]
		return TRUE;
 800085e:	2301      	movs	r3, #1
 8000860:	e000      	b.n	8000864 <evaluate_Event_Emergency_to_On+0x18>
	}
	return FALSE;
 8000862:	2300      	movs	r3, #0
}
 8000864:	0018      	movs	r0, r3
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	200001a5 	.word	0x200001a5

08000870 <evaluate_Event_Emergency_Emergency>:
uint8_t evaluate_Event_Emergency_Emergency(){
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
	if (!uiFlagEmergency){ //no change
 8000874:	4b04      	ldr	r3, [pc, #16]	; (8000888 <evaluate_Event_Emergency_Emergency+0x18>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d101      	bne.n	8000880 <evaluate_Event_Emergency_Emergency+0x10>
		return TRUE;
 800087c:	2301      	movs	r3, #1
 800087e:	e000      	b.n	8000882 <evaluate_Event_Emergency_Emergency+0x12>
	}
	return FALSE;
 8000880:	2300      	movs	r3, #0
}
 8000882:	0018      	movs	r0, r3
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	200001a5 	.word	0x200001a5

0800088c <FSM_task_handler>:
/** Task handlers **/
static void FSM_task_handler (void *parameters){
 800088c:	b590      	push	{r4, r7, lr}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	static MEF_State *pState; //initialization to NULL
	static MEF_Transition *pT;
	uint8_t uiTrans;
	for(;;){
		//waken up by a GPIO interrupt handler
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY); //uiFSM_notification = ... not necessary
 8000894:	2301      	movs	r3, #1
 8000896:	425b      	negs	r3, r3
 8000898:	001a      	movs	r2, r3
 800089a:	2101      	movs	r1, #1
 800089c:	2000      	movs	r0, #0
 800089e:	f003 ff13 	bl	80046c8 <ulTaskGenericNotifyTake>
		//Print
		printf("FSM\n");
 80008a2:	4b49      	ldr	r3, [pc, #292]	; (80009c8 <FSM_task_handler+0x13c>)
 80008a4:	0018      	movs	r0, r3
 80008a6:	f004 fedb 	bl	8005660 <puts>
		pState = MEF1.arrayStates;
 80008aa:	4b48      	ldr	r3, [pc, #288]	; (80009cc <FSM_task_handler+0x140>)
 80008ac:	685a      	ldr	r2, [r3, #4]
 80008ae:	4b48      	ldr	r3, [pc, #288]	; (80009d0 <FSM_task_handler+0x144>)
 80008b0:	601a      	str	r2, [r3, #0]
		pT = pState[MEF1.currentState].arrayTransitions;
 80008b2:	4b47      	ldr	r3, [pc, #284]	; (80009d0 <FSM_task_handler+0x144>)
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	4b45      	ldr	r3, [pc, #276]	; (80009cc <FSM_task_handler+0x140>)
 80008b8:	785b      	ldrb	r3, [r3, #1]
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	0019      	movs	r1, r3
 80008be:	000b      	movs	r3, r1
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	185b      	adds	r3, r3, r1
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	18d3      	adds	r3, r2, r3
 80008c8:	691a      	ldr	r2, [r3, #16]
 80008ca:	4b42      	ldr	r3, [pc, #264]	; (80009d4 <FSM_task_handler+0x148>)
 80008cc:	601a      	str	r2, [r3, #0]
		//evaluate the state by iterating over the number of transitions of the current state
		for (uiTrans = 0; uiTrans < pState[MEF1.currentState].numberTransitions; uiTrans++){
 80008ce:	230f      	movs	r3, #15
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	2200      	movs	r2, #0
 80008d4:	701a      	strb	r2, [r3, #0]
 80008d6:	e064      	b.n	80009a2 <FSM_task_handler+0x116>
			if (pT[uiTrans].Event() == TRUE){ //event true, transition activated
 80008d8:	4b3e      	ldr	r3, [pc, #248]	; (80009d4 <FSM_task_handler+0x148>)
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	240f      	movs	r4, #15
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	00db      	lsls	r3, r3, #3
 80008e4:	18d3      	adds	r3, r2, r3
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4798      	blx	r3
 80008ea:	0003      	movs	r3, r0
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d152      	bne.n	8000996 <FSM_task_handler+0x10a>
				// execute exit function of the state
				pState[MEF1.currentState].onExit();
 80008f0:	4b37      	ldr	r3, [pc, #220]	; (80009d0 <FSM_task_handler+0x144>)
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	4b35      	ldr	r3, [pc, #212]	; (80009cc <FSM_task_handler+0x140>)
 80008f6:	785b      	ldrb	r3, [r3, #1]
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	0019      	movs	r1, r3
 80008fc:	000b      	movs	r3, r1
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	185b      	adds	r3, r3, r1
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	18d3      	adds	r3, r2, r3
 8000906:	689b      	ldr	r3, [r3, #8]
 8000908:	4798      	blx	r3
				//assign next state, update the MEF and execute entry/do actions
				if (MEF1.currentState != pT[uiTrans].nextState) { //flag state changed
 800090a:	4b30      	ldr	r3, [pc, #192]	; (80009cc <FSM_task_handler+0x140>)
 800090c:	785b      	ldrb	r3, [r3, #1]
 800090e:	b2da      	uxtb	r2, r3
 8000910:	4b30      	ldr	r3, [pc, #192]	; (80009d4 <FSM_task_handler+0x148>)
 8000912:	6819      	ldr	r1, [r3, #0]
 8000914:	193b      	adds	r3, r7, r4
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	00db      	lsls	r3, r3, #3
 800091a:	18cb      	adds	r3, r1, r3
 800091c:	791b      	ldrb	r3, [r3, #4]
 800091e:	429a      	cmp	r2, r3
 8000920:	d019      	beq.n	8000956 <FSM_task_handler+0xca>
					MEF1.flagStateChange = STATE_CHANGED;
 8000922:	4b2a      	ldr	r3, [pc, #168]	; (80009cc <FSM_task_handler+0x140>)
 8000924:	2201      	movs	r2, #1
 8000926:	70da      	strb	r2, [r3, #3]
					MEF1.currentState = pT[uiTrans].nextState;
 8000928:	4b2a      	ldr	r3, [pc, #168]	; (80009d4 <FSM_task_handler+0x148>)
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	193b      	adds	r3, r7, r4
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	00db      	lsls	r3, r3, #3
 8000932:	18d3      	adds	r3, r2, r3
 8000934:	791a      	ldrb	r2, [r3, #4]
 8000936:	4b25      	ldr	r3, [pc, #148]	; (80009cc <FSM_task_handler+0x140>)
 8000938:	705a      	strb	r2, [r3, #1]
					//entry action of new state
					MEF1.arrayStates[MEF1.currentState].onEntry();
 800093a:	4b24      	ldr	r3, [pc, #144]	; (80009cc <FSM_task_handler+0x140>)
 800093c:	685a      	ldr	r2, [r3, #4]
 800093e:	4b23      	ldr	r3, [pc, #140]	; (80009cc <FSM_task_handler+0x140>)
 8000940:	785b      	ldrb	r3, [r3, #1]
 8000942:	b2db      	uxtb	r3, r3
 8000944:	0019      	movs	r1, r3
 8000946:	000b      	movs	r3, r1
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	185b      	adds	r3, r3, r1
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	18d3      	adds	r3, r2, r3
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4798      	blx	r3
 8000954:	e00f      	b.n	8000976 <FSM_task_handler+0xea>
				}
				else{
					MEF1.flagStateChange = STATE_NOT_CHANGED;
 8000956:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <FSM_task_handler+0x140>)
 8000958:	2200      	movs	r2, #0
 800095a:	70da      	strb	r2, [r3, #3]
					//do action
					MEF1.arrayStates[MEF1.currentState].During();
 800095c:	4b1b      	ldr	r3, [pc, #108]	; (80009cc <FSM_task_handler+0x140>)
 800095e:	685a      	ldr	r2, [r3, #4]
 8000960:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <FSM_task_handler+0x140>)
 8000962:	785b      	ldrb	r3, [r3, #1]
 8000964:	b2db      	uxtb	r3, r3
 8000966:	0019      	movs	r1, r3
 8000968:	000b      	movs	r3, r1
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	185b      	adds	r3, r3, r1
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	18d3      	adds	r3, r2, r3
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	4798      	blx	r3
				}
				//connection with LCD_Arduino task
				uxBitsFlagsLCDArduino = xEventGroupSetBits(xGroupFlagsLCDArduino, (MEF1.flagStateChange)&FLAG_STATUS_CHANGED);
 8000976:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <FSM_task_handler+0x14c>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	4b14      	ldr	r3, [pc, #80]	; (80009cc <FSM_task_handler+0x140>)
 800097c:	78db      	ldrb	r3, [r3, #3]
 800097e:	b2db      	uxtb	r3, r3
 8000980:	0019      	movs	r1, r3
 8000982:	2301      	movs	r3, #1
 8000984:	400b      	ands	r3, r1
 8000986:	0019      	movs	r1, r3
 8000988:	0010      	movs	r0, r2
 800098a:	f002 fb1d 	bl	8002fc8 <xEventGroupSetBits>
 800098e:	0002      	movs	r2, r0
 8000990:	4b12      	ldr	r3, [pc, #72]	; (80009dc <FSM_task_handler+0x150>)
 8000992:	601a      	str	r2, [r3, #0]
				//exit the loop
				break;
 8000994:	e016      	b.n	80009c4 <FSM_task_handler+0x138>
		for (uiTrans = 0; uiTrans < pState[MEF1.currentState].numberTransitions; uiTrans++){
 8000996:	210f      	movs	r1, #15
 8000998:	187b      	adds	r3, r7, r1
 800099a:	781a      	ldrb	r2, [r3, #0]
 800099c:	187b      	adds	r3, r7, r1
 800099e:	3201      	adds	r2, #1
 80009a0:	701a      	strb	r2, [r3, #0]
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <FSM_task_handler+0x144>)
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <FSM_task_handler+0x140>)
 80009a8:	785b      	ldrb	r3, [r3, #1]
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	0019      	movs	r1, r3
 80009ae:	000b      	movs	r3, r1
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	185b      	adds	r3, r3, r1
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	18d3      	adds	r3, r2, r3
 80009b8:	7b1b      	ldrb	r3, [r3, #12]
 80009ba:	220f      	movs	r2, #15
 80009bc:	18ba      	adds	r2, r7, r2
 80009be:	7812      	ldrb	r2, [r2, #0]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d389      	bcc.n	80008d8 <FSM_task_handler+0x4c>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY); //uiFSM_notification = ... not necessary
 80009c4:	e766      	b.n	8000894 <FSM_task_handler+0x8>
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	080066c4 	.word	0x080066c4
 80009cc:	20000084 	.word	0x20000084
 80009d0:	200001c8 	.word	0x200001c8
 80009d4:	200001cc 	.word	0x200001cc
 80009d8:	200001b8 	.word	0x200001b8
 80009dc:	200001bc 	.word	0x200001bc

080009e0 <Motor_Control_task_handler>:
		}

	}
}

static void Motor_Control_task_handler (void *parameters){
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]

	for(;;){
		//Print
		//printf("Motor\n");
		//if state is off/emergency, speed target is 0. If on, it depends on the distance to the station
		switch(MEF1.currentState) {
 80009e8:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <Motor_Control_task_handler+0x34>)
 80009ea:	785b      	ldrb	r3, [r3, #1]
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	2b02      	cmp	r3, #2
 80009f0:	d009      	beq.n	8000a06 <Motor_Control_task_handler+0x26>
 80009f2:	dc03      	bgt.n	80009fc <Motor_Control_task_handler+0x1c>
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d008      	beq.n	8000a0a <Motor_Control_task_handler+0x2a>
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d008      	beq.n	8000a0e <Motor_Control_task_handler+0x2e>
			//Print
			//printf(" EMER\n");
			break;
		default:
			//Print
			printf("Motor error\n");
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <Motor_Control_task_handler+0x38>)
 80009fe:	0018      	movs	r0, r3
 8000a00:	f004 fe2e 	bl	8005660 <puts>
			break;
 8000a04:	e004      	b.n	8000a10 <Motor_Control_task_handler+0x30>
			break;
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	e7ee      	b.n	80009e8 <Motor_Control_task_handler+0x8>
			break;
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	e7ec      	b.n	80009e8 <Motor_Control_task_handler+0x8>
			break;
 8000a0e:	46c0      	nop			; (mov r8, r8)
		switch(MEF1.currentState) {
 8000a10:	e7ea      	b.n	80009e8 <Motor_Control_task_handler+0x8>
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	20000084 	.word	0x20000084
 8000a18:	080066c8 	.word	0x080066c8

08000a1c <Read_Temperature_task_handler>:
		}
	}
}

static void Read_Temperature_task_handler (void *parameters){
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
	//periodic function. Block for 5000 ms. */
	const TickType_t xReadTemp_Delay = 5000 / portTICK_PERIOD_MS;
 8000a24:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <Read_Temperature_task_handler+0x4c>)
 8000a26:	60fb      	str	r3, [r7, #12]

	for(;;){
		//Print
		printf("Temperature\n");
 8000a28:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <Read_Temperature_task_handler+0x50>)
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f004 fe18 	bl	8005660 <puts>
		if( xQueueReceive( xQueue_Temperature, (void *)&uiBuffer_QueueTemperature, (TickType_t) 10 ) == pdPASS ) //Block for 10 ticks if a message is not immediately available
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <Read_Temperature_task_handler+0x54>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	490f      	ldr	r1, [pc, #60]	; (8000a74 <Read_Temperature_task_handler+0x58>)
 8000a36:	220a      	movs	r2, #10
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f002 fcf2 	bl	8003422 <xQueueReceive>
 8000a3e:	0003      	movs	r3, r0
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d108      	bne.n	8000a56 <Read_Temperature_task_handler+0x3a>
		  {
			 //uiBuffer_QueueTemperature now contains a copy of xQueue_Temperature
			printf(":%d\n", uiBuffer_QueueTemperature);
 8000a44:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <Read_Temperature_task_handler+0x58>)
 8000a46:	881b      	ldrh	r3, [r3, #0]
 8000a48:	001a      	movs	r2, r3
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <Read_Temperature_task_handler+0x5c>)
 8000a4c:	0011      	movs	r1, r2
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f004 fd7a 	bl	8005548 <iprintf>
 8000a54:	e003      	b.n	8000a5e <Read_Temperature_task_handler+0x42>
		  }
		else{
			printf("Empty queue\n");
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <Read_Temperature_task_handler+0x60>)
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f004 fe01 	bl	8005660 <puts>
		}
		//Block the task for a period of ticks
		vTaskDelay(xReadTemp_Delay);
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	0018      	movs	r0, r3
 8000a62:	f003 f801 	bl	8003a68 <vTaskDelay>
		printf("Temperature\n");
 8000a66:	e7df      	b.n	8000a28 <Read_Temperature_task_handler+0xc>
 8000a68:	00001388 	.word	0x00001388
 8000a6c:	080066d4 	.word	0x080066d4
 8000a70:	200001c0 	.word	0x200001c0
 8000a74:	200001c4 	.word	0x200001c4
 8000a78:	080066e0 	.word	0x080066e0
 8000a7c:	080066e8 	.word	0x080066e8

08000a80 <LCD_Arduino_task_handler>:

	}
}

static void LCD_Arduino_task_handler (void *parameters){
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af02      	add	r7, sp, #8
 8000a86:	6078      	str	r0, [r7, #4]
	//Task blocked until a flag of the event group is active
	//I want to wait forever,leaving blocked state only when unblock condition happens.const TickType_t xTicksToWait_LCDArduino = 1/portTICK_PERIOD_MS; //1 ms

	for(;;){
		//Print
		printf("LCD\n");
 8000a88:	4b08      	ldr	r3, [pc, #32]	; (8000aac <LCD_Arduino_task_handler+0x2c>)
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f004 fde8 	bl	8005660 <puts>
		//wait for any flag active ( xWaitForAllBits=FALSE).Clear the active flags ( xClearOnExit=pdTRUE)
		//uxBitsFlagsLCDArduino = xEventGroupWaitBits(xGroupFlagsLCDArduino, FLAG_SPEED_CHANGED|FLAG_STATION_CHANGED|FLAG_STATUS_CHANGED, pdTRUE, pdFALSE, xTicksToWait_LCDArduino);
		uxBitsFlagsLCDArduino = xEventGroupWaitBits(xGroupFlagsLCDArduino, FLAG_SPEED_CHANGED|FLAG_STATION_CHANGED|FLAG_STATUS_CHANGED, pdTRUE, pdFALSE, portMAX_DELAY);
 8000a90:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <LCD_Arduino_task_handler+0x30>)
 8000a92:	6818      	ldr	r0, [r3, #0]
 8000a94:	2301      	movs	r3, #1
 8000a96:	425b      	negs	r3, r3
 8000a98:	9300      	str	r3, [sp, #0]
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	2107      	movs	r1, #7
 8000aa0:	f002 f9ec 	bl	8002e7c <xEventGroupWaitBits>
 8000aa4:	0002      	movs	r2, r0
 8000aa6:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <LCD_Arduino_task_handler+0x34>)
 8000aa8:	601a      	str	r2, [r3, #0]
		printf("LCD\n");
 8000aaa:	e7ed      	b.n	8000a88 <LCD_Arduino_task_handler+0x8>
 8000aac:	080066f4 	.word	0x080066f4
 8000ab0:	200001b8 	.word	0x200001b8
 8000ab4:	200001bc 	.word	0x200001bc

08000ab8 <HAL_GPIO_EXTI_Callback>:
		//disable SPI
	}
}

//EXTI interrupt handler (OnOff button or emergency stop
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	0002      	movs	r2, r0
 8000ac0:	1dbb      	adds	r3, r7, #6
 8000ac2:	801a      	strh	r2, [r3, #0]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60fb      	str	r3, [r7, #12]
	//from OnOff button
	if (GPIO_Pin == ButtonOnOff_Pin){
 8000ac8:	1dbb      	adds	r3, r7, #6
 8000aca:	881b      	ldrh	r3, [r3, #0]
 8000acc:	2b08      	cmp	r3, #8
 8000ace:	d102      	bne.n	8000ad6 <HAL_GPIO_EXTI_Callback+0x1e>
		//set/reset flag
		uiFlagOnOff = TRUE;
 8000ad0:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <HAL_GPIO_EXTI_Callback+0x54>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	701a      	strb	r2, [r3, #0]
		//notify task FSM

	}
	//from emergency stop
	if (GPIO_Pin == EmergencyStopButton_Pin){
 8000ad6:	1dbb      	adds	r3, r7, #6
 8000ad8:	881b      	ldrh	r3, [r3, #0]
 8000ada:	2b20      	cmp	r3, #32
 8000adc:	d102      	bne.n	8000ae4 <HAL_GPIO_EXTI_Callback+0x2c>
		//set/reset flag
		uiFlagEmergency = TRUE;
 8000ade:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <HAL_GPIO_EXTI_Callback+0x58>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	701a      	strb	r2, [r3, #0]
		//notify task FSM

	}
	// Notify the thread so it will wake up when the ISR is complete
	vTaskNotifyGiveFromISR(FSM_taskPointer, &xHigherPriorityTaskWoken);
 8000ae4:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	220c      	movs	r2, #12
 8000aea:	18ba      	adds	r2, r7, r2
 8000aec:	2100      	movs	r1, #0
 8000aee:	0018      	movs	r0, r3
 8000af0:	f003 fe4c 	bl	800478c <vTaskGenericNotifyGiveFromISR>
	/*Force a context switch if xHigherPriorityTaskWoken is now set to pdTRUE. If vTaskNotifyGiveFromISR indicates that a higher priority task is being woken,
	 *portYIELD_FROM_ISR() routine will context switch to that task after returning from the ISR.Failure to use this function will result
	 *in execution resuming at previous point rather than switching to new context*/
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d003      	beq.n	8000b02 <HAL_GPIO_EXTI_Callback+0x4a>
 8000afa:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <HAL_GPIO_EXTI_Callback+0x60>)
 8000afc:	2280      	movs	r2, #128	; 0x80
 8000afe:	0552      	lsls	r2, r2, #21
 8000b00:	601a      	str	r2, [r3, #0]
}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	46bd      	mov	sp, r7
 8000b06:	b004      	add	sp, #16
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	200001a4 	.word	0x200001a4
 8000b10:	200001a5 	.word	0x200001a5
 8000b14:	200001a8 	.word	0x200001a8
 8000b18:	e000ed04 	.word	0xe000ed04

08000b1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a04      	ldr	r2, [pc, #16]	; (8000b3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d101      	bne.n	8000b32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b2e:	f000 f9d1 	bl	8000ed4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b002      	add	sp, #8
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	40001000 	.word	0x40001000

08000b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b44:	b672      	cpsid	i
}
 8000b46:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <Error_Handler+0x8>
	...

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x44>)
 8000b54:	699a      	ldr	r2, [r3, #24]
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <HAL_MspInit+0x44>)
 8000b58:	2101      	movs	r1, #1
 8000b5a:	430a      	orrs	r2, r1
 8000b5c:	619a      	str	r2, [r3, #24]
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_MspInit+0x44>)
 8000b60:	699b      	ldr	r3, [r3, #24]
 8000b62:	2201      	movs	r2, #1
 8000b64:	4013      	ands	r3, r2
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	69da      	ldr	r2, [r3, #28]
 8000b6e:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <HAL_MspInit+0x44>)
 8000b70:	2180      	movs	r1, #128	; 0x80
 8000b72:	0549      	lsls	r1, r1, #21
 8000b74:	430a      	orrs	r2, r1
 8000b76:	61da      	str	r2, [r3, #28]
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <HAL_MspInit+0x44>)
 8000b7a:	69da      	ldr	r2, [r3, #28]
 8000b7c:	2380      	movs	r3, #128	; 0x80
 8000b7e:	055b      	lsls	r3, r3, #21
 8000b80:	4013      	ands	r3, r2
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	b002      	add	sp, #8
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b94:	b590      	push	{r4, r7, lr}
 8000b96:	b08b      	sub	sp, #44	; 0x2c
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	2414      	movs	r4, #20
 8000b9e:	193b      	adds	r3, r7, r4
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	2314      	movs	r3, #20
 8000ba4:	001a      	movs	r2, r3
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	f004 fcc5 	bl	8005536 <memset>
  if(huart->Instance==USART2)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a1c      	ldr	r2, [pc, #112]	; (8000c24 <HAL_UART_MspInit+0x90>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d132      	bne.n	8000c1c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bb6:	4b1c      	ldr	r3, [pc, #112]	; (8000c28 <HAL_UART_MspInit+0x94>)
 8000bb8:	69da      	ldr	r2, [r3, #28]
 8000bba:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <HAL_UART_MspInit+0x94>)
 8000bbc:	2180      	movs	r1, #128	; 0x80
 8000bbe:	0289      	lsls	r1, r1, #10
 8000bc0:	430a      	orrs	r2, r1
 8000bc2:	61da      	str	r2, [r3, #28]
 8000bc4:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <HAL_UART_MspInit+0x94>)
 8000bc6:	69da      	ldr	r2, [r3, #28]
 8000bc8:	2380      	movs	r3, #128	; 0x80
 8000bca:	029b      	lsls	r3, r3, #10
 8000bcc:	4013      	ands	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <HAL_UART_MspInit+0x94>)
 8000bd4:	695a      	ldr	r2, [r3, #20]
 8000bd6:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <HAL_UART_MspInit+0x94>)
 8000bd8:	2180      	movs	r1, #128	; 0x80
 8000bda:	0289      	lsls	r1, r1, #10
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	615a      	str	r2, [r3, #20]
 8000be0:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <HAL_UART_MspInit+0x94>)
 8000be2:	695a      	ldr	r2, [r3, #20]
 8000be4:	2380      	movs	r3, #128	; 0x80
 8000be6:	029b      	lsls	r3, r3, #10
 8000be8:	4013      	ands	r3, r2
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bee:	0021      	movs	r1, r4
 8000bf0:	187b      	adds	r3, r7, r1
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	187b      	adds	r3, r7, r1
 8000bf8:	2202      	movs	r2, #2
 8000bfa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	187b      	adds	r3, r7, r1
 8000c04:	2200      	movs	r2, #0
 8000c06:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0e:	187a      	adds	r2, r7, r1
 8000c10:	2390      	movs	r3, #144	; 0x90
 8000c12:	05db      	lsls	r3, r3, #23
 8000c14:	0011      	movs	r1, r2
 8000c16:	0018      	movs	r0, r3
 8000c18:	f000 fa26 	bl	8001068 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	b00b      	add	sp, #44	; 0x2c
 8000c22:	bd90      	pop	{r4, r7, pc}
 8000c24:	40004400 	.word	0x40004400
 8000c28:	40021000 	.word	0x40021000

08000c2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c2c:	b5b0      	push	{r4, r5, r7, lr}
 8000c2e:	b08c      	sub	sp, #48	; 0x30
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c34:	2300      	movs	r3, #0
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t              uwPrescalerValue = 0U;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c3c:	4b37      	ldr	r3, [pc, #220]	; (8000d1c <HAL_InitTick+0xf0>)
 8000c3e:	69da      	ldr	r2, [r3, #28]
 8000c40:	4b36      	ldr	r3, [pc, #216]	; (8000d1c <HAL_InitTick+0xf0>)
 8000c42:	2110      	movs	r1, #16
 8000c44:	430a      	orrs	r2, r1
 8000c46:	61da      	str	r2, [r3, #28]
 8000c48:	4b34      	ldr	r3, [pc, #208]	; (8000d1c <HAL_InitTick+0xf0>)
 8000c4a:	69db      	ldr	r3, [r3, #28]
 8000c4c:	2210      	movs	r2, #16
 8000c4e:	4013      	ands	r3, r2
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c54:	230c      	movs	r3, #12
 8000c56:	18fa      	adds	r2, r7, r3
 8000c58:	2410      	movs	r4, #16
 8000c5a:	193b      	adds	r3, r7, r4
 8000c5c:	0011      	movs	r1, r2
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f001 f8b4 	bl	8001dcc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c64:	193b      	adds	r3, r7, r4
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d104      	bne.n	8000c7a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c70:	f001 f896 	bl	8001da0 <HAL_RCC_GetPCLK1Freq>
 8000c74:	0003      	movs	r3, r0
 8000c76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c78:	e004      	b.n	8000c84 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c7a:	f001 f891 	bl	8001da0 <HAL_RCC_GetPCLK1Freq>
 8000c7e:	0003      	movs	r3, r0
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c86:	4926      	ldr	r1, [pc, #152]	; (8000d20 <HAL_InitTick+0xf4>)
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f7ff fa47 	bl	800011c <__udivsi3>
 8000c8e:	0003      	movs	r3, r0
 8000c90:	3b01      	subs	r3, #1
 8000c92:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c94:	4b23      	ldr	r3, [pc, #140]	; (8000d24 <HAL_InitTick+0xf8>)
 8000c96:	4a24      	ldr	r2, [pc, #144]	; (8000d28 <HAL_InitTick+0xfc>)
 8000c98:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c9a:	4b22      	ldr	r3, [pc, #136]	; (8000d24 <HAL_InitTick+0xf8>)
 8000c9c:	4a23      	ldr	r2, [pc, #140]	; (8000d2c <HAL_InitTick+0x100>)
 8000c9e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ca0:	4b20      	ldr	r3, [pc, #128]	; (8000d24 <HAL_InitTick+0xf8>)
 8000ca2:	6a3a      	ldr	r2, [r7, #32]
 8000ca4:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8000ca6:	4b1f      	ldr	r3, [pc, #124]	; (8000d24 <HAL_InitTick+0xf8>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cac:	4b1d      	ldr	r3, [pc, #116]	; (8000d24 <HAL_InitTick+0xf8>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb2:	4b1c      	ldr	r3, [pc, #112]	; (8000d24 <HAL_InitTick+0xf8>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000cb8:	252b      	movs	r5, #43	; 0x2b
 8000cba:	197c      	adds	r4, r7, r5
 8000cbc:	4b19      	ldr	r3, [pc, #100]	; (8000d24 <HAL_InitTick+0xf8>)
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f001 f9ae 	bl	8002020 <HAL_TIM_Base_Init>
 8000cc4:	0003      	movs	r3, r0
 8000cc6:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8000cc8:	197b      	adds	r3, r7, r5
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d11e      	bne.n	8000d0e <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000cd0:	197c      	adds	r4, r7, r5
 8000cd2:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <HAL_InitTick+0xf8>)
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f001 f9fb 	bl	80020d0 <HAL_TIM_Base_Start_IT>
 8000cda:	0003      	movs	r3, r0
 8000cdc:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8000cde:	197b      	adds	r3, r7, r5
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d113      	bne.n	8000d0e <HAL_InitTick+0xe2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ce6:	2011      	movs	r0, #17
 8000ce8:	f000 f9ad 	bl	8001046 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b03      	cmp	r3, #3
 8000cf0:	d809      	bhi.n	8000d06 <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	0019      	movs	r1, r3
 8000cf8:	2011      	movs	r0, #17
 8000cfa:	f000 f98f 	bl	800101c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <HAL_InitTick+0x104>)
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	e003      	b.n	8000d0e <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 8000d06:	232b      	movs	r3, #43	; 0x2b
 8000d08:	18fb      	adds	r3, r7, r3
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8000d0e:	232b      	movs	r3, #43	; 0x2b
 8000d10:	18fb      	adds	r3, r7, r3
 8000d12:	781b      	ldrb	r3, [r3, #0]
}
 8000d14:	0018      	movs	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	b00c      	add	sp, #48	; 0x30
 8000d1a:	bdb0      	pop	{r4, r5, r7, pc}
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	000f4240 	.word	0x000f4240
 8000d24:	200001d0 	.word	0x200001d0
 8000d28:	40001000 	.word	0x40001000
 8000d2c:	000003e7 	.word	0x000003e7
 8000d30:	20000090 	.word	0x20000090

08000d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <NMI_Handler+0x4>

08000d3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <HardFault_Handler+0x4>

08000d40 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ButtonOnOff_Pin);
 8000d44:	2008      	movs	r0, #8
 8000d46:	f000 fb25 	bl	8001394 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8000d4a:	46c0      	nop			; (mov r8, r8)
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EmergencyStopButton_Pin);
 8000d54:	2020      	movs	r0, #32
 8000d56:	f000 fb1d 	bl	8001394 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d5a:	2380      	movs	r3, #128	; 0x80
 8000d5c:	019b      	lsls	r3, r3, #6
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f000 fb18 	bl	8001394 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000d64:	46c0      	nop			; (mov r8, r8)
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d70:	4b03      	ldr	r3, [pc, #12]	; (8000d80 <TIM6_DAC_IRQHandler+0x14>)
 8000d72:	0018      	movs	r0, r3
 8000d74:	f001 f9fe 	bl	8002174 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d78:	46c0      	nop			; (mov r8, r8)
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	200001d0 	.word	0x200001d0

08000d84 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	e00a      	b.n	8000dac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d96:	e000      	b.n	8000d9a <_read+0x16>
 8000d98:	bf00      	nop
 8000d9a:	0001      	movs	r1, r0
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	1c5a      	adds	r2, r3, #1
 8000da0:	60ba      	str	r2, [r7, #8]
 8000da2:	b2ca      	uxtb	r2, r1
 8000da4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	3301      	adds	r3, #1
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	697a      	ldr	r2, [r7, #20]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	dbf0      	blt.n	8000d96 <_read+0x12>
	}

return len;
 8000db4:	687b      	ldr	r3, [r7, #4]
}
 8000db6:	0018      	movs	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b006      	add	sp, #24
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b086      	sub	sp, #24
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	60f8      	str	r0, [r7, #12]
 8000dc6:	60b9      	str	r1, [r7, #8]
 8000dc8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dca:	2300      	movs	r3, #0
 8000dcc:	617b      	str	r3, [r7, #20]
 8000dce:	e009      	b.n	8000de4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	1c5a      	adds	r2, r3, #1
 8000dd4:	60ba      	str	r2, [r7, #8]
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	0018      	movs	r0, r3
 8000dda:	f7ff fa2b 	bl	8000234 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	3301      	adds	r3, #1
 8000de2:	617b      	str	r3, [r7, #20]
 8000de4:	697a      	ldr	r2, [r7, #20]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	dbf1      	blt.n	8000dd0 <_write+0x12>
	}
	return len;
 8000dec:	687b      	ldr	r3, [r7, #4]
}
 8000dee:	0018      	movs	r0, r3
 8000df0:	46bd      	mov	sp, r7
 8000df2:	b006      	add	sp, #24
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <_close>:

int _close(int file)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b082      	sub	sp, #8
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
	return -1;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	425b      	negs	r3, r3
}
 8000e02:	0018      	movs	r0, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	b002      	add	sp, #8
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
 8000e12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	2280      	movs	r2, #128	; 0x80
 8000e18:	0192      	lsls	r2, r2, #6
 8000e1a:	605a      	str	r2, [r3, #4]
	return 0;
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	0018      	movs	r0, r3
 8000e20:	46bd      	mov	sp, r7
 8000e22:	b002      	add	sp, #8
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <_isatty>:

int _isatty(int file)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
	return 1;
 8000e2e:	2301      	movs	r3, #1
}
 8000e30:	0018      	movs	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	b002      	add	sp, #8
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
	return 0;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	0018      	movs	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	b004      	add	sp, #16
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e58:	480d      	ldr	r0, [pc, #52]	; (8000e90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e5a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e5c:	480d      	ldr	r0, [pc, #52]	; (8000e94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e5e:	490e      	ldr	r1, [pc, #56]	; (8000e98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e60:	4a0e      	ldr	r2, [pc, #56]	; (8000e9c <LoopForever+0xe>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e64:	e002      	b.n	8000e6c <LoopCopyDataInit>

08000e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6a:	3304      	adds	r3, #4

08000e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e70:	d3f9      	bcc.n	8000e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e72:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e74:	4c0b      	ldr	r4, [pc, #44]	; (8000ea4 <LoopForever+0x16>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e78:	e001      	b.n	8000e7e <LoopFillZerobss>

08000e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e7c:	3204      	adds	r2, #4

08000e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e80:	d3fb      	bcc.n	8000e7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e82:	f7ff ffe4 	bl	8000e4e <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000e86:	f004 fb29 	bl	80054dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e8a:	f7ff f9e5 	bl	8000258 <main>

08000e8e <LoopForever>:

LoopForever:
    b LoopForever
 8000e8e:	e7fe      	b.n	8000e8e <LoopForever>
  ldr   r0, =_estack
 8000e90:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000e94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e98:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8000e9c:	08006810 	.word	0x08006810
  ldr r2, =_sbss
 8000ea0:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8000ea4:	20001fc8 	.word	0x20001fc8

08000ea8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ea8:	e7fe      	b.n	8000ea8 <ADC1_COMP_IRQHandler>
	...

08000eac <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb0:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <HAL_Init+0x24>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_Init+0x24>)
 8000eb6:	2110      	movs	r1, #16
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000ebc:	2003      	movs	r0, #3
 8000ebe:	f7ff feb5 	bl	8000c2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec2:	f7ff fe43 	bl	8000b4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec6:	2300      	movs	r3, #0
}
 8000ec8:	0018      	movs	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	40022000 	.word	0x40022000

08000ed4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <HAL_IncTick+0x1c>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	001a      	movs	r2, r3
 8000ede:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <HAL_IncTick+0x20>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	18d2      	adds	r2, r2, r3
 8000ee4:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <HAL_IncTick+0x20>)
 8000ee6:	601a      	str	r2, [r3, #0]
}
 8000ee8:	46c0      	nop			; (mov r8, r8)
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	20000094 	.word	0x20000094
 8000ef4:	20000218 	.word	0x20000218

08000ef8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  return uwTick;
 8000efc:	4b02      	ldr	r3, [pc, #8]	; (8000f08 <HAL_GetTick+0x10>)
 8000efe:	681b      	ldr	r3, [r3, #0]
}
 8000f00:	0018      	movs	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	46c0      	nop			; (mov r8, r8)
 8000f08:	20000218 	.word	0x20000218

08000f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	0002      	movs	r2, r0
 8000f14:	1dfb      	adds	r3, r7, #7
 8000f16:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f18:	1dfb      	adds	r3, r7, #7
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b7f      	cmp	r3, #127	; 0x7f
 8000f1e:	d809      	bhi.n	8000f34 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f20:	1dfb      	adds	r3, r7, #7
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	001a      	movs	r2, r3
 8000f26:	231f      	movs	r3, #31
 8000f28:	401a      	ands	r2, r3
 8000f2a:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <__NVIC_EnableIRQ+0x30>)
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	4091      	lsls	r1, r2
 8000f30:	000a      	movs	r2, r1
 8000f32:	601a      	str	r2, [r3, #0]
  }
}
 8000f34:	46c0      	nop			; (mov r8, r8)
 8000f36:	46bd      	mov	sp, r7
 8000f38:	b002      	add	sp, #8
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	e000e100 	.word	0xe000e100

08000f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f40:	b590      	push	{r4, r7, lr}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	0002      	movs	r2, r0
 8000f48:	6039      	str	r1, [r7, #0]
 8000f4a:	1dfb      	adds	r3, r7, #7
 8000f4c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f4e:	1dfb      	adds	r3, r7, #7
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b7f      	cmp	r3, #127	; 0x7f
 8000f54:	d828      	bhi.n	8000fa8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f56:	4a2f      	ldr	r2, [pc, #188]	; (8001014 <__NVIC_SetPriority+0xd4>)
 8000f58:	1dfb      	adds	r3, r7, #7
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	b25b      	sxtb	r3, r3
 8000f5e:	089b      	lsrs	r3, r3, #2
 8000f60:	33c0      	adds	r3, #192	; 0xc0
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	589b      	ldr	r3, [r3, r2]
 8000f66:	1dfa      	adds	r2, r7, #7
 8000f68:	7812      	ldrb	r2, [r2, #0]
 8000f6a:	0011      	movs	r1, r2
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	400a      	ands	r2, r1
 8000f70:	00d2      	lsls	r2, r2, #3
 8000f72:	21ff      	movs	r1, #255	; 0xff
 8000f74:	4091      	lsls	r1, r2
 8000f76:	000a      	movs	r2, r1
 8000f78:	43d2      	mvns	r2, r2
 8000f7a:	401a      	ands	r2, r3
 8000f7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	019b      	lsls	r3, r3, #6
 8000f82:	22ff      	movs	r2, #255	; 0xff
 8000f84:	401a      	ands	r2, r3
 8000f86:	1dfb      	adds	r3, r7, #7
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	4003      	ands	r3, r0
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f94:	481f      	ldr	r0, [pc, #124]	; (8001014 <__NVIC_SetPriority+0xd4>)
 8000f96:	1dfb      	adds	r3, r7, #7
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	b25b      	sxtb	r3, r3
 8000f9c:	089b      	lsrs	r3, r3, #2
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	33c0      	adds	r3, #192	; 0xc0
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000fa6:	e031      	b.n	800100c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fa8:	4a1b      	ldr	r2, [pc, #108]	; (8001018 <__NVIC_SetPriority+0xd8>)
 8000faa:	1dfb      	adds	r3, r7, #7
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	0019      	movs	r1, r3
 8000fb0:	230f      	movs	r3, #15
 8000fb2:	400b      	ands	r3, r1
 8000fb4:	3b08      	subs	r3, #8
 8000fb6:	089b      	lsrs	r3, r3, #2
 8000fb8:	3306      	adds	r3, #6
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	18d3      	adds	r3, r2, r3
 8000fbe:	3304      	adds	r3, #4
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	1dfa      	adds	r2, r7, #7
 8000fc4:	7812      	ldrb	r2, [r2, #0]
 8000fc6:	0011      	movs	r1, r2
 8000fc8:	2203      	movs	r2, #3
 8000fca:	400a      	ands	r2, r1
 8000fcc:	00d2      	lsls	r2, r2, #3
 8000fce:	21ff      	movs	r1, #255	; 0xff
 8000fd0:	4091      	lsls	r1, r2
 8000fd2:	000a      	movs	r2, r1
 8000fd4:	43d2      	mvns	r2, r2
 8000fd6:	401a      	ands	r2, r3
 8000fd8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	019b      	lsls	r3, r3, #6
 8000fde:	22ff      	movs	r2, #255	; 0xff
 8000fe0:	401a      	ands	r2, r3
 8000fe2:	1dfb      	adds	r3, r7, #7
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	2303      	movs	r3, #3
 8000fea:	4003      	ands	r3, r0
 8000fec:	00db      	lsls	r3, r3, #3
 8000fee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ff0:	4809      	ldr	r0, [pc, #36]	; (8001018 <__NVIC_SetPriority+0xd8>)
 8000ff2:	1dfb      	adds	r3, r7, #7
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	001c      	movs	r4, r3
 8000ff8:	230f      	movs	r3, #15
 8000ffa:	4023      	ands	r3, r4
 8000ffc:	3b08      	subs	r3, #8
 8000ffe:	089b      	lsrs	r3, r3, #2
 8001000:	430a      	orrs	r2, r1
 8001002:	3306      	adds	r3, #6
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	18c3      	adds	r3, r0, r3
 8001008:	3304      	adds	r3, #4
 800100a:	601a      	str	r2, [r3, #0]
}
 800100c:	46c0      	nop			; (mov r8, r8)
 800100e:	46bd      	mov	sp, r7
 8001010:	b003      	add	sp, #12
 8001012:	bd90      	pop	{r4, r7, pc}
 8001014:	e000e100 	.word	0xe000e100
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
 8001026:	210f      	movs	r1, #15
 8001028:	187b      	adds	r3, r7, r1
 800102a:	1c02      	adds	r2, r0, #0
 800102c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	187b      	adds	r3, r7, r1
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	b25b      	sxtb	r3, r3
 8001036:	0011      	movs	r1, r2
 8001038:	0018      	movs	r0, r3
 800103a:	f7ff ff81 	bl	8000f40 <__NVIC_SetPriority>
}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	46bd      	mov	sp, r7
 8001042:	b004      	add	sp, #16
 8001044:	bd80      	pop	{r7, pc}

08001046 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
 800104c:	0002      	movs	r2, r0
 800104e:	1dfb      	adds	r3, r7, #7
 8001050:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001052:	1dfb      	adds	r3, r7, #7
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	b25b      	sxtb	r3, r3
 8001058:	0018      	movs	r0, r3
 800105a:	f7ff ff57 	bl	8000f0c <__NVIC_EnableIRQ>
}
 800105e:	46c0      	nop			; (mov r8, r8)
 8001060:	46bd      	mov	sp, r7
 8001062:	b002      	add	sp, #8
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001076:	e155      	b.n	8001324 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2101      	movs	r1, #1
 800107e:	697a      	ldr	r2, [r7, #20]
 8001080:	4091      	lsls	r1, r2
 8001082:	000a      	movs	r2, r1
 8001084:	4013      	ands	r3, r2
 8001086:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d100      	bne.n	8001090 <HAL_GPIO_Init+0x28>
 800108e:	e146      	b.n	800131e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	2203      	movs	r2, #3
 8001096:	4013      	ands	r3, r2
 8001098:	2b01      	cmp	r3, #1
 800109a:	d005      	beq.n	80010a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	2203      	movs	r2, #3
 80010a2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d130      	bne.n	800110a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	2203      	movs	r2, #3
 80010b4:	409a      	lsls	r2, r3
 80010b6:	0013      	movs	r3, r2
 80010b8:	43da      	mvns	r2, r3
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	4013      	ands	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	68da      	ldr	r2, [r3, #12]
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	409a      	lsls	r2, r3
 80010ca:	0013      	movs	r3, r2
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010de:	2201      	movs	r2, #1
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	409a      	lsls	r2, r3
 80010e4:	0013      	movs	r3, r2
 80010e6:	43da      	mvns	r2, r3
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	091b      	lsrs	r3, r3, #4
 80010f4:	2201      	movs	r2, #1
 80010f6:	401a      	ands	r2, r3
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	409a      	lsls	r2, r3
 80010fc:	0013      	movs	r3, r2
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	2203      	movs	r2, #3
 8001110:	4013      	ands	r3, r2
 8001112:	2b03      	cmp	r3, #3
 8001114:	d017      	beq.n	8001146 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	2203      	movs	r2, #3
 8001122:	409a      	lsls	r2, r3
 8001124:	0013      	movs	r3, r2
 8001126:	43da      	mvns	r2, r3
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	4013      	ands	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	689a      	ldr	r2, [r3, #8]
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	409a      	lsls	r2, r3
 8001138:	0013      	movs	r3, r2
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	2203      	movs	r2, #3
 800114c:	4013      	ands	r3, r2
 800114e:	2b02      	cmp	r3, #2
 8001150:	d123      	bne.n	800119a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	08da      	lsrs	r2, r3, #3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	3208      	adds	r2, #8
 800115a:	0092      	lsls	r2, r2, #2
 800115c:	58d3      	ldr	r3, [r2, r3]
 800115e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	2207      	movs	r2, #7
 8001164:	4013      	ands	r3, r2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	220f      	movs	r2, #15
 800116a:	409a      	lsls	r2, r3
 800116c:	0013      	movs	r3, r2
 800116e:	43da      	mvns	r2, r3
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	4013      	ands	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	691a      	ldr	r2, [r3, #16]
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	2107      	movs	r1, #7
 800117e:	400b      	ands	r3, r1
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	409a      	lsls	r2, r3
 8001184:	0013      	movs	r3, r2
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	08da      	lsrs	r2, r3, #3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3208      	adds	r2, #8
 8001194:	0092      	lsls	r2, r2, #2
 8001196:	6939      	ldr	r1, [r7, #16]
 8001198:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	2203      	movs	r2, #3
 80011a6:	409a      	lsls	r2, r3
 80011a8:	0013      	movs	r3, r2
 80011aa:	43da      	mvns	r2, r3
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	4013      	ands	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2203      	movs	r2, #3
 80011b8:	401a      	ands	r2, r3
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	409a      	lsls	r2, r3
 80011c0:	0013      	movs	r3, r2
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685a      	ldr	r2, [r3, #4]
 80011d2:	23c0      	movs	r3, #192	; 0xc0
 80011d4:	029b      	lsls	r3, r3, #10
 80011d6:	4013      	ands	r3, r2
 80011d8:	d100      	bne.n	80011dc <HAL_GPIO_Init+0x174>
 80011da:	e0a0      	b.n	800131e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011dc:	4b57      	ldr	r3, [pc, #348]	; (800133c <HAL_GPIO_Init+0x2d4>)
 80011de:	699a      	ldr	r2, [r3, #24]
 80011e0:	4b56      	ldr	r3, [pc, #344]	; (800133c <HAL_GPIO_Init+0x2d4>)
 80011e2:	2101      	movs	r1, #1
 80011e4:	430a      	orrs	r2, r1
 80011e6:	619a      	str	r2, [r3, #24]
 80011e8:	4b54      	ldr	r3, [pc, #336]	; (800133c <HAL_GPIO_Init+0x2d4>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	2201      	movs	r2, #1
 80011ee:	4013      	ands	r3, r2
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011f4:	4a52      	ldr	r2, [pc, #328]	; (8001340 <HAL_GPIO_Init+0x2d8>)
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	089b      	lsrs	r3, r3, #2
 80011fa:	3302      	adds	r3, #2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	589b      	ldr	r3, [r3, r2]
 8001200:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	2203      	movs	r2, #3
 8001206:	4013      	ands	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	220f      	movs	r2, #15
 800120c:	409a      	lsls	r2, r3
 800120e:	0013      	movs	r3, r2
 8001210:	43da      	mvns	r2, r3
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	4013      	ands	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	2390      	movs	r3, #144	; 0x90
 800121c:	05db      	lsls	r3, r3, #23
 800121e:	429a      	cmp	r2, r3
 8001220:	d019      	beq.n	8001256 <HAL_GPIO_Init+0x1ee>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a47      	ldr	r2, [pc, #284]	; (8001344 <HAL_GPIO_Init+0x2dc>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d013      	beq.n	8001252 <HAL_GPIO_Init+0x1ea>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a46      	ldr	r2, [pc, #280]	; (8001348 <HAL_GPIO_Init+0x2e0>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d00d      	beq.n	800124e <HAL_GPIO_Init+0x1e6>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a45      	ldr	r2, [pc, #276]	; (800134c <HAL_GPIO_Init+0x2e4>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d007      	beq.n	800124a <HAL_GPIO_Init+0x1e2>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a44      	ldr	r2, [pc, #272]	; (8001350 <HAL_GPIO_Init+0x2e8>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d101      	bne.n	8001246 <HAL_GPIO_Init+0x1de>
 8001242:	2304      	movs	r3, #4
 8001244:	e008      	b.n	8001258 <HAL_GPIO_Init+0x1f0>
 8001246:	2305      	movs	r3, #5
 8001248:	e006      	b.n	8001258 <HAL_GPIO_Init+0x1f0>
 800124a:	2303      	movs	r3, #3
 800124c:	e004      	b.n	8001258 <HAL_GPIO_Init+0x1f0>
 800124e:	2302      	movs	r3, #2
 8001250:	e002      	b.n	8001258 <HAL_GPIO_Init+0x1f0>
 8001252:	2301      	movs	r3, #1
 8001254:	e000      	b.n	8001258 <HAL_GPIO_Init+0x1f0>
 8001256:	2300      	movs	r3, #0
 8001258:	697a      	ldr	r2, [r7, #20]
 800125a:	2103      	movs	r1, #3
 800125c:	400a      	ands	r2, r1
 800125e:	0092      	lsls	r2, r2, #2
 8001260:	4093      	lsls	r3, r2
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4313      	orrs	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001268:	4935      	ldr	r1, [pc, #212]	; (8001340 <HAL_GPIO_Init+0x2d8>)
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	089b      	lsrs	r3, r3, #2
 800126e:	3302      	adds	r3, #2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001276:	4b37      	ldr	r3, [pc, #220]	; (8001354 <HAL_GPIO_Init+0x2ec>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	43da      	mvns	r2, r3
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	4013      	ands	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	2380      	movs	r3, #128	; 0x80
 800128c:	025b      	lsls	r3, r3, #9
 800128e:	4013      	ands	r3, r2
 8001290:	d003      	beq.n	800129a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4313      	orrs	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800129a:	4b2e      	ldr	r3, [pc, #184]	; (8001354 <HAL_GPIO_Init+0x2ec>)
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80012a0:	4b2c      	ldr	r3, [pc, #176]	; (8001354 <HAL_GPIO_Init+0x2ec>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	43da      	mvns	r2, r3
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	4013      	ands	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	2380      	movs	r3, #128	; 0x80
 80012b6:	029b      	lsls	r3, r3, #10
 80012b8:	4013      	ands	r3, r2
 80012ba:	d003      	beq.n	80012c4 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012c4:	4b23      	ldr	r3, [pc, #140]	; (8001354 <HAL_GPIO_Init+0x2ec>)
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ca:	4b22      	ldr	r3, [pc, #136]	; (8001354 <HAL_GPIO_Init+0x2ec>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	43da      	mvns	r2, r3
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	4013      	ands	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685a      	ldr	r2, [r3, #4]
 80012de:	2380      	movs	r3, #128	; 0x80
 80012e0:	035b      	lsls	r3, r3, #13
 80012e2:	4013      	ands	r3, r2
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012ee:	4b19      	ldr	r3, [pc, #100]	; (8001354 <HAL_GPIO_Init+0x2ec>)
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80012f4:	4b17      	ldr	r3, [pc, #92]	; (8001354 <HAL_GPIO_Init+0x2ec>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	43da      	mvns	r2, r3
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	4013      	ands	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	2380      	movs	r3, #128	; 0x80
 800130a:	039b      	lsls	r3, r3, #14
 800130c:	4013      	ands	r3, r2
 800130e:	d003      	beq.n	8001318 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	4313      	orrs	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001318:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <HAL_GPIO_Init+0x2ec>)
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	3301      	adds	r3, #1
 8001322:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	40da      	lsrs	r2, r3
 800132c:	1e13      	subs	r3, r2, #0
 800132e:	d000      	beq.n	8001332 <HAL_GPIO_Init+0x2ca>
 8001330:	e6a2      	b.n	8001078 <HAL_GPIO_Init+0x10>
  } 
}
 8001332:	46c0      	nop			; (mov r8, r8)
 8001334:	46c0      	nop			; (mov r8, r8)
 8001336:	46bd      	mov	sp, r7
 8001338:	b006      	add	sp, #24
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40021000 	.word	0x40021000
 8001340:	40010000 	.word	0x40010000
 8001344:	48000400 	.word	0x48000400
 8001348:	48000800 	.word	0x48000800
 800134c:	48000c00 	.word	0x48000c00
 8001350:	48001000 	.word	0x48001000
 8001354:	40010400 	.word	0x40010400

08001358 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	0008      	movs	r0, r1
 8001362:	0011      	movs	r1, r2
 8001364:	1cbb      	adds	r3, r7, #2
 8001366:	1c02      	adds	r2, r0, #0
 8001368:	801a      	strh	r2, [r3, #0]
 800136a:	1c7b      	adds	r3, r7, #1
 800136c:	1c0a      	adds	r2, r1, #0
 800136e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001370:	1c7b      	adds	r3, r7, #1
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d004      	beq.n	8001382 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001378:	1cbb      	adds	r3, r7, #2
 800137a:	881a      	ldrh	r2, [r3, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001380:	e003      	b.n	800138a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001382:	1cbb      	adds	r3, r7, #2
 8001384:	881a      	ldrh	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	629a      	str	r2, [r3, #40]	; 0x28
}
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	46bd      	mov	sp, r7
 800138e:	b002      	add	sp, #8
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	0002      	movs	r2, r0
 800139c:	1dbb      	adds	r3, r7, #6
 800139e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013a0:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80013a2:	695b      	ldr	r3, [r3, #20]
 80013a4:	1dba      	adds	r2, r7, #6
 80013a6:	8812      	ldrh	r2, [r2, #0]
 80013a8:	4013      	ands	r3, r2
 80013aa:	d008      	beq.n	80013be <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80013ae:	1dba      	adds	r2, r7, #6
 80013b0:	8812      	ldrh	r2, [r2, #0]
 80013b2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013b4:	1dbb      	adds	r3, r7, #6
 80013b6:	881b      	ldrh	r3, [r3, #0]
 80013b8:	0018      	movs	r0, r3
 80013ba:	f7ff fb7d 	bl	8000ab8 <HAL_GPIO_EXTI_Callback>
  }
}
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	46bd      	mov	sp, r7
 80013c2:	b002      	add	sp, #8
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	40010400 	.word	0x40010400

080013cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b088      	sub	sp, #32
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d102      	bne.n	80013e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	f000 fb76 	bl	8001acc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2201      	movs	r2, #1
 80013e6:	4013      	ands	r3, r2
 80013e8:	d100      	bne.n	80013ec <HAL_RCC_OscConfig+0x20>
 80013ea:	e08e      	b.n	800150a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80013ec:	4bc5      	ldr	r3, [pc, #788]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	220c      	movs	r2, #12
 80013f2:	4013      	ands	r3, r2
 80013f4:	2b04      	cmp	r3, #4
 80013f6:	d00e      	beq.n	8001416 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013f8:	4bc2      	ldr	r3, [pc, #776]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	220c      	movs	r2, #12
 80013fe:	4013      	ands	r3, r2
 8001400:	2b08      	cmp	r3, #8
 8001402:	d117      	bne.n	8001434 <HAL_RCC_OscConfig+0x68>
 8001404:	4bbf      	ldr	r3, [pc, #764]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 8001406:	685a      	ldr	r2, [r3, #4]
 8001408:	23c0      	movs	r3, #192	; 0xc0
 800140a:	025b      	lsls	r3, r3, #9
 800140c:	401a      	ands	r2, r3
 800140e:	2380      	movs	r3, #128	; 0x80
 8001410:	025b      	lsls	r3, r3, #9
 8001412:	429a      	cmp	r2, r3
 8001414:	d10e      	bne.n	8001434 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001416:	4bbb      	ldr	r3, [pc, #748]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	2380      	movs	r3, #128	; 0x80
 800141c:	029b      	lsls	r3, r3, #10
 800141e:	4013      	ands	r3, r2
 8001420:	d100      	bne.n	8001424 <HAL_RCC_OscConfig+0x58>
 8001422:	e071      	b.n	8001508 <HAL_RCC_OscConfig+0x13c>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d000      	beq.n	800142e <HAL_RCC_OscConfig+0x62>
 800142c:	e06c      	b.n	8001508 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	f000 fb4c 	bl	8001acc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d107      	bne.n	800144c <HAL_RCC_OscConfig+0x80>
 800143c:	4bb1      	ldr	r3, [pc, #708]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4bb0      	ldr	r3, [pc, #704]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 8001442:	2180      	movs	r1, #128	; 0x80
 8001444:	0249      	lsls	r1, r1, #9
 8001446:	430a      	orrs	r2, r1
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	e02f      	b.n	80014ac <HAL_RCC_OscConfig+0xe0>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d10c      	bne.n	800146e <HAL_RCC_OscConfig+0xa2>
 8001454:	4bab      	ldr	r3, [pc, #684]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4baa      	ldr	r3, [pc, #680]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 800145a:	49ab      	ldr	r1, [pc, #684]	; (8001708 <HAL_RCC_OscConfig+0x33c>)
 800145c:	400a      	ands	r2, r1
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	4ba8      	ldr	r3, [pc, #672]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4ba7      	ldr	r3, [pc, #668]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 8001466:	49a9      	ldr	r1, [pc, #676]	; (800170c <HAL_RCC_OscConfig+0x340>)
 8001468:	400a      	ands	r2, r1
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	e01e      	b.n	80014ac <HAL_RCC_OscConfig+0xe0>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b05      	cmp	r3, #5
 8001474:	d10e      	bne.n	8001494 <HAL_RCC_OscConfig+0xc8>
 8001476:	4ba3      	ldr	r3, [pc, #652]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	4ba2      	ldr	r3, [pc, #648]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 800147c:	2180      	movs	r1, #128	; 0x80
 800147e:	02c9      	lsls	r1, r1, #11
 8001480:	430a      	orrs	r2, r1
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	4b9f      	ldr	r3, [pc, #636]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	4b9e      	ldr	r3, [pc, #632]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 800148a:	2180      	movs	r1, #128	; 0x80
 800148c:	0249      	lsls	r1, r1, #9
 800148e:	430a      	orrs	r2, r1
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	e00b      	b.n	80014ac <HAL_RCC_OscConfig+0xe0>
 8001494:	4b9b      	ldr	r3, [pc, #620]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4b9a      	ldr	r3, [pc, #616]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 800149a:	499b      	ldr	r1, [pc, #620]	; (8001708 <HAL_RCC_OscConfig+0x33c>)
 800149c:	400a      	ands	r2, r1
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	4b98      	ldr	r3, [pc, #608]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4b97      	ldr	r3, [pc, #604]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 80014a6:	4999      	ldr	r1, [pc, #612]	; (800170c <HAL_RCC_OscConfig+0x340>)
 80014a8:	400a      	ands	r2, r1
 80014aa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d014      	beq.n	80014de <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b4:	f7ff fd20 	bl	8000ef8 <HAL_GetTick>
 80014b8:	0003      	movs	r3, r0
 80014ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014be:	f7ff fd1b 	bl	8000ef8 <HAL_GetTick>
 80014c2:	0002      	movs	r2, r0
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b64      	cmp	r3, #100	; 0x64
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e2fd      	b.n	8001acc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d0:	4b8c      	ldr	r3, [pc, #560]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	2380      	movs	r3, #128	; 0x80
 80014d6:	029b      	lsls	r3, r3, #10
 80014d8:	4013      	ands	r3, r2
 80014da:	d0f0      	beq.n	80014be <HAL_RCC_OscConfig+0xf2>
 80014dc:	e015      	b.n	800150a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014de:	f7ff fd0b 	bl	8000ef8 <HAL_GetTick>
 80014e2:	0003      	movs	r3, r0
 80014e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014e8:	f7ff fd06 	bl	8000ef8 <HAL_GetTick>
 80014ec:	0002      	movs	r2, r0
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b64      	cmp	r3, #100	; 0x64
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e2e8      	b.n	8001acc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014fa:	4b82      	ldr	r3, [pc, #520]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	2380      	movs	r3, #128	; 0x80
 8001500:	029b      	lsls	r3, r3, #10
 8001502:	4013      	ands	r3, r2
 8001504:	d1f0      	bne.n	80014e8 <HAL_RCC_OscConfig+0x11c>
 8001506:	e000      	b.n	800150a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001508:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2202      	movs	r2, #2
 8001510:	4013      	ands	r3, r2
 8001512:	d100      	bne.n	8001516 <HAL_RCC_OscConfig+0x14a>
 8001514:	e06c      	b.n	80015f0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001516:	4b7b      	ldr	r3, [pc, #492]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	220c      	movs	r2, #12
 800151c:	4013      	ands	r3, r2
 800151e:	d00e      	beq.n	800153e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001520:	4b78      	ldr	r3, [pc, #480]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	220c      	movs	r2, #12
 8001526:	4013      	ands	r3, r2
 8001528:	2b08      	cmp	r3, #8
 800152a:	d11f      	bne.n	800156c <HAL_RCC_OscConfig+0x1a0>
 800152c:	4b75      	ldr	r3, [pc, #468]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 800152e:	685a      	ldr	r2, [r3, #4]
 8001530:	23c0      	movs	r3, #192	; 0xc0
 8001532:	025b      	lsls	r3, r3, #9
 8001534:	401a      	ands	r2, r3
 8001536:	2380      	movs	r3, #128	; 0x80
 8001538:	021b      	lsls	r3, r3, #8
 800153a:	429a      	cmp	r2, r3
 800153c:	d116      	bne.n	800156c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800153e:	4b71      	ldr	r3, [pc, #452]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2202      	movs	r2, #2
 8001544:	4013      	ands	r3, r2
 8001546:	d005      	beq.n	8001554 <HAL_RCC_OscConfig+0x188>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d001      	beq.n	8001554 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e2bb      	b.n	8001acc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001554:	4b6b      	ldr	r3, [pc, #428]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	22f8      	movs	r2, #248	; 0xf8
 800155a:	4393      	bics	r3, r2
 800155c:	0019      	movs	r1, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	00da      	lsls	r2, r3, #3
 8001564:	4b67      	ldr	r3, [pc, #412]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 8001566:	430a      	orrs	r2, r1
 8001568:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800156a:	e041      	b.n	80015f0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d024      	beq.n	80015be <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001574:	4b63      	ldr	r3, [pc, #396]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	4b62      	ldr	r3, [pc, #392]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 800157a:	2101      	movs	r1, #1
 800157c:	430a      	orrs	r2, r1
 800157e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001580:	f7ff fcba 	bl	8000ef8 <HAL_GetTick>
 8001584:	0003      	movs	r3, r0
 8001586:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800158a:	f7ff fcb5 	bl	8000ef8 <HAL_GetTick>
 800158e:	0002      	movs	r2, r0
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e297      	b.n	8001acc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800159c:	4b59      	ldr	r3, [pc, #356]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2202      	movs	r2, #2
 80015a2:	4013      	ands	r3, r2
 80015a4:	d0f1      	beq.n	800158a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a6:	4b57      	ldr	r3, [pc, #348]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	22f8      	movs	r2, #248	; 0xf8
 80015ac:	4393      	bics	r3, r2
 80015ae:	0019      	movs	r1, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	00da      	lsls	r2, r3, #3
 80015b6:	4b53      	ldr	r3, [pc, #332]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 80015b8:	430a      	orrs	r2, r1
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	e018      	b.n	80015f0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015be:	4b51      	ldr	r3, [pc, #324]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	4b50      	ldr	r3, [pc, #320]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 80015c4:	2101      	movs	r1, #1
 80015c6:	438a      	bics	r2, r1
 80015c8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ca:	f7ff fc95 	bl	8000ef8 <HAL_GetTick>
 80015ce:	0003      	movs	r3, r0
 80015d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015d4:	f7ff fc90 	bl	8000ef8 <HAL_GetTick>
 80015d8:	0002      	movs	r2, r0
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e272      	b.n	8001acc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015e6:	4b47      	ldr	r3, [pc, #284]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2202      	movs	r2, #2
 80015ec:	4013      	ands	r3, r2
 80015ee:	d1f1      	bne.n	80015d4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2208      	movs	r2, #8
 80015f6:	4013      	ands	r3, r2
 80015f8:	d036      	beq.n	8001668 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d019      	beq.n	8001636 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001602:	4b40      	ldr	r3, [pc, #256]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 8001604:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001606:	4b3f      	ldr	r3, [pc, #252]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 8001608:	2101      	movs	r1, #1
 800160a:	430a      	orrs	r2, r1
 800160c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800160e:	f7ff fc73 	bl	8000ef8 <HAL_GetTick>
 8001612:	0003      	movs	r3, r0
 8001614:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001618:	f7ff fc6e 	bl	8000ef8 <HAL_GetTick>
 800161c:	0002      	movs	r2, r0
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e250      	b.n	8001acc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800162a:	4b36      	ldr	r3, [pc, #216]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 800162c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162e:	2202      	movs	r2, #2
 8001630:	4013      	ands	r3, r2
 8001632:	d0f1      	beq.n	8001618 <HAL_RCC_OscConfig+0x24c>
 8001634:	e018      	b.n	8001668 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001636:	4b33      	ldr	r3, [pc, #204]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 8001638:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800163a:	4b32      	ldr	r3, [pc, #200]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 800163c:	2101      	movs	r1, #1
 800163e:	438a      	bics	r2, r1
 8001640:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001642:	f7ff fc59 	bl	8000ef8 <HAL_GetTick>
 8001646:	0003      	movs	r3, r0
 8001648:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800164c:	f7ff fc54 	bl	8000ef8 <HAL_GetTick>
 8001650:	0002      	movs	r2, r0
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e236      	b.n	8001acc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800165e:	4b29      	ldr	r3, [pc, #164]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 8001660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001662:	2202      	movs	r2, #2
 8001664:	4013      	ands	r3, r2
 8001666:	d1f1      	bne.n	800164c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2204      	movs	r2, #4
 800166e:	4013      	ands	r3, r2
 8001670:	d100      	bne.n	8001674 <HAL_RCC_OscConfig+0x2a8>
 8001672:	e0b5      	b.n	80017e0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001674:	201f      	movs	r0, #31
 8001676:	183b      	adds	r3, r7, r0
 8001678:	2200      	movs	r2, #0
 800167a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800167c:	4b21      	ldr	r3, [pc, #132]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 800167e:	69da      	ldr	r2, [r3, #28]
 8001680:	2380      	movs	r3, #128	; 0x80
 8001682:	055b      	lsls	r3, r3, #21
 8001684:	4013      	ands	r3, r2
 8001686:	d110      	bne.n	80016aa <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001688:	4b1e      	ldr	r3, [pc, #120]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 800168a:	69da      	ldr	r2, [r3, #28]
 800168c:	4b1d      	ldr	r3, [pc, #116]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 800168e:	2180      	movs	r1, #128	; 0x80
 8001690:	0549      	lsls	r1, r1, #21
 8001692:	430a      	orrs	r2, r1
 8001694:	61da      	str	r2, [r3, #28]
 8001696:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 8001698:	69da      	ldr	r2, [r3, #28]
 800169a:	2380      	movs	r3, #128	; 0x80
 800169c:	055b      	lsls	r3, r3, #21
 800169e:	4013      	ands	r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80016a4:	183b      	adds	r3, r7, r0
 80016a6:	2201      	movs	r2, #1
 80016a8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016aa:	4b19      	ldr	r3, [pc, #100]	; (8001710 <HAL_RCC_OscConfig+0x344>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	2380      	movs	r3, #128	; 0x80
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	4013      	ands	r3, r2
 80016b4:	d11a      	bne.n	80016ec <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016b6:	4b16      	ldr	r3, [pc, #88]	; (8001710 <HAL_RCC_OscConfig+0x344>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <HAL_RCC_OscConfig+0x344>)
 80016bc:	2180      	movs	r1, #128	; 0x80
 80016be:	0049      	lsls	r1, r1, #1
 80016c0:	430a      	orrs	r2, r1
 80016c2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016c4:	f7ff fc18 	bl	8000ef8 <HAL_GetTick>
 80016c8:	0003      	movs	r3, r0
 80016ca:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ce:	f7ff fc13 	bl	8000ef8 <HAL_GetTick>
 80016d2:	0002      	movs	r2, r0
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b64      	cmp	r3, #100	; 0x64
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e1f5      	b.n	8001acc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e0:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <HAL_RCC_OscConfig+0x344>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	4013      	ands	r3, r2
 80016ea:	d0f0      	beq.n	80016ce <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d10f      	bne.n	8001714 <HAL_RCC_OscConfig+0x348>
 80016f4:	4b03      	ldr	r3, [pc, #12]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 80016f6:	6a1a      	ldr	r2, [r3, #32]
 80016f8:	4b02      	ldr	r3, [pc, #8]	; (8001704 <HAL_RCC_OscConfig+0x338>)
 80016fa:	2101      	movs	r1, #1
 80016fc:	430a      	orrs	r2, r1
 80016fe:	621a      	str	r2, [r3, #32]
 8001700:	e036      	b.n	8001770 <HAL_RCC_OscConfig+0x3a4>
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	40021000 	.word	0x40021000
 8001708:	fffeffff 	.word	0xfffeffff
 800170c:	fffbffff 	.word	0xfffbffff
 8001710:	40007000 	.word	0x40007000
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d10c      	bne.n	8001736 <HAL_RCC_OscConfig+0x36a>
 800171c:	4bca      	ldr	r3, [pc, #808]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 800171e:	6a1a      	ldr	r2, [r3, #32]
 8001720:	4bc9      	ldr	r3, [pc, #804]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 8001722:	2101      	movs	r1, #1
 8001724:	438a      	bics	r2, r1
 8001726:	621a      	str	r2, [r3, #32]
 8001728:	4bc7      	ldr	r3, [pc, #796]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 800172a:	6a1a      	ldr	r2, [r3, #32]
 800172c:	4bc6      	ldr	r3, [pc, #792]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 800172e:	2104      	movs	r1, #4
 8001730:	438a      	bics	r2, r1
 8001732:	621a      	str	r2, [r3, #32]
 8001734:	e01c      	b.n	8001770 <HAL_RCC_OscConfig+0x3a4>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	2b05      	cmp	r3, #5
 800173c:	d10c      	bne.n	8001758 <HAL_RCC_OscConfig+0x38c>
 800173e:	4bc2      	ldr	r3, [pc, #776]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 8001740:	6a1a      	ldr	r2, [r3, #32]
 8001742:	4bc1      	ldr	r3, [pc, #772]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 8001744:	2104      	movs	r1, #4
 8001746:	430a      	orrs	r2, r1
 8001748:	621a      	str	r2, [r3, #32]
 800174a:	4bbf      	ldr	r3, [pc, #764]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 800174c:	6a1a      	ldr	r2, [r3, #32]
 800174e:	4bbe      	ldr	r3, [pc, #760]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 8001750:	2101      	movs	r1, #1
 8001752:	430a      	orrs	r2, r1
 8001754:	621a      	str	r2, [r3, #32]
 8001756:	e00b      	b.n	8001770 <HAL_RCC_OscConfig+0x3a4>
 8001758:	4bbb      	ldr	r3, [pc, #748]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 800175a:	6a1a      	ldr	r2, [r3, #32]
 800175c:	4bba      	ldr	r3, [pc, #744]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 800175e:	2101      	movs	r1, #1
 8001760:	438a      	bics	r2, r1
 8001762:	621a      	str	r2, [r3, #32]
 8001764:	4bb8      	ldr	r3, [pc, #736]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 8001766:	6a1a      	ldr	r2, [r3, #32]
 8001768:	4bb7      	ldr	r3, [pc, #732]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 800176a:	2104      	movs	r1, #4
 800176c:	438a      	bics	r2, r1
 800176e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d014      	beq.n	80017a2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001778:	f7ff fbbe 	bl	8000ef8 <HAL_GetTick>
 800177c:	0003      	movs	r3, r0
 800177e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001780:	e009      	b.n	8001796 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001782:	f7ff fbb9 	bl	8000ef8 <HAL_GetTick>
 8001786:	0002      	movs	r2, r0
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	4aaf      	ldr	r2, [pc, #700]	; (8001a4c <HAL_RCC_OscConfig+0x680>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e19a      	b.n	8001acc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001796:	4bac      	ldr	r3, [pc, #688]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 8001798:	6a1b      	ldr	r3, [r3, #32]
 800179a:	2202      	movs	r2, #2
 800179c:	4013      	ands	r3, r2
 800179e:	d0f0      	beq.n	8001782 <HAL_RCC_OscConfig+0x3b6>
 80017a0:	e013      	b.n	80017ca <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a2:	f7ff fba9 	bl	8000ef8 <HAL_GetTick>
 80017a6:	0003      	movs	r3, r0
 80017a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017aa:	e009      	b.n	80017c0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ac:	f7ff fba4 	bl	8000ef8 <HAL_GetTick>
 80017b0:	0002      	movs	r2, r0
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	4aa5      	ldr	r2, [pc, #660]	; (8001a4c <HAL_RCC_OscConfig+0x680>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e185      	b.n	8001acc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c0:	4ba1      	ldr	r3, [pc, #644]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	2202      	movs	r2, #2
 80017c6:	4013      	ands	r3, r2
 80017c8:	d1f0      	bne.n	80017ac <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017ca:	231f      	movs	r3, #31
 80017cc:	18fb      	adds	r3, r7, r3
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d105      	bne.n	80017e0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017d4:	4b9c      	ldr	r3, [pc, #624]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 80017d6:	69da      	ldr	r2, [r3, #28]
 80017d8:	4b9b      	ldr	r3, [pc, #620]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 80017da:	499d      	ldr	r1, [pc, #628]	; (8001a50 <HAL_RCC_OscConfig+0x684>)
 80017dc:	400a      	ands	r2, r1
 80017de:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2210      	movs	r2, #16
 80017e6:	4013      	ands	r3, r2
 80017e8:	d063      	beq.n	80018b2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d12a      	bne.n	8001848 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80017f2:	4b95      	ldr	r3, [pc, #596]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 80017f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017f6:	4b94      	ldr	r3, [pc, #592]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 80017f8:	2104      	movs	r1, #4
 80017fa:	430a      	orrs	r2, r1
 80017fc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80017fe:	4b92      	ldr	r3, [pc, #584]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 8001800:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001802:	4b91      	ldr	r3, [pc, #580]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 8001804:	2101      	movs	r1, #1
 8001806:	430a      	orrs	r2, r1
 8001808:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800180a:	f7ff fb75 	bl	8000ef8 <HAL_GetTick>
 800180e:	0003      	movs	r3, r0
 8001810:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001814:	f7ff fb70 	bl	8000ef8 <HAL_GetTick>
 8001818:	0002      	movs	r2, r0
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e152      	b.n	8001acc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001826:	4b88      	ldr	r3, [pc, #544]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 8001828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800182a:	2202      	movs	r2, #2
 800182c:	4013      	ands	r3, r2
 800182e:	d0f1      	beq.n	8001814 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001830:	4b85      	ldr	r3, [pc, #532]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 8001832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001834:	22f8      	movs	r2, #248	; 0xf8
 8001836:	4393      	bics	r3, r2
 8001838:	0019      	movs	r1, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	00da      	lsls	r2, r3, #3
 8001840:	4b81      	ldr	r3, [pc, #516]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 8001842:	430a      	orrs	r2, r1
 8001844:	635a      	str	r2, [r3, #52]	; 0x34
 8001846:	e034      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	3305      	adds	r3, #5
 800184e:	d111      	bne.n	8001874 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001850:	4b7d      	ldr	r3, [pc, #500]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 8001852:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001854:	4b7c      	ldr	r3, [pc, #496]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 8001856:	2104      	movs	r1, #4
 8001858:	438a      	bics	r2, r1
 800185a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800185c:	4b7a      	ldr	r3, [pc, #488]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 800185e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001860:	22f8      	movs	r2, #248	; 0xf8
 8001862:	4393      	bics	r3, r2
 8001864:	0019      	movs	r1, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	00da      	lsls	r2, r3, #3
 800186c:	4b76      	ldr	r3, [pc, #472]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 800186e:	430a      	orrs	r2, r1
 8001870:	635a      	str	r2, [r3, #52]	; 0x34
 8001872:	e01e      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001874:	4b74      	ldr	r3, [pc, #464]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 8001876:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001878:	4b73      	ldr	r3, [pc, #460]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 800187a:	2104      	movs	r1, #4
 800187c:	430a      	orrs	r2, r1
 800187e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001880:	4b71      	ldr	r3, [pc, #452]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 8001882:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001884:	4b70      	ldr	r3, [pc, #448]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 8001886:	2101      	movs	r1, #1
 8001888:	438a      	bics	r2, r1
 800188a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800188c:	f7ff fb34 	bl	8000ef8 <HAL_GetTick>
 8001890:	0003      	movs	r3, r0
 8001892:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001894:	e008      	b.n	80018a8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001896:	f7ff fb2f 	bl	8000ef8 <HAL_GetTick>
 800189a:	0002      	movs	r2, r0
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e111      	b.n	8001acc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80018a8:	4b67      	ldr	r3, [pc, #412]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 80018aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ac:	2202      	movs	r2, #2
 80018ae:	4013      	ands	r3, r2
 80018b0:	d1f1      	bne.n	8001896 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2220      	movs	r2, #32
 80018b8:	4013      	ands	r3, r2
 80018ba:	d05c      	beq.n	8001976 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80018bc:	4b62      	ldr	r3, [pc, #392]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	220c      	movs	r2, #12
 80018c2:	4013      	ands	r3, r2
 80018c4:	2b0c      	cmp	r3, #12
 80018c6:	d00e      	beq.n	80018e6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80018c8:	4b5f      	ldr	r3, [pc, #380]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	220c      	movs	r2, #12
 80018ce:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80018d0:	2b08      	cmp	r3, #8
 80018d2:	d114      	bne.n	80018fe <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80018d4:	4b5c      	ldr	r3, [pc, #368]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	23c0      	movs	r3, #192	; 0xc0
 80018da:	025b      	lsls	r3, r3, #9
 80018dc:	401a      	ands	r2, r3
 80018de:	23c0      	movs	r3, #192	; 0xc0
 80018e0:	025b      	lsls	r3, r3, #9
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d10b      	bne.n	80018fe <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80018e6:	4b58      	ldr	r3, [pc, #352]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 80018e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018ea:	2380      	movs	r3, #128	; 0x80
 80018ec:	025b      	lsls	r3, r3, #9
 80018ee:	4013      	ands	r3, r2
 80018f0:	d040      	beq.n	8001974 <HAL_RCC_OscConfig+0x5a8>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a1b      	ldr	r3, [r3, #32]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d03c      	beq.n	8001974 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e0e6      	b.n	8001acc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d01b      	beq.n	800193e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001906:	4b50      	ldr	r3, [pc, #320]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 8001908:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800190a:	4b4f      	ldr	r3, [pc, #316]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 800190c:	2180      	movs	r1, #128	; 0x80
 800190e:	0249      	lsls	r1, r1, #9
 8001910:	430a      	orrs	r2, r1
 8001912:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001914:	f7ff faf0 	bl	8000ef8 <HAL_GetTick>
 8001918:	0003      	movs	r3, r0
 800191a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800191e:	f7ff faeb 	bl	8000ef8 <HAL_GetTick>
 8001922:	0002      	movs	r2, r0
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e0cd      	b.n	8001acc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001930:	4b45      	ldr	r3, [pc, #276]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 8001932:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	025b      	lsls	r3, r3, #9
 8001938:	4013      	ands	r3, r2
 800193a:	d0f0      	beq.n	800191e <HAL_RCC_OscConfig+0x552>
 800193c:	e01b      	b.n	8001976 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800193e:	4b42      	ldr	r3, [pc, #264]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 8001940:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001942:	4b41      	ldr	r3, [pc, #260]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 8001944:	4943      	ldr	r1, [pc, #268]	; (8001a54 <HAL_RCC_OscConfig+0x688>)
 8001946:	400a      	ands	r2, r1
 8001948:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194a:	f7ff fad5 	bl	8000ef8 <HAL_GetTick>
 800194e:	0003      	movs	r3, r0
 8001950:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001954:	f7ff fad0 	bl	8000ef8 <HAL_GetTick>
 8001958:	0002      	movs	r2, r0
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e0b2      	b.n	8001acc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001966:	4b38      	ldr	r3, [pc, #224]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 8001968:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800196a:	2380      	movs	r3, #128	; 0x80
 800196c:	025b      	lsls	r3, r3, #9
 800196e:	4013      	ands	r3, r2
 8001970:	d1f0      	bne.n	8001954 <HAL_RCC_OscConfig+0x588>
 8001972:	e000      	b.n	8001976 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001974:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197a:	2b00      	cmp	r3, #0
 800197c:	d100      	bne.n	8001980 <HAL_RCC_OscConfig+0x5b4>
 800197e:	e0a4      	b.n	8001aca <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001980:	4b31      	ldr	r3, [pc, #196]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	220c      	movs	r2, #12
 8001986:	4013      	ands	r3, r2
 8001988:	2b08      	cmp	r3, #8
 800198a:	d100      	bne.n	800198e <HAL_RCC_OscConfig+0x5c2>
 800198c:	e078      	b.n	8001a80 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001992:	2b02      	cmp	r3, #2
 8001994:	d14c      	bne.n	8001a30 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001996:	4b2c      	ldr	r3, [pc, #176]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	4b2b      	ldr	r3, [pc, #172]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 800199c:	492e      	ldr	r1, [pc, #184]	; (8001a58 <HAL_RCC_OscConfig+0x68c>)
 800199e:	400a      	ands	r2, r1
 80019a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a2:	f7ff faa9 	bl	8000ef8 <HAL_GetTick>
 80019a6:	0003      	movs	r3, r0
 80019a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ac:	f7ff faa4 	bl	8000ef8 <HAL_GetTick>
 80019b0:	0002      	movs	r2, r0
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e086      	b.n	8001acc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019be:	4b22      	ldr	r3, [pc, #136]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	2380      	movs	r3, #128	; 0x80
 80019c4:	049b      	lsls	r3, r3, #18
 80019c6:	4013      	ands	r3, r2
 80019c8:	d1f0      	bne.n	80019ac <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019ca:	4b1f      	ldr	r3, [pc, #124]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 80019cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ce:	220f      	movs	r2, #15
 80019d0:	4393      	bics	r3, r2
 80019d2:	0019      	movs	r1, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019d8:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 80019da:	430a      	orrs	r2, r1
 80019dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80019de:	4b1a      	ldr	r3, [pc, #104]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	4a1e      	ldr	r2, [pc, #120]	; (8001a5c <HAL_RCC_OscConfig+0x690>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	0019      	movs	r1, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f0:	431a      	orrs	r2, r3
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 80019f4:	430a      	orrs	r2, r1
 80019f6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019f8:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 80019fe:	2180      	movs	r1, #128	; 0x80
 8001a00:	0449      	lsls	r1, r1, #17
 8001a02:	430a      	orrs	r2, r1
 8001a04:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a06:	f7ff fa77 	bl	8000ef8 <HAL_GetTick>
 8001a0a:	0003      	movs	r3, r0
 8001a0c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a10:	f7ff fa72 	bl	8000ef8 <HAL_GetTick>
 8001a14:	0002      	movs	r2, r0
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e054      	b.n	8001acc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a22:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	2380      	movs	r3, #128	; 0x80
 8001a28:	049b      	lsls	r3, r3, #18
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d0f0      	beq.n	8001a10 <HAL_RCC_OscConfig+0x644>
 8001a2e:	e04c      	b.n	8001aca <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a30:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <HAL_RCC_OscConfig+0x67c>)
 8001a36:	4908      	ldr	r1, [pc, #32]	; (8001a58 <HAL_RCC_OscConfig+0x68c>)
 8001a38:	400a      	ands	r2, r1
 8001a3a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3c:	f7ff fa5c 	bl	8000ef8 <HAL_GetTick>
 8001a40:	0003      	movs	r3, r0
 8001a42:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a44:	e015      	b.n	8001a72 <HAL_RCC_OscConfig+0x6a6>
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	00001388 	.word	0x00001388
 8001a50:	efffffff 	.word	0xefffffff
 8001a54:	fffeffff 	.word	0xfffeffff
 8001a58:	feffffff 	.word	0xfeffffff
 8001a5c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a60:	f7ff fa4a 	bl	8000ef8 <HAL_GetTick>
 8001a64:	0002      	movs	r2, r0
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e02c      	b.n	8001acc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a72:	4b18      	ldr	r3, [pc, #96]	; (8001ad4 <HAL_RCC_OscConfig+0x708>)
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	2380      	movs	r3, #128	; 0x80
 8001a78:	049b      	lsls	r3, r3, #18
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	d1f0      	bne.n	8001a60 <HAL_RCC_OscConfig+0x694>
 8001a7e:	e024      	b.n	8001aca <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d101      	bne.n	8001a8c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e01f      	b.n	8001acc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <HAL_RCC_OscConfig+0x708>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001a92:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <HAL_RCC_OscConfig+0x708>)
 8001a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a96:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	23c0      	movs	r3, #192	; 0xc0
 8001a9c:	025b      	lsls	r3, r3, #9
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d10e      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	220f      	movs	r2, #15
 8001aac:	401a      	ands	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d107      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	23f0      	movs	r3, #240	; 0xf0
 8001aba:	039b      	lsls	r3, r3, #14
 8001abc:	401a      	ands	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d001      	beq.n	8001aca <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e000      	b.n	8001acc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	0018      	movs	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	b008      	add	sp, #32
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40021000 	.word	0x40021000

08001ad8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d101      	bne.n	8001aec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e0bf      	b.n	8001c6c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001aec:	4b61      	ldr	r3, [pc, #388]	; (8001c74 <HAL_RCC_ClockConfig+0x19c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2201      	movs	r2, #1
 8001af2:	4013      	ands	r3, r2
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d911      	bls.n	8001b1e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afa:	4b5e      	ldr	r3, [pc, #376]	; (8001c74 <HAL_RCC_ClockConfig+0x19c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2201      	movs	r2, #1
 8001b00:	4393      	bics	r3, r2
 8001b02:	0019      	movs	r1, r3
 8001b04:	4b5b      	ldr	r3, [pc, #364]	; (8001c74 <HAL_RCC_ClockConfig+0x19c>)
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0c:	4b59      	ldr	r3, [pc, #356]	; (8001c74 <HAL_RCC_ClockConfig+0x19c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2201      	movs	r2, #1
 8001b12:	4013      	ands	r3, r2
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d001      	beq.n	8001b1e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e0a6      	b.n	8001c6c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2202      	movs	r2, #2
 8001b24:	4013      	ands	r3, r2
 8001b26:	d015      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2204      	movs	r2, #4
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d006      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b32:	4b51      	ldr	r3, [pc, #324]	; (8001c78 <HAL_RCC_ClockConfig+0x1a0>)
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	4b50      	ldr	r3, [pc, #320]	; (8001c78 <HAL_RCC_ClockConfig+0x1a0>)
 8001b38:	21e0      	movs	r1, #224	; 0xe0
 8001b3a:	00c9      	lsls	r1, r1, #3
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b40:	4b4d      	ldr	r3, [pc, #308]	; (8001c78 <HAL_RCC_ClockConfig+0x1a0>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	22f0      	movs	r2, #240	; 0xf0
 8001b46:	4393      	bics	r3, r2
 8001b48:	0019      	movs	r1, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689a      	ldr	r2, [r3, #8]
 8001b4e:	4b4a      	ldr	r3, [pc, #296]	; (8001c78 <HAL_RCC_ClockConfig+0x1a0>)
 8001b50:	430a      	orrs	r2, r1
 8001b52:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	d04c      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d107      	bne.n	8001b76 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b66:	4b44      	ldr	r3, [pc, #272]	; (8001c78 <HAL_RCC_ClockConfig+0x1a0>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	2380      	movs	r3, #128	; 0x80
 8001b6c:	029b      	lsls	r3, r3, #10
 8001b6e:	4013      	ands	r3, r2
 8001b70:	d120      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e07a      	b.n	8001c6c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d107      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b7e:	4b3e      	ldr	r3, [pc, #248]	; (8001c78 <HAL_RCC_ClockConfig+0x1a0>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	2380      	movs	r3, #128	; 0x80
 8001b84:	049b      	lsls	r3, r3, #18
 8001b86:	4013      	ands	r3, r2
 8001b88:	d114      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e06e      	b.n	8001c6c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b03      	cmp	r3, #3
 8001b94:	d107      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001b96:	4b38      	ldr	r3, [pc, #224]	; (8001c78 <HAL_RCC_ClockConfig+0x1a0>)
 8001b98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b9a:	2380      	movs	r3, #128	; 0x80
 8001b9c:	025b      	lsls	r3, r3, #9
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	d108      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e062      	b.n	8001c6c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba6:	4b34      	ldr	r3, [pc, #208]	; (8001c78 <HAL_RCC_ClockConfig+0x1a0>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2202      	movs	r2, #2
 8001bac:	4013      	ands	r3, r2
 8001bae:	d101      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e05b      	b.n	8001c6c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bb4:	4b30      	ldr	r3, [pc, #192]	; (8001c78 <HAL_RCC_ClockConfig+0x1a0>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2203      	movs	r2, #3
 8001bba:	4393      	bics	r3, r2
 8001bbc:	0019      	movs	r1, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	4b2d      	ldr	r3, [pc, #180]	; (8001c78 <HAL_RCC_ClockConfig+0x1a0>)
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bc8:	f7ff f996 	bl	8000ef8 <HAL_GetTick>
 8001bcc:	0003      	movs	r3, r0
 8001bce:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd0:	e009      	b.n	8001be6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd2:	f7ff f991 	bl	8000ef8 <HAL_GetTick>
 8001bd6:	0002      	movs	r2, r0
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	4a27      	ldr	r2, [pc, #156]	; (8001c7c <HAL_RCC_ClockConfig+0x1a4>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e042      	b.n	8001c6c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001be6:	4b24      	ldr	r3, [pc, #144]	; (8001c78 <HAL_RCC_ClockConfig+0x1a0>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	220c      	movs	r2, #12
 8001bec:	401a      	ands	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d1ec      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bf8:	4b1e      	ldr	r3, [pc, #120]	; (8001c74 <HAL_RCC_ClockConfig+0x19c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	4013      	ands	r3, r2
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d211      	bcs.n	8001c2a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c06:	4b1b      	ldr	r3, [pc, #108]	; (8001c74 <HAL_RCC_ClockConfig+0x19c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	4393      	bics	r3, r2
 8001c0e:	0019      	movs	r1, r3
 8001c10:	4b18      	ldr	r3, [pc, #96]	; (8001c74 <HAL_RCC_ClockConfig+0x19c>)
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	430a      	orrs	r2, r1
 8001c16:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c18:	4b16      	ldr	r3, [pc, #88]	; (8001c74 <HAL_RCC_ClockConfig+0x19c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	4013      	ands	r3, r2
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d001      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e020      	b.n	8001c6c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2204      	movs	r2, #4
 8001c30:	4013      	ands	r3, r2
 8001c32:	d009      	beq.n	8001c48 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c34:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <HAL_RCC_ClockConfig+0x1a0>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	4a11      	ldr	r2, [pc, #68]	; (8001c80 <HAL_RCC_ClockConfig+0x1a8>)
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	0019      	movs	r1, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68da      	ldr	r2, [r3, #12]
 8001c42:	4b0d      	ldr	r3, [pc, #52]	; (8001c78 <HAL_RCC_ClockConfig+0x1a0>)
 8001c44:	430a      	orrs	r2, r1
 8001c46:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c48:	f000 f820 	bl	8001c8c <HAL_RCC_GetSysClockFreq>
 8001c4c:	0001      	movs	r1, r0
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <HAL_RCC_ClockConfig+0x1a0>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	091b      	lsrs	r3, r3, #4
 8001c54:	220f      	movs	r2, #15
 8001c56:	4013      	ands	r3, r2
 8001c58:	4a0a      	ldr	r2, [pc, #40]	; (8001c84 <HAL_RCC_ClockConfig+0x1ac>)
 8001c5a:	5cd3      	ldrb	r3, [r2, r3]
 8001c5c:	000a      	movs	r2, r1
 8001c5e:	40da      	lsrs	r2, r3
 8001c60:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <HAL_RCC_ClockConfig+0x1b0>)
 8001c62:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c64:	2003      	movs	r0, #3
 8001c66:	f7fe ffe1 	bl	8000c2c <HAL_InitTick>
  
  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	b004      	add	sp, #16
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40022000 	.word	0x40022000
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	00001388 	.word	0x00001388
 8001c80:	fffff8ff 	.word	0xfffff8ff
 8001c84:	08006730 	.word	0x08006730
 8001c88:	2000008c 	.word	0x2000008c

08001c8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c8c:	b590      	push	{r4, r7, lr}
 8001c8e:	b08f      	sub	sp, #60	; 0x3c
 8001c90:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001c92:	2314      	movs	r3, #20
 8001c94:	18fb      	adds	r3, r7, r3
 8001c96:	4a38      	ldr	r2, [pc, #224]	; (8001d78 <HAL_RCC_GetSysClockFreq+0xec>)
 8001c98:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001c9a:	c313      	stmia	r3!, {r0, r1, r4}
 8001c9c:	6812      	ldr	r2, [r2, #0]
 8001c9e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001ca0:	1d3b      	adds	r3, r7, #4
 8001ca2:	4a36      	ldr	r2, [pc, #216]	; (8001d7c <HAL_RCC_GetSysClockFreq+0xf0>)
 8001ca4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001ca6:	c313      	stmia	r3!, {r0, r1, r4}
 8001ca8:	6812      	ldr	r2, [r2, #0]
 8001caa:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	637b      	str	r3, [r7, #52]	; 0x34
 8001cb8:	2300      	movs	r3, #0
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001cc0:	4b2f      	ldr	r3, [pc, #188]	; (8001d80 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc8:	220c      	movs	r2, #12
 8001cca:	4013      	ands	r3, r2
 8001ccc:	2b0c      	cmp	r3, #12
 8001cce:	d047      	beq.n	8001d60 <HAL_RCC_GetSysClockFreq+0xd4>
 8001cd0:	d849      	bhi.n	8001d66 <HAL_RCC_GetSysClockFreq+0xda>
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	d002      	beq.n	8001cdc <HAL_RCC_GetSysClockFreq+0x50>
 8001cd6:	2b08      	cmp	r3, #8
 8001cd8:	d003      	beq.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x56>
 8001cda:	e044      	b.n	8001d66 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cdc:	4b29      	ldr	r3, [pc, #164]	; (8001d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cde:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ce0:	e044      	b.n	8001d6c <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce4:	0c9b      	lsrs	r3, r3, #18
 8001ce6:	220f      	movs	r2, #15
 8001ce8:	4013      	ands	r3, r2
 8001cea:	2214      	movs	r2, #20
 8001cec:	18ba      	adds	r2, r7, r2
 8001cee:	5cd3      	ldrb	r3, [r2, r3]
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001cf2:	4b23      	ldr	r3, [pc, #140]	; (8001d80 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf6:	220f      	movs	r2, #15
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	1d3a      	adds	r2, r7, #4
 8001cfc:	5cd3      	ldrb	r3, [r2, r3]
 8001cfe:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001d00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d02:	23c0      	movs	r3, #192	; 0xc0
 8001d04:	025b      	lsls	r3, r3, #9
 8001d06:	401a      	ands	r2, r3
 8001d08:	2380      	movs	r3, #128	; 0x80
 8001d0a:	025b      	lsls	r3, r3, #9
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d109      	bne.n	8001d24 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d12:	481c      	ldr	r0, [pc, #112]	; (8001d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d14:	f7fe fa02 	bl	800011c <__udivsi3>
 8001d18:	0003      	movs	r3, r0
 8001d1a:	001a      	movs	r2, r3
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1e:	4353      	muls	r3, r2
 8001d20:	637b      	str	r3, [r7, #52]	; 0x34
 8001d22:	e01a      	b.n	8001d5a <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001d24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d26:	23c0      	movs	r3, #192	; 0xc0
 8001d28:	025b      	lsls	r3, r3, #9
 8001d2a:	401a      	ands	r2, r3
 8001d2c:	23c0      	movs	r3, #192	; 0xc0
 8001d2e:	025b      	lsls	r3, r3, #9
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d109      	bne.n	8001d48 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d36:	4814      	ldr	r0, [pc, #80]	; (8001d88 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d38:	f7fe f9f0 	bl	800011c <__udivsi3>
 8001d3c:	0003      	movs	r3, r0
 8001d3e:	001a      	movs	r2, r3
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	4353      	muls	r3, r2
 8001d44:	637b      	str	r3, [r7, #52]	; 0x34
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d4a:	480e      	ldr	r0, [pc, #56]	; (8001d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d4c:	f7fe f9e6 	bl	800011c <__udivsi3>
 8001d50:	0003      	movs	r3, r0
 8001d52:	001a      	movs	r2, r3
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	4353      	muls	r3, r2
 8001d58:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d5c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d5e:	e005      	b.n	8001d6c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001d60:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d62:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d64:	e002      	b.n	8001d6c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d66:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d68:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d6a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001d6e:	0018      	movs	r0, r3
 8001d70:	46bd      	mov	sp, r7
 8001d72:	b00f      	add	sp, #60	; 0x3c
 8001d74:	bd90      	pop	{r4, r7, pc}
 8001d76:	46c0      	nop			; (mov r8, r8)
 8001d78:	080066f8 	.word	0x080066f8
 8001d7c:	08006708 	.word	0x08006708
 8001d80:	40021000 	.word	0x40021000
 8001d84:	007a1200 	.word	0x007a1200
 8001d88:	02dc6c00 	.word	0x02dc6c00

08001d8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d90:	4b02      	ldr	r3, [pc, #8]	; (8001d9c <HAL_RCC_GetHCLKFreq+0x10>)
 8001d92:	681b      	ldr	r3, [r3, #0]
}
 8001d94:	0018      	movs	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	46c0      	nop			; (mov r8, r8)
 8001d9c:	2000008c 	.word	0x2000008c

08001da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001da4:	f7ff fff2 	bl	8001d8c <HAL_RCC_GetHCLKFreq>
 8001da8:	0001      	movs	r1, r0
 8001daa:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	0a1b      	lsrs	r3, r3, #8
 8001db0:	2207      	movs	r2, #7
 8001db2:	4013      	ands	r3, r2
 8001db4:	4a04      	ldr	r2, [pc, #16]	; (8001dc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001db6:	5cd3      	ldrb	r3, [r2, r3]
 8001db8:	40d9      	lsrs	r1, r3
 8001dba:	000b      	movs	r3, r1
}    
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	46c0      	nop			; (mov r8, r8)
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	08006740 	.word	0x08006740

08001dcc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2207      	movs	r2, #7
 8001dda:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ddc:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <HAL_RCC_GetClockConfig+0x4c>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2203      	movs	r2, #3
 8001de2:	401a      	ands	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001de8:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <HAL_RCC_GetClockConfig+0x4c>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	22f0      	movs	r2, #240	; 0xf0
 8001dee:	401a      	ands	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8001df4:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <HAL_RCC_GetClockConfig+0x4c>)
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	23e0      	movs	r3, #224	; 0xe0
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	401a      	ands	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8001e02:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_RCC_GetClockConfig+0x50>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2201      	movs	r2, #1
 8001e08:	401a      	ands	r2, r3
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	601a      	str	r2, [r3, #0]
}
 8001e0e:	46c0      	nop			; (mov r8, r8)
 8001e10:	46bd      	mov	sp, r7
 8001e12:	b002      	add	sp, #8
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	40022000 	.word	0x40022000

08001e20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	2380      	movs	r3, #128	; 0x80
 8001e36:	025b      	lsls	r3, r3, #9
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d100      	bne.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001e3c:	e08e      	b.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001e3e:	2017      	movs	r0, #23
 8001e40:	183b      	adds	r3, r7, r0
 8001e42:	2200      	movs	r2, #0
 8001e44:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e46:	4b6e      	ldr	r3, [pc, #440]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e48:	69da      	ldr	r2, [r3, #28]
 8001e4a:	2380      	movs	r3, #128	; 0x80
 8001e4c:	055b      	lsls	r3, r3, #21
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d110      	bne.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e52:	4b6b      	ldr	r3, [pc, #428]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e54:	69da      	ldr	r2, [r3, #28]
 8001e56:	4b6a      	ldr	r3, [pc, #424]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e58:	2180      	movs	r1, #128	; 0x80
 8001e5a:	0549      	lsls	r1, r1, #21
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	61da      	str	r2, [r3, #28]
 8001e60:	4b67      	ldr	r3, [pc, #412]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001e62:	69da      	ldr	r2, [r3, #28]
 8001e64:	2380      	movs	r3, #128	; 0x80
 8001e66:	055b      	lsls	r3, r3, #21
 8001e68:	4013      	ands	r3, r2
 8001e6a:	60bb      	str	r3, [r7, #8]
 8001e6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e6e:	183b      	adds	r3, r7, r0
 8001e70:	2201      	movs	r2, #1
 8001e72:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e74:	4b63      	ldr	r3, [pc, #396]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	2380      	movs	r3, #128	; 0x80
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	d11a      	bne.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e80:	4b60      	ldr	r3, [pc, #384]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4b5f      	ldr	r3, [pc, #380]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e86:	2180      	movs	r1, #128	; 0x80
 8001e88:	0049      	lsls	r1, r1, #1
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e8e:	f7ff f833 	bl	8000ef8 <HAL_GetTick>
 8001e92:	0003      	movs	r3, r0
 8001e94:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e96:	e008      	b.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e98:	f7ff f82e 	bl	8000ef8 <HAL_GetTick>
 8001e9c:	0002      	movs	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b64      	cmp	r3, #100	; 0x64
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e0a6      	b.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eaa:	4b56      	ldr	r3, [pc, #344]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	2380      	movs	r3, #128	; 0x80
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001eb6:	4b52      	ldr	r3, [pc, #328]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001eb8:	6a1a      	ldr	r2, [r3, #32]
 8001eba:	23c0      	movs	r3, #192	; 0xc0
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d034      	beq.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	23c0      	movs	r3, #192	; 0xc0
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d02c      	beq.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ed8:	4b49      	ldr	r3, [pc, #292]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	4a4a      	ldr	r2, [pc, #296]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001ede:	4013      	ands	r3, r2
 8001ee0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ee2:	4b47      	ldr	r3, [pc, #284]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ee4:	6a1a      	ldr	r2, [r3, #32]
 8001ee6:	4b46      	ldr	r3, [pc, #280]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ee8:	2180      	movs	r1, #128	; 0x80
 8001eea:	0249      	lsls	r1, r1, #9
 8001eec:	430a      	orrs	r2, r1
 8001eee:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ef0:	4b43      	ldr	r3, [pc, #268]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ef2:	6a1a      	ldr	r2, [r3, #32]
 8001ef4:	4b42      	ldr	r3, [pc, #264]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ef6:	4945      	ldr	r1, [pc, #276]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001ef8:	400a      	ands	r2, r1
 8001efa:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001efc:	4b40      	ldr	r3, [pc, #256]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2201      	movs	r2, #1
 8001f06:	4013      	ands	r3, r2
 8001f08:	d013      	beq.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0a:	f7fe fff5 	bl	8000ef8 <HAL_GetTick>
 8001f0e:	0003      	movs	r3, r0
 8001f10:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f12:	e009      	b.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f14:	f7fe fff0 	bl	8000ef8 <HAL_GetTick>
 8001f18:	0002      	movs	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	4a3c      	ldr	r2, [pc, #240]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e067      	b.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f28:	4b35      	ldr	r3, [pc, #212]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	2202      	movs	r2, #2
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d0f0      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f32:	4b33      	ldr	r3, [pc, #204]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f34:	6a1b      	ldr	r3, [r3, #32]
 8001f36:	4a34      	ldr	r2, [pc, #208]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	0019      	movs	r1, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	4b2f      	ldr	r3, [pc, #188]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f42:	430a      	orrs	r2, r1
 8001f44:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f46:	2317      	movs	r3, #23
 8001f48:	18fb      	adds	r3, r7, r3
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d105      	bne.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f50:	4b2b      	ldr	r3, [pc, #172]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f52:	69da      	ldr	r2, [r3, #28]
 8001f54:	4b2a      	ldr	r3, [pc, #168]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f56:	492f      	ldr	r1, [pc, #188]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001f58:	400a      	ands	r2, r1
 8001f5a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2201      	movs	r2, #1
 8001f62:	4013      	ands	r3, r2
 8001f64:	d009      	beq.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f66:	4b26      	ldr	r3, [pc, #152]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	4393      	bics	r3, r2
 8001f6e:	0019      	movs	r1, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	4b22      	ldr	r3, [pc, #136]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f76:	430a      	orrs	r2, r1
 8001f78:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2202      	movs	r2, #2
 8001f80:	4013      	ands	r3, r2
 8001f82:	d009      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f84:	4b1e      	ldr	r3, [pc, #120]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f88:	4a23      	ldr	r2, [pc, #140]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	0019      	movs	r1, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68da      	ldr	r2, [r3, #12]
 8001f92:	4b1b      	ldr	r3, [pc, #108]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f94:	430a      	orrs	r2, r1
 8001f96:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	2380      	movs	r3, #128	; 0x80
 8001f9e:	02db      	lsls	r3, r3, #11
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	d009      	beq.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001fa4:	4b16      	ldr	r3, [pc, #88]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa8:	4a1c      	ldr	r2, [pc, #112]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001faa:	4013      	ands	r3, r2
 8001fac:	0019      	movs	r1, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691a      	ldr	r2, [r3, #16]
 8001fb2:	4b13      	ldr	r3, [pc, #76]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2220      	movs	r2, #32
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d009      	beq.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fc2:	4b0f      	ldr	r3, [pc, #60]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	2210      	movs	r2, #16
 8001fc8:	4393      	bics	r3, r2
 8001fca:	0019      	movs	r1, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	695a      	ldr	r2, [r3, #20]
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	2380      	movs	r3, #128	; 0x80
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	4013      	ands	r3, r2
 8001fe0:	d009      	beq.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001fe2:	4b07      	ldr	r3, [pc, #28]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	2240      	movs	r2, #64	; 0x40
 8001fe8:	4393      	bics	r3, r2
 8001fea:	0019      	movs	r1, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	699a      	ldr	r2, [r3, #24]
 8001ff0:	4b03      	ldr	r3, [pc, #12]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	b006      	add	sp, #24
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40021000 	.word	0x40021000
 8002004:	40007000 	.word	0x40007000
 8002008:	fffffcff 	.word	0xfffffcff
 800200c:	fffeffff 	.word	0xfffeffff
 8002010:	00001388 	.word	0x00001388
 8002014:	efffffff 	.word	0xefffffff
 8002018:	fffcffff 	.word	0xfffcffff
 800201c:	fff3ffff 	.word	0xfff3ffff

08002020 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e042      	b.n	80020b8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	223d      	movs	r2, #61	; 0x3d
 8002036:	5c9b      	ldrb	r3, [r3, r2]
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d107      	bne.n	800204e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	223c      	movs	r2, #60	; 0x3c
 8002042:	2100      	movs	r1, #0
 8002044:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	0018      	movs	r0, r3
 800204a:	f000 f839 	bl	80020c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	223d      	movs	r2, #61	; 0x3d
 8002052:	2102      	movs	r1, #2
 8002054:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3304      	adds	r3, #4
 800205e:	0019      	movs	r1, r3
 8002060:	0010      	movs	r0, r2
 8002062:	f000 f9bd 	bl	80023e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2246      	movs	r2, #70	; 0x46
 800206a:	2101      	movs	r1, #1
 800206c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	223e      	movs	r2, #62	; 0x3e
 8002072:	2101      	movs	r1, #1
 8002074:	5499      	strb	r1, [r3, r2]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	223f      	movs	r2, #63	; 0x3f
 800207a:	2101      	movs	r1, #1
 800207c:	5499      	strb	r1, [r3, r2]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2240      	movs	r2, #64	; 0x40
 8002082:	2101      	movs	r1, #1
 8002084:	5499      	strb	r1, [r3, r2]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2241      	movs	r2, #65	; 0x41
 800208a:	2101      	movs	r1, #1
 800208c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2242      	movs	r2, #66	; 0x42
 8002092:	2101      	movs	r1, #1
 8002094:	5499      	strb	r1, [r3, r2]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2243      	movs	r2, #67	; 0x43
 800209a:	2101      	movs	r1, #1
 800209c:	5499      	strb	r1, [r3, r2]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2244      	movs	r2, #68	; 0x44
 80020a2:	2101      	movs	r1, #1
 80020a4:	5499      	strb	r1, [r3, r2]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2245      	movs	r2, #69	; 0x45
 80020aa:	2101      	movs	r1, #1
 80020ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	223d      	movs	r2, #61	; 0x3d
 80020b2:	2101      	movs	r1, #1
 80020b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	0018      	movs	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	b002      	add	sp, #8
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80020c8:	46c0      	nop			; (mov r8, r8)
 80020ca:	46bd      	mov	sp, r7
 80020cc:	b002      	add	sp, #8
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	223d      	movs	r2, #61	; 0x3d
 80020dc:	5c9b      	ldrb	r3, [r3, r2]
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d001      	beq.n	80020e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e03b      	b.n	8002160 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	223d      	movs	r2, #61	; 0x3d
 80020ec:	2102      	movs	r1, #2
 80020ee:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2101      	movs	r1, #1
 80020fc:	430a      	orrs	r2, r1
 80020fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a18      	ldr	r2, [pc, #96]	; (8002168 <HAL_TIM_Base_Start_IT+0x98>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d00f      	beq.n	800212a <HAL_TIM_Base_Start_IT+0x5a>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	2380      	movs	r3, #128	; 0x80
 8002110:	05db      	lsls	r3, r3, #23
 8002112:	429a      	cmp	r2, r3
 8002114:	d009      	beq.n	800212a <HAL_TIM_Base_Start_IT+0x5a>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a14      	ldr	r2, [pc, #80]	; (800216c <HAL_TIM_Base_Start_IT+0x9c>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d004      	beq.n	800212a <HAL_TIM_Base_Start_IT+0x5a>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a12      	ldr	r2, [pc, #72]	; (8002170 <HAL_TIM_Base_Start_IT+0xa0>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d111      	bne.n	800214e <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	2207      	movs	r2, #7
 8002132:	4013      	ands	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2b06      	cmp	r3, #6
 800213a:	d010      	beq.n	800215e <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2101      	movs	r1, #1
 8002148:	430a      	orrs	r2, r1
 800214a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800214c:	e007      	b.n	800215e <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2101      	movs	r1, #1
 800215a:	430a      	orrs	r2, r1
 800215c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	0018      	movs	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	b004      	add	sp, #16
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40012c00 	.word	0x40012c00
 800216c:	40000400 	.word	0x40000400
 8002170:	40014000 	.word	0x40014000

08002174 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	2202      	movs	r2, #2
 8002184:	4013      	ands	r3, r2
 8002186:	2b02      	cmp	r3, #2
 8002188:	d124      	bne.n	80021d4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	2202      	movs	r2, #2
 8002192:	4013      	ands	r3, r2
 8002194:	2b02      	cmp	r3, #2
 8002196:	d11d      	bne.n	80021d4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2203      	movs	r2, #3
 800219e:	4252      	negs	r2, r2
 80021a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	2203      	movs	r2, #3
 80021b0:	4013      	ands	r3, r2
 80021b2:	d004      	beq.n	80021be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	0018      	movs	r0, r3
 80021b8:	f000 f8fa 	bl	80023b0 <HAL_TIM_IC_CaptureCallback>
 80021bc:	e007      	b.n	80021ce <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	0018      	movs	r0, r3
 80021c2:	f000 f8ed 	bl	80023a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	0018      	movs	r0, r3
 80021ca:	f000 f8f9 	bl	80023c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	2204      	movs	r2, #4
 80021dc:	4013      	ands	r3, r2
 80021de:	2b04      	cmp	r3, #4
 80021e0:	d125      	bne.n	800222e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	2204      	movs	r2, #4
 80021ea:	4013      	ands	r3, r2
 80021ec:	2b04      	cmp	r3, #4
 80021ee:	d11e      	bne.n	800222e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2205      	movs	r2, #5
 80021f6:	4252      	negs	r2, r2
 80021f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2202      	movs	r2, #2
 80021fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	699a      	ldr	r2, [r3, #24]
 8002206:	23c0      	movs	r3, #192	; 0xc0
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4013      	ands	r3, r2
 800220c:	d004      	beq.n	8002218 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	0018      	movs	r0, r3
 8002212:	f000 f8cd 	bl	80023b0 <HAL_TIM_IC_CaptureCallback>
 8002216:	e007      	b.n	8002228 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	0018      	movs	r0, r3
 800221c:	f000 f8c0 	bl	80023a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	0018      	movs	r0, r3
 8002224:	f000 f8cc 	bl	80023c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	2208      	movs	r2, #8
 8002236:	4013      	ands	r3, r2
 8002238:	2b08      	cmp	r3, #8
 800223a:	d124      	bne.n	8002286 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	2208      	movs	r2, #8
 8002244:	4013      	ands	r3, r2
 8002246:	2b08      	cmp	r3, #8
 8002248:	d11d      	bne.n	8002286 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2209      	movs	r2, #9
 8002250:	4252      	negs	r2, r2
 8002252:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2204      	movs	r2, #4
 8002258:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	2203      	movs	r2, #3
 8002262:	4013      	ands	r3, r2
 8002264:	d004      	beq.n	8002270 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	0018      	movs	r0, r3
 800226a:	f000 f8a1 	bl	80023b0 <HAL_TIM_IC_CaptureCallback>
 800226e:	e007      	b.n	8002280 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	0018      	movs	r0, r3
 8002274:	f000 f894 	bl	80023a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	0018      	movs	r0, r3
 800227c:	f000 f8a0 	bl	80023c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	2210      	movs	r2, #16
 800228e:	4013      	ands	r3, r2
 8002290:	2b10      	cmp	r3, #16
 8002292:	d125      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	2210      	movs	r2, #16
 800229c:	4013      	ands	r3, r2
 800229e:	2b10      	cmp	r3, #16
 80022a0:	d11e      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2211      	movs	r2, #17
 80022a8:	4252      	negs	r2, r2
 80022aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2208      	movs	r2, #8
 80022b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	69da      	ldr	r2, [r3, #28]
 80022b8:	23c0      	movs	r3, #192	; 0xc0
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4013      	ands	r3, r2
 80022be:	d004      	beq.n	80022ca <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	0018      	movs	r0, r3
 80022c4:	f000 f874 	bl	80023b0 <HAL_TIM_IC_CaptureCallback>
 80022c8:	e007      	b.n	80022da <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	0018      	movs	r0, r3
 80022ce:	f000 f867 	bl	80023a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	0018      	movs	r0, r3
 80022d6:	f000 f873 	bl	80023c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	2201      	movs	r2, #1
 80022e8:	4013      	ands	r3, r2
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d10f      	bne.n	800230e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	2201      	movs	r2, #1
 80022f6:	4013      	ands	r3, r2
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d108      	bne.n	800230e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2202      	movs	r2, #2
 8002302:	4252      	negs	r2, r2
 8002304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	0018      	movs	r0, r3
 800230a:	f7fe fc07 	bl	8000b1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	2280      	movs	r2, #128	; 0x80
 8002316:	4013      	ands	r3, r2
 8002318:	2b80      	cmp	r3, #128	; 0x80
 800231a:	d10f      	bne.n	800233c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	2280      	movs	r2, #128	; 0x80
 8002324:	4013      	ands	r3, r2
 8002326:	2b80      	cmp	r3, #128	; 0x80
 8002328:	d108      	bne.n	800233c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2281      	movs	r2, #129	; 0x81
 8002330:	4252      	negs	r2, r2
 8002332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	0018      	movs	r0, r3
 8002338:	f000 f8da 	bl	80024f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	2240      	movs	r2, #64	; 0x40
 8002344:	4013      	ands	r3, r2
 8002346:	2b40      	cmp	r3, #64	; 0x40
 8002348:	d10f      	bne.n	800236a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	2240      	movs	r2, #64	; 0x40
 8002352:	4013      	ands	r3, r2
 8002354:	2b40      	cmp	r3, #64	; 0x40
 8002356:	d108      	bne.n	800236a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2241      	movs	r2, #65	; 0x41
 800235e:	4252      	negs	r2, r2
 8002360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	0018      	movs	r0, r3
 8002366:	f000 f833 	bl	80023d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	2220      	movs	r2, #32
 8002372:	4013      	ands	r3, r2
 8002374:	2b20      	cmp	r3, #32
 8002376:	d10f      	bne.n	8002398 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	2220      	movs	r2, #32
 8002380:	4013      	ands	r3, r2
 8002382:	2b20      	cmp	r3, #32
 8002384:	d108      	bne.n	8002398 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2221      	movs	r2, #33	; 0x21
 800238c:	4252      	negs	r2, r2
 800238e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	0018      	movs	r0, r3
 8002394:	f000 f8a4 	bl	80024e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002398:	46c0      	nop			; (mov r8, r8)
 800239a:	46bd      	mov	sp, r7
 800239c:	b002      	add	sp, #8
 800239e:	bd80      	pop	{r7, pc}

080023a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023a8:	46c0      	nop			; (mov r8, r8)
 80023aa:	46bd      	mov	sp, r7
 80023ac:	b002      	add	sp, #8
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023b8:	46c0      	nop			; (mov r8, r8)
 80023ba:	46bd      	mov	sp, r7
 80023bc:	b002      	add	sp, #8
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023c8:	46c0      	nop			; (mov r8, r8)
 80023ca:	46bd      	mov	sp, r7
 80023cc:	b002      	add	sp, #8
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023d8:	46c0      	nop			; (mov r8, r8)
 80023da:	46bd      	mov	sp, r7
 80023dc:	b002      	add	sp, #8
 80023de:	bd80      	pop	{r7, pc}

080023e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a34      	ldr	r2, [pc, #208]	; (80024c4 <TIM_Base_SetConfig+0xe4>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d008      	beq.n	800240a <TIM_Base_SetConfig+0x2a>
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	2380      	movs	r3, #128	; 0x80
 80023fc:	05db      	lsls	r3, r3, #23
 80023fe:	429a      	cmp	r2, r3
 8002400:	d003      	beq.n	800240a <TIM_Base_SetConfig+0x2a>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a30      	ldr	r2, [pc, #192]	; (80024c8 <TIM_Base_SetConfig+0xe8>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d108      	bne.n	800241c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2270      	movs	r2, #112	; 0x70
 800240e:	4393      	bics	r3, r2
 8002410:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	4313      	orrs	r3, r2
 800241a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a29      	ldr	r2, [pc, #164]	; (80024c4 <TIM_Base_SetConfig+0xe4>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d018      	beq.n	8002456 <TIM_Base_SetConfig+0x76>
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	2380      	movs	r3, #128	; 0x80
 8002428:	05db      	lsls	r3, r3, #23
 800242a:	429a      	cmp	r2, r3
 800242c:	d013      	beq.n	8002456 <TIM_Base_SetConfig+0x76>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a25      	ldr	r2, [pc, #148]	; (80024c8 <TIM_Base_SetConfig+0xe8>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d00f      	beq.n	8002456 <TIM_Base_SetConfig+0x76>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a24      	ldr	r2, [pc, #144]	; (80024cc <TIM_Base_SetConfig+0xec>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d00b      	beq.n	8002456 <TIM_Base_SetConfig+0x76>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a23      	ldr	r2, [pc, #140]	; (80024d0 <TIM_Base_SetConfig+0xf0>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d007      	beq.n	8002456 <TIM_Base_SetConfig+0x76>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a22      	ldr	r2, [pc, #136]	; (80024d4 <TIM_Base_SetConfig+0xf4>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d003      	beq.n	8002456 <TIM_Base_SetConfig+0x76>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a21      	ldr	r2, [pc, #132]	; (80024d8 <TIM_Base_SetConfig+0xf8>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d108      	bne.n	8002468 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	4a20      	ldr	r2, [pc, #128]	; (80024dc <TIM_Base_SetConfig+0xfc>)
 800245a:	4013      	ands	r3, r2
 800245c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	4313      	orrs	r3, r2
 8002466:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2280      	movs	r2, #128	; 0x80
 800246c:	4393      	bics	r3, r2
 800246e:	001a      	movs	r2, r3
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	4313      	orrs	r3, r2
 8002476:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a0c      	ldr	r2, [pc, #48]	; (80024c4 <TIM_Base_SetConfig+0xe4>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d00b      	beq.n	80024ae <TIM_Base_SetConfig+0xce>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a0d      	ldr	r2, [pc, #52]	; (80024d0 <TIM_Base_SetConfig+0xf0>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d007      	beq.n	80024ae <TIM_Base_SetConfig+0xce>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a0c      	ldr	r2, [pc, #48]	; (80024d4 <TIM_Base_SetConfig+0xf4>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d003      	beq.n	80024ae <TIM_Base_SetConfig+0xce>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a0b      	ldr	r2, [pc, #44]	; (80024d8 <TIM_Base_SetConfig+0xf8>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d103      	bne.n	80024b6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	691a      	ldr	r2, [r3, #16]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	615a      	str	r2, [r3, #20]
}
 80024bc:	46c0      	nop			; (mov r8, r8)
 80024be:	46bd      	mov	sp, r7
 80024c0:	b004      	add	sp, #16
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40012c00 	.word	0x40012c00
 80024c8:	40000400 	.word	0x40000400
 80024cc:	40002000 	.word	0x40002000
 80024d0:	40014000 	.word	0x40014000
 80024d4:	40014400 	.word	0x40014400
 80024d8:	40014800 	.word	0x40014800
 80024dc:	fffffcff 	.word	0xfffffcff

080024e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024e8:	46c0      	nop			; (mov r8, r8)
 80024ea:	46bd      	mov	sp, r7
 80024ec:	b002      	add	sp, #8
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024f8:	46c0      	nop			; (mov r8, r8)
 80024fa:	46bd      	mov	sp, r7
 80024fc:	b002      	add	sp, #8
 80024fe:	bd80      	pop	{r7, pc}

08002500 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e044      	b.n	800259c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002516:	2b00      	cmp	r3, #0
 8002518:	d107      	bne.n	800252a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2274      	movs	r2, #116	; 0x74
 800251e:	2100      	movs	r1, #0
 8002520:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	0018      	movs	r0, r3
 8002526:	f7fe fb35 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2224      	movs	r2, #36	; 0x24
 800252e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2101      	movs	r1, #1
 800253c:	438a      	bics	r2, r1
 800253e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	0018      	movs	r0, r3
 8002544:	f000 f8da 	bl	80026fc <UART_SetConfig>
 8002548:	0003      	movs	r3, r0
 800254a:	2b01      	cmp	r3, #1
 800254c:	d101      	bne.n	8002552 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e024      	b.n	800259c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	0018      	movs	r0, r3
 800255e:	f000 fab5 	bl	8002acc <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	490d      	ldr	r1, [pc, #52]	; (80025a4 <HAL_UART_Init+0xa4>)
 800256e:	400a      	ands	r2, r1
 8002570:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	212a      	movs	r1, #42	; 0x2a
 800257e:	438a      	bics	r2, r1
 8002580:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2101      	movs	r1, #1
 800258e:	430a      	orrs	r2, r1
 8002590:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	0018      	movs	r0, r3
 8002596:	f000 fb4d 	bl	8002c34 <UART_CheckIdleState>
 800259a:	0003      	movs	r3, r0
}
 800259c:	0018      	movs	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	b002      	add	sp, #8
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	ffffb7ff 	.word	0xffffb7ff

080025a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b08a      	sub	sp, #40	; 0x28
 80025ac:	af02      	add	r7, sp, #8
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	603b      	str	r3, [r7, #0]
 80025b4:	1dbb      	adds	r3, r7, #6
 80025b6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025bc:	2b20      	cmp	r3, #32
 80025be:	d000      	beq.n	80025c2 <HAL_UART_Transmit+0x1a>
 80025c0:	e096      	b.n	80026f0 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d003      	beq.n	80025d0 <HAL_UART_Transmit+0x28>
 80025c8:	1dbb      	adds	r3, r7, #6
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e08e      	b.n	80026f2 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	2380      	movs	r3, #128	; 0x80
 80025da:	015b      	lsls	r3, r3, #5
 80025dc:	429a      	cmp	r2, r3
 80025de:	d109      	bne.n	80025f4 <HAL_UART_Transmit+0x4c>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d105      	bne.n	80025f4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	2201      	movs	r2, #1
 80025ec:	4013      	ands	r3, r2
 80025ee:	d001      	beq.n	80025f4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e07e      	b.n	80026f2 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2274      	movs	r2, #116	; 0x74
 80025f8:	5c9b      	ldrb	r3, [r3, r2]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d101      	bne.n	8002602 <HAL_UART_Transmit+0x5a>
 80025fe:	2302      	movs	r3, #2
 8002600:	e077      	b.n	80026f2 <HAL_UART_Transmit+0x14a>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2274      	movs	r2, #116	; 0x74
 8002606:	2101      	movs	r1, #1
 8002608:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2280      	movs	r2, #128	; 0x80
 800260e:	2100      	movs	r1, #0
 8002610:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2221      	movs	r2, #33	; 0x21
 8002616:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002618:	f7fe fc6e 	bl	8000ef8 <HAL_GetTick>
 800261c:	0003      	movs	r3, r0
 800261e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	1dba      	adds	r2, r7, #6
 8002624:	2150      	movs	r1, #80	; 0x50
 8002626:	8812      	ldrh	r2, [r2, #0]
 8002628:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	1dba      	adds	r2, r7, #6
 800262e:	2152      	movs	r1, #82	; 0x52
 8002630:	8812      	ldrh	r2, [r2, #0]
 8002632:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	2380      	movs	r3, #128	; 0x80
 800263a:	015b      	lsls	r3, r3, #5
 800263c:	429a      	cmp	r2, r3
 800263e:	d108      	bne.n	8002652 <HAL_UART_Transmit+0xaa>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d104      	bne.n	8002652 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002648:	2300      	movs	r3, #0
 800264a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	61bb      	str	r3, [r7, #24]
 8002650:	e003      	b.n	800265a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002656:	2300      	movs	r3, #0
 8002658:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2274      	movs	r2, #116	; 0x74
 800265e:	2100      	movs	r1, #0
 8002660:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002662:	e02d      	b.n	80026c0 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	0013      	movs	r3, r2
 800266e:	2200      	movs	r2, #0
 8002670:	2180      	movs	r1, #128	; 0x80
 8002672:	f000 fb27 	bl	8002cc4 <UART_WaitOnFlagUntilTimeout>
 8002676:	1e03      	subs	r3, r0, #0
 8002678:	d001      	beq.n	800267e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e039      	b.n	80026f2 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10b      	bne.n	800269c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	881a      	ldrh	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	05d2      	lsls	r2, r2, #23
 800268e:	0dd2      	lsrs	r2, r2, #23
 8002690:	b292      	uxth	r2, r2
 8002692:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	3302      	adds	r3, #2
 8002698:	61bb      	str	r3, [r7, #24]
 800269a:	e008      	b.n	80026ae <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	781a      	ldrb	r2, [r3, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	b292      	uxth	r2, r2
 80026a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	3301      	adds	r3, #1
 80026ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2252      	movs	r2, #82	; 0x52
 80026b2:	5a9b      	ldrh	r3, [r3, r2]
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	3b01      	subs	r3, #1
 80026b8:	b299      	uxth	r1, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2252      	movs	r2, #82	; 0x52
 80026be:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2252      	movs	r2, #82	; 0x52
 80026c4:	5a9b      	ldrh	r3, [r3, r2]
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1cb      	bne.n	8002664 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	0013      	movs	r3, r2
 80026d6:	2200      	movs	r2, #0
 80026d8:	2140      	movs	r1, #64	; 0x40
 80026da:	f000 faf3 	bl	8002cc4 <UART_WaitOnFlagUntilTimeout>
 80026de:	1e03      	subs	r3, r0, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e005      	b.n	80026f2 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2220      	movs	r2, #32
 80026ea:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80026ec:	2300      	movs	r3, #0
 80026ee:	e000      	b.n	80026f2 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80026f0:	2302      	movs	r3, #2
  }
}
 80026f2:	0018      	movs	r0, r3
 80026f4:	46bd      	mov	sp, r7
 80026f6:	b008      	add	sp, #32
 80026f8:	bd80      	pop	{r7, pc}
	...

080026fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b088      	sub	sp, #32
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002704:	231e      	movs	r3, #30
 8002706:	18fb      	adds	r3, r7, r3
 8002708:	2200      	movs	r2, #0
 800270a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	431a      	orrs	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	4313      	orrs	r3, r2
 8002722:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4abe      	ldr	r2, [pc, #760]	; (8002a24 <UART_SetConfig+0x328>)
 800272c:	4013      	ands	r3, r2
 800272e:	0019      	movs	r1, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	430a      	orrs	r2, r1
 8002738:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	4ab9      	ldr	r2, [pc, #740]	; (8002a28 <UART_SetConfig+0x32c>)
 8002742:	4013      	ands	r3, r2
 8002744:	0019      	movs	r1, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68da      	ldr	r2, [r3, #12]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	4313      	orrs	r3, r2
 8002760:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	4ab0      	ldr	r2, [pc, #704]	; (8002a2c <UART_SetConfig+0x330>)
 800276a:	4013      	ands	r3, r2
 800276c:	0019      	movs	r1, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	430a      	orrs	r2, r1
 8002776:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4aac      	ldr	r2, [pc, #688]	; (8002a30 <UART_SetConfig+0x334>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d127      	bne.n	80027d2 <UART_SetConfig+0xd6>
 8002782:	4bac      	ldr	r3, [pc, #688]	; (8002a34 <UART_SetConfig+0x338>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	2203      	movs	r2, #3
 8002788:	4013      	ands	r3, r2
 800278a:	2b03      	cmp	r3, #3
 800278c:	d00d      	beq.n	80027aa <UART_SetConfig+0xae>
 800278e:	d81b      	bhi.n	80027c8 <UART_SetConfig+0xcc>
 8002790:	2b02      	cmp	r3, #2
 8002792:	d014      	beq.n	80027be <UART_SetConfig+0xc2>
 8002794:	d818      	bhi.n	80027c8 <UART_SetConfig+0xcc>
 8002796:	2b00      	cmp	r3, #0
 8002798:	d002      	beq.n	80027a0 <UART_SetConfig+0xa4>
 800279a:	2b01      	cmp	r3, #1
 800279c:	d00a      	beq.n	80027b4 <UART_SetConfig+0xb8>
 800279e:	e013      	b.n	80027c8 <UART_SetConfig+0xcc>
 80027a0:	231f      	movs	r3, #31
 80027a2:	18fb      	adds	r3, r7, r3
 80027a4:	2200      	movs	r2, #0
 80027a6:	701a      	strb	r2, [r3, #0]
 80027a8:	e0bd      	b.n	8002926 <UART_SetConfig+0x22a>
 80027aa:	231f      	movs	r3, #31
 80027ac:	18fb      	adds	r3, r7, r3
 80027ae:	2202      	movs	r2, #2
 80027b0:	701a      	strb	r2, [r3, #0]
 80027b2:	e0b8      	b.n	8002926 <UART_SetConfig+0x22a>
 80027b4:	231f      	movs	r3, #31
 80027b6:	18fb      	adds	r3, r7, r3
 80027b8:	2204      	movs	r2, #4
 80027ba:	701a      	strb	r2, [r3, #0]
 80027bc:	e0b3      	b.n	8002926 <UART_SetConfig+0x22a>
 80027be:	231f      	movs	r3, #31
 80027c0:	18fb      	adds	r3, r7, r3
 80027c2:	2208      	movs	r2, #8
 80027c4:	701a      	strb	r2, [r3, #0]
 80027c6:	e0ae      	b.n	8002926 <UART_SetConfig+0x22a>
 80027c8:	231f      	movs	r3, #31
 80027ca:	18fb      	adds	r3, r7, r3
 80027cc:	2210      	movs	r2, #16
 80027ce:	701a      	strb	r2, [r3, #0]
 80027d0:	e0a9      	b.n	8002926 <UART_SetConfig+0x22a>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a98      	ldr	r2, [pc, #608]	; (8002a38 <UART_SetConfig+0x33c>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d134      	bne.n	8002846 <UART_SetConfig+0x14a>
 80027dc:	4b95      	ldr	r3, [pc, #596]	; (8002a34 <UART_SetConfig+0x338>)
 80027de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027e0:	23c0      	movs	r3, #192	; 0xc0
 80027e2:	029b      	lsls	r3, r3, #10
 80027e4:	4013      	ands	r3, r2
 80027e6:	22c0      	movs	r2, #192	; 0xc0
 80027e8:	0292      	lsls	r2, r2, #10
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d017      	beq.n	800281e <UART_SetConfig+0x122>
 80027ee:	22c0      	movs	r2, #192	; 0xc0
 80027f0:	0292      	lsls	r2, r2, #10
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d822      	bhi.n	800283c <UART_SetConfig+0x140>
 80027f6:	2280      	movs	r2, #128	; 0x80
 80027f8:	0292      	lsls	r2, r2, #10
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d019      	beq.n	8002832 <UART_SetConfig+0x136>
 80027fe:	2280      	movs	r2, #128	; 0x80
 8002800:	0292      	lsls	r2, r2, #10
 8002802:	4293      	cmp	r3, r2
 8002804:	d81a      	bhi.n	800283c <UART_SetConfig+0x140>
 8002806:	2b00      	cmp	r3, #0
 8002808:	d004      	beq.n	8002814 <UART_SetConfig+0x118>
 800280a:	2280      	movs	r2, #128	; 0x80
 800280c:	0252      	lsls	r2, r2, #9
 800280e:	4293      	cmp	r3, r2
 8002810:	d00a      	beq.n	8002828 <UART_SetConfig+0x12c>
 8002812:	e013      	b.n	800283c <UART_SetConfig+0x140>
 8002814:	231f      	movs	r3, #31
 8002816:	18fb      	adds	r3, r7, r3
 8002818:	2200      	movs	r2, #0
 800281a:	701a      	strb	r2, [r3, #0]
 800281c:	e083      	b.n	8002926 <UART_SetConfig+0x22a>
 800281e:	231f      	movs	r3, #31
 8002820:	18fb      	adds	r3, r7, r3
 8002822:	2202      	movs	r2, #2
 8002824:	701a      	strb	r2, [r3, #0]
 8002826:	e07e      	b.n	8002926 <UART_SetConfig+0x22a>
 8002828:	231f      	movs	r3, #31
 800282a:	18fb      	adds	r3, r7, r3
 800282c:	2204      	movs	r2, #4
 800282e:	701a      	strb	r2, [r3, #0]
 8002830:	e079      	b.n	8002926 <UART_SetConfig+0x22a>
 8002832:	231f      	movs	r3, #31
 8002834:	18fb      	adds	r3, r7, r3
 8002836:	2208      	movs	r2, #8
 8002838:	701a      	strb	r2, [r3, #0]
 800283a:	e074      	b.n	8002926 <UART_SetConfig+0x22a>
 800283c:	231f      	movs	r3, #31
 800283e:	18fb      	adds	r3, r7, r3
 8002840:	2210      	movs	r2, #16
 8002842:	701a      	strb	r2, [r3, #0]
 8002844:	e06f      	b.n	8002926 <UART_SetConfig+0x22a>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a7c      	ldr	r2, [pc, #496]	; (8002a3c <UART_SetConfig+0x340>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d134      	bne.n	80028ba <UART_SetConfig+0x1be>
 8002850:	4b78      	ldr	r3, [pc, #480]	; (8002a34 <UART_SetConfig+0x338>)
 8002852:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002854:	23c0      	movs	r3, #192	; 0xc0
 8002856:	031b      	lsls	r3, r3, #12
 8002858:	4013      	ands	r3, r2
 800285a:	22c0      	movs	r2, #192	; 0xc0
 800285c:	0312      	lsls	r2, r2, #12
 800285e:	4293      	cmp	r3, r2
 8002860:	d017      	beq.n	8002892 <UART_SetConfig+0x196>
 8002862:	22c0      	movs	r2, #192	; 0xc0
 8002864:	0312      	lsls	r2, r2, #12
 8002866:	4293      	cmp	r3, r2
 8002868:	d822      	bhi.n	80028b0 <UART_SetConfig+0x1b4>
 800286a:	2280      	movs	r2, #128	; 0x80
 800286c:	0312      	lsls	r2, r2, #12
 800286e:	4293      	cmp	r3, r2
 8002870:	d019      	beq.n	80028a6 <UART_SetConfig+0x1aa>
 8002872:	2280      	movs	r2, #128	; 0x80
 8002874:	0312      	lsls	r2, r2, #12
 8002876:	4293      	cmp	r3, r2
 8002878:	d81a      	bhi.n	80028b0 <UART_SetConfig+0x1b4>
 800287a:	2b00      	cmp	r3, #0
 800287c:	d004      	beq.n	8002888 <UART_SetConfig+0x18c>
 800287e:	2280      	movs	r2, #128	; 0x80
 8002880:	02d2      	lsls	r2, r2, #11
 8002882:	4293      	cmp	r3, r2
 8002884:	d00a      	beq.n	800289c <UART_SetConfig+0x1a0>
 8002886:	e013      	b.n	80028b0 <UART_SetConfig+0x1b4>
 8002888:	231f      	movs	r3, #31
 800288a:	18fb      	adds	r3, r7, r3
 800288c:	2200      	movs	r2, #0
 800288e:	701a      	strb	r2, [r3, #0]
 8002890:	e049      	b.n	8002926 <UART_SetConfig+0x22a>
 8002892:	231f      	movs	r3, #31
 8002894:	18fb      	adds	r3, r7, r3
 8002896:	2202      	movs	r2, #2
 8002898:	701a      	strb	r2, [r3, #0]
 800289a:	e044      	b.n	8002926 <UART_SetConfig+0x22a>
 800289c:	231f      	movs	r3, #31
 800289e:	18fb      	adds	r3, r7, r3
 80028a0:	2204      	movs	r2, #4
 80028a2:	701a      	strb	r2, [r3, #0]
 80028a4:	e03f      	b.n	8002926 <UART_SetConfig+0x22a>
 80028a6:	231f      	movs	r3, #31
 80028a8:	18fb      	adds	r3, r7, r3
 80028aa:	2208      	movs	r2, #8
 80028ac:	701a      	strb	r2, [r3, #0]
 80028ae:	e03a      	b.n	8002926 <UART_SetConfig+0x22a>
 80028b0:	231f      	movs	r3, #31
 80028b2:	18fb      	adds	r3, r7, r3
 80028b4:	2210      	movs	r2, #16
 80028b6:	701a      	strb	r2, [r3, #0]
 80028b8:	e035      	b.n	8002926 <UART_SetConfig+0x22a>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a60      	ldr	r2, [pc, #384]	; (8002a40 <UART_SetConfig+0x344>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d104      	bne.n	80028ce <UART_SetConfig+0x1d2>
 80028c4:	231f      	movs	r3, #31
 80028c6:	18fb      	adds	r3, r7, r3
 80028c8:	2200      	movs	r2, #0
 80028ca:	701a      	strb	r2, [r3, #0]
 80028cc:	e02b      	b.n	8002926 <UART_SetConfig+0x22a>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a5c      	ldr	r2, [pc, #368]	; (8002a44 <UART_SetConfig+0x348>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d104      	bne.n	80028e2 <UART_SetConfig+0x1e6>
 80028d8:	231f      	movs	r3, #31
 80028da:	18fb      	adds	r3, r7, r3
 80028dc:	2200      	movs	r2, #0
 80028de:	701a      	strb	r2, [r3, #0]
 80028e0:	e021      	b.n	8002926 <UART_SetConfig+0x22a>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a58      	ldr	r2, [pc, #352]	; (8002a48 <UART_SetConfig+0x34c>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d104      	bne.n	80028f6 <UART_SetConfig+0x1fa>
 80028ec:	231f      	movs	r3, #31
 80028ee:	18fb      	adds	r3, r7, r3
 80028f0:	2200      	movs	r2, #0
 80028f2:	701a      	strb	r2, [r3, #0]
 80028f4:	e017      	b.n	8002926 <UART_SetConfig+0x22a>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a54      	ldr	r2, [pc, #336]	; (8002a4c <UART_SetConfig+0x350>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d104      	bne.n	800290a <UART_SetConfig+0x20e>
 8002900:	231f      	movs	r3, #31
 8002902:	18fb      	adds	r3, r7, r3
 8002904:	2200      	movs	r2, #0
 8002906:	701a      	strb	r2, [r3, #0]
 8002908:	e00d      	b.n	8002926 <UART_SetConfig+0x22a>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a50      	ldr	r2, [pc, #320]	; (8002a50 <UART_SetConfig+0x354>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d104      	bne.n	800291e <UART_SetConfig+0x222>
 8002914:	231f      	movs	r3, #31
 8002916:	18fb      	adds	r3, r7, r3
 8002918:	2200      	movs	r2, #0
 800291a:	701a      	strb	r2, [r3, #0]
 800291c:	e003      	b.n	8002926 <UART_SetConfig+0x22a>
 800291e:	231f      	movs	r3, #31
 8002920:	18fb      	adds	r3, r7, r3
 8002922:	2210      	movs	r2, #16
 8002924:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69da      	ldr	r2, [r3, #28]
 800292a:	2380      	movs	r3, #128	; 0x80
 800292c:	021b      	lsls	r3, r3, #8
 800292e:	429a      	cmp	r2, r3
 8002930:	d15d      	bne.n	80029ee <UART_SetConfig+0x2f2>
  {
    switch (clocksource)
 8002932:	231f      	movs	r3, #31
 8002934:	18fb      	adds	r3, r7, r3
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b08      	cmp	r3, #8
 800293a:	d015      	beq.n	8002968 <UART_SetConfig+0x26c>
 800293c:	dc18      	bgt.n	8002970 <UART_SetConfig+0x274>
 800293e:	2b04      	cmp	r3, #4
 8002940:	d00d      	beq.n	800295e <UART_SetConfig+0x262>
 8002942:	dc15      	bgt.n	8002970 <UART_SetConfig+0x274>
 8002944:	2b00      	cmp	r3, #0
 8002946:	d002      	beq.n	800294e <UART_SetConfig+0x252>
 8002948:	2b02      	cmp	r3, #2
 800294a:	d005      	beq.n	8002958 <UART_SetConfig+0x25c>
 800294c:	e010      	b.n	8002970 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800294e:	f7ff fa27 	bl	8001da0 <HAL_RCC_GetPCLK1Freq>
 8002952:	0003      	movs	r3, r0
 8002954:	61bb      	str	r3, [r7, #24]
        break;
 8002956:	e012      	b.n	800297e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002958:	4b3e      	ldr	r3, [pc, #248]	; (8002a54 <UART_SetConfig+0x358>)
 800295a:	61bb      	str	r3, [r7, #24]
        break;
 800295c:	e00f      	b.n	800297e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800295e:	f7ff f995 	bl	8001c8c <HAL_RCC_GetSysClockFreq>
 8002962:	0003      	movs	r3, r0
 8002964:	61bb      	str	r3, [r7, #24]
        break;
 8002966:	e00a      	b.n	800297e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002968:	2380      	movs	r3, #128	; 0x80
 800296a:	021b      	lsls	r3, r3, #8
 800296c:	61bb      	str	r3, [r7, #24]
        break;
 800296e:	e006      	b.n	800297e <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8002970:	2300      	movs	r3, #0
 8002972:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002974:	231e      	movs	r3, #30
 8002976:	18fb      	adds	r3, r7, r3
 8002978:	2201      	movs	r2, #1
 800297a:	701a      	strb	r2, [r3, #0]
        break;
 800297c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d100      	bne.n	8002986 <UART_SetConfig+0x28a>
 8002984:	e095      	b.n	8002ab2 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	005a      	lsls	r2, r3, #1
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	085b      	lsrs	r3, r3, #1
 8002990:	18d2      	adds	r2, r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	0019      	movs	r1, r3
 8002998:	0010      	movs	r0, r2
 800299a:	f7fd fbbf 	bl	800011c <__udivsi3>
 800299e:	0003      	movs	r3, r0
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	2b0f      	cmp	r3, #15
 80029a8:	d91c      	bls.n	80029e4 <UART_SetConfig+0x2e8>
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	2380      	movs	r3, #128	; 0x80
 80029ae:	025b      	lsls	r3, r3, #9
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d217      	bcs.n	80029e4 <UART_SetConfig+0x2e8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	200e      	movs	r0, #14
 80029ba:	183b      	adds	r3, r7, r0
 80029bc:	210f      	movs	r1, #15
 80029be:	438a      	bics	r2, r1
 80029c0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	085b      	lsrs	r3, r3, #1
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	2207      	movs	r2, #7
 80029ca:	4013      	ands	r3, r2
 80029cc:	b299      	uxth	r1, r3
 80029ce:	183b      	adds	r3, r7, r0
 80029d0:	183a      	adds	r2, r7, r0
 80029d2:	8812      	ldrh	r2, [r2, #0]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	183a      	adds	r2, r7, r0
 80029de:	8812      	ldrh	r2, [r2, #0]
 80029e0:	60da      	str	r2, [r3, #12]
 80029e2:	e066      	b.n	8002ab2 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 80029e4:	231e      	movs	r3, #30
 80029e6:	18fb      	adds	r3, r7, r3
 80029e8:	2201      	movs	r2, #1
 80029ea:	701a      	strb	r2, [r3, #0]
 80029ec:	e061      	b.n	8002ab2 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80029ee:	231f      	movs	r3, #31
 80029f0:	18fb      	adds	r3, r7, r3
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b08      	cmp	r3, #8
 80029f6:	d02f      	beq.n	8002a58 <UART_SetConfig+0x35c>
 80029f8:	dc32      	bgt.n	8002a60 <UART_SetConfig+0x364>
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d00d      	beq.n	8002a1a <UART_SetConfig+0x31e>
 80029fe:	dc2f      	bgt.n	8002a60 <UART_SetConfig+0x364>
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d002      	beq.n	8002a0a <UART_SetConfig+0x30e>
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d005      	beq.n	8002a14 <UART_SetConfig+0x318>
 8002a08:	e02a      	b.n	8002a60 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a0a:	f7ff f9c9 	bl	8001da0 <HAL_RCC_GetPCLK1Freq>
 8002a0e:	0003      	movs	r3, r0
 8002a10:	61bb      	str	r3, [r7, #24]
        break;
 8002a12:	e02c      	b.n	8002a6e <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a14:	4b0f      	ldr	r3, [pc, #60]	; (8002a54 <UART_SetConfig+0x358>)
 8002a16:	61bb      	str	r3, [r7, #24]
        break;
 8002a18:	e029      	b.n	8002a6e <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a1a:	f7ff f937 	bl	8001c8c <HAL_RCC_GetSysClockFreq>
 8002a1e:	0003      	movs	r3, r0
 8002a20:	61bb      	str	r3, [r7, #24]
        break;
 8002a22:	e024      	b.n	8002a6e <UART_SetConfig+0x372>
 8002a24:	efff69f3 	.word	0xefff69f3
 8002a28:	ffffcfff 	.word	0xffffcfff
 8002a2c:	fffff4ff 	.word	0xfffff4ff
 8002a30:	40013800 	.word	0x40013800
 8002a34:	40021000 	.word	0x40021000
 8002a38:	40004400 	.word	0x40004400
 8002a3c:	40004800 	.word	0x40004800
 8002a40:	40004c00 	.word	0x40004c00
 8002a44:	40005000 	.word	0x40005000
 8002a48:	40011400 	.word	0x40011400
 8002a4c:	40011800 	.word	0x40011800
 8002a50:	40011c00 	.word	0x40011c00
 8002a54:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a58:	2380      	movs	r3, #128	; 0x80
 8002a5a:	021b      	lsls	r3, r3, #8
 8002a5c:	61bb      	str	r3, [r7, #24]
        break;
 8002a5e:	e006      	b.n	8002a6e <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a64:	231e      	movs	r3, #30
 8002a66:	18fb      	adds	r3, r7, r3
 8002a68:	2201      	movs	r2, #1
 8002a6a:	701a      	strb	r2, [r3, #0]
        break;
 8002a6c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d01e      	beq.n	8002ab2 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	085a      	lsrs	r2, r3, #1
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	18d2      	adds	r2, r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	0019      	movs	r1, r3
 8002a84:	0010      	movs	r0, r2
 8002a86:	f7fd fb49 	bl	800011c <__udivsi3>
 8002a8a:	0003      	movs	r3, r0
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	2b0f      	cmp	r3, #15
 8002a94:	d909      	bls.n	8002aaa <UART_SetConfig+0x3ae>
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	2380      	movs	r3, #128	; 0x80
 8002a9a:	025b      	lsls	r3, r3, #9
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d204      	bcs.n	8002aaa <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = usartdiv;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	60da      	str	r2, [r3, #12]
 8002aa8:	e003      	b.n	8002ab2 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8002aaa:	231e      	movs	r3, #30
 8002aac:	18fb      	adds	r3, r7, r3
 8002aae:	2201      	movs	r2, #1
 8002ab0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002abe:	231e      	movs	r3, #30
 8002ac0:	18fb      	adds	r3, r7, r3
 8002ac2:	781b      	ldrb	r3, [r3, #0]
}
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	b008      	add	sp, #32
 8002aca:	bd80      	pop	{r7, pc}

08002acc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad8:	2201      	movs	r2, #1
 8002ada:	4013      	ands	r3, r2
 8002adc:	d00b      	beq.n	8002af6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	4a4a      	ldr	r2, [pc, #296]	; (8002c10 <UART_AdvFeatureConfig+0x144>)
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	0019      	movs	r1, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	430a      	orrs	r2, r1
 8002af4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	2202      	movs	r2, #2
 8002afc:	4013      	ands	r3, r2
 8002afe:	d00b      	beq.n	8002b18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	4a43      	ldr	r2, [pc, #268]	; (8002c14 <UART_AdvFeatureConfig+0x148>)
 8002b08:	4013      	ands	r3, r2
 8002b0a:	0019      	movs	r1, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	2204      	movs	r2, #4
 8002b1e:	4013      	ands	r3, r2
 8002b20:	d00b      	beq.n	8002b3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	4a3b      	ldr	r2, [pc, #236]	; (8002c18 <UART_AdvFeatureConfig+0x14c>)
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	0019      	movs	r1, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	2208      	movs	r2, #8
 8002b40:	4013      	ands	r3, r2
 8002b42:	d00b      	beq.n	8002b5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	4a34      	ldr	r2, [pc, #208]	; (8002c1c <UART_AdvFeatureConfig+0x150>)
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	0019      	movs	r1, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	2210      	movs	r2, #16
 8002b62:	4013      	ands	r3, r2
 8002b64:	d00b      	beq.n	8002b7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	4a2c      	ldr	r2, [pc, #176]	; (8002c20 <UART_AdvFeatureConfig+0x154>)
 8002b6e:	4013      	ands	r3, r2
 8002b70:	0019      	movs	r1, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	2220      	movs	r2, #32
 8002b84:	4013      	ands	r3, r2
 8002b86:	d00b      	beq.n	8002ba0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	4a25      	ldr	r2, [pc, #148]	; (8002c24 <UART_AdvFeatureConfig+0x158>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	0019      	movs	r1, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	2240      	movs	r2, #64	; 0x40
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	d01d      	beq.n	8002be6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	4a1d      	ldr	r2, [pc, #116]	; (8002c28 <UART_AdvFeatureConfig+0x15c>)
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	0019      	movs	r1, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bc6:	2380      	movs	r3, #128	; 0x80
 8002bc8:	035b      	lsls	r3, r3, #13
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d10b      	bne.n	8002be6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	4a15      	ldr	r2, [pc, #84]	; (8002c2c <UART_AdvFeatureConfig+0x160>)
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	0019      	movs	r1, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bea:	2280      	movs	r2, #128	; 0x80
 8002bec:	4013      	ands	r3, r2
 8002bee:	d00b      	beq.n	8002c08 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	4a0e      	ldr	r2, [pc, #56]	; (8002c30 <UART_AdvFeatureConfig+0x164>)
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	0019      	movs	r1, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	430a      	orrs	r2, r1
 8002c06:	605a      	str	r2, [r3, #4]
  }
}
 8002c08:	46c0      	nop			; (mov r8, r8)
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	b002      	add	sp, #8
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	fffdffff 	.word	0xfffdffff
 8002c14:	fffeffff 	.word	0xfffeffff
 8002c18:	fffbffff 	.word	0xfffbffff
 8002c1c:	ffff7fff 	.word	0xffff7fff
 8002c20:	ffffefff 	.word	0xffffefff
 8002c24:	ffffdfff 	.word	0xffffdfff
 8002c28:	ffefffff 	.word	0xffefffff
 8002c2c:	ff9fffff 	.word	0xff9fffff
 8002c30:	fff7ffff 	.word	0xfff7ffff

08002c34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af02      	add	r7, sp, #8
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2280      	movs	r2, #128	; 0x80
 8002c40:	2100      	movs	r1, #0
 8002c42:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c44:	f7fe f958 	bl	8000ef8 <HAL_GetTick>
 8002c48:	0003      	movs	r3, r0
 8002c4a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2208      	movs	r2, #8
 8002c54:	4013      	ands	r3, r2
 8002c56:	2b08      	cmp	r3, #8
 8002c58:	d10c      	bne.n	8002c74 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2280      	movs	r2, #128	; 0x80
 8002c5e:	0391      	lsls	r1, r2, #14
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	4a17      	ldr	r2, [pc, #92]	; (8002cc0 <UART_CheckIdleState+0x8c>)
 8002c64:	9200      	str	r2, [sp, #0]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f000 f82c 	bl	8002cc4 <UART_WaitOnFlagUntilTimeout>
 8002c6c:	1e03      	subs	r3, r0, #0
 8002c6e:	d001      	beq.n	8002c74 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e021      	b.n	8002cb8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2204      	movs	r2, #4
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	d10c      	bne.n	8002c9c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2280      	movs	r2, #128	; 0x80
 8002c86:	03d1      	lsls	r1, r2, #15
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	4a0d      	ldr	r2, [pc, #52]	; (8002cc0 <UART_CheckIdleState+0x8c>)
 8002c8c:	9200      	str	r2, [sp, #0]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f000 f818 	bl	8002cc4 <UART_WaitOnFlagUntilTimeout>
 8002c94:	1e03      	subs	r3, r0, #0
 8002c96:	d001      	beq.n	8002c9c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e00d      	b.n	8002cb8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2274      	movs	r2, #116	; 0x74
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	0018      	movs	r0, r3
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	b004      	add	sp, #16
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	01ffffff 	.word	0x01ffffff

08002cc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b094      	sub	sp, #80	; 0x50
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	603b      	str	r3, [r7, #0]
 8002cd0:	1dfb      	adds	r3, r7, #7
 8002cd2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cd4:	e0a3      	b.n	8002e1e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cd8:	3301      	adds	r3, #1
 8002cda:	d100      	bne.n	8002cde <UART_WaitOnFlagUntilTimeout+0x1a>
 8002cdc:	e09f      	b.n	8002e1e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cde:	f7fe f90b 	bl	8000ef8 <HAL_GetTick>
 8002ce2:	0002      	movs	r2, r0
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d302      	bcc.n	8002cf4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002cee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d13d      	bne.n	8002d70 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cf4:	f3ef 8310 	mrs	r3, PRIMASK
 8002cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cfc:	647b      	str	r3, [r7, #68]	; 0x44
 8002cfe:	2301      	movs	r3, #1
 8002d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d04:	f383 8810 	msr	PRIMASK, r3
}
 8002d08:	46c0      	nop			; (mov r8, r8)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	494c      	ldr	r1, [pc, #304]	; (8002e48 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002d16:	400a      	ands	r2, r1
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d1c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d20:	f383 8810 	msr	PRIMASK, r3
}
 8002d24:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d26:	f3ef 8310 	mrs	r3, PRIMASK
 8002d2a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d2e:	643b      	str	r3, [r7, #64]	; 0x40
 8002d30:	2301      	movs	r3, #1
 8002d32:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d36:	f383 8810 	msr	PRIMASK, r3
}
 8002d3a:	46c0      	nop			; (mov r8, r8)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689a      	ldr	r2, [r3, #8]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2101      	movs	r1, #1
 8002d48:	438a      	bics	r2, r1
 8002d4a:	609a      	str	r2, [r3, #8]
 8002d4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d52:	f383 8810 	msr	PRIMASK, r3
}
 8002d56:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2220      	movs	r2, #32
 8002d62:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2274      	movs	r2, #116	; 0x74
 8002d68:	2100      	movs	r1, #0
 8002d6a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e067      	b.n	8002e40 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2204      	movs	r2, #4
 8002d78:	4013      	ands	r3, r2
 8002d7a:	d050      	beq.n	8002e1e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	69da      	ldr	r2, [r3, #28]
 8002d82:	2380      	movs	r3, #128	; 0x80
 8002d84:	011b      	lsls	r3, r3, #4
 8002d86:	401a      	ands	r2, r3
 8002d88:	2380      	movs	r3, #128	; 0x80
 8002d8a:	011b      	lsls	r3, r3, #4
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d146      	bne.n	8002e1e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2280      	movs	r2, #128	; 0x80
 8002d96:	0112      	lsls	r2, r2, #4
 8002d98:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d9a:	f3ef 8310 	mrs	r3, PRIMASK
 8002d9e:	613b      	str	r3, [r7, #16]
  return(result);
 8002da0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002da2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002da4:	2301      	movs	r3, #1
 8002da6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	f383 8810 	msr	PRIMASK, r3
}
 8002dae:	46c0      	nop			; (mov r8, r8)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4923      	ldr	r1, [pc, #140]	; (8002e48 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002dbc:	400a      	ands	r2, r1
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dc2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	f383 8810 	msr	PRIMASK, r3
}
 8002dca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dcc:	f3ef 8310 	mrs	r3, PRIMASK
 8002dd0:	61fb      	str	r3, [r7, #28]
  return(result);
 8002dd2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dda:	6a3b      	ldr	r3, [r7, #32]
 8002ddc:	f383 8810 	msr	PRIMASK, r3
}
 8002de0:	46c0      	nop			; (mov r8, r8)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2101      	movs	r1, #1
 8002dee:	438a      	bics	r2, r1
 8002df0:	609a      	str	r2, [r3, #8]
 8002df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002df4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	f383 8810 	msr	PRIMASK, r3
}
 8002dfc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2220      	movs	r2, #32
 8002e02:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2220      	movs	r2, #32
 8002e08:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2280      	movs	r2, #128	; 0x80
 8002e0e:	2120      	movs	r1, #32
 8002e10:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2274      	movs	r2, #116	; 0x74
 8002e16:	2100      	movs	r1, #0
 8002e18:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e010      	b.n	8002e40 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	68ba      	ldr	r2, [r7, #8]
 8002e26:	4013      	ands	r3, r2
 8002e28:	68ba      	ldr	r2, [r7, #8]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	425a      	negs	r2, r3
 8002e2e:	4153      	adcs	r3, r2
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	001a      	movs	r2, r3
 8002e34:	1dfb      	adds	r3, r7, #7
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d100      	bne.n	8002e3e <UART_WaitOnFlagUntilTimeout+0x17a>
 8002e3c:	e74b      	b.n	8002cd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	0018      	movs	r0, r3
 8002e42:	46bd      	mov	sp, r7
 8002e44:	b014      	add	sp, #80	; 0x50
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	fffffe5f 	.word	0xfffffe5f

08002e4c <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    EventGroupHandle_t xEventGroupCreate( void )
    {
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
         * TickType_t alignment requirements the cast is safe.  In other cases,
         * where the natural word size of the architecture is less than
         * sizeof( TickType_t ), the TickType_t variables will be accessed in two
         * or more reads operations, and the alignment requirements is only that
         * of each individual read. */
        pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8002e52:	201c      	movs	r0, #28
 8002e54:	f002 f99c 	bl	8005190 <pvPortMalloc>
 8002e58:	0003      	movs	r3, r0
 8002e5a:	607b      	str	r3, [r7, #4]

        if( pxEventBits != NULL )
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d007      	beq.n	8002e72 <xEventGroupCreate+0x26>
        {
            pxEventBits->uxEventBits = 0;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
            vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3304      	adds	r3, #4
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	f000 f943 	bl	80030f8 <vListInitialise>
        else
        {
            traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
        }

        return pxEventBits;
 8002e72:	687b      	ldr	r3, [r7, #4]
    }
 8002e74:	0018      	movs	r0, r3
 8002e76:	46bd      	mov	sp, r7
 8002e78:	b002      	add	sp, #8
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <xEventGroupWaitBits>:
EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                 const EventBits_t uxBitsToWaitFor,
                                 const BaseType_t xClearOnExit,
                                 const BaseType_t xWaitForAllBits,
                                 TickType_t xTicksToWait )
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b08c      	sub	sp, #48	; 0x30
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
 8002e88:	603b      	str	r3, [r7, #0]
    EventGroup_t * pxEventBits = xEventGroup;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
    EventBits_t uxReturn, uxControlBits = 0;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	62bb      	str	r3, [r7, #40]	; 0x28
    BaseType_t xWaitConditionMet, xAlreadyYielded;
    BaseType_t xTimeoutOccurred = pdFALSE;
 8002e92:	2300      	movs	r3, #0
 8002e94:	623b      	str	r3, [r7, #32]

    /* Check the user is not attempting to wait on the bits used by the kernel
     * itself, and that at least one bit is being requested. */
    configASSERT( xEventGroup );
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <xEventGroupWaitBits+0x24>
 8002e9c:	b672      	cpsid	i
 8002e9e:	e7fe      	b.n	8002e9e <xEventGroupWaitBits+0x22>
    configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	0e1b      	lsrs	r3, r3, #24
 8002ea4:	061b      	lsls	r3, r3, #24
 8002ea6:	d001      	beq.n	8002eac <xEventGroupWaitBits+0x30>
 8002ea8:	b672      	cpsid	i
 8002eaa:	e7fe      	b.n	8002eaa <xEventGroupWaitBits+0x2e>
    configASSERT( uxBitsToWaitFor != 0 );
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <xEventGroupWaitBits+0x3a>
 8002eb2:	b672      	cpsid	i
 8002eb4:	e7fe      	b.n	8002eb4 <xEventGroupWaitBits+0x38>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002eb6:	f001 fbd5 	bl	8004664 <xTaskGetSchedulerState>
 8002eba:	1e03      	subs	r3, r0, #0
 8002ebc:	d102      	bne.n	8002ec4 <xEventGroupWaitBits+0x48>
 8002ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <xEventGroupWaitBits+0x4c>
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e000      	b.n	8002eca <xEventGroupWaitBits+0x4e>
 8002ec8:	2300      	movs	r3, #0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <xEventGroupWaitBits+0x56>
 8002ece:	b672      	cpsid	i
 8002ed0:	e7fe      	b.n	8002ed0 <xEventGroupWaitBits+0x54>
    }
    #endif

    vTaskSuspendAll();
 8002ed2:	f000 fe2f 	bl	8003b34 <vTaskSuspendAll>
    {
        const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	61fb      	str	r3, [r7, #28]

        /* Check to see if the wait condition is already met or not. */
        xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	68b9      	ldr	r1, [r7, #8]
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	0018      	movs	r0, r3
 8002ee4:	f000 f8e9 	bl	80030ba <prvTestWaitCondition>
 8002ee8:	0003      	movs	r3, r0
 8002eea:	61bb      	str	r3, [r7, #24]

        if( xWaitConditionMet != pdFALSE )
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00e      	beq.n	8002f10 <xEventGroupWaitBits+0x94>
        {
            /* The wait condition has already been met so there is no need to
             * block. */
            uxReturn = uxCurrentEventBits;
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
            xTicksToWait = ( TickType_t ) 0;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Clear the wait bits if requested to do so. */
            if( xClearOnExit != pdFALSE )
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d02a      	beq.n	8002f56 <xEventGroupWaitBits+0xda>
            {
                pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8002f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	43d2      	mvns	r2, r2
 8002f08:	401a      	ands	r2, r3
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	e022      	b.n	8002f56 <xEventGroupWaitBits+0xda>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else if( xTicksToWait == ( TickType_t ) 0 )
 8002f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d104      	bne.n	8002f20 <xEventGroupWaitBits+0xa4>
        {
            /* The wait condition has not been met, but no block time was
             * specified, so just return the current value. */
            uxReturn = uxCurrentEventBits;
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	62fb      	str	r3, [r7, #44]	; 0x2c
            xTimeoutOccurred = pdTRUE;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	623b      	str	r3, [r7, #32]
 8002f1e:	e01a      	b.n	8002f56 <xEventGroupWaitBits+0xda>
        {
            /* The task is going to block to wait for its required bits to be
             * set.  uxControlBits are used to remember the specified behaviour of
             * this call to xEventGroupWaitBits() - for use when the event bits
             * unblock the task. */
            if( xClearOnExit != pdFALSE )
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d004      	beq.n	8002f30 <xEventGroupWaitBits+0xb4>
            {
                uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8002f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f28:	2280      	movs	r2, #128	; 0x80
 8002f2a:	0452      	lsls	r2, r2, #17
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	62bb      	str	r3, [r7, #40]	; 0x28
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( xWaitForAllBits != pdFALSE )
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d004      	beq.n	8002f40 <xEventGroupWaitBits+0xc4>
            {
                uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8002f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f38:	2280      	movs	r2, #128	; 0x80
 8002f3a:	04d2      	lsls	r2, r2, #19
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            /* Store the bits that the calling task is waiting for in the
             * task's event list item so the kernel knows when a match is
             * found.  Then enter the blocked state. */
            vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	1d18      	adds	r0, r3, #4
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f4c:	0019      	movs	r1, r3
 8002f4e:	f001 f86f 	bl	8004030 <vTaskPlaceOnUnorderedEventList>

            /* This is obsolete as it will get set after the task unblocks, but
             * some compilers mistakenly generate a warning about the variable
             * being returned without being set if it is not done. */
            uxReturn = 0;
 8002f52:	2300      	movs	r3, #0
 8002f54:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
        }
    }
    xAlreadyYielded = xTaskResumeAll();
 8002f56:	f000 fdf9 	bl	8003b4c <xTaskResumeAll>
 8002f5a:	0003      	movs	r3, r0
 8002f5c:	617b      	str	r3, [r7, #20]

    if( xTicksToWait != ( TickType_t ) 0 )
 8002f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d02c      	beq.n	8002fbe <xEventGroupWaitBits+0x142>
    {
        if( xAlreadyYielded == pdFALSE )
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <xEventGroupWaitBits+0xf2>
        {
            portYIELD_WITHIN_API();
 8002f6a:	f002 f869 	bl	8005040 <vPortYield>

        /* The task blocked to wait for its required bits to be set - at this
         * point either the required bits were set or the block time expired.  If
         * the required bits were set they will have been stored in the task's
         * event list item, and they should now be retrieved then cleared. */
        uxReturn = uxTaskResetEventItemValue();
 8002f6e:	f001 fb95 	bl	800469c <uxTaskResetEventItemValue>
 8002f72:	0003      	movs	r3, r0
 8002f74:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8002f76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f78:	2380      	movs	r3, #128	; 0x80
 8002f7a:	049b      	lsls	r3, r3, #18
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	d11a      	bne.n	8002fb6 <xEventGroupWaitBits+0x13a>
        {
            taskENTER_CRITICAL();
 8002f80:	f002 f86e 	bl	8005060 <vPortEnterCritical>
            {
                /* The task timed out, just return the current event bit value. */
                uxReturn = pxEventBits->uxEventBits;
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* It is possible that the event bits were updated between this
                 * task leaving the Blocked state and running again. */
                if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	68b9      	ldr	r1, [r7, #8]
 8002f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f90:	0018      	movs	r0, r3
 8002f92:	f000 f892 	bl	80030ba <prvTestWaitCondition>
 8002f96:	1e03      	subs	r3, r0, #0
 8002f98:	d009      	beq.n	8002fae <xEventGroupWaitBits+0x132>
                {
                    if( xClearOnExit != pdFALSE )
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d006      	beq.n	8002fae <xEventGroupWaitBits+0x132>
                    {
                        pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	43d2      	mvns	r2, r2
 8002fa8:	401a      	ands	r2, r3
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fac:	601a      	str	r2, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                xTimeoutOccurred = pdTRUE;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	623b      	str	r3, [r7, #32]
            }
            taskEXIT_CRITICAL();
 8002fb2:	f002 f867 	bl	8005084 <vPortExitCritical>
        {
            /* The task unblocked because the bits were set. */
        }

        /* The task blocked so control bits may have been set. */
        uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb8:	021b      	lsls	r3, r3, #8
 8002fba:	0a1b      	lsrs	r3, r3, #8
 8002fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

    /* Prevent compiler warnings when trace macros are not used. */
    ( void ) xTimeoutOccurred;

    return uxReturn;
 8002fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	b00c      	add	sp, #48	; 0x30
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <xEventGroupSetBits>:
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b08c      	sub	sp, #48	; 0x30
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
    ListItem_t * pxListItem;
    ListItem_t * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	62bb      	str	r3, [r7, #40]	; 0x28
    EventGroup_t * pxEventBits = xEventGroup;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	623b      	str	r3, [r7, #32]
    BaseType_t xMatchFound = pdFALSE;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check the user is not attempting to set the bits used by the kernel
     * itself. */
    configASSERT( xEventGroup );
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <xEventGroupSetBits+0x20>
 8002fe4:	b672      	cpsid	i
 8002fe6:	e7fe      	b.n	8002fe6 <xEventGroupSetBits+0x1e>
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	0e1b      	lsrs	r3, r3, #24
 8002fec:	061b      	lsls	r3, r3, #24
 8002fee:	d001      	beq.n	8002ff4 <xEventGroupSetBits+0x2c>
 8002ff0:	b672      	cpsid	i
 8002ff2:	e7fe      	b.n	8002ff2 <xEventGroupSetBits+0x2a>

    pxList = &( pxEventBits->xTasksWaitingForBits );
 8002ff4:	6a3b      	ldr	r3, [r7, #32]
 8002ff6:	3304      	adds	r3, #4
 8002ff8:	61fb      	str	r3, [r7, #28]
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	3308      	adds	r3, #8
 8002ffe:	61bb      	str	r3, [r7, #24]
    vTaskSuspendAll();
 8003000:	f000 fd98 	bl	8003b34 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
 800300a:	6a3b      	ldr	r3, [r7, #32]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	431a      	orrs	r2, r3
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	601a      	str	r2, [r3, #0]

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
 8003016:	e03d      	b.n	8003094 <xEventGroupSetBits+0xcc>
        {
            pxNext = listGET_NEXT( pxListItem );
 8003018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	617b      	str	r3, [r7, #20]
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800301e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	613b      	str	r3, [r7, #16]
            xMatchFound = pdFALSE;
 8003024:	2300      	movs	r3, #0
 8003026:	627b      	str	r3, [r7, #36]	; 0x24

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	0e1b      	lsrs	r3, r3, #24
 800302c:	061b      	lsls	r3, r3, #24
 800302e:	60fb      	str	r3, [r7, #12]
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	021b      	lsls	r3, r3, #8
 8003034:	0a1b      	lsrs	r3, r3, #8
 8003036:	613b      	str	r3, [r7, #16]

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	2380      	movs	r3, #128	; 0x80
 800303c:	04db      	lsls	r3, r3, #19
 800303e:	4013      	ands	r3, r2
 8003040:	d107      	bne.n	8003052 <xEventGroupSetBits+0x8a>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	4013      	ands	r3, r2
 800304a:	d00b      	beq.n	8003064 <xEventGroupSetBits+0x9c>
                {
                    xMatchFound = pdTRUE;
 800304c:	2301      	movs	r3, #1
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
 8003050:	e008      	b.n	8003064 <xEventGroupSetBits+0x9c>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	4013      	ands	r3, r2
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	429a      	cmp	r2, r3
 800305e:	d101      	bne.n	8003064 <xEventGroupSetBits+0x9c>
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
 8003060:	2301      	movs	r3, #1
 8003062:	627b      	str	r3, [r7, #36]	; 0x24
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
 8003064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003066:	2b00      	cmp	r3, #0
 8003068:	d012      	beq.n	8003090 <xEventGroupSetBits+0xc8>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	2380      	movs	r3, #128	; 0x80
 800306e:	045b      	lsls	r3, r3, #17
 8003070:	4013      	ands	r3, r2
 8003072:	d003      	beq.n	800307c <xEventGroupSetBits+0xb4>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
 8003074:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	4313      	orrs	r3, r2
 800307a:	62bb      	str	r3, [r7, #40]	; 0x28
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800307c:	6a3b      	ldr	r3, [r7, #32]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2280      	movs	r2, #128	; 0x80
 8003082:	0492      	lsls	r2, r2, #18
 8003084:	431a      	orrs	r2, r3
 8003086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003088:	0011      	movs	r1, r2
 800308a:	0018      	movs	r0, r3
 800308c:	f001 f91e 	bl	80042cc <vTaskRemoveFromUnorderedEventList>
            }

            /* Move onto the next list item.  Note pxListItem->pxNext is not
             * used here as the list item may have been removed from the event list
             * and inserted into the ready/pending reading list. */
            pxListItem = pxNext;
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	62fb      	str	r3, [r7, #44]	; 0x2c
        while( pxListItem != pxListEnd )
 8003094:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	429a      	cmp	r2, r3
 800309a:	d1bd      	bne.n	8003018 <xEventGroupSetBits+0x50>
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 800309c:	6a3b      	ldr	r3, [r7, #32]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030a2:	43d2      	mvns	r2, r2
 80030a4:	401a      	ands	r2, r3
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	601a      	str	r2, [r3, #0]
    }
    ( void ) xTaskResumeAll();
 80030aa:	f000 fd4f 	bl	8003b4c <xTaskResumeAll>

    return pxEventBits->uxEventBits;
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	681b      	ldr	r3, [r3, #0]
}
 80030b2:	0018      	movs	r0, r3
 80030b4:	46bd      	mov	sp, r7
 80030b6:	b00c      	add	sp, #48	; 0x30
 80030b8:	bd80      	pop	{r7, pc}

080030ba <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
                                        const EventBits_t uxBitsToWaitFor,
                                        const BaseType_t xWaitForAllBits )
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b086      	sub	sp, #24
 80030be:	af00      	add	r7, sp, #0
 80030c0:	60f8      	str	r0, [r7, #12]
 80030c2:	60b9      	str	r1, [r7, #8]
 80030c4:	607a      	str	r2, [r7, #4]
    BaseType_t xWaitConditionMet = pdFALSE;
 80030c6:	2300      	movs	r3, #0
 80030c8:	617b      	str	r3, [r7, #20]

    if( xWaitForAllBits == pdFALSE )
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d106      	bne.n	80030de <prvTestWaitCondition+0x24>
    {
        /* Task only has to wait for one bit within uxBitsToWaitFor to be
         * set.  Is one already set? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	68ba      	ldr	r2, [r7, #8]
 80030d4:	4013      	ands	r3, r2
 80030d6:	d00a      	beq.n	80030ee <prvTestWaitCondition+0x34>
        {
            xWaitConditionMet = pdTRUE;
 80030d8:	2301      	movs	r3, #1
 80030da:	617b      	str	r3, [r7, #20]
 80030dc:	e007      	b.n	80030ee <prvTestWaitCondition+0x34>
    }
    else
    {
        /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
         * Are they set already? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	4013      	ands	r3, r2
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d101      	bne.n	80030ee <prvTestWaitCondition+0x34>
        {
            xWaitConditionMet = pdTRUE;
 80030ea:	2301      	movs	r3, #1
 80030ec:	617b      	str	r3, [r7, #20]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    return xWaitConditionMet;
 80030ee:	697b      	ldr	r3, [r7, #20]
}
 80030f0:	0018      	movs	r0, r3
 80030f2:	46bd      	mov	sp, r7
 80030f4:	b006      	add	sp, #24
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3308      	adds	r3, #8
 8003104:	001a      	movs	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	4252      	negs	r2, r2
 8003110:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	3308      	adds	r3, #8
 8003116:	001a      	movs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3308      	adds	r3, #8
 8003120:	001a      	movs	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800312c:	46c0      	nop			; (mov r8, r8)
 800312e:	46bd      	mov	sp, r7
 8003130:	b002      	add	sp, #8
 8003132:	bd80      	pop	{r7, pc}

08003134 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	46bd      	mov	sp, r7
 8003146:	b002      	add	sp, #8
 8003148:	bd80      	pop	{r7, pc}

0800314a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b084      	sub	sp, #16
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
 8003152:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	3301      	adds	r3, #1
 800315e:	d103      	bne.n	8003168 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	e00c      	b.n	8003182 <vListInsert+0x38>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3308      	adds	r3, #8
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	e002      	b.n	8003176 <vListInsert+0x2c>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68ba      	ldr	r2, [r7, #8]
 800317e:	429a      	cmp	r2, r3
 8003180:	d2f6      	bcs.n	8003170 <vListInsert+0x26>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	1c5a      	adds	r2, r3, #1
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	601a      	str	r2, [r3, #0]
}
 80031ae:	46c0      	nop			; (mov r8, r8)
 80031b0:	46bd      	mov	sp, r7
 80031b2:	b004      	add	sp, #16
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b084      	sub	sp, #16
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6892      	ldr	r2, [r2, #8]
 80031cc:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	6852      	ldr	r2, [r2, #4]
 80031d6:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d103      	bne.n	80031ea <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689a      	ldr	r2, [r3, #8]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	1e5a      	subs	r2, r3, #1
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
}
 80031fe:	0018      	movs	r0, r3
 8003200:	46bd      	mov	sp, r7
 8003202:	b004      	add	sp, #16
 8003204:	bd80      	pop	{r7, pc}

08003206 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003206:	b5b0      	push	{r4, r5, r7, lr}
 8003208:	b084      	sub	sp, #16
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
 800320e:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8003210:	2301      	movs	r3, #1
 8003212:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <xQueueGenericReset+0x1c>
 800321e:	b672      	cpsid	i
 8003220:	e7fe      	b.n	8003220 <xQueueGenericReset+0x1a>

    if( ( pxQueue != NULL ) &&
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d100      	bne.n	800322a <xQueueGenericReset+0x24>
 8003228:	e06a      	b.n	8003300 <xQueueGenericReset+0xfa>
        ( pxQueue->uxLength >= 1U ) &&
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800322e:	2b00      	cmp	r3, #0
 8003230:	d066      	beq.n	8003300 <xQueueGenericReset+0xfa>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323a:	2400      	movs	r4, #0
 800323c:	0c15      	lsrs	r5, r2, #16
 800323e:	0c19      	lsrs	r1, r3, #16
 8003240:	b2a8      	uxth	r0, r5
 8003242:	2800      	cmp	r0, #0
 8003244:	d104      	bne.n	8003250 <xQueueGenericReset+0x4a>
 8003246:	b288      	uxth	r0, r1
 8003248:	2800      	cmp	r0, #0
 800324a:	d013      	beq.n	8003274 <xQueueGenericReset+0x6e>
 800324c:	1c10      	adds	r0, r2, #0
 800324e:	e004      	b.n	800325a <xQueueGenericReset+0x54>
 8003250:	b289      	uxth	r1, r1
 8003252:	2900      	cmp	r1, #0
 8003254:	d10d      	bne.n	8003272 <xQueueGenericReset+0x6c>
 8003256:	1c29      	adds	r1, r5, #0
 8003258:	1c18      	adds	r0, r3, #0
 800325a:	b292      	uxth	r2, r2
 800325c:	b29b      	uxth	r3, r3
 800325e:	435a      	muls	r2, r3
 8003260:	b283      	uxth	r3, r0
 8003262:	b289      	uxth	r1, r1
 8003264:	434b      	muls	r3, r1
 8003266:	0c12      	lsrs	r2, r2, #16
 8003268:	189b      	adds	r3, r3, r2
 800326a:	141b      	asrs	r3, r3, #16
 800326c:	b29b      	uxth	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d000      	beq.n	8003274 <xQueueGenericReset+0x6e>
 8003272:	2401      	movs	r4, #1
 8003274:	1e23      	subs	r3, r4, #0
        ( pxQueue->uxLength >= 1U ) &&
 8003276:	d143      	bne.n	8003300 <xQueueGenericReset+0xfa>
    {
        taskENTER_CRITICAL();
 8003278:	f001 fef2 	bl	8005060 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003288:	434b      	muls	r3, r1
 800328a:	18d2      	adds	r2, r2, r3
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	2200      	movs	r2, #0
 8003294:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a6:	1e59      	subs	r1, r3, #1
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ac:	434b      	muls	r3, r1
 80032ae:	18d2      	adds	r2, r2, r3
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	2244      	movs	r2, #68	; 0x44
 80032b8:	21ff      	movs	r1, #255	; 0xff
 80032ba:	5499      	strb	r1, [r3, r2]
            pxQueue->cTxLock = queueUNLOCKED;
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	2245      	movs	r2, #69	; 0x45
 80032c0:	21ff      	movs	r1, #255	; 0xff
 80032c2:	5499      	strb	r1, [r3, r2]

            if( xNewQueue == pdFALSE )
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10d      	bne.n	80032e6 <xQueueGenericReset+0xe0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d013      	beq.n	80032fa <xQueueGenericReset+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	3310      	adds	r3, #16
 80032d6:	0018      	movs	r0, r3
 80032d8:	f000 ff2e 	bl	8004138 <xTaskRemoveFromEventList>
 80032dc:	1e03      	subs	r3, r0, #0
 80032de:	d00c      	beq.n	80032fa <xQueueGenericReset+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80032e0:	f001 feae 	bl	8005040 <vPortYield>
 80032e4:	e009      	b.n	80032fa <xQueueGenericReset+0xf4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	3310      	adds	r3, #16
 80032ea:	0018      	movs	r0, r3
 80032ec:	f7ff ff04 	bl	80030f8 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	3324      	adds	r3, #36	; 0x24
 80032f4:	0018      	movs	r0, r3
 80032f6:	f7ff feff 	bl	80030f8 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80032fa:	f001 fec3 	bl	8005084 <vPortExitCritical>
 80032fe:	e001      	b.n	8003304 <xQueueGenericReset+0xfe>
    }
    else
    {
        xReturn = pdFAIL;
 8003300:	2300      	movs	r3, #0
 8003302:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <xQueueGenericReset+0x108>
 800330a:	b672      	cpsid	i
 800330c:	e7fe      	b.n	800330c <xQueueGenericReset+0x106>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800330e:	68fb      	ldr	r3, [r7, #12]
}
 8003310:	0018      	movs	r0, r3
 8003312:	46bd      	mov	sp, r7
 8003314:	b004      	add	sp, #16
 8003316:	bdb0      	pop	{r4, r5, r7, pc}

08003318 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800331a:	b08b      	sub	sp, #44	; 0x2c
 800331c:	af02      	add	r7, sp, #8
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	1dfb      	adds	r3, r7, #7
 8003324:	701a      	strb	r2, [r3, #0]
        Queue_t * pxNewQueue = NULL;
 8003326:	2300      	movs	r3, #0
 8003328:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d047      	beq.n	80033c0 <xQueueGenericCreate+0xa8>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003330:	2000      	movs	r0, #0
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	0c19      	lsrs	r1, r3, #16
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	1c1e      	adds	r6, r3, #0
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	0c1b      	lsrs	r3, r3, #16
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	1c15      	adds	r5, r2, #0
 8003342:	b28a      	uxth	r2, r1
 8003344:	2a00      	cmp	r2, #0
 8003346:	d105      	bne.n	8003354 <xQueueGenericCreate+0x3c>
 8003348:	b29a      	uxth	r2, r3
 800334a:	2a00      	cmp	r2, #0
 800334c:	d013      	beq.n	8003376 <xQueueGenericCreate+0x5e>
 800334e:	1c19      	adds	r1, r3, #0
 8003350:	1c34      	adds	r4, r6, #0
 8003352:	e003      	b.n	800335c <xQueueGenericCreate+0x44>
 8003354:	b29b      	uxth	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10c      	bne.n	8003374 <xQueueGenericCreate+0x5c>
 800335a:	1c2c      	adds	r4, r5, #0
 800335c:	b2b3      	uxth	r3, r6
 800335e:	b2aa      	uxth	r2, r5
 8003360:	435a      	muls	r2, r3
 8003362:	b2a3      	uxth	r3, r4
 8003364:	b289      	uxth	r1, r1
 8003366:	434b      	muls	r3, r1
 8003368:	0c12      	lsrs	r2, r2, #16
 800336a:	189b      	adds	r3, r3, r2
 800336c:	141b      	asrs	r3, r3, #16
 800336e:	b29b      	uxth	r3, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	d000      	beq.n	8003376 <xQueueGenericCreate+0x5e>
 8003374:	2001      	movs	r0, #1
 8003376:	1e03      	subs	r3, r0, #0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003378:	d122      	bne.n	80033c0 <xQueueGenericCreate+0xa8>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	68ba      	ldr	r2, [r7, #8]
 800337e:	4353      	muls	r3, r2
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003380:	3351      	adds	r3, #81	; 0x51
 8003382:	d81d      	bhi.n	80033c0 <xQueueGenericCreate+0xa8>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	4353      	muls	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	3350      	adds	r3, #80	; 0x50
 8003390:	0018      	movs	r0, r3
 8003392:	f001 fefd 	bl	8005190 <pvPortMalloc>
 8003396:	0003      	movs	r3, r0
 8003398:	61fb      	str	r3, [r7, #28]

            if( pxNewQueue != NULL )
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d014      	beq.n	80033ca <xQueueGenericCreate+0xb2>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	3350      	adds	r3, #80	; 0x50
 80033a8:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80033aa:	1dfb      	adds	r3, r7, #7
 80033ac:	781c      	ldrb	r4, [r3, #0]
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	68b9      	ldr	r1, [r7, #8]
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	0023      	movs	r3, r4
 80033ba:	f000 f80b 	bl	80033d4 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80033be:	e004      	b.n	80033ca <xQueueGenericCreate+0xb2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <xQueueGenericCreate+0xb2>
 80033c6:	b672      	cpsid	i
 80033c8:	e7fe      	b.n	80033c8 <xQueueGenericCreate+0xb0>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80033ca:	69fb      	ldr	r3, [r7, #28]
    }
 80033cc:	0018      	movs	r0, r3
 80033ce:	46bd      	mov	sp, r7
 80033d0:	b009      	add	sp, #36	; 0x24
 80033d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033d4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
 80033e0:	001a      	movs	r2, r3
 80033e2:	1cfb      	adds	r3, r7, #3
 80033e4:	701a      	strb	r2, [r3, #0]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d103      	bne.n	80033f4 <prvInitialiseNewQueue+0x20>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	e002      	b.n	80033fa <prvInitialiseNewQueue+0x26>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	2101      	movs	r1, #1
 800340a:	0018      	movs	r0, r3
 800340c:	f7ff fefb 	bl	8003206 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	1cfa      	adds	r2, r7, #3
 8003414:	214c      	movs	r1, #76	; 0x4c
 8003416:	7812      	ldrb	r2, [r2, #0]
 8003418:	545a      	strb	r2, [r3, r1]
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	46bd      	mov	sp, r7
 800341e:	b004      	add	sp, #16
 8003420:	bd80      	pop	{r7, pc}

08003422 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b08a      	sub	sp, #40	; 0x28
 8003426:	af00      	add	r7, sp, #0
 8003428:	60f8      	str	r0, [r7, #12]
 800342a:	60b9      	str	r1, [r7, #8]
 800342c:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800342e:	2300      	movs	r3, #0
 8003430:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <xQueueReceive+0x1e>
 800343c:	b672      	cpsid	i
 800343e:	e7fe      	b.n	800343e <xQueueReceive+0x1c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d103      	bne.n	800344e <xQueueReceive+0x2c>
 8003446:	6a3b      	ldr	r3, [r7, #32]
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <xQueueReceive+0x30>
 800344e:	2301      	movs	r3, #1
 8003450:	e000      	b.n	8003454 <xQueueReceive+0x32>
 8003452:	2300      	movs	r3, #0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d101      	bne.n	800345c <xQueueReceive+0x3a>
 8003458:	b672      	cpsid	i
 800345a:	e7fe      	b.n	800345a <xQueueReceive+0x38>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800345c:	f001 f902 	bl	8004664 <xTaskGetSchedulerState>
 8003460:	1e03      	subs	r3, r0, #0
 8003462:	d102      	bne.n	800346a <xQueueReceive+0x48>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <xQueueReceive+0x4c>
 800346a:	2301      	movs	r3, #1
 800346c:	e000      	b.n	8003470 <xQueueReceive+0x4e>
 800346e:	2300      	movs	r3, #0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d101      	bne.n	8003478 <xQueueReceive+0x56>
 8003474:	b672      	cpsid	i
 8003476:	e7fe      	b.n	8003476 <xQueueReceive+0x54>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003478:	f001 fdf2 	bl	8005060 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003480:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d01a      	beq.n	80034be <xQueueReceive+0x9c>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	0011      	movs	r1, r2
 800348e:	0018      	movs	r0, r3
 8003490:	f000 f87c 	bl	800358c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	1e5a      	subs	r2, r3, #1
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d008      	beq.n	80034b6 <xQueueReceive+0x94>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	3310      	adds	r3, #16
 80034a8:	0018      	movs	r0, r3
 80034aa:	f000 fe45 	bl	8004138 <xTaskRemoveFromEventList>
 80034ae:	1e03      	subs	r3, r0, #0
 80034b0:	d001      	beq.n	80034b6 <xQueueReceive+0x94>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80034b2:	f001 fdc5 	bl	8005040 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80034b6:	f001 fde5 	bl	8005084 <vPortExitCritical>
                return pdPASS;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e062      	b.n	8003584 <xQueueReceive+0x162>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d103      	bne.n	80034cc <xQueueReceive+0xaa>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80034c4:	f001 fdde 	bl	8005084 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80034c8:	2300      	movs	r3, #0
 80034ca:	e05b      	b.n	8003584 <xQueueReceive+0x162>
                }
                else if( xEntryTimeSet == pdFALSE )
 80034cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d106      	bne.n	80034e0 <xQueueReceive+0xbe>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80034d2:	2314      	movs	r3, #20
 80034d4:	18fb      	adds	r3, r7, r3
 80034d6:	0018      	movs	r0, r3
 80034d8:	f000 ffa4 	bl	8004424 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80034dc:	2301      	movs	r3, #1
 80034de:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80034e0:	f001 fdd0 	bl	8005084 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80034e4:	f000 fb26 	bl	8003b34 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80034e8:	f001 fdba 	bl	8005060 <vPortEnterCritical>
 80034ec:	6a3b      	ldr	r3, [r7, #32]
 80034ee:	2244      	movs	r2, #68	; 0x44
 80034f0:	5c9b      	ldrb	r3, [r3, r2]
 80034f2:	b25b      	sxtb	r3, r3
 80034f4:	3301      	adds	r3, #1
 80034f6:	d103      	bne.n	8003500 <xQueueReceive+0xde>
 80034f8:	6a3b      	ldr	r3, [r7, #32]
 80034fa:	2244      	movs	r2, #68	; 0x44
 80034fc:	2100      	movs	r1, #0
 80034fe:	5499      	strb	r1, [r3, r2]
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	2245      	movs	r2, #69	; 0x45
 8003504:	5c9b      	ldrb	r3, [r3, r2]
 8003506:	b25b      	sxtb	r3, r3
 8003508:	3301      	adds	r3, #1
 800350a:	d103      	bne.n	8003514 <xQueueReceive+0xf2>
 800350c:	6a3b      	ldr	r3, [r7, #32]
 800350e:	2245      	movs	r2, #69	; 0x45
 8003510:	2100      	movs	r1, #0
 8003512:	5499      	strb	r1, [r3, r2]
 8003514:	f001 fdb6 	bl	8005084 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003518:	1d3a      	adds	r2, r7, #4
 800351a:	2314      	movs	r3, #20
 800351c:	18fb      	adds	r3, r7, r3
 800351e:	0011      	movs	r1, r2
 8003520:	0018      	movs	r0, r3
 8003522:	f000 ff93 	bl	800444c <xTaskCheckForTimeOut>
 8003526:	1e03      	subs	r3, r0, #0
 8003528:	d11e      	bne.n	8003568 <xQueueReceive+0x146>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800352a:	6a3b      	ldr	r3, [r7, #32]
 800352c:	0018      	movs	r0, r3
 800352e:	f000 f8b1 	bl	8003694 <prvIsQueueEmpty>
 8003532:	1e03      	subs	r3, r0, #0
 8003534:	d011      	beq.n	800355a <xQueueReceive+0x138>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	3324      	adds	r3, #36	; 0x24
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	0011      	movs	r1, r2
 800353e:	0018      	movs	r0, r3
 8003540:	f000 fd58 	bl	8003ff4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003544:	6a3b      	ldr	r3, [r7, #32]
 8003546:	0018      	movs	r0, r3
 8003548:	f000 f846 	bl	80035d8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800354c:	f000 fafe 	bl	8003b4c <xTaskResumeAll>
 8003550:	1e03      	subs	r3, r0, #0
 8003552:	d191      	bne.n	8003478 <xQueueReceive+0x56>
                {
                    portYIELD_WITHIN_API();
 8003554:	f001 fd74 	bl	8005040 <vPortYield>
 8003558:	e78e      	b.n	8003478 <xQueueReceive+0x56>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	0018      	movs	r0, r3
 800355e:	f000 f83b 	bl	80035d8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003562:	f000 faf3 	bl	8003b4c <xTaskResumeAll>
 8003566:	e787      	b.n	8003478 <xQueueReceive+0x56>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003568:	6a3b      	ldr	r3, [r7, #32]
 800356a:	0018      	movs	r0, r3
 800356c:	f000 f834 	bl	80035d8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003570:	f000 faec 	bl	8003b4c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003574:	6a3b      	ldr	r3, [r7, #32]
 8003576:	0018      	movs	r0, r3
 8003578:	f000 f88c 	bl	8003694 <prvIsQueueEmpty>
 800357c:	1e03      	subs	r3, r0, #0
 800357e:	d100      	bne.n	8003582 <xQueueReceive+0x160>
 8003580:	e77a      	b.n	8003478 <xQueueReceive+0x56>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003582:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003584:	0018      	movs	r0, r3
 8003586:	46bd      	mov	sp, r7
 8003588:	b00a      	add	sp, #40	; 0x28
 800358a:	bd80      	pop	{r7, pc}

0800358c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	2b00      	cmp	r3, #0
 800359c:	d018      	beq.n	80035d0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	18d2      	adds	r2, r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68da      	ldr	r2, [r3, #12]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d303      	bcc.n	80035c0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68d9      	ldr	r1, [r3, #12]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	0018      	movs	r0, r3
 80035cc:	f001 ffaa 	bl	8005524 <memcpy>
    }
}
 80035d0:	46c0      	nop			; (mov r8, r8)
 80035d2:	46bd      	mov	sp, r7
 80035d4:	b002      	add	sp, #8
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80035e0:	f001 fd3e 	bl	8005060 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80035e4:	230f      	movs	r3, #15
 80035e6:	18fb      	adds	r3, r7, r3
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	2145      	movs	r1, #69	; 0x45
 80035ec:	5c52      	ldrb	r2, [r2, r1]
 80035ee:	701a      	strb	r2, [r3, #0]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80035f0:	e013      	b.n	800361a <prvUnlockQueue+0x42>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d016      	beq.n	8003628 <prvUnlockQueue+0x50>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	3324      	adds	r3, #36	; 0x24
 80035fe:	0018      	movs	r0, r3
 8003600:	f000 fd9a 	bl	8004138 <xTaskRemoveFromEventList>
 8003604:	1e03      	subs	r3, r0, #0
 8003606:	d001      	beq.n	800360c <prvUnlockQueue+0x34>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8003608:	f000 ff74 	bl	80044f4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800360c:	210f      	movs	r1, #15
 800360e:	187b      	adds	r3, r7, r1
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	3b01      	subs	r3, #1
 8003614:	b2da      	uxtb	r2, r3
 8003616:	187b      	adds	r3, r7, r1
 8003618:	701a      	strb	r2, [r3, #0]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800361a:	230f      	movs	r3, #15
 800361c:	18fb      	adds	r3, r7, r3
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	b25b      	sxtb	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	dce5      	bgt.n	80035f2 <prvUnlockQueue+0x1a>
 8003626:	e000      	b.n	800362a <prvUnlockQueue+0x52>
                    break;
 8003628:	46c0      	nop			; (mov r8, r8)
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2245      	movs	r2, #69	; 0x45
 800362e:	21ff      	movs	r1, #255	; 0xff
 8003630:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8003632:	f001 fd27 	bl	8005084 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003636:	f001 fd13 	bl	8005060 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800363a:	230e      	movs	r3, #14
 800363c:	18fb      	adds	r3, r7, r3
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	2144      	movs	r1, #68	; 0x44
 8003642:	5c52      	ldrb	r2, [r2, r1]
 8003644:	701a      	strb	r2, [r3, #0]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003646:	e013      	b.n	8003670 <prvUnlockQueue+0x98>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d016      	beq.n	800367e <prvUnlockQueue+0xa6>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3310      	adds	r3, #16
 8003654:	0018      	movs	r0, r3
 8003656:	f000 fd6f 	bl	8004138 <xTaskRemoveFromEventList>
 800365a:	1e03      	subs	r3, r0, #0
 800365c:	d001      	beq.n	8003662 <prvUnlockQueue+0x8a>
                {
                    vTaskMissedYield();
 800365e:	f000 ff49 	bl	80044f4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003662:	210e      	movs	r1, #14
 8003664:	187b      	adds	r3, r7, r1
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	3b01      	subs	r3, #1
 800366a:	b2da      	uxtb	r2, r3
 800366c:	187b      	adds	r3, r7, r1
 800366e:	701a      	strb	r2, [r3, #0]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003670:	230e      	movs	r3, #14
 8003672:	18fb      	adds	r3, r7, r3
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	b25b      	sxtb	r3, r3
 8003678:	2b00      	cmp	r3, #0
 800367a:	dce5      	bgt.n	8003648 <prvUnlockQueue+0x70>
 800367c:	e000      	b.n	8003680 <prvUnlockQueue+0xa8>
            }
            else
            {
                break;
 800367e:	46c0      	nop			; (mov r8, r8)
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2244      	movs	r2, #68	; 0x44
 8003684:	21ff      	movs	r1, #255	; 0xff
 8003686:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8003688:	f001 fcfc 	bl	8005084 <vPortExitCritical>
}
 800368c:	46c0      	nop			; (mov r8, r8)
 800368e:	46bd      	mov	sp, r7
 8003690:	b004      	add	sp, #16
 8003692:	bd80      	pop	{r7, pc}

08003694 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800369c:	f001 fce0 	bl	8005060 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d102      	bne.n	80036ae <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80036a8:	2301      	movs	r3, #1
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	e001      	b.n	80036b2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80036ae:	2300      	movs	r3, #0
 80036b0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80036b2:	f001 fce7 	bl	8005084 <vPortExitCritical>

    return xReturn;
 80036b6:	68fb      	ldr	r3, [r7, #12]
}
 80036b8:	0018      	movs	r0, r3
 80036ba:	46bd      	mov	sp, r7
 80036bc:	b004      	add	sp, #16
 80036be:	bd80      	pop	{r7, pc}

080036c0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80036ca:	2300      	movs	r3, #0
 80036cc:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <vQueueAddToRegistry+0x18>
 80036d4:	b672      	cpsid	i
 80036d6:	e7fe      	b.n	80036d6 <vQueueAddToRegistry+0x16>

        if( pcQueueName != NULL )
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d025      	beq.n	800372a <vQueueAddToRegistry+0x6a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80036de:	2300      	movs	r3, #0
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	e01f      	b.n	8003724 <vQueueAddToRegistry+0x64>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80036e4:	4a17      	ldr	r2, [pc, #92]	; (8003744 <vQueueAddToRegistry+0x84>)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	18d3      	adds	r3, r2, r3
 80036ec:	3304      	adds	r3, #4
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d105      	bne.n	8003702 <vQueueAddToRegistry+0x42>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	00da      	lsls	r2, r3, #3
 80036fa:	4b12      	ldr	r3, [pc, #72]	; (8003744 <vQueueAddToRegistry+0x84>)
 80036fc:	18d3      	adds	r3, r2, r3
 80036fe:	60bb      	str	r3, [r7, #8]
                    break;
 8003700:	e013      	b.n	800372a <vQueueAddToRegistry+0x6a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d10a      	bne.n	800371e <vQueueAddToRegistry+0x5e>
 8003708:	4b0e      	ldr	r3, [pc, #56]	; (8003744 <vQueueAddToRegistry+0x84>)
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	00d2      	lsls	r2, r2, #3
 800370e:	58d3      	ldr	r3, [r2, r3]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d104      	bne.n	800371e <vQueueAddToRegistry+0x5e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	00da      	lsls	r2, r3, #3
 8003718:	4b0a      	ldr	r3, [pc, #40]	; (8003744 <vQueueAddToRegistry+0x84>)
 800371a:	18d3      	adds	r3, r2, r3
 800371c:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	3301      	adds	r3, #1
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2b07      	cmp	r3, #7
 8003728:	d9dc      	bls.n	80036e4 <vQueueAddToRegistry+0x24>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d005      	beq.n	800373c <vQueueAddToRegistry+0x7c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800373c:	46c0      	nop			; (mov r8, r8)
 800373e:	46bd      	mov	sp, r7
 8003740:	b004      	add	sp, #16
 8003742:	bd80      	pop	{r7, pc}
 8003744:	2000021c 	.word	0x2000021c

08003748 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003758:	f001 fc82 	bl	8005060 <vPortEnterCritical>
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	2244      	movs	r2, #68	; 0x44
 8003760:	5c9b      	ldrb	r3, [r3, r2]
 8003762:	b25b      	sxtb	r3, r3
 8003764:	3301      	adds	r3, #1
 8003766:	d103      	bne.n	8003770 <vQueueWaitForMessageRestricted+0x28>
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	2244      	movs	r2, #68	; 0x44
 800376c:	2100      	movs	r1, #0
 800376e:	5499      	strb	r1, [r3, r2]
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	2245      	movs	r2, #69	; 0x45
 8003774:	5c9b      	ldrb	r3, [r3, r2]
 8003776:	b25b      	sxtb	r3, r3
 8003778:	3301      	adds	r3, #1
 800377a:	d103      	bne.n	8003784 <vQueueWaitForMessageRestricted+0x3c>
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	2245      	movs	r2, #69	; 0x45
 8003780:	2100      	movs	r1, #0
 8003782:	5499      	strb	r1, [r3, r2]
 8003784:	f001 fc7e 	bl	8005084 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378c:	2b00      	cmp	r3, #0
 800378e:	d106      	bne.n	800379e <vQueueWaitForMessageRestricted+0x56>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	3324      	adds	r3, #36	; 0x24
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	68b9      	ldr	r1, [r7, #8]
 8003798:	0018      	movs	r0, r3
 800379a:	f000 fc8f 	bl	80040bc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	0018      	movs	r0, r3
 80037a2:	f7ff ff19 	bl	80035d8 <prvUnlockQueue>
    }
 80037a6:	46c0      	nop			; (mov r8, r8)
 80037a8:	46bd      	mov	sp, r7
 80037aa:	b006      	add	sp, #24
 80037ac:	bd80      	pop	{r7, pc}

080037ae <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80037ae:	b590      	push	{r4, r7, lr}
 80037b0:	b08d      	sub	sp, #52	; 0x34
 80037b2:	af04      	add	r7, sp, #16
 80037b4:	60f8      	str	r0, [r7, #12]
 80037b6:	60b9      	str	r1, [r7, #8]
 80037b8:	603b      	str	r3, [r7, #0]
 80037ba:	1dbb      	adds	r3, r7, #6
 80037bc:	801a      	strh	r2, [r3, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80037be:	1dbb      	adds	r3, r7, #6
 80037c0:	881b      	ldrh	r3, [r3, #0]
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	0018      	movs	r0, r3
 80037c6:	f001 fce3 	bl	8005190 <pvPortMalloc>
 80037ca:	0003      	movs	r3, r0
 80037cc:	617b      	str	r3, [r7, #20]

            if( pxStack != NULL )
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d016      	beq.n	8003802 <xTaskCreate+0x54>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80037d4:	2064      	movs	r0, #100	; 0x64
 80037d6:	f001 fcdb 	bl	8005190 <pvPortMalloc>
 80037da:	0003      	movs	r3, r0
 80037dc:	61fb      	str	r3, [r7, #28]

                if( pxNewTCB != NULL )
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d009      	beq.n	80037f8 <xTaskCreate+0x4a>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	2264      	movs	r2, #100	; 0x64
 80037e8:	2100      	movs	r1, #0
 80037ea:	0018      	movs	r0, r3
 80037ec:	f001 fea3 	bl	8005536 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	631a      	str	r2, [r3, #48]	; 0x30
 80037f6:	e006      	b.n	8003806 <xTaskCreate+0x58>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	0018      	movs	r0, r3
 80037fc:	f001 fd70 	bl	80052e0 <vPortFree>
 8003800:	e001      	b.n	8003806 <xTaskCreate+0x58>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8003802:	2300      	movs	r3, #0
 8003804:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d016      	beq.n	800383a <xTaskCreate+0x8c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800380c:	1dbb      	adds	r3, r7, #6
 800380e:	881a      	ldrh	r2, [r3, #0]
 8003810:	683c      	ldr	r4, [r7, #0]
 8003812:	68b9      	ldr	r1, [r7, #8]
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	2300      	movs	r3, #0
 8003818:	9303      	str	r3, [sp, #12]
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	9302      	str	r3, [sp, #8]
 800381e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003820:	9301      	str	r3, [sp, #4]
 8003822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	0023      	movs	r3, r4
 8003828:	f000 f810 	bl	800384c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	0018      	movs	r0, r3
 8003830:	f000 f88c 	bl	800394c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003834:	2301      	movs	r3, #1
 8003836:	61bb      	str	r3, [r7, #24]
 8003838:	e002      	b.n	8003840 <xTaskCreate+0x92>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800383a:	2301      	movs	r3, #1
 800383c:	425b      	negs	r3, r3
 800383e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003840:	69bb      	ldr	r3, [r7, #24]
    }
 8003842:	0018      	movs	r0, r3
 8003844:	46bd      	mov	sp, r7
 8003846:	b009      	add	sp, #36	; 0x24
 8003848:	bd90      	pop	{r4, r7, pc}
	...

0800384c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
 8003858:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800385a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	001a      	movs	r2, r3
 8003864:	21a5      	movs	r1, #165	; 0xa5
 8003866:	f001 fe66 	bl	8005536 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800386a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4935      	ldr	r1, [pc, #212]	; (8003948 <prvInitialiseNewTask+0xfc>)
 8003872:	468c      	mov	ip, r1
 8003874:	4463      	add	r3, ip
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	18d3      	adds	r3, r2, r3
 800387a:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	2207      	movs	r2, #7
 8003880:	4393      	bics	r3, r2
 8003882:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	2207      	movs	r2, #7
 8003888:	4013      	ands	r3, r2
 800388a:	d001      	beq.n	8003890 <prvInitialiseNewTask+0x44>
 800388c:	b672      	cpsid	i
 800388e:	e7fe      	b.n	800388e <prvInitialiseNewTask+0x42>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d01f      	beq.n	80038d6 <prvInitialiseNewTask+0x8a>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003896:	2300      	movs	r3, #0
 8003898:	617b      	str	r3, [r7, #20]
 800389a:	e013      	b.n	80038c4 <prvInitialiseNewTask+0x78>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800389c:	68ba      	ldr	r2, [r7, #8]
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	18d3      	adds	r3, r2, r3
 80038a2:	7818      	ldrb	r0, [r3, #0]
 80038a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038a6:	2134      	movs	r1, #52	; 0x34
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	18d3      	adds	r3, r2, r3
 80038ac:	185b      	adds	r3, r3, r1
 80038ae:	1c02      	adds	r2, r0, #0
 80038b0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	18d3      	adds	r3, r2, r3
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d006      	beq.n	80038cc <prvInitialiseNewTask+0x80>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	3301      	adds	r3, #1
 80038c2:	617b      	str	r3, [r7, #20]
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	2b0f      	cmp	r3, #15
 80038c8:	d9e8      	bls.n	800389c <prvInitialiseNewTask+0x50>
 80038ca:	e000      	b.n	80038ce <prvInitialiseNewTask+0x82>
            {
                break;
 80038cc:	46c0      	nop			; (mov r8, r8)
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80038ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d0:	2243      	movs	r2, #67	; 0x43
 80038d2:	2100      	movs	r1, #0
 80038d4:	5499      	strb	r1, [r3, r2]
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80038d6:	6a3b      	ldr	r3, [r7, #32]
 80038d8:	2b37      	cmp	r3, #55	; 0x37
 80038da:	d901      	bls.n	80038e0 <prvInitialiseNewTask+0x94>
 80038dc:	b672      	cpsid	i
 80038de:	e7fe      	b.n	80038de <prvInitialiseNewTask+0x92>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80038e0:	6a3b      	ldr	r3, [r7, #32]
 80038e2:	2b37      	cmp	r3, #55	; 0x37
 80038e4:	d901      	bls.n	80038ea <prvInitialiseNewTask+0x9e>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80038e6:	2337      	movs	r3, #55	; 0x37
 80038e8:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80038ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ec:	6a3a      	ldr	r2, [r7, #32]
 80038ee:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80038f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f2:	6a3a      	ldr	r2, [r7, #32]
 80038f4:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80038f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f8:	3304      	adds	r3, #4
 80038fa:	0018      	movs	r0, r3
 80038fc:	f7ff fc1a 	bl	8003134 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003902:	3318      	adds	r3, #24
 8003904:	0018      	movs	r0, r3
 8003906:	f7ff fc15 	bl	8003134 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800390a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800390e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	2238      	movs	r2, #56	; 0x38
 8003914:	1ad2      	subs	r2, r2, r3
 8003916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003918:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800391a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800391e:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	68f9      	ldr	r1, [r7, #12]
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	0018      	movs	r0, r3
 8003928:	f001 fb02 	bl	8004f30 <pxPortInitialiseStack>
 800392c:	0002      	movs	r2, r0
 800392e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003930:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	2b00      	cmp	r3, #0
 8003936:	d002      	beq.n	800393e <prvInitialiseNewTask+0xf2>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800393c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800393e:	46c0      	nop			; (mov r8, r8)
 8003940:	46bd      	mov	sp, r7
 8003942:	b006      	add	sp, #24
 8003944:	bd80      	pop	{r7, pc}
 8003946:	46c0      	nop			; (mov r8, r8)
 8003948:	3fffffff 	.word	0x3fffffff

0800394c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003954:	f001 fb84 	bl	8005060 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003958:	4b3d      	ldr	r3, [pc, #244]	; (8003a50 <prvAddNewTaskToReadyList+0x104>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	1c5a      	adds	r2, r3, #1
 800395e:	4b3c      	ldr	r3, [pc, #240]	; (8003a50 <prvAddNewTaskToReadyList+0x104>)
 8003960:	601a      	str	r2, [r3, #0]

        if( pxCurrentTCB == NULL )
 8003962:	4b3c      	ldr	r3, [pc, #240]	; (8003a54 <prvAddNewTaskToReadyList+0x108>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d109      	bne.n	800397e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800396a:	4b3a      	ldr	r3, [pc, #232]	; (8003a54 <prvAddNewTaskToReadyList+0x108>)
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	601a      	str	r2, [r3, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003970:	4b37      	ldr	r3, [pc, #220]	; (8003a50 <prvAddNewTaskToReadyList+0x104>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d110      	bne.n	800399a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003978:	f000 fdd6 	bl	8004528 <prvInitialiseTaskLists>
 800397c:	e00d      	b.n	800399a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800397e:	4b36      	ldr	r3, [pc, #216]	; (8003a58 <prvAddNewTaskToReadyList+0x10c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d109      	bne.n	800399a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003986:	4b33      	ldr	r3, [pc, #204]	; (8003a54 <prvAddNewTaskToReadyList+0x108>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003990:	429a      	cmp	r2, r3
 8003992:	d802      	bhi.n	800399a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003994:	4b2f      	ldr	r3, [pc, #188]	; (8003a54 <prvAddNewTaskToReadyList+0x108>)
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	601a      	str	r2, [r3, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800399a:	4b30      	ldr	r3, [pc, #192]	; (8003a5c <prvAddNewTaskToReadyList+0x110>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	1c5a      	adds	r2, r3, #1
 80039a0:	4b2e      	ldr	r3, [pc, #184]	; (8003a5c <prvAddNewTaskToReadyList+0x110>)
 80039a2:	601a      	str	r2, [r3, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80039a4:	4b2d      	ldr	r3, [pc, #180]	; (8003a5c <prvAddNewTaskToReadyList+0x110>)
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	645a      	str	r2, [r3, #68]	; 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b0:	4b2b      	ldr	r3, [pc, #172]	; (8003a60 <prvAddNewTaskToReadyList+0x114>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d903      	bls.n	80039c0 <prvAddNewTaskToReadyList+0x74>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039bc:	4b28      	ldr	r3, [pc, #160]	; (8003a60 <prvAddNewTaskToReadyList+0x114>)
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c4:	4927      	ldr	r1, [pc, #156]	; (8003a64 <prvAddNewTaskToReadyList+0x118>)
 80039c6:	0013      	movs	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	189b      	adds	r3, r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	18cb      	adds	r3, r1, r3
 80039d0:	3304      	adds	r3, #4
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	60fb      	str	r3, [r7, #12]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	609a      	str	r2, [r3, #8]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	689a      	ldr	r2, [r3, #8]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	60da      	str	r2, [r3, #12]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	3204      	adds	r2, #4
 80039ec:	605a      	str	r2, [r3, #4]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	1d1a      	adds	r2, r3, #4
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	609a      	str	r2, [r3, #8]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039fa:	0013      	movs	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	189b      	adds	r3, r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4a18      	ldr	r2, [pc, #96]	; (8003a64 <prvAddNewTaskToReadyList+0x118>)
 8003a04:	189a      	adds	r2, r3, r2
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	615a      	str	r2, [r3, #20]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a0e:	4915      	ldr	r1, [pc, #84]	; (8003a64 <prvAddNewTaskToReadyList+0x118>)
 8003a10:	0013      	movs	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	189b      	adds	r3, r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	585b      	ldr	r3, [r3, r1]
 8003a1a:	1c58      	adds	r0, r3, #1
 8003a1c:	4911      	ldr	r1, [pc, #68]	; (8003a64 <prvAddNewTaskToReadyList+0x118>)
 8003a1e:	0013      	movs	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	189b      	adds	r3, r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	5058      	str	r0, [r3, r1]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003a28:	f001 fb2c 	bl	8005084 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003a2c:	4b0a      	ldr	r3, [pc, #40]	; (8003a58 <prvAddNewTaskToReadyList+0x10c>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d008      	beq.n	8003a46 <prvAddNewTaskToReadyList+0xfa>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a34:	4b07      	ldr	r3, [pc, #28]	; (8003a54 <prvAddNewTaskToReadyList+0x108>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d201      	bcs.n	8003a46 <prvAddNewTaskToReadyList+0xfa>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003a42:	f001 fafd 	bl	8005040 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003a46:	46c0      	nop			; (mov r8, r8)
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	b004      	add	sp, #16
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	46c0      	nop			; (mov r8, r8)
 8003a50:	20000730 	.word	0x20000730
 8003a54:	2000025c 	.word	0x2000025c
 8003a58:	2000073c 	.word	0x2000073c
 8003a5c:	2000074c 	.word	0x2000074c
 8003a60:	20000738 	.word	0x20000738
 8003a64:	20000260 	.word	0x20000260

08003a68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003a70:	2300      	movs	r3, #0
 8003a72:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d010      	beq.n	8003a9c <vTaskDelay+0x34>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8003a7a:	4b0d      	ldr	r3, [pc, #52]	; (8003ab0 <vTaskDelay+0x48>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <vTaskDelay+0x1e>
 8003a82:	b672      	cpsid	i
 8003a84:	e7fe      	b.n	8003a84 <vTaskDelay+0x1c>
            vTaskSuspendAll();
 8003a86:	f000 f855 	bl	8003b34 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	0018      	movs	r0, r3
 8003a90:	f000 ff5e 	bl	8004950 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003a94:	f000 f85a 	bl	8003b4c <xTaskResumeAll>
 8003a98:	0003      	movs	r3, r0
 8003a9a:	60fb      	str	r3, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <vTaskDelay+0x3e>
        {
            portYIELD_WITHIN_API();
 8003aa2:	f001 facd 	bl	8005040 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003aa6:	46c0      	nop			; (mov r8, r8)
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	b004      	add	sp, #16
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	46c0      	nop			; (mov r8, r8)
 8003ab0:	20000758 	.word	0x20000758

08003ab4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8003aba:	4917      	ldr	r1, [pc, #92]	; (8003b18 <vTaskStartScheduler+0x64>)
 8003abc:	4817      	ldr	r0, [pc, #92]	; (8003b1c <vTaskStartScheduler+0x68>)
 8003abe:	4b18      	ldr	r3, [pc, #96]	; (8003b20 <vTaskStartScheduler+0x6c>)
 8003ac0:	9301      	str	r3, [sp, #4]
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	2280      	movs	r2, #128	; 0x80
 8003aca:	f7ff fe70 	bl	80037ae <xTaskCreate>
 8003ace:	0003      	movs	r3, r0
 8003ad0:	607b      	str	r3, [r7, #4]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d103      	bne.n	8003ae0 <vTaskStartScheduler+0x2c>
        {
            xReturn = xTimerCreateTimerTask();
 8003ad8:	f000 ffa8 	bl	8004a2c <xTimerCreateTimerTask>
 8003adc:	0003      	movs	r3, r0
 8003ade:	607b      	str	r3, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d10d      	bne.n	8003b02 <vTaskStartScheduler+0x4e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 8003ae6:	b672      	cpsid	i
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003ae8:	4b0e      	ldr	r3, [pc, #56]	; (8003b24 <vTaskStartScheduler+0x70>)
 8003aea:	2201      	movs	r2, #1
 8003aec:	4252      	negs	r2, r2
 8003aee:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003af0:	4b0d      	ldr	r3, [pc, #52]	; (8003b28 <vTaskStartScheduler+0x74>)
 8003af2:	2201      	movs	r2, #1
 8003af4:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003af6:	4b0d      	ldr	r3, [pc, #52]	; (8003b2c <vTaskStartScheduler+0x78>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8003afc:	f001 fa7c 	bl	8004ff8 <xPortStartScheduler>
 8003b00:	e004      	b.n	8003b0c <vTaskStartScheduler+0x58>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	3301      	adds	r3, #1
 8003b06:	d101      	bne.n	8003b0c <vTaskStartScheduler+0x58>
 8003b08:	b672      	cpsid	i
 8003b0a:	e7fe      	b.n	8003b0a <vTaskStartScheduler+0x56>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003b0c:	4b08      	ldr	r3, [pc, #32]	; (8003b30 <vTaskStartScheduler+0x7c>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
}
 8003b10:	46c0      	nop			; (mov r8, r8)
 8003b12:	46bd      	mov	sp, r7
 8003b14:	b002      	add	sp, #8
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	08006718 	.word	0x08006718
 8003b1c:	08004509 	.word	0x08004509
 8003b20:	20000754 	.word	0x20000754
 8003b24:	20000750 	.word	0x20000750
 8003b28:	2000073c 	.word	0x2000073c
 8003b2c:	20000734 	.word	0x20000734
 8003b30:	20000098 	.word	0x20000098

08003b34 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003b38:	4b03      	ldr	r3, [pc, #12]	; (8003b48 <vTaskSuspendAll+0x14>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	1c5a      	adds	r2, r3, #1
 8003b3e:	4b02      	ldr	r3, [pc, #8]	; (8003b48 <vTaskSuspendAll+0x14>)
 8003b40:	601a      	str	r2, [r3, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003b42:	46c0      	nop			; (mov r8, r8)
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	20000758 	.word	0x20000758

08003b4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003b52:	2300      	movs	r3, #0
 8003b54:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003b56:	2300      	movs	r3, #0
 8003b58:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003b5a:	4b68      	ldr	r3, [pc, #416]	; (8003cfc <xTaskResumeAll+0x1b0>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <xTaskResumeAll+0x1a>
 8003b62:	b672      	cpsid	i
 8003b64:	e7fe      	b.n	8003b64 <xTaskResumeAll+0x18>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003b66:	f001 fa7b 	bl	8005060 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003b6a:	4b64      	ldr	r3, [pc, #400]	; (8003cfc <xTaskResumeAll+0x1b0>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	1e5a      	subs	r2, r3, #1
 8003b70:	4b62      	ldr	r3, [pc, #392]	; (8003cfc <xTaskResumeAll+0x1b0>)
 8003b72:	601a      	str	r2, [r3, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b74:	4b61      	ldr	r3, [pc, #388]	; (8003cfc <xTaskResumeAll+0x1b0>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d000      	beq.n	8003b7e <xTaskResumeAll+0x32>
 8003b7c:	e0b7      	b.n	8003cee <xTaskResumeAll+0x1a2>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b7e:	4b60      	ldr	r3, [pc, #384]	; (8003d00 <xTaskResumeAll+0x1b4>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d100      	bne.n	8003b88 <xTaskResumeAll+0x3c>
 8003b86:	e0b2      	b.n	8003cee <xTaskResumeAll+0x1a2>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b88:	e089      	b.n	8003c9e <xTaskResumeAll+0x152>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b8a:	4b5e      	ldr	r3, [pc, #376]	; (8003d04 <xTaskResumeAll+0x1b8>)
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b96:	60bb      	str	r3, [r7, #8]
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	6a12      	ldr	r2, [r2, #32]
 8003ba0:	609a      	str	r2, [r3, #8]
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	69d2      	ldr	r2, [r2, #28]
 8003baa:	605a      	str	r2, [r3, #4]
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	3318      	adds	r3, #24
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d103      	bne.n	8003bc0 <xTaskResumeAll+0x74>
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	6a1a      	ldr	r2, [r3, #32]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	605a      	str	r2, [r3, #4]
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	629a      	str	r2, [r3, #40]	; 0x28
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	1e5a      	subs	r2, r3, #1
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	607b      	str	r3, [r7, #4]
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	68d2      	ldr	r2, [r2, #12]
 8003bde:	609a      	str	r2, [r3, #8]
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	6892      	ldr	r2, [r2, #8]
 8003be8:	605a      	str	r2, [r3, #4]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d103      	bne.n	8003bfe <xTaskResumeAll+0xb2>
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	68da      	ldr	r2, [r3, #12]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	605a      	str	r2, [r3, #4]
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	2200      	movs	r2, #0
 8003c02:	615a      	str	r2, [r3, #20]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	1e5a      	subs	r2, r3, #1
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c12:	4b3d      	ldr	r3, [pc, #244]	; (8003d08 <xTaskResumeAll+0x1bc>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d903      	bls.n	8003c22 <xTaskResumeAll+0xd6>
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c1e:	4b3a      	ldr	r3, [pc, #232]	; (8003d08 <xTaskResumeAll+0x1bc>)
 8003c20:	601a      	str	r2, [r3, #0]
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c26:	4939      	ldr	r1, [pc, #228]	; (8003d0c <xTaskResumeAll+0x1c0>)
 8003c28:	0013      	movs	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	189b      	adds	r3, r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	18cb      	adds	r3, r1, r3
 8003c32:	3304      	adds	r3, #4
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	603b      	str	r3, [r7, #0]
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	609a      	str	r2, [r3, #8]
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	689a      	ldr	r2, [r3, #8]
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	60da      	str	r2, [r3, #12]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	3204      	adds	r2, #4
 8003c4e:	605a      	str	r2, [r3, #4]
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	1d1a      	adds	r2, r3, #4
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	609a      	str	r2, [r3, #8]
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c5c:	0013      	movs	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	189b      	adds	r3, r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4a29      	ldr	r2, [pc, #164]	; (8003d0c <xTaskResumeAll+0x1c0>)
 8003c66:	189a      	adds	r2, r3, r2
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	615a      	str	r2, [r3, #20]
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c70:	4926      	ldr	r1, [pc, #152]	; (8003d0c <xTaskResumeAll+0x1c0>)
 8003c72:	0013      	movs	r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	189b      	adds	r3, r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	585b      	ldr	r3, [r3, r1]
 8003c7c:	1c58      	adds	r0, r3, #1
 8003c7e:	4923      	ldr	r1, [pc, #140]	; (8003d0c <xTaskResumeAll+0x1c0>)
 8003c80:	0013      	movs	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	189b      	adds	r3, r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	5058      	str	r0, [r3, r1]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c8e:	4b20      	ldr	r3, [pc, #128]	; (8003d10 <xTaskResumeAll+0x1c4>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d302      	bcc.n	8003c9e <xTaskResumeAll+0x152>
                    {
                        xYieldPending = pdTRUE;
 8003c98:	4b1e      	ldr	r3, [pc, #120]	; (8003d14 <xTaskResumeAll+0x1c8>)
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c9e:	4b19      	ldr	r3, [pc, #100]	; (8003d04 <xTaskResumeAll+0x1b8>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d000      	beq.n	8003ca8 <xTaskResumeAll+0x15c>
 8003ca6:	e770      	b.n	8003b8a <xTaskResumeAll+0x3e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <xTaskResumeAll+0x166>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003cae:	f000 fcbf 	bl	8004630 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003cb2:	4b19      	ldr	r3, [pc, #100]	; (8003d18 <xTaskResumeAll+0x1cc>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00f      	beq.n	8003cde <xTaskResumeAll+0x192>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003cbe:	f000 f83b 	bl	8003d38 <xTaskIncrementTick>
 8003cc2:	1e03      	subs	r3, r0, #0
 8003cc4:	d002      	beq.n	8003ccc <xTaskResumeAll+0x180>
                            {
                                xYieldPending = pdTRUE;
 8003cc6:	4b13      	ldr	r3, [pc, #76]	; (8003d14 <xTaskResumeAll+0x1c8>)
 8003cc8:	2201      	movs	r2, #1
 8003cca:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1f2      	bne.n	8003cbe <xTaskResumeAll+0x172>

                        xPendedTicks = 0;
 8003cd8:	4b0f      	ldr	r3, [pc, #60]	; (8003d18 <xTaskResumeAll+0x1cc>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003cde:	4b0d      	ldr	r3, [pc, #52]	; (8003d14 <xTaskResumeAll+0x1c8>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <xTaskResumeAll+0x1a2>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003cea:	f001 f9a9 	bl	8005040 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003cee:	f001 f9c9 	bl	8005084 <vPortExitCritical>

    return xAlreadyYielded;
 8003cf2:	693b      	ldr	r3, [r7, #16]
}
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	b006      	add	sp, #24
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	20000758 	.word	0x20000758
 8003d00:	20000730 	.word	0x20000730
 8003d04:	200006f0 	.word	0x200006f0
 8003d08:	20000738 	.word	0x20000738
 8003d0c:	20000260 	.word	0x20000260
 8003d10:	2000025c 	.word	0x2000025c
 8003d14:	20000744 	.word	0x20000744
 8003d18:	20000740 	.word	0x20000740

08003d1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003d22:	4b04      	ldr	r3, [pc, #16]	; (8003d34 <xTaskGetTickCount+0x18>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003d28:	687b      	ldr	r3, [r7, #4]
}
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	b002      	add	sp, #8
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	46c0      	nop			; (mov r8, r8)
 8003d34:	20000734 	.word	0x20000734

08003d38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b088      	sub	sp, #32
 8003d3c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d42:	4b78      	ldr	r3, [pc, #480]	; (8003f24 <xTaskIncrementTick+0x1ec>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d000      	beq.n	8003d4c <xTaskIncrementTick+0x14>
 8003d4a:	e0e0      	b.n	8003f0e <xTaskIncrementTick+0x1d6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d4c:	4b76      	ldr	r3, [pc, #472]	; (8003f28 <xTaskIncrementTick+0x1f0>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	3301      	adds	r3, #1
 8003d52:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003d54:	4b74      	ldr	r3, [pc, #464]	; (8003f28 <xTaskIncrementTick+0x1f0>)
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d117      	bne.n	8003d90 <xTaskIncrementTick+0x58>
        {
            taskSWITCH_DELAYED_LISTS();
 8003d60:	4b72      	ldr	r3, [pc, #456]	; (8003f2c <xTaskIncrementTick+0x1f4>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <xTaskIncrementTick+0x36>
 8003d6a:	b672      	cpsid	i
 8003d6c:	e7fe      	b.n	8003d6c <xTaskIncrementTick+0x34>
 8003d6e:	4b6f      	ldr	r3, [pc, #444]	; (8003f2c <xTaskIncrementTick+0x1f4>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	617b      	str	r3, [r7, #20]
 8003d74:	4b6e      	ldr	r3, [pc, #440]	; (8003f30 <xTaskIncrementTick+0x1f8>)
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	4b6c      	ldr	r3, [pc, #432]	; (8003f2c <xTaskIncrementTick+0x1f4>)
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	4b6c      	ldr	r3, [pc, #432]	; (8003f30 <xTaskIncrementTick+0x1f8>)
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	601a      	str	r2, [r3, #0]
 8003d82:	4b6c      	ldr	r3, [pc, #432]	; (8003f34 <xTaskIncrementTick+0x1fc>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	1c5a      	adds	r2, r3, #1
 8003d88:	4b6a      	ldr	r3, [pc, #424]	; (8003f34 <xTaskIncrementTick+0x1fc>)
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	f000 fc50 	bl	8004630 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003d90:	4b69      	ldr	r3, [pc, #420]	; (8003f38 <xTaskIncrementTick+0x200>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d200      	bcs.n	8003d9c <xTaskIncrementTick+0x64>
 8003d9a:	e0a4      	b.n	8003ee6 <xTaskIncrementTick+0x1ae>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d9c:	4b63      	ldr	r3, [pc, #396]	; (8003f2c <xTaskIncrementTick+0x1f4>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d104      	bne.n	8003db0 <xTaskIncrementTick+0x78>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003da6:	4b64      	ldr	r3, [pc, #400]	; (8003f38 <xTaskIncrementTick+0x200>)
 8003da8:	2201      	movs	r2, #1
 8003daa:	4252      	negs	r2, r2
 8003dac:	601a      	str	r2, [r3, #0]
                    break;
 8003dae:	e09a      	b.n	8003ee6 <xTaskIncrementTick+0x1ae>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003db0:	4b5e      	ldr	r3, [pc, #376]	; (8003f2c <xTaskIncrementTick+0x1f4>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d203      	bcs.n	8003dd0 <xTaskIncrementTick+0x98>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003dc8:	4b5b      	ldr	r3, [pc, #364]	; (8003f38 <xTaskIncrementTick+0x200>)
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003dce:	e08a      	b.n	8003ee6 <xTaskIncrementTick+0x1ae>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	60bb      	str	r3, [r7, #8]
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	68d2      	ldr	r2, [r2, #12]
 8003dde:	609a      	str	r2, [r3, #8]
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	6892      	ldr	r2, [r2, #8]
 8003de8:	605a      	str	r2, [r3, #4]
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	685a      	ldr	r2, [r3, #4]
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	3304      	adds	r3, #4
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d103      	bne.n	8003dfe <xTaskIncrementTick+0xc6>
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	68da      	ldr	r2, [r3, #12]
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	605a      	str	r2, [r3, #4]
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	2200      	movs	r2, #0
 8003e02:	615a      	str	r2, [r3, #20]
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	1e5a      	subs	r2, r3, #1
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d01e      	beq.n	8003e54 <xTaskIncrementTick+0x11c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1a:	607b      	str	r3, [r7, #4]
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	69db      	ldr	r3, [r3, #28]
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	6a12      	ldr	r2, [r2, #32]
 8003e24:	609a      	str	r2, [r3, #8]
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	69d2      	ldr	r2, [r2, #28]
 8003e2e:	605a      	str	r2, [r3, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685a      	ldr	r2, [r3, #4]
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	3318      	adds	r3, #24
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d103      	bne.n	8003e44 <xTaskIncrementTick+0x10c>
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	6a1a      	ldr	r2, [r3, #32]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	605a      	str	r2, [r3, #4]
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	2200      	movs	r2, #0
 8003e48:	629a      	str	r2, [r3, #40]	; 0x28
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	1e5a      	subs	r2, r3, #1
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e58:	4b38      	ldr	r3, [pc, #224]	; (8003f3c <xTaskIncrementTick+0x204>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d903      	bls.n	8003e68 <xTaskIncrementTick+0x130>
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e64:	4b35      	ldr	r3, [pc, #212]	; (8003f3c <xTaskIncrementTick+0x204>)
 8003e66:	601a      	str	r2, [r3, #0]
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e6c:	4934      	ldr	r1, [pc, #208]	; (8003f40 <xTaskIncrementTick+0x208>)
 8003e6e:	0013      	movs	r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	189b      	adds	r3, r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	18cb      	adds	r3, r1, r3
 8003e78:	3304      	adds	r3, #4
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	603b      	str	r3, [r7, #0]
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	609a      	str	r2, [r3, #8]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	60da      	str	r2, [r3, #12]
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	3204      	adds	r2, #4
 8003e94:	605a      	str	r2, [r3, #4]
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1d1a      	adds	r2, r3, #4
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	609a      	str	r2, [r3, #8]
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea2:	0013      	movs	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	189b      	adds	r3, r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4a25      	ldr	r2, [pc, #148]	; (8003f40 <xTaskIncrementTick+0x208>)
 8003eac:	189a      	adds	r2, r3, r2
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	615a      	str	r2, [r3, #20]
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb6:	4922      	ldr	r1, [pc, #136]	; (8003f40 <xTaskIncrementTick+0x208>)
 8003eb8:	0013      	movs	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	189b      	adds	r3, r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	585b      	ldr	r3, [r3, r1]
 8003ec2:	1c58      	adds	r0, r3, #1
 8003ec4:	491e      	ldr	r1, [pc, #120]	; (8003f40 <xTaskIncrementTick+0x208>)
 8003ec6:	0013      	movs	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	189b      	adds	r3, r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	5058      	str	r0, [r3, r1]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed4:	4b1b      	ldr	r3, [pc, #108]	; (8003f44 <xTaskIncrementTick+0x20c>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d800      	bhi.n	8003ee0 <xTaskIncrementTick+0x1a8>
 8003ede:	e75d      	b.n	8003d9c <xTaskIncrementTick+0x64>
                        {
                            xSwitchRequired = pdTRUE;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ee4:	e75a      	b.n	8003d9c <xTaskIncrementTick+0x64>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ee6:	4b17      	ldr	r3, [pc, #92]	; (8003f44 <xTaskIncrementTick+0x20c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eec:	4914      	ldr	r1, [pc, #80]	; (8003f40 <xTaskIncrementTick+0x208>)
 8003eee:	0013      	movs	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	189b      	adds	r3, r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	585b      	ldr	r3, [r3, r1]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d901      	bls.n	8003f00 <xTaskIncrementTick+0x1c8>
            {
                xSwitchRequired = pdTRUE;
 8003efc:	2301      	movs	r3, #1
 8003efe:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8003f00:	4b11      	ldr	r3, [pc, #68]	; (8003f48 <xTaskIncrementTick+0x210>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d007      	beq.n	8003f18 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	61fb      	str	r3, [r7, #28]
 8003f0c:	e004      	b.n	8003f18 <xTaskIncrementTick+0x1e0>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003f0e:	4b0f      	ldr	r3, [pc, #60]	; (8003f4c <xTaskIncrementTick+0x214>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	1c5a      	adds	r2, r3, #1
 8003f14:	4b0d      	ldr	r3, [pc, #52]	; (8003f4c <xTaskIncrementTick+0x214>)
 8003f16:	601a      	str	r2, [r3, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003f18:	69fb      	ldr	r3, [r7, #28]
}
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	b008      	add	sp, #32
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	46c0      	nop			; (mov r8, r8)
 8003f24:	20000758 	.word	0x20000758
 8003f28:	20000734 	.word	0x20000734
 8003f2c:	200006e8 	.word	0x200006e8
 8003f30:	200006ec 	.word	0x200006ec
 8003f34:	20000748 	.word	0x20000748
 8003f38:	20000750 	.word	0x20000750
 8003f3c:	20000738 	.word	0x20000738
 8003f40:	20000260 	.word	0x20000260
 8003f44:	2000025c 	.word	0x2000025c
 8003f48:	20000744 	.word	0x20000744
 8003f4c:	20000740 	.word	0x20000740

08003f50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f56:	4b22      	ldr	r3, [pc, #136]	; (8003fe0 <vTaskSwitchContext+0x90>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003f5e:	4b21      	ldr	r3, [pc, #132]	; (8003fe4 <vTaskSwitchContext+0x94>)
 8003f60:	2201      	movs	r2, #1
 8003f62:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003f64:	e037      	b.n	8003fd6 <vTaskSwitchContext+0x86>
        xYieldPending = pdFALSE;
 8003f66:	4b1f      	ldr	r3, [pc, #124]	; (8003fe4 <vTaskSwitchContext+0x94>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f6c:	4b1e      	ldr	r3, [pc, #120]	; (8003fe8 <vTaskSwitchContext+0x98>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	607b      	str	r3, [r7, #4]
 8003f72:	e007      	b.n	8003f84 <vTaskSwitchContext+0x34>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <vTaskSwitchContext+0x2e>
 8003f7a:	b672      	cpsid	i
 8003f7c:	e7fe      	b.n	8003f7c <vTaskSwitchContext+0x2c>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	3b01      	subs	r3, #1
 8003f82:	607b      	str	r3, [r7, #4]
 8003f84:	4919      	ldr	r1, [pc, #100]	; (8003fec <vTaskSwitchContext+0x9c>)
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	0013      	movs	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	189b      	adds	r3, r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	585b      	ldr	r3, [r3, r1]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d0ee      	beq.n	8003f74 <vTaskSwitchContext+0x24>
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	0013      	movs	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	189b      	adds	r3, r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	4a12      	ldr	r2, [pc, #72]	; (8003fec <vTaskSwitchContext+0x9c>)
 8003fa2:	189b      	adds	r3, r3, r2
 8003fa4:	603b      	str	r3, [r7, #0]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	605a      	str	r2, [r3, #4]
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	3308      	adds	r3, #8
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d104      	bne.n	8003fc6 <vTaskSwitchContext+0x76>
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	605a      	str	r2, [r3, #4]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	68da      	ldr	r2, [r3, #12]
 8003fcc:	4b08      	ldr	r3, [pc, #32]	; (8003ff0 <vTaskSwitchContext+0xa0>)
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	4b05      	ldr	r3, [pc, #20]	; (8003fe8 <vTaskSwitchContext+0x98>)
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	601a      	str	r2, [r3, #0]
}
 8003fd6:	46c0      	nop			; (mov r8, r8)
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	b002      	add	sp, #8
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	46c0      	nop			; (mov r8, r8)
 8003fe0:	20000758 	.word	0x20000758
 8003fe4:	20000744 	.word	0x20000744
 8003fe8:	20000738 	.word	0x20000738
 8003fec:	20000260 	.word	0x20000260
 8003ff0:	2000025c 	.word	0x2000025c

08003ff4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d101      	bne.n	8004008 <vTaskPlaceOnEventList+0x14>
 8004004:	b672      	cpsid	i
 8004006:	e7fe      	b.n	8004006 <vTaskPlaceOnEventList+0x12>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004008:	4b08      	ldr	r3, [pc, #32]	; (800402c <vTaskPlaceOnEventList+0x38>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	3318      	adds	r3, #24
 800400e:	001a      	movs	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	0011      	movs	r1, r2
 8004014:	0018      	movs	r0, r3
 8004016:	f7ff f898 	bl	800314a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	2101      	movs	r1, #1
 800401e:	0018      	movs	r0, r3
 8004020:	f000 fc96 	bl	8004950 <prvAddCurrentTaskToDelayedList>
}
 8004024:	46c0      	nop			; (mov r8, r8)
 8004026:	46bd      	mov	sp, r7
 8004028:	b002      	add	sp, #8
 800402a:	bd80      	pop	{r7, pc}
 800402c:	2000025c 	.word	0x2000025c

08004030 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait )
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
    configASSERT( pxEventList );
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <vTaskPlaceOnUnorderedEventList+0x16>
 8004042:	b672      	cpsid	i
 8004044:	e7fe      	b.n	8004044 <vTaskPlaceOnUnorderedEventList+0x14>

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event groups implementation. */
    configASSERT( uxSchedulerSuspended != 0 );
 8004046:	4b1b      	ldr	r3, [pc, #108]	; (80040b4 <vTaskPlaceOnUnorderedEventList+0x84>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <vTaskPlaceOnUnorderedEventList+0x22>
 800404e:	b672      	cpsid	i
 8004050:	e7fe      	b.n	8004050 <vTaskPlaceOnUnorderedEventList+0x20>

    /* Store the item value in the event list item.  It is safe to access the
     * event list item here as interrupts won't access the event list item of a
     * task that is not in the Blocked state. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004052:	4b19      	ldr	r3, [pc, #100]	; (80040b8 <vTaskPlaceOnUnorderedEventList+0x88>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	2180      	movs	r1, #128	; 0x80
 800405a:	0609      	lsls	r1, r1, #24
 800405c:	430a      	orrs	r2, r1
 800405e:	619a      	str	r2, [r3, #24]
    /* Place the event list item of the TCB at the end of the appropriate event
     * list.  It is safe to access the event list here because it is part of an
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	617b      	str	r3, [r7, #20]
 8004066:	4b14      	ldr	r3, [pc, #80]	; (80040b8 <vTaskPlaceOnUnorderedEventList+0x88>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	61da      	str	r2, [r3, #28]
 800406e:	4b12      	ldr	r3, [pc, #72]	; (80040b8 <vTaskPlaceOnUnorderedEventList+0x88>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	6892      	ldr	r2, [r2, #8]
 8004076:	621a      	str	r2, [r3, #32]
 8004078:	4b0f      	ldr	r3, [pc, #60]	; (80040b8 <vTaskPlaceOnUnorderedEventList+0x88>)
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	3218      	adds	r2, #24
 8004082:	605a      	str	r2, [r3, #4]
 8004084:	4b0c      	ldr	r3, [pc, #48]	; (80040b8 <vTaskPlaceOnUnorderedEventList+0x88>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	3318      	adds	r3, #24
 800408a:	001a      	movs	r2, r3
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	609a      	str	r2, [r3, #8]
 8004090:	4b09      	ldr	r3, [pc, #36]	; (80040b8 <vTaskPlaceOnUnorderedEventList+0x88>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	629a      	str	r2, [r3, #40]	; 0x28
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	1c5a      	adds	r2, r3, #1
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	601a      	str	r2, [r3, #0]

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2101      	movs	r1, #1
 80040a6:	0018      	movs	r0, r3
 80040a8:	f000 fc52 	bl	8004950 <prvAddCurrentTaskToDelayedList>
}
 80040ac:	46c0      	nop			; (mov r8, r8)
 80040ae:	46bd      	mov	sp, r7
 80040b0:	b006      	add	sp, #24
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	20000758 	.word	0x20000758
 80040b8:	2000025c 	.word	0x2000025c

080040bc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <vTaskPlaceOnEventListRestricted+0x16>
 80040ce:	b672      	cpsid	i
 80040d0:	e7fe      	b.n	80040d0 <vTaskPlaceOnEventListRestricted+0x14>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	617b      	str	r3, [r7, #20]
 80040d8:	4b16      	ldr	r3, [pc, #88]	; (8004134 <vTaskPlaceOnEventListRestricted+0x78>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	61da      	str	r2, [r3, #28]
 80040e0:	4b14      	ldr	r3, [pc, #80]	; (8004134 <vTaskPlaceOnEventListRestricted+0x78>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	6892      	ldr	r2, [r2, #8]
 80040e8:	621a      	str	r2, [r3, #32]
 80040ea:	4b12      	ldr	r3, [pc, #72]	; (8004134 <vTaskPlaceOnEventListRestricted+0x78>)
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	3218      	adds	r2, #24
 80040f4:	605a      	str	r2, [r3, #4]
 80040f6:	4b0f      	ldr	r3, [pc, #60]	; (8004134 <vTaskPlaceOnEventListRestricted+0x78>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	3318      	adds	r3, #24
 80040fc:	001a      	movs	r2, r3
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	609a      	str	r2, [r3, #8]
 8004102:	4b0c      	ldr	r3, [pc, #48]	; (8004134 <vTaskPlaceOnEventListRestricted+0x78>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	629a      	str	r2, [r3, #40]	; 0x28
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	1c5a      	adds	r2, r3, #1
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d002      	beq.n	8004120 <vTaskPlaceOnEventListRestricted+0x64>
        {
            xTicksToWait = portMAX_DELAY;
 800411a:	2301      	movs	r3, #1
 800411c:	425b      	negs	r3, r3
 800411e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	0011      	movs	r1, r2
 8004126:	0018      	movs	r0, r3
 8004128:	f000 fc12 	bl	8004950 <prvAddCurrentTaskToDelayedList>
    }
 800412c:	46c0      	nop			; (mov r8, r8)
 800412e:	46bd      	mov	sp, r7
 8004130:	b006      	add	sp, #24
 8004132:	bd80      	pop	{r7, pc}
 8004134:	2000025c 	.word	0x2000025c

08004138 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b088      	sub	sp, #32
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <xTaskRemoveFromEventList+0x1a>
 800414e:	b672      	cpsid	i
 8004150:	e7fe      	b.n	8004150 <xTaskRemoveFromEventList+0x18>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004156:	617b      	str	r3, [r7, #20]
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	69db      	ldr	r3, [r3, #28]
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	6a12      	ldr	r2, [r2, #32]
 8004160:	609a      	str	r2, [r3, #8]
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	69d2      	ldr	r2, [r2, #28]
 800416a:	605a      	str	r2, [r3, #4]
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	3318      	adds	r3, #24
 8004174:	429a      	cmp	r2, r3
 8004176:	d103      	bne.n	8004180 <xTaskRemoveFromEventList+0x48>
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	6a1a      	ldr	r2, [r3, #32]
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	605a      	str	r2, [r3, #4]
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	2200      	movs	r2, #0
 8004184:	629a      	str	r2, [r3, #40]	; 0x28
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	1e5a      	subs	r2, r3, #1
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004190:	4b48      	ldr	r3, [pc, #288]	; (80042b4 <xTaskRemoveFromEventList+0x17c>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d15d      	bne.n	8004254 <xTaskRemoveFromEventList+0x11c>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	60fb      	str	r3, [r7, #12]
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	69ba      	ldr	r2, [r7, #24]
 80041a4:	68d2      	ldr	r2, [r2, #12]
 80041a6:	609a      	str	r2, [r3, #8]
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	6892      	ldr	r2, [r2, #8]
 80041b0:	605a      	str	r2, [r3, #4]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	3304      	adds	r3, #4
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d103      	bne.n	80041c6 <xTaskRemoveFromEventList+0x8e>
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	68da      	ldr	r2, [r3, #12]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	605a      	str	r2, [r3, #4]
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	2200      	movs	r2, #0
 80041ca:	615a      	str	r2, [r3, #20]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	1e5a      	subs	r2, r3, #1
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041da:	4b37      	ldr	r3, [pc, #220]	; (80042b8 <xTaskRemoveFromEventList+0x180>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d903      	bls.n	80041ea <xTaskRemoveFromEventList+0xb2>
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e6:	4b34      	ldr	r3, [pc, #208]	; (80042b8 <xTaskRemoveFromEventList+0x180>)
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ee:	4933      	ldr	r1, [pc, #204]	; (80042bc <xTaskRemoveFromEventList+0x184>)
 80041f0:	0013      	movs	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	189b      	adds	r3, r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	18cb      	adds	r3, r1, r3
 80041fa:	3304      	adds	r3, #4
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	60bb      	str	r3, [r7, #8]
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	609a      	str	r2, [r3, #8]
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	689a      	ldr	r2, [r3, #8]
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	60da      	str	r2, [r3, #12]
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	3204      	adds	r2, #4
 8004216:	605a      	str	r2, [r3, #4]
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	1d1a      	adds	r2, r3, #4
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	609a      	str	r2, [r3, #8]
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004224:	0013      	movs	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	189b      	adds	r3, r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4a23      	ldr	r2, [pc, #140]	; (80042bc <xTaskRemoveFromEventList+0x184>)
 800422e:	189a      	adds	r2, r3, r2
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	615a      	str	r2, [r3, #20]
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004238:	4920      	ldr	r1, [pc, #128]	; (80042bc <xTaskRemoveFromEventList+0x184>)
 800423a:	0013      	movs	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	189b      	adds	r3, r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	585b      	ldr	r3, [r3, r1]
 8004244:	1c58      	adds	r0, r3, #1
 8004246:	491d      	ldr	r1, [pc, #116]	; (80042bc <xTaskRemoveFromEventList+0x184>)
 8004248:	0013      	movs	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	189b      	adds	r3, r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	5058      	str	r0, [r3, r1]
 8004252:	e01b      	b.n	800428c <xTaskRemoveFromEventList+0x154>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004254:	4b1a      	ldr	r3, [pc, #104]	; (80042c0 <xTaskRemoveFromEventList+0x188>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	613b      	str	r3, [r7, #16]
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	61da      	str	r2, [r3, #28]
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	621a      	str	r2, [r3, #32]
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	3218      	adds	r2, #24
 8004270:	605a      	str	r2, [r3, #4]
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	3318      	adds	r3, #24
 8004276:	001a      	movs	r2, r3
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	609a      	str	r2, [r3, #8]
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	4a10      	ldr	r2, [pc, #64]	; (80042c0 <xTaskRemoveFromEventList+0x188>)
 8004280:	629a      	str	r2, [r3, #40]	; 0x28
 8004282:	4b0f      	ldr	r3, [pc, #60]	; (80042c0 <xTaskRemoveFromEventList+0x188>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	1c5a      	adds	r2, r3, #1
 8004288:	4b0d      	ldr	r3, [pc, #52]	; (80042c0 <xTaskRemoveFromEventList+0x188>)
 800428a:	601a      	str	r2, [r3, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004290:	4b0c      	ldr	r3, [pc, #48]	; (80042c4 <xTaskRemoveFromEventList+0x18c>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004296:	429a      	cmp	r2, r3
 8004298:	d905      	bls.n	80042a6 <xTaskRemoveFromEventList+0x16e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800429a:	2301      	movs	r3, #1
 800429c:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800429e:	4b0a      	ldr	r3, [pc, #40]	; (80042c8 <xTaskRemoveFromEventList+0x190>)
 80042a0:	2201      	movs	r2, #1
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	e001      	b.n	80042aa <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        xReturn = pdFALSE;
 80042a6:	2300      	movs	r3, #0
 80042a8:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 80042aa:	69fb      	ldr	r3, [r7, #28]
}
 80042ac:	0018      	movs	r0, r3
 80042ae:	46bd      	mov	sp, r7
 80042b0:	b008      	add	sp, #32
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	20000758 	.word	0x20000758
 80042b8:	20000738 	.word	0x20000738
 80042bc:	20000260 	.word	0x20000260
 80042c0:	200006f0 	.word	0x200006f0
 80042c4:	2000025c 	.word	0x2000025c
 80042c8:	20000744 	.word	0x20000744

080042cc <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
    TCB_t * pxUnblockedTCB;

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != pdFALSE );
 80042d6:	4b4e      	ldr	r3, [pc, #312]	; (8004410 <vTaskRemoveFromUnorderedEventList+0x144>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <vTaskRemoveFromUnorderedEventList+0x16>
 80042de:	b672      	cpsid	i
 80042e0:	e7fe      	b.n	80042e0 <vTaskRemoveFromUnorderedEventList+0x14>

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	2280      	movs	r2, #128	; 0x80
 80042e6:	0612      	lsls	r2, r2, #24
 80042e8:	431a      	orrs	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	601a      	str	r2, [r3, #0]

    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	617b      	str	r3, [r7, #20]
    configASSERT( pxUnblockedTCB );
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <vTaskRemoveFromUnorderedEventList+0x32>
 80042fa:	b672      	cpsid	i
 80042fc:	e7fe      	b.n	80042fc <vTaskRemoveFromUnorderedEventList+0x30>
    listREMOVE_ITEM( pxEventListItem );
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	613b      	str	r3, [r7, #16]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	6892      	ldr	r2, [r2, #8]
 800430c:	609a      	str	r2, [r3, #8]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	6852      	ldr	r2, [r2, #4]
 8004316:	605a      	str	r2, [r3, #4]
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	429a      	cmp	r2, r3
 8004320:	d103      	bne.n	800432a <vTaskRemoveFromUnorderedEventList+0x5e>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689a      	ldr	r2, [r3, #8]
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	605a      	str	r2, [r3, #4]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	611a      	str	r2, [r3, #16]
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	1e5a      	subs	r2, r3, #1
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	601a      	str	r2, [r3, #0]
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	68d2      	ldr	r2, [r2, #12]
 8004348:	609a      	str	r2, [r3, #8]
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	6892      	ldr	r2, [r2, #8]
 8004352:	605a      	str	r2, [r3, #4]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	3304      	adds	r3, #4
 800435c:	429a      	cmp	r2, r3
 800435e:	d103      	bne.n	8004368 <vTaskRemoveFromUnorderedEventList+0x9c>
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	68da      	ldr	r2, [r3, #12]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	605a      	str	r2, [r3, #4]
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	2200      	movs	r2, #0
 800436c:	615a      	str	r2, [r3, #20]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	1e5a      	subs	r2, r3, #1
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	601a      	str	r2, [r3, #0]
    prvAddTaskToReadyList( pxUnblockedTCB );
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800437c:	4b25      	ldr	r3, [pc, #148]	; (8004414 <vTaskRemoveFromUnorderedEventList+0x148>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	429a      	cmp	r2, r3
 8004382:	d903      	bls.n	800438c <vTaskRemoveFromUnorderedEventList+0xc0>
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004388:	4b22      	ldr	r3, [pc, #136]	; (8004414 <vTaskRemoveFromUnorderedEventList+0x148>)
 800438a:	601a      	str	r2, [r3, #0]
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004390:	4921      	ldr	r1, [pc, #132]	; (8004418 <vTaskRemoveFromUnorderedEventList+0x14c>)
 8004392:	0013      	movs	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	189b      	adds	r3, r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	18cb      	adds	r3, r1, r3
 800439c:	3304      	adds	r3, #4
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	60bb      	str	r3, [r7, #8]
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	609a      	str	r2, [r3, #8]
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	689a      	ldr	r2, [r3, #8]
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	60da      	str	r2, [r3, #12]
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	697a      	ldr	r2, [r7, #20]
 80043b6:	3204      	adds	r2, #4
 80043b8:	605a      	str	r2, [r3, #4]
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	1d1a      	adds	r2, r3, #4
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	609a      	str	r2, [r3, #8]
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c6:	0013      	movs	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	189b      	adds	r3, r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4a12      	ldr	r2, [pc, #72]	; (8004418 <vTaskRemoveFromUnorderedEventList+0x14c>)
 80043d0:	189a      	adds	r2, r3, r2
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	615a      	str	r2, [r3, #20]
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043da:	490f      	ldr	r1, [pc, #60]	; (8004418 <vTaskRemoveFromUnorderedEventList+0x14c>)
 80043dc:	0013      	movs	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	189b      	adds	r3, r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	585b      	ldr	r3, [r3, r1]
 80043e6:	1c58      	adds	r0, r3, #1
 80043e8:	490b      	ldr	r1, [pc, #44]	; (8004418 <vTaskRemoveFromUnorderedEventList+0x14c>)
 80043ea:	0013      	movs	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	189b      	adds	r3, r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	5058      	str	r0, [r3, r1]

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f8:	4b08      	ldr	r3, [pc, #32]	; (800441c <vTaskRemoveFromUnorderedEventList+0x150>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fe:	429a      	cmp	r2, r3
 8004400:	d902      	bls.n	8004408 <vTaskRemoveFromUnorderedEventList+0x13c>
    {
        /* The unblocked task has a priority above that of the calling task, so
         * a context switch is required.  This function is called with the
         * scheduler suspended so xYieldPending is set so the context switch
         * occurs immediately that the scheduler is resumed (unsuspended). */
        xYieldPending = pdTRUE;
 8004402:	4b07      	ldr	r3, [pc, #28]	; (8004420 <vTaskRemoveFromUnorderedEventList+0x154>)
 8004404:	2201      	movs	r2, #1
 8004406:	601a      	str	r2, [r3, #0]
    }
}
 8004408:	46c0      	nop			; (mov r8, r8)
 800440a:	46bd      	mov	sp, r7
 800440c:	b006      	add	sp, #24
 800440e:	bd80      	pop	{r7, pc}
 8004410:	20000758 	.word	0x20000758
 8004414:	20000738 	.word	0x20000738
 8004418:	20000260 	.word	0x20000260
 800441c:	2000025c 	.word	0x2000025c
 8004420:	20000744 	.word	0x20000744

08004424 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800442c:	4b05      	ldr	r3, [pc, #20]	; (8004444 <vTaskInternalSetTimeOutState+0x20>)
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004434:	4b04      	ldr	r3, [pc, #16]	; (8004448 <vTaskInternalSetTimeOutState+0x24>)
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	605a      	str	r2, [r3, #4]
}
 800443c:	46c0      	nop			; (mov r8, r8)
 800443e:	46bd      	mov	sp, r7
 8004440:	b002      	add	sp, #8
 8004442:	bd80      	pop	{r7, pc}
 8004444:	20000748 	.word	0x20000748
 8004448:	20000734 	.word	0x20000734

0800444c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d101      	bne.n	8004460 <xTaskCheckForTimeOut+0x14>
 800445c:	b672      	cpsid	i
 800445e:	e7fe      	b.n	800445e <xTaskCheckForTimeOut+0x12>
    configASSERT( pxTicksToWait );
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <xTaskCheckForTimeOut+0x1e>
 8004466:	b672      	cpsid	i
 8004468:	e7fe      	b.n	8004468 <xTaskCheckForTimeOut+0x1c>

    taskENTER_CRITICAL();
 800446a:	f000 fdf9 	bl	8005060 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800446e:	4b1f      	ldr	r3, [pc, #124]	; (80044ec <xTaskCheckForTimeOut+0xa0>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	3301      	adds	r3, #1
 8004484:	d102      	bne.n	800448c <xTaskCheckForTimeOut+0x40>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004486:	2300      	movs	r3, #0
 8004488:	617b      	str	r3, [r7, #20]
 800448a:	e027      	b.n	80044dc <xTaskCheckForTimeOut+0x90>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	4b17      	ldr	r3, [pc, #92]	; (80044f0 <xTaskCheckForTimeOut+0xa4>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	429a      	cmp	r2, r3
 8004496:	d00a      	beq.n	80044ae <xTaskCheckForTimeOut+0x62>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d305      	bcc.n	80044ae <xTaskCheckForTimeOut+0x62>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80044a2:	2301      	movs	r3, #1
 80044a4:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	e016      	b.n	80044dc <xTaskCheckForTimeOut+0x90>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d20c      	bcs.n	80044d2 <xTaskCheckForTimeOut+0x86>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	1ad2      	subs	r2, r2, r3
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	0018      	movs	r0, r3
 80044c8:	f7ff ffac 	bl	8004424 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80044cc:	2300      	movs	r3, #0
 80044ce:	617b      	str	r3, [r7, #20]
 80044d0:	e004      	b.n	80044dc <xTaskCheckForTimeOut+0x90>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80044d8:	2301      	movs	r3, #1
 80044da:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 80044dc:	f000 fdd2 	bl	8005084 <vPortExitCritical>

    return xReturn;
 80044e0:	697b      	ldr	r3, [r7, #20]
}
 80044e2:	0018      	movs	r0, r3
 80044e4:	46bd      	mov	sp, r7
 80044e6:	b006      	add	sp, #24
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	46c0      	nop			; (mov r8, r8)
 80044ec:	20000734 	.word	0x20000734
 80044f0:	20000748 	.word	0x20000748

080044f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80044f8:	4b02      	ldr	r3, [pc, #8]	; (8004504 <vTaskMissedYield+0x10>)
 80044fa:	2201      	movs	r2, #1
 80044fc:	601a      	str	r2, [r3, #0]
}
 80044fe:	46c0      	nop			; (mov r8, r8)
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	20000744 	.word	0x20000744

08004508 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004510:	f000 f84e 	bl	80045b0 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004514:	4b03      	ldr	r3, [pc, #12]	; (8004524 <prvIdleTask+0x1c>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d9f9      	bls.n	8004510 <prvIdleTask+0x8>
            {
                taskYIELD();
 800451c:	f000 fd90 	bl	8005040 <vPortYield>
        prvCheckTasksWaitingTermination();
 8004520:	e7f6      	b.n	8004510 <prvIdleTask+0x8>
 8004522:	46c0      	nop			; (mov r8, r8)
 8004524:	20000260 	.word	0x20000260

08004528 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800452e:	2300      	movs	r3, #0
 8004530:	607b      	str	r3, [r7, #4]
 8004532:	e00c      	b.n	800454e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	0013      	movs	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	189b      	adds	r3, r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	4a14      	ldr	r2, [pc, #80]	; (8004590 <prvInitialiseTaskLists+0x68>)
 8004540:	189b      	adds	r3, r3, r2
 8004542:	0018      	movs	r0, r3
 8004544:	f7fe fdd8 	bl	80030f8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	3301      	adds	r3, #1
 800454c:	607b      	str	r3, [r7, #4]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2b37      	cmp	r3, #55	; 0x37
 8004552:	d9ef      	bls.n	8004534 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004554:	4b0f      	ldr	r3, [pc, #60]	; (8004594 <prvInitialiseTaskLists+0x6c>)
 8004556:	0018      	movs	r0, r3
 8004558:	f7fe fdce 	bl	80030f8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800455c:	4b0e      	ldr	r3, [pc, #56]	; (8004598 <prvInitialiseTaskLists+0x70>)
 800455e:	0018      	movs	r0, r3
 8004560:	f7fe fdca 	bl	80030f8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004564:	4b0d      	ldr	r3, [pc, #52]	; (800459c <prvInitialiseTaskLists+0x74>)
 8004566:	0018      	movs	r0, r3
 8004568:	f7fe fdc6 	bl	80030f8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800456c:	4b0c      	ldr	r3, [pc, #48]	; (80045a0 <prvInitialiseTaskLists+0x78>)
 800456e:	0018      	movs	r0, r3
 8004570:	f7fe fdc2 	bl	80030f8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8004574:	4b0b      	ldr	r3, [pc, #44]	; (80045a4 <prvInitialiseTaskLists+0x7c>)
 8004576:	0018      	movs	r0, r3
 8004578:	f7fe fdbe 	bl	80030f8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800457c:	4b0a      	ldr	r3, [pc, #40]	; (80045a8 <prvInitialiseTaskLists+0x80>)
 800457e:	4a05      	ldr	r2, [pc, #20]	; (8004594 <prvInitialiseTaskLists+0x6c>)
 8004580:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004582:	4b0a      	ldr	r3, [pc, #40]	; (80045ac <prvInitialiseTaskLists+0x84>)
 8004584:	4a04      	ldr	r2, [pc, #16]	; (8004598 <prvInitialiseTaskLists+0x70>)
 8004586:	601a      	str	r2, [r3, #0]
}
 8004588:	46c0      	nop			; (mov r8, r8)
 800458a:	46bd      	mov	sp, r7
 800458c:	b002      	add	sp, #8
 800458e:	bd80      	pop	{r7, pc}
 8004590:	20000260 	.word	0x20000260
 8004594:	200006c0 	.word	0x200006c0
 8004598:	200006d4 	.word	0x200006d4
 800459c:	200006f0 	.word	0x200006f0
 80045a0:	20000704 	.word	0x20000704
 80045a4:	2000071c 	.word	0x2000071c
 80045a8:	200006e8 	.word	0x200006e8
 80045ac:	200006ec 	.word	0x200006ec

080045b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045b6:	e01a      	b.n	80045ee <prvCheckTasksWaitingTermination+0x3e>
        {
            taskENTER_CRITICAL();
 80045b8:	f000 fd52 	bl	8005060 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045bc:	4b10      	ldr	r3, [pc, #64]	; (8004600 <prvCheckTasksWaitingTermination+0x50>)
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	3304      	adds	r3, #4
 80045c8:	0018      	movs	r0, r3
 80045ca:	f7fe fdf4 	bl	80031b6 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80045ce:	4b0d      	ldr	r3, [pc, #52]	; (8004604 <prvCheckTasksWaitingTermination+0x54>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	1e5a      	subs	r2, r3, #1
 80045d4:	4b0b      	ldr	r3, [pc, #44]	; (8004604 <prvCheckTasksWaitingTermination+0x54>)
 80045d6:	601a      	str	r2, [r3, #0]
                --uxDeletedTasksWaitingCleanUp;
 80045d8:	4b0b      	ldr	r3, [pc, #44]	; (8004608 <prvCheckTasksWaitingTermination+0x58>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	1e5a      	subs	r2, r3, #1
 80045de:	4b0a      	ldr	r3, [pc, #40]	; (8004608 <prvCheckTasksWaitingTermination+0x58>)
 80045e0:	601a      	str	r2, [r3, #0]
            }
            taskEXIT_CRITICAL();
 80045e2:	f000 fd4f 	bl	8005084 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	0018      	movs	r0, r3
 80045ea:	f000 f80f 	bl	800460c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045ee:	4b06      	ldr	r3, [pc, #24]	; (8004608 <prvCheckTasksWaitingTermination+0x58>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1e0      	bne.n	80045b8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80045f6:	46c0      	nop			; (mov r8, r8)
 80045f8:	46c0      	nop			; (mov r8, r8)
 80045fa:	46bd      	mov	sp, r7
 80045fc:	b002      	add	sp, #8
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	20000704 	.word	0x20000704
 8004604:	20000730 	.word	0x20000730
 8004608:	20000718 	.word	0x20000718

0800460c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004618:	0018      	movs	r0, r3
 800461a:	f000 fe61 	bl	80052e0 <vPortFree>
            vPortFree( pxTCB );
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	0018      	movs	r0, r3
 8004622:	f000 fe5d 	bl	80052e0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004626:	46c0      	nop			; (mov r8, r8)
 8004628:	46bd      	mov	sp, r7
 800462a:	b002      	add	sp, #8
 800462c:	bd80      	pop	{r7, pc}
	...

08004630 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004630:	b580      	push	{r7, lr}
 8004632:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004634:	4b09      	ldr	r3, [pc, #36]	; (800465c <prvResetNextTaskUnblockTime+0x2c>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d104      	bne.n	8004648 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800463e:	4b08      	ldr	r3, [pc, #32]	; (8004660 <prvResetNextTaskUnblockTime+0x30>)
 8004640:	2201      	movs	r2, #1
 8004642:	4252      	negs	r2, r2
 8004644:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004646:	e005      	b.n	8004654 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004648:	4b04      	ldr	r3, [pc, #16]	; (800465c <prvResetNextTaskUnblockTime+0x2c>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	4b03      	ldr	r3, [pc, #12]	; (8004660 <prvResetNextTaskUnblockTime+0x30>)
 8004652:	601a      	str	r2, [r3, #0]
}
 8004654:	46c0      	nop			; (mov r8, r8)
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	46c0      	nop			; (mov r8, r8)
 800465c:	200006e8 	.word	0x200006e8
 8004660:	20000750 	.word	0x20000750

08004664 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800466a:	4b0a      	ldr	r3, [pc, #40]	; (8004694 <xTaskGetSchedulerState+0x30>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d102      	bne.n	8004678 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004672:	2301      	movs	r3, #1
 8004674:	607b      	str	r3, [r7, #4]
 8004676:	e008      	b.n	800468a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004678:	4b07      	ldr	r3, [pc, #28]	; (8004698 <xTaskGetSchedulerState+0x34>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d102      	bne.n	8004686 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004680:	2302      	movs	r3, #2
 8004682:	607b      	str	r3, [r7, #4]
 8004684:	e001      	b.n	800468a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004686:	2300      	movs	r3, #0
 8004688:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800468a:	687b      	ldr	r3, [r7, #4]
    }
 800468c:	0018      	movs	r0, r3
 800468e:	46bd      	mov	sp, r7
 8004690:	b002      	add	sp, #8
 8004692:	bd80      	pop	{r7, pc}
 8004694:	2000073c 	.word	0x2000073c
 8004698:	20000758 	.word	0x20000758

0800469c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
    TickType_t uxReturn;

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80046a2:	4b08      	ldr	r3, [pc, #32]	; (80046c4 <uxTaskResetEventItemValue+0x28>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	607b      	str	r3, [r7, #4]

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046aa:	4b06      	ldr	r3, [pc, #24]	; (80046c4 <uxTaskResetEventItemValue+0x28>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b0:	4b04      	ldr	r3, [pc, #16]	; (80046c4 <uxTaskResetEventItemValue+0x28>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2138      	movs	r1, #56	; 0x38
 80046b6:	1a8a      	subs	r2, r1, r2
 80046b8:	619a      	str	r2, [r3, #24]

    return uxReturn;
 80046ba:	687b      	ldr	r3, [r7, #4]
}
 80046bc:	0018      	movs	r0, r3
 80046be:	46bd      	mov	sp, r7
 80046c0:	b002      	add	sp, #8
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	2000025c 	.word	0x2000025c

080046c8 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d901      	bls.n	80046de <ulTaskGenericNotifyTake+0x16>
 80046da:	b672      	cpsid	i
 80046dc:	e7fe      	b.n	80046dc <ulTaskGenericNotifyTake+0x14>

        taskENTER_CRITICAL();
 80046de:	f000 fcbf 	bl	8005060 <vPortEnterCritical>
        {
            /* Only block if the notification count is not already non-zero. */
            if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 80046e2:	4b29      	ldr	r3, [pc, #164]	; (8004788 <ulTaskGenericNotifyTake+0xc0>)
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	3314      	adds	r3, #20
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	18d3      	adds	r3, r2, r3
 80046ee:	3304      	adds	r3, #4
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d111      	bne.n	800471a <ulTaskGenericNotifyTake+0x52>
            {
                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80046f6:	4b24      	ldr	r3, [pc, #144]	; (8004788 <ulTaskGenericNotifyTake+0xc0>)
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	2160      	movs	r1, #96	; 0x60
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	18d3      	adds	r3, r2, r3
 8004700:	185b      	adds	r3, r3, r1
 8004702:	2201      	movs	r2, #1
 8004704:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d006      	beq.n	800471a <ulTaskGenericNotifyTake+0x52>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2101      	movs	r1, #1
 8004710:	0018      	movs	r0, r3
 8004712:	f000 f91d 	bl	8004950 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8004716:	f000 fc93 	bl	8005040 <vPortYield>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800471a:	f000 fcb3 	bl	8005084 <vPortExitCritical>

        taskENTER_CRITICAL();
 800471e:	f000 fc9f 	bl	8005060 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWait );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8004722:	4b19      	ldr	r3, [pc, #100]	; (8004788 <ulTaskGenericNotifyTake+0xc0>)
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	3314      	adds	r3, #20
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	18d3      	adds	r3, r2, r3
 800472e:	3304      	adds	r3, #4
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0UL )
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d016      	beq.n	8004768 <ulTaskGenericNotifyTake+0xa0>
            {
                if( xClearCountOnExit != pdFALSE )
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d009      	beq.n	8004754 <ulTaskGenericNotifyTake+0x8c>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 8004740:	4b11      	ldr	r3, [pc, #68]	; (8004788 <ulTaskGenericNotifyTake+0xc0>)
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	3314      	adds	r3, #20
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	18d3      	adds	r3, r2, r3
 800474c:	3304      	adds	r3, #4
 800474e:	2200      	movs	r2, #0
 8004750:	601a      	str	r2, [r3, #0]
 8004752:	e009      	b.n	8004768 <ulTaskGenericNotifyTake+0xa0>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 8004754:	4b0c      	ldr	r3, [pc, #48]	; (8004788 <ulTaskGenericNotifyTake+0xc0>)
 8004756:	6819      	ldr	r1, [r3, #0]
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	1e5a      	subs	r2, r3, #1
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	3314      	adds	r3, #20
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	18cb      	adds	r3, r1, r3
 8004764:	3304      	adds	r3, #4
 8004766:	601a      	str	r2, [r3, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8004768:	4b07      	ldr	r3, [pc, #28]	; (8004788 <ulTaskGenericNotifyTake+0xc0>)
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	2160      	movs	r1, #96	; 0x60
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	18d3      	adds	r3, r2, r3
 8004772:	185b      	adds	r3, r3, r1
 8004774:	2200      	movs	r2, #0
 8004776:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8004778:	f000 fc84 	bl	8005084 <vPortExitCritical>

        return ulReturn;
 800477c:	697b      	ldr	r3, [r7, #20]
    }
 800477e:	0018      	movs	r0, r3
 8004780:	46bd      	mov	sp, r7
 8004782:	b006      	add	sp, #24
 8004784:	bd80      	pop	{r7, pc}
 8004786:	46c0      	nop			; (mov r8, r8)
 8004788:	2000025c 	.word	0x2000025c

0800478c <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
 800478c:	b590      	push	{r4, r7, lr}
 800478e:	b08b      	sub	sp, #44	; 0x2c
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <vTaskGenericNotifyGiveFromISR+0x16>
 800479e:	b672      	cpsid	i
 80047a0:	e7fe      	b.n	80047a0 <vTaskGenericNotifyGiveFromISR+0x14>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d901      	bls.n	80047ac <vTaskGenericNotifyGiveFromISR+0x20>
 80047a8:	b672      	cpsid	i
 80047aa:	e7fe      	b.n	80047aa <vTaskGenericNotifyGiveFromISR+0x1e>
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

        pxTCB = xTaskToNotify;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	627b      	str	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80047b0:	f000 fc80 	bl	80050b4 <ulSetInterruptMaskFromISR>
 80047b4:	0003      	movs	r3, r0
 80047b6:	623b      	str	r3, [r7, #32]
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80047b8:	241f      	movs	r4, #31
 80047ba:	193b      	adds	r3, r7, r4
 80047bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047be:	2060      	movs	r0, #96	; 0x60
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	188a      	adds	r2, r1, r2
 80047c4:	1812      	adds	r2, r2, r0
 80047c6:	7812      	ldrb	r2, [r2, #0]
 80047c8:	701a      	strb	r2, [r3, #0]
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80047ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047cc:	2160      	movs	r1, #96	; 0x60
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	18d3      	adds	r3, r2, r3
 80047d2:	185b      	adds	r3, r3, r1
 80047d4:	2202      	movs	r2, #2
 80047d6:	701a      	strb	r2, [r3, #0]

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80047d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	3314      	adds	r3, #20
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	18d3      	adds	r3, r2, r3
 80047e2:	3304      	adds	r3, #4
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	1c5a      	adds	r2, r3, #1
 80047e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	3314      	adds	r3, #20
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	18cb      	adds	r3, r1, r3
 80047f2:	3304      	adds	r3, #4
 80047f4:	601a      	str	r2, [r3, #0]

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80047f6:	193b      	adds	r3, r7, r4
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d000      	beq.n	8004800 <vTaskGenericNotifyGiveFromISR+0x74>
 80047fe:	e093      	b.n	8004928 <vTaskGenericNotifyGiveFromISR+0x19c>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004804:	2b00      	cmp	r3, #0
 8004806:	d001      	beq.n	800480c <vTaskGenericNotifyGiveFromISR+0x80>
 8004808:	b672      	cpsid	i
 800480a:	e7fe      	b.n	800480a <vTaskGenericNotifyGiveFromISR+0x7e>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800480c:	4b4a      	ldr	r3, [pc, #296]	; (8004938 <vTaskGenericNotifyGiveFromISR+0x1ac>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d15d      	bne.n	80048d0 <vTaskGenericNotifyGiveFromISR+0x144>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	617b      	str	r3, [r7, #20]
 800481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004820:	68d2      	ldr	r2, [r2, #12]
 8004822:	609a      	str	r2, [r3, #8]
 8004824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800482a:	6892      	ldr	r2, [r2, #8]
 800482c:	605a      	str	r2, [r3, #4]
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	3304      	adds	r3, #4
 8004836:	429a      	cmp	r2, r3
 8004838:	d103      	bne.n	8004842 <vTaskGenericNotifyGiveFromISR+0xb6>
 800483a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483c:	68da      	ldr	r2, [r3, #12]
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	605a      	str	r2, [r3, #4]
 8004842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004844:	2200      	movs	r2, #0
 8004846:	615a      	str	r2, [r3, #20]
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	1e5a      	subs	r2, r3, #1
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004856:	4b39      	ldr	r3, [pc, #228]	; (800493c <vTaskGenericNotifyGiveFromISR+0x1b0>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	429a      	cmp	r2, r3
 800485c:	d903      	bls.n	8004866 <vTaskGenericNotifyGiveFromISR+0xda>
 800485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004862:	4b36      	ldr	r3, [pc, #216]	; (800493c <vTaskGenericNotifyGiveFromISR+0x1b0>)
 8004864:	601a      	str	r2, [r3, #0]
 8004866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800486a:	4935      	ldr	r1, [pc, #212]	; (8004940 <vTaskGenericNotifyGiveFromISR+0x1b4>)
 800486c:	0013      	movs	r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	189b      	adds	r3, r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	18cb      	adds	r3, r1, r3
 8004876:	3304      	adds	r3, #4
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	613b      	str	r3, [r7, #16]
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	609a      	str	r2, [r3, #8]
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	689a      	ldr	r2, [r3, #8]
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	60da      	str	r2, [r3, #12]
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004890:	3204      	adds	r2, #4
 8004892:	605a      	str	r2, [r3, #4]
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	1d1a      	adds	r2, r3, #4
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	609a      	str	r2, [r3, #8]
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a0:	0013      	movs	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	189b      	adds	r3, r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4a25      	ldr	r2, [pc, #148]	; (8004940 <vTaskGenericNotifyGiveFromISR+0x1b4>)
 80048aa:	189a      	adds	r2, r3, r2
 80048ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ae:	615a      	str	r2, [r3, #20]
 80048b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b4:	4922      	ldr	r1, [pc, #136]	; (8004940 <vTaskGenericNotifyGiveFromISR+0x1b4>)
 80048b6:	0013      	movs	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	189b      	adds	r3, r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	585b      	ldr	r3, [r3, r1]
 80048c0:	1c58      	adds	r0, r3, #1
 80048c2:	491f      	ldr	r1, [pc, #124]	; (8004940 <vTaskGenericNotifyGiveFromISR+0x1b4>)
 80048c4:	0013      	movs	r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	189b      	adds	r3, r3, r2
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	5058      	str	r0, [r3, r1]
 80048ce:	e01b      	b.n	8004908 <vTaskGenericNotifyGiveFromISR+0x17c>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80048d0:	4b1c      	ldr	r3, [pc, #112]	; (8004944 <vTaskGenericNotifyGiveFromISR+0x1b8>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	61bb      	str	r3, [r7, #24]
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	61da      	str	r2, [r3, #28]
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	689a      	ldr	r2, [r3, #8]
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	621a      	str	r2, [r3, #32]
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ea:	3218      	adds	r2, #24
 80048ec:	605a      	str	r2, [r3, #4]
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	3318      	adds	r3, #24
 80048f2:	001a      	movs	r2, r3
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	609a      	str	r2, [r3, #8]
 80048f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fa:	4a12      	ldr	r2, [pc, #72]	; (8004944 <vTaskGenericNotifyGiveFromISR+0x1b8>)
 80048fc:	629a      	str	r2, [r3, #40]	; 0x28
 80048fe:	4b11      	ldr	r3, [pc, #68]	; (8004944 <vTaskGenericNotifyGiveFromISR+0x1b8>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	1c5a      	adds	r2, r3, #1
 8004904:	4b0f      	ldr	r3, [pc, #60]	; (8004944 <vTaskGenericNotifyGiveFromISR+0x1b8>)
 8004906:	601a      	str	r2, [r3, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800490c:	4b0e      	ldr	r3, [pc, #56]	; (8004948 <vTaskGenericNotifyGiveFromISR+0x1bc>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004912:	429a      	cmp	r2, r3
 8004914:	d908      	bls.n	8004928 <vTaskGenericNotifyGiveFromISR+0x19c>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d002      	beq.n	8004922 <vTaskGenericNotifyGiveFromISR+0x196>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter in an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8004922:	4b0a      	ldr	r3, [pc, #40]	; (800494c <vTaskGenericNotifyGiveFromISR+0x1c0>)
 8004924:	2201      	movs	r2, #1
 8004926:	601a      	str	r2, [r3, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8004928:	6a3b      	ldr	r3, [r7, #32]
 800492a:	0018      	movs	r0, r3
 800492c:	f000 fbc8 	bl	80050c0 <vClearInterruptMaskFromISR>
    }
 8004930:	46c0      	nop			; (mov r8, r8)
 8004932:	46bd      	mov	sp, r7
 8004934:	b00b      	add	sp, #44	; 0x2c
 8004936:	bd90      	pop	{r4, r7, pc}
 8004938:	20000758 	.word	0x20000758
 800493c:	20000738 	.word	0x20000738
 8004940:	20000260 	.word	0x20000260
 8004944:	200006f0 	.word	0x200006f0
 8004948:	2000025c 	.word	0x2000025c
 800494c:	20000744 	.word	0x20000744

08004950 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800495a:	4b2e      	ldr	r3, [pc, #184]	; (8004a14 <prvAddCurrentTaskToDelayedList+0xc4>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004960:	4b2d      	ldr	r3, [pc, #180]	; (8004a18 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	3304      	adds	r3, #4
 8004966:	0018      	movs	r0, r3
 8004968:	f7fe fc25 	bl	80031b6 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	3301      	adds	r3, #1
 8004970:	d124      	bne.n	80049bc <prvAddCurrentTaskToDelayedList+0x6c>
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d021      	beq.n	80049bc <prvAddCurrentTaskToDelayedList+0x6c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004978:	4b28      	ldr	r3, [pc, #160]	; (8004a1c <prvAddCurrentTaskToDelayedList+0xcc>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	613b      	str	r3, [r7, #16]
 800497e:	4b26      	ldr	r3, [pc, #152]	; (8004a18 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	609a      	str	r2, [r3, #8]
 8004986:	4b24      	ldr	r3, [pc, #144]	; (8004a18 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	6892      	ldr	r2, [r2, #8]
 800498e:	60da      	str	r2, [r3, #12]
 8004990:	4b21      	ldr	r3, [pc, #132]	; (8004a18 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	3204      	adds	r2, #4
 800499a:	605a      	str	r2, [r3, #4]
 800499c:	4b1e      	ldr	r3, [pc, #120]	; (8004a18 <prvAddCurrentTaskToDelayedList+0xc8>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	1d1a      	adds	r2, r3, #4
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	609a      	str	r2, [r3, #8]
 80049a6:	4b1c      	ldr	r3, [pc, #112]	; (8004a18 <prvAddCurrentTaskToDelayedList+0xc8>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a1c      	ldr	r2, [pc, #112]	; (8004a1c <prvAddCurrentTaskToDelayedList+0xcc>)
 80049ac:	615a      	str	r2, [r3, #20]
 80049ae:	4b1b      	ldr	r3, [pc, #108]	; (8004a1c <prvAddCurrentTaskToDelayedList+0xcc>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	1c5a      	adds	r2, r3, #1
 80049b4:	4b19      	ldr	r3, [pc, #100]	; (8004a1c <prvAddCurrentTaskToDelayedList+0xcc>)
 80049b6:	601a      	str	r2, [r3, #0]
 80049b8:	46c0      	nop			; (mov r8, r8)

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80049ba:	e026      	b.n	8004a0a <prvAddCurrentTaskToDelayedList+0xba>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	18d3      	adds	r3, r2, r3
 80049c2:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80049c4:	4b14      	ldr	r3, [pc, #80]	; (8004a18 <prvAddCurrentTaskToDelayedList+0xc8>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d209      	bcs.n	80049e8 <prvAddCurrentTaskToDelayedList+0x98>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049d4:	4b12      	ldr	r3, [pc, #72]	; (8004a20 <prvAddCurrentTaskToDelayedList+0xd0>)
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	4b0f      	ldr	r3, [pc, #60]	; (8004a18 <prvAddCurrentTaskToDelayedList+0xc8>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	3304      	adds	r3, #4
 80049de:	0019      	movs	r1, r3
 80049e0:	0010      	movs	r0, r2
 80049e2:	f7fe fbb2 	bl	800314a <vListInsert>
}
 80049e6:	e010      	b.n	8004a0a <prvAddCurrentTaskToDelayedList+0xba>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049e8:	4b0e      	ldr	r3, [pc, #56]	; (8004a24 <prvAddCurrentTaskToDelayedList+0xd4>)
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	4b0a      	ldr	r3, [pc, #40]	; (8004a18 <prvAddCurrentTaskToDelayedList+0xc8>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	3304      	adds	r3, #4
 80049f2:	0019      	movs	r1, r3
 80049f4:	0010      	movs	r0, r2
 80049f6:	f7fe fba8 	bl	800314a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80049fa:	4b0b      	ldr	r3, [pc, #44]	; (8004a28 <prvAddCurrentTaskToDelayedList+0xd8>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d202      	bcs.n	8004a0a <prvAddCurrentTaskToDelayedList+0xba>
                    xNextTaskUnblockTime = xTimeToWake;
 8004a04:	4b08      	ldr	r3, [pc, #32]	; (8004a28 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	601a      	str	r2, [r3, #0]
}
 8004a0a:	46c0      	nop			; (mov r8, r8)
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	b006      	add	sp, #24
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	46c0      	nop			; (mov r8, r8)
 8004a14:	20000734 	.word	0x20000734
 8004a18:	2000025c 	.word	0x2000025c
 8004a1c:	2000071c 	.word	0x2000071c
 8004a20:	200006ec 	.word	0x200006ec
 8004a24:	200006e8 	.word	0x200006e8
 8004a28:	20000750 	.word	0x20000750

08004a2c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004a32:	2300      	movs	r3, #0
 8004a34:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004a36:	f000 fa41 	bl	8004ebc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004a3a:	4b0d      	ldr	r3, [pc, #52]	; (8004a70 <xTimerCreateTimerTask+0x44>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00c      	beq.n	8004a5c <xTimerCreateTimerTask+0x30>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8004a42:	2380      	movs	r3, #128	; 0x80
 8004a44:	005a      	lsls	r2, r3, #1
 8004a46:	490b      	ldr	r1, [pc, #44]	; (8004a74 <xTimerCreateTimerTask+0x48>)
 8004a48:	480b      	ldr	r0, [pc, #44]	; (8004a78 <xTimerCreateTimerTask+0x4c>)
 8004a4a:	4b0c      	ldr	r3, [pc, #48]	; (8004a7c <xTimerCreateTimerTask+0x50>)
 8004a4c:	9301      	str	r3, [sp, #4]
 8004a4e:	2302      	movs	r3, #2
 8004a50:	9300      	str	r3, [sp, #0]
 8004a52:	2300      	movs	r3, #0
 8004a54:	f7fe feab 	bl	80037ae <xTaskCreate>
 8004a58:	0003      	movs	r3, r0
 8004a5a:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d101      	bne.n	8004a66 <xTimerCreateTimerTask+0x3a>
 8004a62:	b672      	cpsid	i
 8004a64:	e7fe      	b.n	8004a64 <xTimerCreateTimerTask+0x38>
        return xReturn;
 8004a66:	687b      	ldr	r3, [r7, #4]
    }
 8004a68:	0018      	movs	r0, r3
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	b002      	add	sp, #8
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	2000078c 	.word	0x2000078c
 8004a74:	08006720 	.word	0x08006720
 8004a78:	08004b29 	.word	0x08004b29
 8004a7c:	20000790 	.word	0x20000790

08004a80 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004a8c:	e009      	b.n	8004aa2 <prvReloadTimer+0x22>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	18d3      	adds	r3, r2, r3
 8004a96:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	0010      	movs	r0, r2
 8004aa0:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	699a      	ldr	r2, [r3, #24]
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	18d1      	adds	r1, r2, r3
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f000 f8d8 	bl	8004c64 <prvInsertTimerInActiveList>
 8004ab4:	1e03      	subs	r3, r0, #0
 8004ab6:	d1ea      	bne.n	8004a8e <prvReloadTimer+0xe>
        }
    }
 8004ab8:	46c0      	nop			; (mov r8, r8)
 8004aba:	46c0      	nop			; (mov r8, r8)
 8004abc:	46bd      	mov	sp, r7
 8004abe:	b004      	add	sp, #16
 8004ac0:	bd80      	pop	{r7, pc}
	...

08004ac4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ace:	4b15      	ldr	r3, [pc, #84]	; (8004b24 <prvProcessExpiredTimer+0x60>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	3304      	adds	r3, #4
 8004adc:	0018      	movs	r0, r3
 8004ade:	f7fe fb6a 	bl	80031b6 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2228      	movs	r2, #40	; 0x28
 8004ae6:	5c9b      	ldrb	r3, [r3, r2]
 8004ae8:	001a      	movs	r2, r3
 8004aea:	2304      	movs	r3, #4
 8004aec:	4013      	ands	r3, r2
 8004aee:	d006      	beq.n	8004afe <prvProcessExpiredTimer+0x3a>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004af0:	683a      	ldr	r2, [r7, #0]
 8004af2:	6879      	ldr	r1, [r7, #4]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	0018      	movs	r0, r3
 8004af8:	f7ff ffc2 	bl	8004a80 <prvReloadTimer>
 8004afc:	e008      	b.n	8004b10 <prvProcessExpiredTimer+0x4c>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2228      	movs	r2, #40	; 0x28
 8004b02:	5c9b      	ldrb	r3, [r3, r2]
 8004b04:	2201      	movs	r2, #1
 8004b06:	4393      	bics	r3, r2
 8004b08:	b2d9      	uxtb	r1, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2228      	movs	r2, #40	; 0x28
 8004b0e:	5499      	strb	r1, [r3, r2]
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6a1b      	ldr	r3, [r3, #32]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	0010      	movs	r0, r2
 8004b18:	4798      	blx	r3
    }
 8004b1a:	46c0      	nop			; (mov r8, r8)
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	b004      	add	sp, #16
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	46c0      	nop			; (mov r8, r8)
 8004b24:	20000784 	.word	0x20000784

08004b28 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b30:	2308      	movs	r3, #8
 8004b32:	18fb      	adds	r3, r7, r3
 8004b34:	0018      	movs	r0, r3
 8004b36:	f000 f853 	bl	8004be0 <prvGetNextExpireTime>
 8004b3a:	0003      	movs	r3, r0
 8004b3c:	60fb      	str	r3, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	0011      	movs	r1, r2
 8004b44:	0018      	movs	r0, r3
 8004b46:	f000 f803 	bl	8004b50 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004b4a:	f000 f8cd 	bl	8004ce8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b4e:	e7ef      	b.n	8004b30 <prvTimerTask+0x8>

08004b50 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004b5a:	f7fe ffeb 	bl	8003b34 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b5e:	2308      	movs	r3, #8
 8004b60:	18fb      	adds	r3, r7, r3
 8004b62:	0018      	movs	r0, r3
 8004b64:	f000 f85e 	bl	8004c24 <prvSampleTimeNow>
 8004b68:	0003      	movs	r3, r0
 8004b6a:	60fb      	str	r3, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d12b      	bne.n	8004bca <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10c      	bne.n	8004b92 <prvProcessTimerOrBlockTask+0x42>
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d808      	bhi.n	8004b92 <prvProcessTimerOrBlockTask+0x42>
                {
                    ( void ) xTaskResumeAll();
 8004b80:	f7fe ffe4 	bl	8003b4c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	0011      	movs	r1, r2
 8004b8a:	0018      	movs	r0, r3
 8004b8c:	f7ff ff9a 	bl	8004ac4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004b90:	e01d      	b.n	8004bce <prvProcessTimerOrBlockTask+0x7e>
                    if( xListWasEmpty != pdFALSE )
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d008      	beq.n	8004baa <prvProcessTimerOrBlockTask+0x5a>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004b98:	4b0f      	ldr	r3, [pc, #60]	; (8004bd8 <prvProcessTimerOrBlockTask+0x88>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <prvProcessTimerOrBlockTask+0x56>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e000      	b.n	8004ba8 <prvProcessTimerOrBlockTask+0x58>
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004baa:	4b0c      	ldr	r3, [pc, #48]	; (8004bdc <prvProcessTimerOrBlockTask+0x8c>)
 8004bac:	6818      	ldr	r0, [r3, #0]
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	683a      	ldr	r2, [r7, #0]
 8004bb6:	0019      	movs	r1, r3
 8004bb8:	f7fe fdc6 	bl	8003748 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004bbc:	f7fe ffc6 	bl	8003b4c <xTaskResumeAll>
 8004bc0:	1e03      	subs	r3, r0, #0
 8004bc2:	d104      	bne.n	8004bce <prvProcessTimerOrBlockTask+0x7e>
                        portYIELD_WITHIN_API();
 8004bc4:	f000 fa3c 	bl	8005040 <vPortYield>
    }
 8004bc8:	e001      	b.n	8004bce <prvProcessTimerOrBlockTask+0x7e>
                ( void ) xTaskResumeAll();
 8004bca:	f7fe ffbf 	bl	8003b4c <xTaskResumeAll>
    }
 8004bce:	46c0      	nop			; (mov r8, r8)
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	b004      	add	sp, #16
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	46c0      	nop			; (mov r8, r8)
 8004bd8:	20000788 	.word	0x20000788
 8004bdc:	2000078c 	.word	0x2000078c

08004be0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004be8:	4b0d      	ldr	r3, [pc, #52]	; (8004c20 <prvGetNextExpireTime+0x40>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d101      	bne.n	8004bf6 <prvGetNextExpireTime+0x16>
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	e000      	b.n	8004bf8 <prvGetNextExpireTime+0x18>
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d105      	bne.n	8004c10 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c04:	4b06      	ldr	r3, [pc, #24]	; (8004c20 <prvGetNextExpireTime+0x40>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	60fb      	str	r3, [r7, #12]
 8004c0e:	e001      	b.n	8004c14 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004c14:	68fb      	ldr	r3, [r7, #12]
    }
 8004c16:	0018      	movs	r0, r3
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	b004      	add	sp, #16
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	46c0      	nop			; (mov r8, r8)
 8004c20:	20000784 	.word	0x20000784

08004c24 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004c2c:	f7ff f876 	bl	8003d1c <xTaskGetTickCount>
 8004c30:	0003      	movs	r3, r0
 8004c32:	60fb      	str	r3, [r7, #12]

        if( xTimeNow < xLastTime )
 8004c34:	4b0a      	ldr	r3, [pc, #40]	; (8004c60 <prvSampleTimeNow+0x3c>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d205      	bcs.n	8004c4a <prvSampleTimeNow+0x26>
        {
            prvSwitchTimerLists();
 8004c3e:	f000 f915 	bl	8004e6c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	e002      	b.n	8004c50 <prvSampleTimeNow+0x2c>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004c50:	4b03      	ldr	r3, [pc, #12]	; (8004c60 <prvSampleTimeNow+0x3c>)
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	601a      	str	r2, [r3, #0]

        return xTimeNow;
 8004c56:	68fb      	ldr	r3, [r7, #12]
    }
 8004c58:	0018      	movs	r0, r3
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	b004      	add	sp, #16
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	20000794 	.word	0x20000794

08004c64 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
 8004c70:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004c72:	2300      	movs	r3, #0
 8004c74:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004c82:	68ba      	ldr	r2, [r7, #8]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d812      	bhi.n	8004cb0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	1ad2      	subs	r2, r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d302      	bcc.n	8004c9e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	617b      	str	r3, [r7, #20]
 8004c9c:	e01b      	b.n	8004cd6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004c9e:	4b10      	ldr	r3, [pc, #64]	; (8004ce0 <prvInsertTimerInActiveList+0x7c>)
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	3304      	adds	r3, #4
 8004ca6:	0019      	movs	r1, r3
 8004ca8:	0010      	movs	r0, r2
 8004caa:	f7fe fa4e 	bl	800314a <vListInsert>
 8004cae:	e012      	b.n	8004cd6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d206      	bcs.n	8004cc6 <prvInsertTimerInActiveList+0x62>
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d302      	bcc.n	8004cc6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	617b      	str	r3, [r7, #20]
 8004cc4:	e007      	b.n	8004cd6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004cc6:	4b07      	ldr	r3, [pc, #28]	; (8004ce4 <prvInsertTimerInActiveList+0x80>)
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	3304      	adds	r3, #4
 8004cce:	0019      	movs	r1, r3
 8004cd0:	0010      	movs	r0, r2
 8004cd2:	f7fe fa3a 	bl	800314a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004cd6:	697b      	ldr	r3, [r7, #20]
    }
 8004cd8:	0018      	movs	r0, r3
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	b006      	add	sp, #24
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	20000788 	.word	0x20000788
 8004ce4:	20000784 	.word	0x20000784

08004ce8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b088      	sub	sp, #32
 8004cec:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004cee:	e0a9      	b.n	8004e44 <prvProcessReceivedCommands+0x15c>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004cf0:	1d3b      	adds	r3, r7, #4
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	da0f      	bge.n	8004d18 <prvProcessReceivedCommands+0x30>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004cf8:	1d3b      	adds	r3, r7, #4
 8004cfa:	3304      	adds	r3, #4
 8004cfc:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d101      	bne.n	8004d08 <prvProcessReceivedCommands+0x20>
 8004d04:	b672      	cpsid	i
 8004d06:	e7fe      	b.n	8004d06 <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	6858      	ldr	r0, [r3, #4]
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	0019      	movs	r1, r3
 8004d16:	4790      	blx	r2
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004d18:	1d3b      	adds	r3, r7, #4
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	da00      	bge.n	8004d22 <prvProcessReceivedCommands+0x3a>
 8004d20:	e08f      	b.n	8004e42 <prvProcessReceivedCommands+0x15a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004d22:	1d3b      	adds	r3, r7, #4
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	695b      	ldr	r3, [r3, #20]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d004      	beq.n	8004d3a <prvProcessReceivedCommands+0x52>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	3304      	adds	r3, #4
 8004d34:	0018      	movs	r0, r3
 8004d36:	f7fe fa3e 	bl	80031b6 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d3a:	003b      	movs	r3, r7
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	f7ff ff71 	bl	8004c24 <prvSampleTimeNow>
 8004d42:	0003      	movs	r3, r0
 8004d44:	617b      	str	r3, [r7, #20]

                switch( xMessage.xMessageID )
 8004d46:	1d3b      	adds	r3, r7, #4
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2b09      	cmp	r3, #9
 8004d4c:	d900      	bls.n	8004d50 <prvProcessReceivedCommands+0x68>
 8004d4e:	e079      	b.n	8004e44 <prvProcessReceivedCommands+0x15c>
 8004d50:	009a      	lsls	r2, r3, #2
 8004d52:	4b44      	ldr	r3, [pc, #272]	; (8004e64 <prvProcessReceivedCommands+0x17c>)
 8004d54:	18d3      	adds	r3, r2, r3
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	469f      	mov	pc, r3
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	2228      	movs	r2, #40	; 0x28
 8004d5e:	5c9b      	ldrb	r3, [r3, r2]
 8004d60:	2201      	movs	r2, #1
 8004d62:	4313      	orrs	r3, r2
 8004d64:	b2d9      	uxtb	r1, r3
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	2228      	movs	r2, #40	; 0x28
 8004d6a:	5499      	strb	r1, [r3, r2]

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004d6c:	1d3b      	adds	r3, r7, #4
 8004d6e:	685a      	ldr	r2, [r3, #4]
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	18d1      	adds	r1, r2, r3
 8004d76:	1d3b      	adds	r3, r7, #4
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	69b8      	ldr	r0, [r7, #24]
 8004d7e:	f7ff ff71 	bl	8004c64 <prvInsertTimerInActiveList>
 8004d82:	1e03      	subs	r3, r0, #0
 8004d84:	d05e      	beq.n	8004e44 <prvProcessReceivedCommands+0x15c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	2228      	movs	r2, #40	; 0x28
 8004d8a:	5c9b      	ldrb	r3, [r3, r2]
 8004d8c:	001a      	movs	r2, r3
 8004d8e:	2304      	movs	r3, #4
 8004d90:	4013      	ands	r3, r2
 8004d92:	d00a      	beq.n	8004daa <prvProcessReceivedCommands+0xc2>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004d94:	1d3b      	adds	r3, r7, #4
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	18d1      	adds	r1, r2, r3
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	0018      	movs	r0, r3
 8004da4:	f7ff fe6c 	bl	8004a80 <prvReloadTimer>
 8004da8:	e008      	b.n	8004dbc <prvProcessReceivedCommands+0xd4>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	2228      	movs	r2, #40	; 0x28
 8004dae:	5c9b      	ldrb	r3, [r3, r2]
 8004db0:	2201      	movs	r2, #1
 8004db2:	4393      	bics	r3, r2
 8004db4:	b2d9      	uxtb	r1, r3
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	2228      	movs	r2, #40	; 0x28
 8004dba:	5499      	strb	r1, [r3, r2]
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	0010      	movs	r0, r2
 8004dc4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004dc6:	e03d      	b.n	8004e44 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	2228      	movs	r2, #40	; 0x28
 8004dcc:	5c9b      	ldrb	r3, [r3, r2]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	4393      	bics	r3, r2
 8004dd2:	b2d9      	uxtb	r1, r3
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	2228      	movs	r2, #40	; 0x28
 8004dd8:	5499      	strb	r1, [r3, r2]
                        break;
 8004dda:	e033      	b.n	8004e44 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	2228      	movs	r2, #40	; 0x28
 8004de0:	5c9b      	ldrb	r3, [r3, r2]
 8004de2:	2201      	movs	r2, #1
 8004de4:	4313      	orrs	r3, r2
 8004de6:	b2d9      	uxtb	r1, r3
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	2228      	movs	r2, #40	; 0x28
 8004dec:	5499      	strb	r1, [r3, r2]
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004dee:	1d3b      	adds	r3, r7, #4
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <prvProcessReceivedCommands+0x11a>
 8004dfe:	b672      	cpsid	i
 8004e00:	e7fe      	b.n	8004e00 <prvProcessReceivedCommands+0x118>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	699a      	ldr	r2, [r3, #24]
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	18d1      	adds	r1, r2, r3
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	69b8      	ldr	r0, [r7, #24]
 8004e10:	f7ff ff28 	bl	8004c64 <prvInsertTimerInActiveList>
                        break;
 8004e14:	e016      	b.n	8004e44 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	2228      	movs	r2, #40	; 0x28
 8004e1a:	5c9b      	ldrb	r3, [r3, r2]
 8004e1c:	001a      	movs	r2, r3
 8004e1e:	2302      	movs	r3, #2
 8004e20:	4013      	ands	r3, r2
 8004e22:	d104      	bne.n	8004e2e <prvProcessReceivedCommands+0x146>
                            {
                                vPortFree( pxTimer );
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	0018      	movs	r0, r3
 8004e28:	f000 fa5a 	bl	80052e0 <vPortFree>
 8004e2c:	e00a      	b.n	8004e44 <prvProcessReceivedCommands+0x15c>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	2228      	movs	r2, #40	; 0x28
 8004e32:	5c9b      	ldrb	r3, [r3, r2]
 8004e34:	2201      	movs	r2, #1
 8004e36:	4393      	bics	r3, r2
 8004e38:	b2d9      	uxtb	r1, r3
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	2228      	movs	r2, #40	; 0x28
 8004e3e:	5499      	strb	r1, [r3, r2]
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004e40:	e000      	b.n	8004e44 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004e42:	46c0      	nop			; (mov r8, r8)
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e44:	4b08      	ldr	r3, [pc, #32]	; (8004e68 <prvProcessReceivedCommands+0x180>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	1d39      	adds	r1, r7, #4
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	0018      	movs	r0, r3
 8004e4e:	f7fe fae8 	bl	8003422 <xQueueReceive>
 8004e52:	1e03      	subs	r3, r0, #0
 8004e54:	d000      	beq.n	8004e58 <prvProcessReceivedCommands+0x170>
 8004e56:	e74b      	b.n	8004cf0 <prvProcessReceivedCommands+0x8>
        }
    }
 8004e58:	46c0      	nop			; (mov r8, r8)
 8004e5a:	46c0      	nop			; (mov r8, r8)
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	b008      	add	sp, #32
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	46c0      	nop			; (mov r8, r8)
 8004e64:	08006748 	.word	0x08006748
 8004e68:	2000078c 	.word	0x2000078c

08004e6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e72:	e00b      	b.n	8004e8c <prvSwitchTimerLists+0x20>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e74:	4b0f      	ldr	r3, [pc, #60]	; (8004eb4 <prvSwitchTimerLists+0x48>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004e7e:	2301      	movs	r3, #1
 8004e80:	425a      	negs	r2, r3
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	0011      	movs	r1, r2
 8004e86:	0018      	movs	r0, r3
 8004e88:	f7ff fe1c 	bl	8004ac4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e8c:	4b09      	ldr	r3, [pc, #36]	; (8004eb4 <prvSwitchTimerLists+0x48>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1ee      	bne.n	8004e74 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004e96:	4b07      	ldr	r3, [pc, #28]	; (8004eb4 <prvSwitchTimerLists+0x48>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004e9c:	4b06      	ldr	r3, [pc, #24]	; (8004eb8 <prvSwitchTimerLists+0x4c>)
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	4b04      	ldr	r3, [pc, #16]	; (8004eb4 <prvSwitchTimerLists+0x48>)
 8004ea2:	601a      	str	r2, [r3, #0]
        pxOverflowTimerList = pxTemp;
 8004ea4:	4b04      	ldr	r3, [pc, #16]	; (8004eb8 <prvSwitchTimerLists+0x4c>)
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	601a      	str	r2, [r3, #0]
    }
 8004eaa:	46c0      	nop			; (mov r8, r8)
 8004eac:	46bd      	mov	sp, r7
 8004eae:	b002      	add	sp, #8
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	46c0      	nop			; (mov r8, r8)
 8004eb4:	20000784 	.word	0x20000784
 8004eb8:	20000788 	.word	0x20000788

08004ebc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004ec0:	f000 f8ce 	bl	8005060 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004ec4:	4b14      	ldr	r3, [pc, #80]	; (8004f18 <prvCheckForValidListAndQueue+0x5c>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d120      	bne.n	8004f0e <prvCheckForValidListAndQueue+0x52>
            {
                vListInitialise( &xActiveTimerList1 );
 8004ecc:	4b13      	ldr	r3, [pc, #76]	; (8004f1c <prvCheckForValidListAndQueue+0x60>)
 8004ece:	0018      	movs	r0, r3
 8004ed0:	f7fe f912 	bl	80030f8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004ed4:	4b12      	ldr	r3, [pc, #72]	; (8004f20 <prvCheckForValidListAndQueue+0x64>)
 8004ed6:	0018      	movs	r0, r3
 8004ed8:	f7fe f90e 	bl	80030f8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004edc:	4b11      	ldr	r3, [pc, #68]	; (8004f24 <prvCheckForValidListAndQueue+0x68>)
 8004ede:	4a0f      	ldr	r2, [pc, #60]	; (8004f1c <prvCheckForValidListAndQueue+0x60>)
 8004ee0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004ee2:	4b11      	ldr	r3, [pc, #68]	; (8004f28 <prvCheckForValidListAndQueue+0x6c>)
 8004ee4:	4a0e      	ldr	r2, [pc, #56]	; (8004f20 <prvCheckForValidListAndQueue+0x64>)
 8004ee6:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004ee8:	2200      	movs	r2, #0
 8004eea:	2110      	movs	r1, #16
 8004eec:	200a      	movs	r0, #10
 8004eee:	f7fe fa13 	bl	8003318 <xQueueGenericCreate>
 8004ef2:	0002      	movs	r2, r0
 8004ef4:	4b08      	ldr	r3, [pc, #32]	; (8004f18 <prvCheckForValidListAndQueue+0x5c>)
 8004ef6:	601a      	str	r2, [r3, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004ef8:	4b07      	ldr	r3, [pc, #28]	; (8004f18 <prvCheckForValidListAndQueue+0x5c>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d006      	beq.n	8004f0e <prvCheckForValidListAndQueue+0x52>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004f00:	4b05      	ldr	r3, [pc, #20]	; (8004f18 <prvCheckForValidListAndQueue+0x5c>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a09      	ldr	r2, [pc, #36]	; (8004f2c <prvCheckForValidListAndQueue+0x70>)
 8004f06:	0011      	movs	r1, r2
 8004f08:	0018      	movs	r0, r3
 8004f0a:	f7fe fbd9 	bl	80036c0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004f0e:	f000 f8b9 	bl	8005084 <vPortExitCritical>
    }
 8004f12:	46c0      	nop			; (mov r8, r8)
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	2000078c 	.word	0x2000078c
 8004f1c:	2000075c 	.word	0x2000075c
 8004f20:	20000770 	.word	0x20000770
 8004f24:	20000784 	.word	0x20000784
 8004f28:	20000788 	.word	0x20000788
 8004f2c:	08006728 	.word	0x08006728

08004f30 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	3b04      	subs	r3, #4
 8004f40:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2280      	movs	r2, #128	; 0x80
 8004f46:	0452      	lsls	r2, r2, #17
 8004f48:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	3b04      	subs	r3, #4
 8004f4e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	3b04      	subs	r3, #4
 8004f5a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 8004f5c:	4a08      	ldr	r2, [pc, #32]	; (8004f80 <pxPortInitialiseStack+0x50>)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                       /* R12, R3, R2 and R1. */
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	3b14      	subs	r3, #20
 8004f66:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                       /* R11..R4. */
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	3b20      	subs	r3, #32
 8004f72:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004f74:	68fb      	ldr	r3, [r7, #12]
}
 8004f76:	0018      	movs	r0, r3
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	b004      	add	sp, #16
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	46c0      	nop			; (mov r8, r8)
 8004f80:	08004f85 	.word	0x08004f85

08004f84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004f8e:	4b08      	ldr	r3, [pc, #32]	; (8004fb0 <prvTaskExitError+0x2c>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	3301      	adds	r3, #1
 8004f94:	d001      	beq.n	8004f9a <prvTaskExitError+0x16>
 8004f96:	b672      	cpsid	i
 8004f98:	e7fe      	b.n	8004f98 <prvTaskExitError+0x14>
    portDISABLE_INTERRUPTS();
 8004f9a:	b672      	cpsid	i

    while( ulDummy == 0 )
 8004f9c:	46c0      	nop			; (mov r8, r8)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d0fc      	beq.n	8004f9e <prvTaskExitError+0x1a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004fa4:	46c0      	nop			; (mov r8, r8)
 8004fa6:	46c0      	nop			; (mov r8, r8)
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	b002      	add	sp, #8
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	46c0      	nop			; (mov r8, r8)
 8004fb0:	2000009c 	.word	0x2000009c

08004fb4 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
    /* This function is no longer used, but retained for backward
     * compatibility. */
}
 8004fb8:	46c0      	nop			; (mov r8, r8)
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
	...

08004fc0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
    /* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
     * table offset register that can be used to locate the initial stack value.
     * Not all M0 parts have the application vector table at address 0. */
    __asm volatile (
 8004fc0:	4a0b      	ldr	r2, [pc, #44]	; (8004ff0 <pxCurrentTCBConst2>)
 8004fc2:	6813      	ldr	r3, [r2, #0]
 8004fc4:	6818      	ldr	r0, [r3, #0]
 8004fc6:	3020      	adds	r0, #32
 8004fc8:	f380 8809 	msr	PSP, r0
 8004fcc:	2002      	movs	r0, #2
 8004fce:	f380 8814 	msr	CONTROL, r0
 8004fd2:	f3bf 8f6f 	isb	sy
 8004fd6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8004fd8:	46ae      	mov	lr, r5
 8004fda:	bc08      	pop	{r3}
 8004fdc:	bc04      	pop	{r2}
 8004fde:	b662      	cpsie	i
 8004fe0:	4718      	bx	r3
 8004fe2:	46c0      	nop			; (mov r8, r8)
 8004fe4:	46c0      	nop			; (mov r8, r8)
 8004fe6:	46c0      	nop			; (mov r8, r8)
 8004fe8:	46c0      	nop			; (mov r8, r8)
 8004fea:	46c0      	nop			; (mov r8, r8)
 8004fec:	46c0      	nop			; (mov r8, r8)
 8004fee:	46c0      	nop			; (mov r8, r8)

08004ff0 <pxCurrentTCBConst2>:
 8004ff0:	2000025c 	.word	0x2000025c
        "	bx   r3						\n"/* Finally, jump to the user defined task code. */
        "								\n"
        "	.align 4					\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB	  "
        );
}
 8004ff4:	46c0      	nop			; (mov r8, r8)
 8004ff6:	46c0      	nop			; (mov r8, r8)

08004ff8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004ffc:	4b0e      	ldr	r3, [pc, #56]	; (8005038 <xPortStartScheduler+0x40>)
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	4b0d      	ldr	r3, [pc, #52]	; (8005038 <xPortStartScheduler+0x40>)
 8005002:	21ff      	movs	r1, #255	; 0xff
 8005004:	0409      	lsls	r1, r1, #16
 8005006:	430a      	orrs	r2, r1
 8005008:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800500a:	4b0b      	ldr	r3, [pc, #44]	; (8005038 <xPortStartScheduler+0x40>)
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	4b0a      	ldr	r3, [pc, #40]	; (8005038 <xPortStartScheduler+0x40>)
 8005010:	21ff      	movs	r1, #255	; 0xff
 8005012:	0609      	lsls	r1, r1, #24
 8005014:	430a      	orrs	r2, r1
 8005016:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005018:	f000 f898 	bl	800514c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800501c:	4b07      	ldr	r3, [pc, #28]	; (800503c <xPortStartScheduler+0x44>)
 800501e:	2200      	movs	r2, #0
 8005020:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vPortStartFirstTask();
 8005022:	f7ff ffcd 	bl	8004fc0 <vPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005026:	f7fe ff93 	bl	8003f50 <vTaskSwitchContext>
    prvTaskExitError();
 800502a:	f7ff ffab 	bl	8004f84 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800502e:	2300      	movs	r3, #0
}
 8005030:	0018      	movs	r0, r3
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	46c0      	nop			; (mov r8, r8)
 8005038:	e000ed20 	.word	0xe000ed20
 800503c:	2000009c 	.word	0x2000009c

08005040 <vPortYield>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8005040:	b580      	push	{r7, lr}
 8005042:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005044:	4b05      	ldr	r3, [pc, #20]	; (800505c <vPortYield+0x1c>)
 8005046:	2280      	movs	r2, #128	; 0x80
 8005048:	0552      	lsls	r2, r2, #21
 800504a:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is completely
     * within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800504c:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8005050:	f3bf 8f6f 	isb	sy
}
 8005054:	46c0      	nop			; (mov r8, r8)
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	46c0      	nop			; (mov r8, r8)
 800505c:	e000ed04 	.word	0xe000ed04

08005060 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005060:	b580      	push	{r7, lr}
 8005062:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8005064:	b672      	cpsid	i
    uxCriticalNesting++;
 8005066:	4b06      	ldr	r3, [pc, #24]	; (8005080 <vPortEnterCritical+0x20>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	1c5a      	adds	r2, r3, #1
 800506c:	4b04      	ldr	r3, [pc, #16]	; (8005080 <vPortEnterCritical+0x20>)
 800506e:	601a      	str	r2, [r3, #0]
    __asm volatile ( "dsb" ::: "memory" );
 8005070:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8005074:	f3bf 8f6f 	isb	sy
}
 8005078:	46c0      	nop			; (mov r8, r8)
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	46c0      	nop			; (mov r8, r8)
 8005080:	2000009c 	.word	0x2000009c

08005084 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005084:	b580      	push	{r7, lr}
 8005086:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005088:	4b09      	ldr	r3, [pc, #36]	; (80050b0 <vPortExitCritical+0x2c>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d101      	bne.n	8005094 <vPortExitCritical+0x10>
 8005090:	b672      	cpsid	i
 8005092:	e7fe      	b.n	8005092 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8005094:	4b06      	ldr	r3, [pc, #24]	; (80050b0 <vPortExitCritical+0x2c>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	1e5a      	subs	r2, r3, #1
 800509a:	4b05      	ldr	r3, [pc, #20]	; (80050b0 <vPortExitCritical+0x2c>)
 800509c:	601a      	str	r2, [r3, #0]

    if( uxCriticalNesting == 0 )
 800509e:	4b04      	ldr	r3, [pc, #16]	; (80050b0 <vPortExitCritical+0x2c>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d100      	bne.n	80050a8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 80050a6:	b662      	cpsie	i
    }
}
 80050a8:	46c0      	nop			; (mov r8, r8)
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	46c0      	nop			; (mov r8, r8)
 80050b0:	2000009c 	.word	0x2000009c

080050b4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 80050b4:	f3ef 8010 	mrs	r0, PRIMASK
 80050b8:	b672      	cpsid	i
 80050ba:	4770      	bx	lr
        " mrs r0, PRIMASK	\n"
        " cpsid i			\n"
        " bx lr				  "
        ::: "memory"
        );
}
 80050bc:	46c0      	nop			; (mov r8, r8)
 80050be:	0018      	movs	r0, r3

080050c0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 80050c0:	f380 8810 	msr	PRIMASK, r0
 80050c4:	4770      	bx	lr
        " msr PRIMASK, r0	\n"
        " bx lr				  "
        ::: "memory"
        );
}
 80050c6:	46c0      	nop			; (mov r8, r8)
	...

080050d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80050d0:	f3ef 8009 	mrs	r0, PSP
 80050d4:	4b0e      	ldr	r3, [pc, #56]	; (8005110 <pxCurrentTCBConst>)
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	3820      	subs	r0, #32
 80050da:	6010      	str	r0, [r2, #0]
 80050dc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80050de:	4644      	mov	r4, r8
 80050e0:	464d      	mov	r5, r9
 80050e2:	4656      	mov	r6, sl
 80050e4:	465f      	mov	r7, fp
 80050e6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80050e8:	b508      	push	{r3, lr}
 80050ea:	b672      	cpsid	i
 80050ec:	f7fe ff30 	bl	8003f50 <vTaskSwitchContext>
 80050f0:	b662      	cpsie	i
 80050f2:	bc0c      	pop	{r2, r3}
 80050f4:	6811      	ldr	r1, [r2, #0]
 80050f6:	6808      	ldr	r0, [r1, #0]
 80050f8:	3010      	adds	r0, #16
 80050fa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80050fc:	46a0      	mov	r8, r4
 80050fe:	46a9      	mov	r9, r5
 8005100:	46b2      	mov	sl, r6
 8005102:	46bb      	mov	fp, r7
 8005104:	f380 8809 	msr	PSP, r0
 8005108:	3820      	subs	r0, #32
 800510a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800510c:	4718      	bx	r3
 800510e:	46c0      	nop			; (mov r8, r8)

08005110 <pxCurrentTCBConst>:
 8005110:	2000025c 	.word	0x2000025c
        "	bx r3								\n"
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	  "
    );
}
 8005114:	46c0      	nop			; (mov r8, r8)
 8005116:	46c0      	nop			; (mov r8, r8)

08005118 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800511e:	f7ff ffc9 	bl	80050b4 <ulSetInterruptMaskFromISR>
 8005122:	0003      	movs	r3, r0
 8005124:	607b      	str	r3, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005126:	f7fe fe07 	bl	8003d38 <xTaskIncrementTick>
 800512a:	1e03      	subs	r3, r0, #0
 800512c:	d003      	beq.n	8005136 <SysTick_Handler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800512e:	4b06      	ldr	r3, [pc, #24]	; (8005148 <SysTick_Handler+0x30>)
 8005130:	2280      	movs	r2, #128	; 0x80
 8005132:	0552      	lsls	r2, r2, #21
 8005134:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	0018      	movs	r0, r3
 800513a:	f7ff ffc1 	bl	80050c0 <vClearInterruptMaskFromISR>
}
 800513e:	46c0      	nop			; (mov r8, r8)
 8005140:	46bd      	mov	sp, r7
 8005142:	b002      	add	sp, #8
 8005144:	bd80      	pop	{r7, pc}
 8005146:	46c0      	nop			; (mov r8, r8)
 8005148:	e000ed04 	.word	0xe000ed04

0800514c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800514c:	b580      	push	{r7, lr}
 800514e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005150:	4b0b      	ldr	r3, [pc, #44]	; (8005180 <vPortSetupTimerInterrupt+0x34>)
 8005152:	2200      	movs	r2, #0
 8005154:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005156:	4b0b      	ldr	r3, [pc, #44]	; (8005184 <vPortSetupTimerInterrupt+0x38>)
 8005158:	2200      	movs	r2, #0
 800515a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800515c:	4b0a      	ldr	r3, [pc, #40]	; (8005188 <vPortSetupTimerInterrupt+0x3c>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	22fa      	movs	r2, #250	; 0xfa
 8005162:	0091      	lsls	r1, r2, #2
 8005164:	0018      	movs	r0, r3
 8005166:	f7fa ffd9 	bl	800011c <__udivsi3>
 800516a:	0003      	movs	r3, r0
 800516c:	001a      	movs	r2, r3
 800516e:	4b07      	ldr	r3, [pc, #28]	; (800518c <vPortSetupTimerInterrupt+0x40>)
 8005170:	3a01      	subs	r2, #1
 8005172:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005174:	4b02      	ldr	r3, [pc, #8]	; (8005180 <vPortSetupTimerInterrupt+0x34>)
 8005176:	2207      	movs	r2, #7
 8005178:	601a      	str	r2, [r3, #0]
}
 800517a:	46c0      	nop			; (mov r8, r8)
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	e000e010 	.word	0xe000e010
 8005184:	e000e018 	.word	0xe000e018
 8005188:	2000008c 	.word	0x2000008c
 800518c:	e000e014 	.word	0xe000e014

08005190 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b088      	sub	sp, #32
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8005198:	2300      	movs	r3, #0
 800519a:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800519c:	f7fe fcca 	bl	8003b34 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80051a0:	4b4a      	ldr	r3, [pc, #296]	; (80052cc <pvPortMalloc+0x13c>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d101      	bne.n	80051ac <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80051a8:	f000 f8e6 	bl	8005378 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d012      	beq.n	80051d8 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80051b2:	2208      	movs	r2, #8
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2107      	movs	r1, #7
 80051b8:	400b      	ands	r3, r1
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	3308      	adds	r3, #8
 80051be:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	43db      	mvns	r3, r3
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d804      	bhi.n	80051d4 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	18d3      	adds	r3, r2, r3
 80051d0:	607b      	str	r3, [r7, #4]
 80051d2:	e001      	b.n	80051d8 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80051d4:	2300      	movs	r3, #0
 80051d6:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	db68      	blt.n	80052b0 <pvPortMalloc+0x120>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d065      	beq.n	80052b0 <pvPortMalloc+0x120>
 80051e4:	4b3a      	ldr	r3, [pc, #232]	; (80052d0 <pvPortMalloc+0x140>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d860      	bhi.n	80052b0 <pvPortMalloc+0x120>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80051ee:	4b39      	ldr	r3, [pc, #228]	; (80052d4 <pvPortMalloc+0x144>)
 80051f0:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 80051f2:	4b38      	ldr	r3, [pc, #224]	; (80052d4 <pvPortMalloc+0x144>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051f8:	e004      	b.n	8005204 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	429a      	cmp	r2, r3
 800520c:	d903      	bls.n	8005216 <pvPortMalloc+0x86>
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1f1      	bne.n	80051fa <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005216:	4b2d      	ldr	r3, [pc, #180]	; (80052cc <pvPortMalloc+0x13c>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	69fa      	ldr	r2, [r7, #28]
 800521c:	429a      	cmp	r2, r3
 800521e:	d047      	beq.n	80052b0 <pvPortMalloc+0x120>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2208      	movs	r2, #8
 8005226:	189b      	adds	r3, r3, r2
 8005228:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	685a      	ldr	r2, [r3, #4]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	1ad2      	subs	r2, r2, r3
 800523a:	2308      	movs	r3, #8
 800523c:	005b      	lsls	r3, r3, #1
 800523e:	429a      	cmp	r2, r3
 8005240:	d916      	bls.n	8005270 <pvPortMalloc+0xe0>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005242:	69fa      	ldr	r2, [r7, #28]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	18d3      	adds	r3, r2, r3
 8005248:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2207      	movs	r2, #7
 800524e:	4013      	ands	r3, r2
 8005250:	d001      	beq.n	8005256 <pvPortMalloc+0xc6>
 8005252:	b672      	cpsid	i
 8005254:	e7fe      	b.n	8005254 <pvPortMalloc+0xc4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	1ad2      	subs	r2, r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	0018      	movs	r0, r3
 800526c:	f000 f8de 	bl	800542c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005270:	4b17      	ldr	r3, [pc, #92]	; (80052d0 <pvPortMalloc+0x140>)
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	1ad2      	subs	r2, r2, r3
 800527a:	4b15      	ldr	r3, [pc, #84]	; (80052d0 <pvPortMalloc+0x140>)
 800527c:	601a      	str	r2, [r3, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800527e:	4b14      	ldr	r3, [pc, #80]	; (80052d0 <pvPortMalloc+0x140>)
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	4b15      	ldr	r3, [pc, #84]	; (80052d8 <pvPortMalloc+0x148>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	429a      	cmp	r2, r3
 8005288:	d203      	bcs.n	8005292 <pvPortMalloc+0x102>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800528a:	4b11      	ldr	r3, [pc, #68]	; (80052d0 <pvPortMalloc+0x140>)
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	4b12      	ldr	r3, [pc, #72]	; (80052d8 <pvPortMalloc+0x148>)
 8005290:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	2280      	movs	r2, #128	; 0x80
 8005298:	0612      	lsls	r2, r2, #24
 800529a:	431a      	orrs	r2, r3
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	2200      	movs	r2, #0
 80052a4:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80052a6:	4b0d      	ldr	r3, [pc, #52]	; (80052dc <pvPortMalloc+0x14c>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	1c5a      	adds	r2, r3, #1
 80052ac:	4b0b      	ldr	r3, [pc, #44]	; (80052dc <pvPortMalloc+0x14c>)
 80052ae:	601a      	str	r2, [r3, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80052b0:	f7fe fc4c 	bl	8003b4c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	2207      	movs	r2, #7
 80052b8:	4013      	ands	r3, r2
 80052ba:	d001      	beq.n	80052c0 <pvPortMalloc+0x130>
 80052bc:	b672      	cpsid	i
 80052be:	e7fe      	b.n	80052be <pvPortMalloc+0x12e>
    return pvReturn;
 80052c0:	697b      	ldr	r3, [r7, #20]
}
 80052c2:	0018      	movs	r0, r3
 80052c4:	46bd      	mov	sp, r7
 80052c6:	b008      	add	sp, #32
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	46c0      	nop			; (mov r8, r8)
 80052cc:	20001fa0 	.word	0x20001fa0
 80052d0:	20001fa4 	.word	0x20001fa4
 80052d4:	20001f98 	.word	0x20001f98
 80052d8:	20001fa8 	.word	0x20001fa8
 80052dc:	20001fac 	.word	0x20001fac

080052e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d039      	beq.n	8005366 <vPortFree+0x86>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80052f2:	2308      	movs	r3, #8
 80052f4:	425b      	negs	r3, r3
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	18d3      	adds	r3, r2, r3
 80052fa:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	db01      	blt.n	800530c <vPortFree+0x2c>
 8005308:	b672      	cpsid	i
 800530a:	e7fe      	b.n	800530a <vPortFree+0x2a>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d001      	beq.n	8005318 <vPortFree+0x38>
 8005314:	b672      	cpsid	i
 8005316:	e7fe      	b.n	8005316 <vPortFree+0x36>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	0fdb      	lsrs	r3, r3, #31
 800531e:	1c1a      	adds	r2, r3, #0
 8005320:	2301      	movs	r3, #1
 8005322:	4013      	ands	r3, r2
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d01d      	beq.n	8005366 <vPortFree+0x86>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d119      	bne.n	8005366 <vPortFree+0x86>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	005b      	lsls	r3, r3, #1
 8005338:	085a      	lsrs	r2, r3, #1
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800533e:	f7fe fbf9 	bl	8003b34 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	685a      	ldr	r2, [r3, #4]
 8005346:	4b0a      	ldr	r3, [pc, #40]	; (8005370 <vPortFree+0x90>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	18d2      	adds	r2, r2, r3
 800534c:	4b08      	ldr	r3, [pc, #32]	; (8005370 <vPortFree+0x90>)
 800534e:	601a      	str	r2, [r3, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	0018      	movs	r0, r3
 8005354:	f000 f86a 	bl	800542c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005358:	4b06      	ldr	r3, [pc, #24]	; (8005374 <vPortFree+0x94>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	1c5a      	adds	r2, r3, #1
 800535e:	4b05      	ldr	r3, [pc, #20]	; (8005374 <vPortFree+0x94>)
 8005360:	601a      	str	r2, [r3, #0]
                }
                ( void ) xTaskResumeAll();
 8005362:	f7fe fbf3 	bl	8003b4c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005366:	46c0      	nop			; (mov r8, r8)
 8005368:	46bd      	mov	sp, r7
 800536a:	b004      	add	sp, #16
 800536c:	bd80      	pop	{r7, pc}
 800536e:	46c0      	nop			; (mov r8, r8)
 8005370:	20001fa4 	.word	0x20001fa4
 8005374:	20001fb0 	.word	0x20001fb0

08005378 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800537e:	23c0      	movs	r3, #192	; 0xc0
 8005380:	015b      	lsls	r3, r3, #5
 8005382:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8005384:	4b24      	ldr	r3, [pc, #144]	; (8005418 <prvHeapInit+0xa0>)
 8005386:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2207      	movs	r2, #7
 800538c:	4013      	ands	r3, r2
 800538e:	d00c      	beq.n	80053aa <prvHeapInit+0x32>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	3307      	adds	r3, #7
 8005394:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2207      	movs	r2, #7
 800539a:	4393      	bics	r3, r2
 800539c:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	1ad2      	subs	r2, r2, r3
 80053a4:	4b1c      	ldr	r3, [pc, #112]	; (8005418 <prvHeapInit+0xa0>)
 80053a6:	18d3      	adds	r3, r2, r3
 80053a8:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80053ae:	4b1b      	ldr	r3, [pc, #108]	; (800541c <prvHeapInit+0xa4>)
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	601a      	str	r2, [r3, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80053b4:	4b19      	ldr	r3, [pc, #100]	; (800541c <prvHeapInit+0xa4>)
 80053b6:	2200      	movs	r2, #0
 80053b8:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	18d3      	adds	r3, r2, r3
 80053c0:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80053c2:	2208      	movs	r2, #8
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	1a9b      	subs	r3, r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2207      	movs	r2, #7
 80053ce:	4393      	bics	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	4b12      	ldr	r3, [pc, #72]	; (8005420 <prvHeapInit+0xa8>)
 80053d6:	601a      	str	r2, [r3, #0]
    pxEnd->xBlockSize = 0;
 80053d8:	4b11      	ldr	r3, [pc, #68]	; (8005420 <prvHeapInit+0xa8>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2200      	movs	r2, #0
 80053de:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80053e0:	4b0f      	ldr	r3, [pc, #60]	; (8005420 <prvHeapInit+0xa8>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2200      	movs	r2, #0
 80053e6:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	1ad2      	subs	r2, r2, r3
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80053f6:	4b0a      	ldr	r3, [pc, #40]	; (8005420 <prvHeapInit+0xa8>)
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	4b08      	ldr	r3, [pc, #32]	; (8005424 <prvHeapInit+0xac>)
 8005404:	601a      	str	r2, [r3, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	685a      	ldr	r2, [r3, #4]
 800540a:	4b07      	ldr	r3, [pc, #28]	; (8005428 <prvHeapInit+0xb0>)
 800540c:	601a      	str	r2, [r3, #0]
}
 800540e:	46c0      	nop			; (mov r8, r8)
 8005410:	46bd      	mov	sp, r7
 8005412:	b004      	add	sp, #16
 8005414:	bd80      	pop	{r7, pc}
 8005416:	46c0      	nop			; (mov r8, r8)
 8005418:	20000798 	.word	0x20000798
 800541c:	20001f98 	.word	0x20001f98
 8005420:	20001fa0 	.word	0x20001fa0
 8005424:	20001fa8 	.word	0x20001fa8
 8005428:	20001fa4 	.word	0x20001fa4

0800542c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005434:	4b27      	ldr	r3, [pc, #156]	; (80054d4 <prvInsertBlockIntoFreeList+0xa8>)
 8005436:	60fb      	str	r3, [r7, #12]
 8005438:	e002      	b.n	8005440 <prvInsertBlockIntoFreeList+0x14>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	60fb      	str	r3, [r7, #12]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	429a      	cmp	r2, r3
 8005448:	d8f7      	bhi.n	800543a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	68ba      	ldr	r2, [r7, #8]
 8005454:	18d3      	adds	r3, r2, r3
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	429a      	cmp	r2, r3
 800545a:	d108      	bne.n	800546e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	685a      	ldr	r2, [r3, #4]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	18d2      	adds	r2, r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	18d2      	adds	r2, r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	429a      	cmp	r2, r3
 8005480:	d118      	bne.n	80054b4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	4b14      	ldr	r3, [pc, #80]	; (80054d8 <prvInsertBlockIntoFreeList+0xac>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	429a      	cmp	r2, r3
 800548c:	d00d      	beq.n	80054aa <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685a      	ldr	r2, [r3, #4]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	18d2      	adds	r2, r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	601a      	str	r2, [r3, #0]
 80054a8:	e008      	b.n	80054bc <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80054aa:	4b0b      	ldr	r3, [pc, #44]	; (80054d8 <prvInsertBlockIntoFreeList+0xac>)
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	e003      	b.n	80054bc <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d002      	beq.n	80054ca <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80054ca:	46c0      	nop			; (mov r8, r8)
 80054cc:	46bd      	mov	sp, r7
 80054ce:	b004      	add	sp, #16
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	46c0      	nop			; (mov r8, r8)
 80054d4:	20001f98 	.word	0x20001f98
 80054d8:	20001fa0 	.word	0x20001fa0

080054dc <__libc_init_array>:
 80054dc:	b570      	push	{r4, r5, r6, lr}
 80054de:	2600      	movs	r6, #0
 80054e0:	4d0c      	ldr	r5, [pc, #48]	; (8005514 <__libc_init_array+0x38>)
 80054e2:	4c0d      	ldr	r4, [pc, #52]	; (8005518 <__libc_init_array+0x3c>)
 80054e4:	1b64      	subs	r4, r4, r5
 80054e6:	10a4      	asrs	r4, r4, #2
 80054e8:	42a6      	cmp	r6, r4
 80054ea:	d109      	bne.n	8005500 <__libc_init_array+0x24>
 80054ec:	2600      	movs	r6, #0
 80054ee:	f001 f88f 	bl	8006610 <_init>
 80054f2:	4d0a      	ldr	r5, [pc, #40]	; (800551c <__libc_init_array+0x40>)
 80054f4:	4c0a      	ldr	r4, [pc, #40]	; (8005520 <__libc_init_array+0x44>)
 80054f6:	1b64      	subs	r4, r4, r5
 80054f8:	10a4      	asrs	r4, r4, #2
 80054fa:	42a6      	cmp	r6, r4
 80054fc:	d105      	bne.n	800550a <__libc_init_array+0x2e>
 80054fe:	bd70      	pop	{r4, r5, r6, pc}
 8005500:	00b3      	lsls	r3, r6, #2
 8005502:	58eb      	ldr	r3, [r5, r3]
 8005504:	4798      	blx	r3
 8005506:	3601      	adds	r6, #1
 8005508:	e7ee      	b.n	80054e8 <__libc_init_array+0xc>
 800550a:	00b3      	lsls	r3, r6, #2
 800550c:	58eb      	ldr	r3, [r5, r3]
 800550e:	4798      	blx	r3
 8005510:	3601      	adds	r6, #1
 8005512:	e7f2      	b.n	80054fa <__libc_init_array+0x1e>
 8005514:	08006808 	.word	0x08006808
 8005518:	08006808 	.word	0x08006808
 800551c:	08006808 	.word	0x08006808
 8005520:	0800680c 	.word	0x0800680c

08005524 <memcpy>:
 8005524:	2300      	movs	r3, #0
 8005526:	b510      	push	{r4, lr}
 8005528:	429a      	cmp	r2, r3
 800552a:	d100      	bne.n	800552e <memcpy+0xa>
 800552c:	bd10      	pop	{r4, pc}
 800552e:	5ccc      	ldrb	r4, [r1, r3]
 8005530:	54c4      	strb	r4, [r0, r3]
 8005532:	3301      	adds	r3, #1
 8005534:	e7f8      	b.n	8005528 <memcpy+0x4>

08005536 <memset>:
 8005536:	0003      	movs	r3, r0
 8005538:	1882      	adds	r2, r0, r2
 800553a:	4293      	cmp	r3, r2
 800553c:	d100      	bne.n	8005540 <memset+0xa>
 800553e:	4770      	bx	lr
 8005540:	7019      	strb	r1, [r3, #0]
 8005542:	3301      	adds	r3, #1
 8005544:	e7f9      	b.n	800553a <memset+0x4>
	...

08005548 <iprintf>:
 8005548:	b40f      	push	{r0, r1, r2, r3}
 800554a:	4b0b      	ldr	r3, [pc, #44]	; (8005578 <iprintf+0x30>)
 800554c:	b513      	push	{r0, r1, r4, lr}
 800554e:	681c      	ldr	r4, [r3, #0]
 8005550:	2c00      	cmp	r4, #0
 8005552:	d005      	beq.n	8005560 <iprintf+0x18>
 8005554:	69a3      	ldr	r3, [r4, #24]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d102      	bne.n	8005560 <iprintf+0x18>
 800555a:	0020      	movs	r0, r4
 800555c:	f000 fa86 	bl	8005a6c <__sinit>
 8005560:	ab05      	add	r3, sp, #20
 8005562:	0020      	movs	r0, r4
 8005564:	9a04      	ldr	r2, [sp, #16]
 8005566:	68a1      	ldr	r1, [r4, #8]
 8005568:	9301      	str	r3, [sp, #4]
 800556a:	f000 fc99 	bl	8005ea0 <_vfiprintf_r>
 800556e:	bc16      	pop	{r1, r2, r4}
 8005570:	bc08      	pop	{r3}
 8005572:	b004      	add	sp, #16
 8005574:	4718      	bx	r3
 8005576:	46c0      	nop			; (mov r8, r8)
 8005578:	200000a0 	.word	0x200000a0

0800557c <_puts_r>:
 800557c:	b570      	push	{r4, r5, r6, lr}
 800557e:	0005      	movs	r5, r0
 8005580:	000e      	movs	r6, r1
 8005582:	2800      	cmp	r0, #0
 8005584:	d004      	beq.n	8005590 <_puts_r+0x14>
 8005586:	6983      	ldr	r3, [r0, #24]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d101      	bne.n	8005590 <_puts_r+0x14>
 800558c:	f000 fa6e 	bl	8005a6c <__sinit>
 8005590:	69ab      	ldr	r3, [r5, #24]
 8005592:	68ac      	ldr	r4, [r5, #8]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d102      	bne.n	800559e <_puts_r+0x22>
 8005598:	0028      	movs	r0, r5
 800559a:	f000 fa67 	bl	8005a6c <__sinit>
 800559e:	4b2d      	ldr	r3, [pc, #180]	; (8005654 <_puts_r+0xd8>)
 80055a0:	429c      	cmp	r4, r3
 80055a2:	d122      	bne.n	80055ea <_puts_r+0x6e>
 80055a4:	686c      	ldr	r4, [r5, #4]
 80055a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055a8:	07db      	lsls	r3, r3, #31
 80055aa:	d405      	bmi.n	80055b8 <_puts_r+0x3c>
 80055ac:	89a3      	ldrh	r3, [r4, #12]
 80055ae:	059b      	lsls	r3, r3, #22
 80055b0:	d402      	bmi.n	80055b8 <_puts_r+0x3c>
 80055b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055b4:	f000 fafb 	bl	8005bae <__retarget_lock_acquire_recursive>
 80055b8:	89a3      	ldrh	r3, [r4, #12]
 80055ba:	071b      	lsls	r3, r3, #28
 80055bc:	d502      	bpl.n	80055c4 <_puts_r+0x48>
 80055be:	6923      	ldr	r3, [r4, #16]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d129      	bne.n	8005618 <_puts_r+0x9c>
 80055c4:	0021      	movs	r1, r4
 80055c6:	0028      	movs	r0, r5
 80055c8:	f000 f8aa 	bl	8005720 <__swsetup_r>
 80055cc:	2800      	cmp	r0, #0
 80055ce:	d023      	beq.n	8005618 <_puts_r+0x9c>
 80055d0:	2501      	movs	r5, #1
 80055d2:	426d      	negs	r5, r5
 80055d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055d6:	07db      	lsls	r3, r3, #31
 80055d8:	d405      	bmi.n	80055e6 <_puts_r+0x6a>
 80055da:	89a3      	ldrh	r3, [r4, #12]
 80055dc:	059b      	lsls	r3, r3, #22
 80055de:	d402      	bmi.n	80055e6 <_puts_r+0x6a>
 80055e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055e2:	f000 fae5 	bl	8005bb0 <__retarget_lock_release_recursive>
 80055e6:	0028      	movs	r0, r5
 80055e8:	bd70      	pop	{r4, r5, r6, pc}
 80055ea:	4b1b      	ldr	r3, [pc, #108]	; (8005658 <_puts_r+0xdc>)
 80055ec:	429c      	cmp	r4, r3
 80055ee:	d101      	bne.n	80055f4 <_puts_r+0x78>
 80055f0:	68ac      	ldr	r4, [r5, #8]
 80055f2:	e7d8      	b.n	80055a6 <_puts_r+0x2a>
 80055f4:	4b19      	ldr	r3, [pc, #100]	; (800565c <_puts_r+0xe0>)
 80055f6:	429c      	cmp	r4, r3
 80055f8:	d1d5      	bne.n	80055a6 <_puts_r+0x2a>
 80055fa:	68ec      	ldr	r4, [r5, #12]
 80055fc:	e7d3      	b.n	80055a6 <_puts_r+0x2a>
 80055fe:	3601      	adds	r6, #1
 8005600:	60a3      	str	r3, [r4, #8]
 8005602:	2b00      	cmp	r3, #0
 8005604:	da04      	bge.n	8005610 <_puts_r+0x94>
 8005606:	69a2      	ldr	r2, [r4, #24]
 8005608:	429a      	cmp	r2, r3
 800560a:	dc16      	bgt.n	800563a <_puts_r+0xbe>
 800560c:	290a      	cmp	r1, #10
 800560e:	d014      	beq.n	800563a <_puts_r+0xbe>
 8005610:	6823      	ldr	r3, [r4, #0]
 8005612:	1c5a      	adds	r2, r3, #1
 8005614:	6022      	str	r2, [r4, #0]
 8005616:	7019      	strb	r1, [r3, #0]
 8005618:	68a3      	ldr	r3, [r4, #8]
 800561a:	7831      	ldrb	r1, [r6, #0]
 800561c:	3b01      	subs	r3, #1
 800561e:	2900      	cmp	r1, #0
 8005620:	d1ed      	bne.n	80055fe <_puts_r+0x82>
 8005622:	60a3      	str	r3, [r4, #8]
 8005624:	2b00      	cmp	r3, #0
 8005626:	da0f      	bge.n	8005648 <_puts_r+0xcc>
 8005628:	0028      	movs	r0, r5
 800562a:	0022      	movs	r2, r4
 800562c:	310a      	adds	r1, #10
 800562e:	f000 f821 	bl	8005674 <__swbuf_r>
 8005632:	250a      	movs	r5, #10
 8005634:	1c43      	adds	r3, r0, #1
 8005636:	d1cd      	bne.n	80055d4 <_puts_r+0x58>
 8005638:	e7ca      	b.n	80055d0 <_puts_r+0x54>
 800563a:	0022      	movs	r2, r4
 800563c:	0028      	movs	r0, r5
 800563e:	f000 f819 	bl	8005674 <__swbuf_r>
 8005642:	1c43      	adds	r3, r0, #1
 8005644:	d1e8      	bne.n	8005618 <_puts_r+0x9c>
 8005646:	e7c3      	b.n	80055d0 <_puts_r+0x54>
 8005648:	250a      	movs	r5, #10
 800564a:	6823      	ldr	r3, [r4, #0]
 800564c:	1c5a      	adds	r2, r3, #1
 800564e:	6022      	str	r2, [r4, #0]
 8005650:	701d      	strb	r5, [r3, #0]
 8005652:	e7bf      	b.n	80055d4 <_puts_r+0x58>
 8005654:	08006794 	.word	0x08006794
 8005658:	080067b4 	.word	0x080067b4
 800565c:	08006774 	.word	0x08006774

08005660 <puts>:
 8005660:	b510      	push	{r4, lr}
 8005662:	4b03      	ldr	r3, [pc, #12]	; (8005670 <puts+0x10>)
 8005664:	0001      	movs	r1, r0
 8005666:	6818      	ldr	r0, [r3, #0]
 8005668:	f7ff ff88 	bl	800557c <_puts_r>
 800566c:	bd10      	pop	{r4, pc}
 800566e:	46c0      	nop			; (mov r8, r8)
 8005670:	200000a0 	.word	0x200000a0

08005674 <__swbuf_r>:
 8005674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005676:	0005      	movs	r5, r0
 8005678:	000e      	movs	r6, r1
 800567a:	0014      	movs	r4, r2
 800567c:	2800      	cmp	r0, #0
 800567e:	d004      	beq.n	800568a <__swbuf_r+0x16>
 8005680:	6983      	ldr	r3, [r0, #24]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d101      	bne.n	800568a <__swbuf_r+0x16>
 8005686:	f000 f9f1 	bl	8005a6c <__sinit>
 800568a:	4b22      	ldr	r3, [pc, #136]	; (8005714 <__swbuf_r+0xa0>)
 800568c:	429c      	cmp	r4, r3
 800568e:	d12e      	bne.n	80056ee <__swbuf_r+0x7a>
 8005690:	686c      	ldr	r4, [r5, #4]
 8005692:	69a3      	ldr	r3, [r4, #24]
 8005694:	60a3      	str	r3, [r4, #8]
 8005696:	89a3      	ldrh	r3, [r4, #12]
 8005698:	071b      	lsls	r3, r3, #28
 800569a:	d532      	bpl.n	8005702 <__swbuf_r+0x8e>
 800569c:	6923      	ldr	r3, [r4, #16]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d02f      	beq.n	8005702 <__swbuf_r+0x8e>
 80056a2:	6823      	ldr	r3, [r4, #0]
 80056a4:	6922      	ldr	r2, [r4, #16]
 80056a6:	b2f7      	uxtb	r7, r6
 80056a8:	1a98      	subs	r0, r3, r2
 80056aa:	6963      	ldr	r3, [r4, #20]
 80056ac:	b2f6      	uxtb	r6, r6
 80056ae:	4283      	cmp	r3, r0
 80056b0:	dc05      	bgt.n	80056be <__swbuf_r+0x4a>
 80056b2:	0021      	movs	r1, r4
 80056b4:	0028      	movs	r0, r5
 80056b6:	f000 f937 	bl	8005928 <_fflush_r>
 80056ba:	2800      	cmp	r0, #0
 80056bc:	d127      	bne.n	800570e <__swbuf_r+0x9a>
 80056be:	68a3      	ldr	r3, [r4, #8]
 80056c0:	3001      	adds	r0, #1
 80056c2:	3b01      	subs	r3, #1
 80056c4:	60a3      	str	r3, [r4, #8]
 80056c6:	6823      	ldr	r3, [r4, #0]
 80056c8:	1c5a      	adds	r2, r3, #1
 80056ca:	6022      	str	r2, [r4, #0]
 80056cc:	701f      	strb	r7, [r3, #0]
 80056ce:	6963      	ldr	r3, [r4, #20]
 80056d0:	4283      	cmp	r3, r0
 80056d2:	d004      	beq.n	80056de <__swbuf_r+0x6a>
 80056d4:	89a3      	ldrh	r3, [r4, #12]
 80056d6:	07db      	lsls	r3, r3, #31
 80056d8:	d507      	bpl.n	80056ea <__swbuf_r+0x76>
 80056da:	2e0a      	cmp	r6, #10
 80056dc:	d105      	bne.n	80056ea <__swbuf_r+0x76>
 80056de:	0021      	movs	r1, r4
 80056e0:	0028      	movs	r0, r5
 80056e2:	f000 f921 	bl	8005928 <_fflush_r>
 80056e6:	2800      	cmp	r0, #0
 80056e8:	d111      	bne.n	800570e <__swbuf_r+0x9a>
 80056ea:	0030      	movs	r0, r6
 80056ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056ee:	4b0a      	ldr	r3, [pc, #40]	; (8005718 <__swbuf_r+0xa4>)
 80056f0:	429c      	cmp	r4, r3
 80056f2:	d101      	bne.n	80056f8 <__swbuf_r+0x84>
 80056f4:	68ac      	ldr	r4, [r5, #8]
 80056f6:	e7cc      	b.n	8005692 <__swbuf_r+0x1e>
 80056f8:	4b08      	ldr	r3, [pc, #32]	; (800571c <__swbuf_r+0xa8>)
 80056fa:	429c      	cmp	r4, r3
 80056fc:	d1c9      	bne.n	8005692 <__swbuf_r+0x1e>
 80056fe:	68ec      	ldr	r4, [r5, #12]
 8005700:	e7c7      	b.n	8005692 <__swbuf_r+0x1e>
 8005702:	0021      	movs	r1, r4
 8005704:	0028      	movs	r0, r5
 8005706:	f000 f80b 	bl	8005720 <__swsetup_r>
 800570a:	2800      	cmp	r0, #0
 800570c:	d0c9      	beq.n	80056a2 <__swbuf_r+0x2e>
 800570e:	2601      	movs	r6, #1
 8005710:	4276      	negs	r6, r6
 8005712:	e7ea      	b.n	80056ea <__swbuf_r+0x76>
 8005714:	08006794 	.word	0x08006794
 8005718:	080067b4 	.word	0x080067b4
 800571c:	08006774 	.word	0x08006774

08005720 <__swsetup_r>:
 8005720:	4b37      	ldr	r3, [pc, #220]	; (8005800 <__swsetup_r+0xe0>)
 8005722:	b570      	push	{r4, r5, r6, lr}
 8005724:	681d      	ldr	r5, [r3, #0]
 8005726:	0006      	movs	r6, r0
 8005728:	000c      	movs	r4, r1
 800572a:	2d00      	cmp	r5, #0
 800572c:	d005      	beq.n	800573a <__swsetup_r+0x1a>
 800572e:	69ab      	ldr	r3, [r5, #24]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d102      	bne.n	800573a <__swsetup_r+0x1a>
 8005734:	0028      	movs	r0, r5
 8005736:	f000 f999 	bl	8005a6c <__sinit>
 800573a:	4b32      	ldr	r3, [pc, #200]	; (8005804 <__swsetup_r+0xe4>)
 800573c:	429c      	cmp	r4, r3
 800573e:	d10f      	bne.n	8005760 <__swsetup_r+0x40>
 8005740:	686c      	ldr	r4, [r5, #4]
 8005742:	230c      	movs	r3, #12
 8005744:	5ee2      	ldrsh	r2, [r4, r3]
 8005746:	b293      	uxth	r3, r2
 8005748:	0711      	lsls	r1, r2, #28
 800574a:	d42d      	bmi.n	80057a8 <__swsetup_r+0x88>
 800574c:	06d9      	lsls	r1, r3, #27
 800574e:	d411      	bmi.n	8005774 <__swsetup_r+0x54>
 8005750:	2309      	movs	r3, #9
 8005752:	2001      	movs	r0, #1
 8005754:	6033      	str	r3, [r6, #0]
 8005756:	3337      	adds	r3, #55	; 0x37
 8005758:	4313      	orrs	r3, r2
 800575a:	81a3      	strh	r3, [r4, #12]
 800575c:	4240      	negs	r0, r0
 800575e:	bd70      	pop	{r4, r5, r6, pc}
 8005760:	4b29      	ldr	r3, [pc, #164]	; (8005808 <__swsetup_r+0xe8>)
 8005762:	429c      	cmp	r4, r3
 8005764:	d101      	bne.n	800576a <__swsetup_r+0x4a>
 8005766:	68ac      	ldr	r4, [r5, #8]
 8005768:	e7eb      	b.n	8005742 <__swsetup_r+0x22>
 800576a:	4b28      	ldr	r3, [pc, #160]	; (800580c <__swsetup_r+0xec>)
 800576c:	429c      	cmp	r4, r3
 800576e:	d1e8      	bne.n	8005742 <__swsetup_r+0x22>
 8005770:	68ec      	ldr	r4, [r5, #12]
 8005772:	e7e6      	b.n	8005742 <__swsetup_r+0x22>
 8005774:	075b      	lsls	r3, r3, #29
 8005776:	d513      	bpl.n	80057a0 <__swsetup_r+0x80>
 8005778:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800577a:	2900      	cmp	r1, #0
 800577c:	d008      	beq.n	8005790 <__swsetup_r+0x70>
 800577e:	0023      	movs	r3, r4
 8005780:	3344      	adds	r3, #68	; 0x44
 8005782:	4299      	cmp	r1, r3
 8005784:	d002      	beq.n	800578c <__swsetup_r+0x6c>
 8005786:	0030      	movs	r0, r6
 8005788:	f000 fa80 	bl	8005c8c <_free_r>
 800578c:	2300      	movs	r3, #0
 800578e:	6363      	str	r3, [r4, #52]	; 0x34
 8005790:	2224      	movs	r2, #36	; 0x24
 8005792:	89a3      	ldrh	r3, [r4, #12]
 8005794:	4393      	bics	r3, r2
 8005796:	81a3      	strh	r3, [r4, #12]
 8005798:	2300      	movs	r3, #0
 800579a:	6063      	str	r3, [r4, #4]
 800579c:	6923      	ldr	r3, [r4, #16]
 800579e:	6023      	str	r3, [r4, #0]
 80057a0:	2308      	movs	r3, #8
 80057a2:	89a2      	ldrh	r2, [r4, #12]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	81a3      	strh	r3, [r4, #12]
 80057a8:	6923      	ldr	r3, [r4, #16]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d10b      	bne.n	80057c6 <__swsetup_r+0xa6>
 80057ae:	21a0      	movs	r1, #160	; 0xa0
 80057b0:	2280      	movs	r2, #128	; 0x80
 80057b2:	89a3      	ldrh	r3, [r4, #12]
 80057b4:	0089      	lsls	r1, r1, #2
 80057b6:	0092      	lsls	r2, r2, #2
 80057b8:	400b      	ands	r3, r1
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d003      	beq.n	80057c6 <__swsetup_r+0xa6>
 80057be:	0021      	movs	r1, r4
 80057c0:	0030      	movs	r0, r6
 80057c2:	f000 fa1f 	bl	8005c04 <__smakebuf_r>
 80057c6:	220c      	movs	r2, #12
 80057c8:	5ea3      	ldrsh	r3, [r4, r2]
 80057ca:	2001      	movs	r0, #1
 80057cc:	001a      	movs	r2, r3
 80057ce:	b299      	uxth	r1, r3
 80057d0:	4002      	ands	r2, r0
 80057d2:	4203      	tst	r3, r0
 80057d4:	d00f      	beq.n	80057f6 <__swsetup_r+0xd6>
 80057d6:	2200      	movs	r2, #0
 80057d8:	60a2      	str	r2, [r4, #8]
 80057da:	6962      	ldr	r2, [r4, #20]
 80057dc:	4252      	negs	r2, r2
 80057de:	61a2      	str	r2, [r4, #24]
 80057e0:	2000      	movs	r0, #0
 80057e2:	6922      	ldr	r2, [r4, #16]
 80057e4:	4282      	cmp	r2, r0
 80057e6:	d1ba      	bne.n	800575e <__swsetup_r+0x3e>
 80057e8:	060a      	lsls	r2, r1, #24
 80057ea:	d5b8      	bpl.n	800575e <__swsetup_r+0x3e>
 80057ec:	2240      	movs	r2, #64	; 0x40
 80057ee:	4313      	orrs	r3, r2
 80057f0:	81a3      	strh	r3, [r4, #12]
 80057f2:	3801      	subs	r0, #1
 80057f4:	e7b3      	b.n	800575e <__swsetup_r+0x3e>
 80057f6:	0788      	lsls	r0, r1, #30
 80057f8:	d400      	bmi.n	80057fc <__swsetup_r+0xdc>
 80057fa:	6962      	ldr	r2, [r4, #20]
 80057fc:	60a2      	str	r2, [r4, #8]
 80057fe:	e7ef      	b.n	80057e0 <__swsetup_r+0xc0>
 8005800:	200000a0 	.word	0x200000a0
 8005804:	08006794 	.word	0x08006794
 8005808:	080067b4 	.word	0x080067b4
 800580c:	08006774 	.word	0x08006774

08005810 <__sflush_r>:
 8005810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005812:	898b      	ldrh	r3, [r1, #12]
 8005814:	0005      	movs	r5, r0
 8005816:	000c      	movs	r4, r1
 8005818:	071a      	lsls	r2, r3, #28
 800581a:	d45f      	bmi.n	80058dc <__sflush_r+0xcc>
 800581c:	684a      	ldr	r2, [r1, #4]
 800581e:	2a00      	cmp	r2, #0
 8005820:	dc04      	bgt.n	800582c <__sflush_r+0x1c>
 8005822:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8005824:	2a00      	cmp	r2, #0
 8005826:	dc01      	bgt.n	800582c <__sflush_r+0x1c>
 8005828:	2000      	movs	r0, #0
 800582a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800582c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800582e:	2f00      	cmp	r7, #0
 8005830:	d0fa      	beq.n	8005828 <__sflush_r+0x18>
 8005832:	2200      	movs	r2, #0
 8005834:	2180      	movs	r1, #128	; 0x80
 8005836:	682e      	ldr	r6, [r5, #0]
 8005838:	602a      	str	r2, [r5, #0]
 800583a:	001a      	movs	r2, r3
 800583c:	0149      	lsls	r1, r1, #5
 800583e:	400a      	ands	r2, r1
 8005840:	420b      	tst	r3, r1
 8005842:	d034      	beq.n	80058ae <__sflush_r+0x9e>
 8005844:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005846:	89a3      	ldrh	r3, [r4, #12]
 8005848:	075b      	lsls	r3, r3, #29
 800584a:	d506      	bpl.n	800585a <__sflush_r+0x4a>
 800584c:	6863      	ldr	r3, [r4, #4]
 800584e:	1ac0      	subs	r0, r0, r3
 8005850:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005852:	2b00      	cmp	r3, #0
 8005854:	d001      	beq.n	800585a <__sflush_r+0x4a>
 8005856:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005858:	1ac0      	subs	r0, r0, r3
 800585a:	0002      	movs	r2, r0
 800585c:	6a21      	ldr	r1, [r4, #32]
 800585e:	2300      	movs	r3, #0
 8005860:	0028      	movs	r0, r5
 8005862:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005864:	47b8      	blx	r7
 8005866:	89a1      	ldrh	r1, [r4, #12]
 8005868:	1c43      	adds	r3, r0, #1
 800586a:	d106      	bne.n	800587a <__sflush_r+0x6a>
 800586c:	682b      	ldr	r3, [r5, #0]
 800586e:	2b1d      	cmp	r3, #29
 8005870:	d831      	bhi.n	80058d6 <__sflush_r+0xc6>
 8005872:	4a2c      	ldr	r2, [pc, #176]	; (8005924 <__sflush_r+0x114>)
 8005874:	40da      	lsrs	r2, r3
 8005876:	07d3      	lsls	r3, r2, #31
 8005878:	d52d      	bpl.n	80058d6 <__sflush_r+0xc6>
 800587a:	2300      	movs	r3, #0
 800587c:	6063      	str	r3, [r4, #4]
 800587e:	6923      	ldr	r3, [r4, #16]
 8005880:	6023      	str	r3, [r4, #0]
 8005882:	04cb      	lsls	r3, r1, #19
 8005884:	d505      	bpl.n	8005892 <__sflush_r+0x82>
 8005886:	1c43      	adds	r3, r0, #1
 8005888:	d102      	bne.n	8005890 <__sflush_r+0x80>
 800588a:	682b      	ldr	r3, [r5, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d100      	bne.n	8005892 <__sflush_r+0x82>
 8005890:	6560      	str	r0, [r4, #84]	; 0x54
 8005892:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005894:	602e      	str	r6, [r5, #0]
 8005896:	2900      	cmp	r1, #0
 8005898:	d0c6      	beq.n	8005828 <__sflush_r+0x18>
 800589a:	0023      	movs	r3, r4
 800589c:	3344      	adds	r3, #68	; 0x44
 800589e:	4299      	cmp	r1, r3
 80058a0:	d002      	beq.n	80058a8 <__sflush_r+0x98>
 80058a2:	0028      	movs	r0, r5
 80058a4:	f000 f9f2 	bl	8005c8c <_free_r>
 80058a8:	2000      	movs	r0, #0
 80058aa:	6360      	str	r0, [r4, #52]	; 0x34
 80058ac:	e7bd      	b.n	800582a <__sflush_r+0x1a>
 80058ae:	2301      	movs	r3, #1
 80058b0:	0028      	movs	r0, r5
 80058b2:	6a21      	ldr	r1, [r4, #32]
 80058b4:	47b8      	blx	r7
 80058b6:	1c43      	adds	r3, r0, #1
 80058b8:	d1c5      	bne.n	8005846 <__sflush_r+0x36>
 80058ba:	682b      	ldr	r3, [r5, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d0c2      	beq.n	8005846 <__sflush_r+0x36>
 80058c0:	2b1d      	cmp	r3, #29
 80058c2:	d001      	beq.n	80058c8 <__sflush_r+0xb8>
 80058c4:	2b16      	cmp	r3, #22
 80058c6:	d101      	bne.n	80058cc <__sflush_r+0xbc>
 80058c8:	602e      	str	r6, [r5, #0]
 80058ca:	e7ad      	b.n	8005828 <__sflush_r+0x18>
 80058cc:	2340      	movs	r3, #64	; 0x40
 80058ce:	89a2      	ldrh	r2, [r4, #12]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	81a3      	strh	r3, [r4, #12]
 80058d4:	e7a9      	b.n	800582a <__sflush_r+0x1a>
 80058d6:	2340      	movs	r3, #64	; 0x40
 80058d8:	430b      	orrs	r3, r1
 80058da:	e7fa      	b.n	80058d2 <__sflush_r+0xc2>
 80058dc:	690f      	ldr	r7, [r1, #16]
 80058de:	2f00      	cmp	r7, #0
 80058e0:	d0a2      	beq.n	8005828 <__sflush_r+0x18>
 80058e2:	680a      	ldr	r2, [r1, #0]
 80058e4:	600f      	str	r7, [r1, #0]
 80058e6:	1bd2      	subs	r2, r2, r7
 80058e8:	9201      	str	r2, [sp, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	079b      	lsls	r3, r3, #30
 80058ee:	d100      	bne.n	80058f2 <__sflush_r+0xe2>
 80058f0:	694a      	ldr	r2, [r1, #20]
 80058f2:	60a2      	str	r2, [r4, #8]
 80058f4:	9b01      	ldr	r3, [sp, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	dc00      	bgt.n	80058fc <__sflush_r+0xec>
 80058fa:	e795      	b.n	8005828 <__sflush_r+0x18>
 80058fc:	003a      	movs	r2, r7
 80058fe:	0028      	movs	r0, r5
 8005900:	9b01      	ldr	r3, [sp, #4]
 8005902:	6a21      	ldr	r1, [r4, #32]
 8005904:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005906:	47b0      	blx	r6
 8005908:	2800      	cmp	r0, #0
 800590a:	dc06      	bgt.n	800591a <__sflush_r+0x10a>
 800590c:	2340      	movs	r3, #64	; 0x40
 800590e:	2001      	movs	r0, #1
 8005910:	89a2      	ldrh	r2, [r4, #12]
 8005912:	4240      	negs	r0, r0
 8005914:	4313      	orrs	r3, r2
 8005916:	81a3      	strh	r3, [r4, #12]
 8005918:	e787      	b.n	800582a <__sflush_r+0x1a>
 800591a:	9b01      	ldr	r3, [sp, #4]
 800591c:	183f      	adds	r7, r7, r0
 800591e:	1a1b      	subs	r3, r3, r0
 8005920:	9301      	str	r3, [sp, #4]
 8005922:	e7e7      	b.n	80058f4 <__sflush_r+0xe4>
 8005924:	20400001 	.word	0x20400001

08005928 <_fflush_r>:
 8005928:	690b      	ldr	r3, [r1, #16]
 800592a:	b570      	push	{r4, r5, r6, lr}
 800592c:	0005      	movs	r5, r0
 800592e:	000c      	movs	r4, r1
 8005930:	2b00      	cmp	r3, #0
 8005932:	d102      	bne.n	800593a <_fflush_r+0x12>
 8005934:	2500      	movs	r5, #0
 8005936:	0028      	movs	r0, r5
 8005938:	bd70      	pop	{r4, r5, r6, pc}
 800593a:	2800      	cmp	r0, #0
 800593c:	d004      	beq.n	8005948 <_fflush_r+0x20>
 800593e:	6983      	ldr	r3, [r0, #24]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d101      	bne.n	8005948 <_fflush_r+0x20>
 8005944:	f000 f892 	bl	8005a6c <__sinit>
 8005948:	4b14      	ldr	r3, [pc, #80]	; (800599c <_fflush_r+0x74>)
 800594a:	429c      	cmp	r4, r3
 800594c:	d11b      	bne.n	8005986 <_fflush_r+0x5e>
 800594e:	686c      	ldr	r4, [r5, #4]
 8005950:	220c      	movs	r2, #12
 8005952:	5ea3      	ldrsh	r3, [r4, r2]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d0ed      	beq.n	8005934 <_fflush_r+0xc>
 8005958:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800595a:	07d2      	lsls	r2, r2, #31
 800595c:	d404      	bmi.n	8005968 <_fflush_r+0x40>
 800595e:	059b      	lsls	r3, r3, #22
 8005960:	d402      	bmi.n	8005968 <_fflush_r+0x40>
 8005962:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005964:	f000 f923 	bl	8005bae <__retarget_lock_acquire_recursive>
 8005968:	0028      	movs	r0, r5
 800596a:	0021      	movs	r1, r4
 800596c:	f7ff ff50 	bl	8005810 <__sflush_r>
 8005970:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005972:	0005      	movs	r5, r0
 8005974:	07db      	lsls	r3, r3, #31
 8005976:	d4de      	bmi.n	8005936 <_fflush_r+0xe>
 8005978:	89a3      	ldrh	r3, [r4, #12]
 800597a:	059b      	lsls	r3, r3, #22
 800597c:	d4db      	bmi.n	8005936 <_fflush_r+0xe>
 800597e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005980:	f000 f916 	bl	8005bb0 <__retarget_lock_release_recursive>
 8005984:	e7d7      	b.n	8005936 <_fflush_r+0xe>
 8005986:	4b06      	ldr	r3, [pc, #24]	; (80059a0 <_fflush_r+0x78>)
 8005988:	429c      	cmp	r4, r3
 800598a:	d101      	bne.n	8005990 <_fflush_r+0x68>
 800598c:	68ac      	ldr	r4, [r5, #8]
 800598e:	e7df      	b.n	8005950 <_fflush_r+0x28>
 8005990:	4b04      	ldr	r3, [pc, #16]	; (80059a4 <_fflush_r+0x7c>)
 8005992:	429c      	cmp	r4, r3
 8005994:	d1dc      	bne.n	8005950 <_fflush_r+0x28>
 8005996:	68ec      	ldr	r4, [r5, #12]
 8005998:	e7da      	b.n	8005950 <_fflush_r+0x28>
 800599a:	46c0      	nop			; (mov r8, r8)
 800599c:	08006794 	.word	0x08006794
 80059a0:	080067b4 	.word	0x080067b4
 80059a4:	08006774 	.word	0x08006774

080059a8 <std>:
 80059a8:	2300      	movs	r3, #0
 80059aa:	b510      	push	{r4, lr}
 80059ac:	0004      	movs	r4, r0
 80059ae:	6003      	str	r3, [r0, #0]
 80059b0:	6043      	str	r3, [r0, #4]
 80059b2:	6083      	str	r3, [r0, #8]
 80059b4:	8181      	strh	r1, [r0, #12]
 80059b6:	6643      	str	r3, [r0, #100]	; 0x64
 80059b8:	0019      	movs	r1, r3
 80059ba:	81c2      	strh	r2, [r0, #14]
 80059bc:	6103      	str	r3, [r0, #16]
 80059be:	6143      	str	r3, [r0, #20]
 80059c0:	6183      	str	r3, [r0, #24]
 80059c2:	2208      	movs	r2, #8
 80059c4:	305c      	adds	r0, #92	; 0x5c
 80059c6:	f7ff fdb6 	bl	8005536 <memset>
 80059ca:	4b05      	ldr	r3, [pc, #20]	; (80059e0 <std+0x38>)
 80059cc:	6224      	str	r4, [r4, #32]
 80059ce:	6263      	str	r3, [r4, #36]	; 0x24
 80059d0:	4b04      	ldr	r3, [pc, #16]	; (80059e4 <std+0x3c>)
 80059d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80059d4:	4b04      	ldr	r3, [pc, #16]	; (80059e8 <std+0x40>)
 80059d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80059d8:	4b04      	ldr	r3, [pc, #16]	; (80059ec <std+0x44>)
 80059da:	6323      	str	r3, [r4, #48]	; 0x30
 80059dc:	bd10      	pop	{r4, pc}
 80059de:	46c0      	nop			; (mov r8, r8)
 80059e0:	0800643d 	.word	0x0800643d
 80059e4:	08006465 	.word	0x08006465
 80059e8:	0800649d 	.word	0x0800649d
 80059ec:	080064c9 	.word	0x080064c9

080059f0 <_cleanup_r>:
 80059f0:	b510      	push	{r4, lr}
 80059f2:	4902      	ldr	r1, [pc, #8]	; (80059fc <_cleanup_r+0xc>)
 80059f4:	f000 f8ba 	bl	8005b6c <_fwalk_reent>
 80059f8:	bd10      	pop	{r4, pc}
 80059fa:	46c0      	nop			; (mov r8, r8)
 80059fc:	08005929 	.word	0x08005929

08005a00 <__sfmoreglue>:
 8005a00:	b570      	push	{r4, r5, r6, lr}
 8005a02:	2568      	movs	r5, #104	; 0x68
 8005a04:	1e4a      	subs	r2, r1, #1
 8005a06:	4355      	muls	r5, r2
 8005a08:	000e      	movs	r6, r1
 8005a0a:	0029      	movs	r1, r5
 8005a0c:	3174      	adds	r1, #116	; 0x74
 8005a0e:	f000 f9a9 	bl	8005d64 <_malloc_r>
 8005a12:	1e04      	subs	r4, r0, #0
 8005a14:	d008      	beq.n	8005a28 <__sfmoreglue+0x28>
 8005a16:	2100      	movs	r1, #0
 8005a18:	002a      	movs	r2, r5
 8005a1a:	6001      	str	r1, [r0, #0]
 8005a1c:	6046      	str	r6, [r0, #4]
 8005a1e:	300c      	adds	r0, #12
 8005a20:	60a0      	str	r0, [r4, #8]
 8005a22:	3268      	adds	r2, #104	; 0x68
 8005a24:	f7ff fd87 	bl	8005536 <memset>
 8005a28:	0020      	movs	r0, r4
 8005a2a:	bd70      	pop	{r4, r5, r6, pc}

08005a2c <__sfp_lock_acquire>:
 8005a2c:	b510      	push	{r4, lr}
 8005a2e:	4802      	ldr	r0, [pc, #8]	; (8005a38 <__sfp_lock_acquire+0xc>)
 8005a30:	f000 f8bd 	bl	8005bae <__retarget_lock_acquire_recursive>
 8005a34:	bd10      	pop	{r4, pc}
 8005a36:	46c0      	nop			; (mov r8, r8)
 8005a38:	20001fb5 	.word	0x20001fb5

08005a3c <__sfp_lock_release>:
 8005a3c:	b510      	push	{r4, lr}
 8005a3e:	4802      	ldr	r0, [pc, #8]	; (8005a48 <__sfp_lock_release+0xc>)
 8005a40:	f000 f8b6 	bl	8005bb0 <__retarget_lock_release_recursive>
 8005a44:	bd10      	pop	{r4, pc}
 8005a46:	46c0      	nop			; (mov r8, r8)
 8005a48:	20001fb5 	.word	0x20001fb5

08005a4c <__sinit_lock_acquire>:
 8005a4c:	b510      	push	{r4, lr}
 8005a4e:	4802      	ldr	r0, [pc, #8]	; (8005a58 <__sinit_lock_acquire+0xc>)
 8005a50:	f000 f8ad 	bl	8005bae <__retarget_lock_acquire_recursive>
 8005a54:	bd10      	pop	{r4, pc}
 8005a56:	46c0      	nop			; (mov r8, r8)
 8005a58:	20001fb6 	.word	0x20001fb6

08005a5c <__sinit_lock_release>:
 8005a5c:	b510      	push	{r4, lr}
 8005a5e:	4802      	ldr	r0, [pc, #8]	; (8005a68 <__sinit_lock_release+0xc>)
 8005a60:	f000 f8a6 	bl	8005bb0 <__retarget_lock_release_recursive>
 8005a64:	bd10      	pop	{r4, pc}
 8005a66:	46c0      	nop			; (mov r8, r8)
 8005a68:	20001fb6 	.word	0x20001fb6

08005a6c <__sinit>:
 8005a6c:	b513      	push	{r0, r1, r4, lr}
 8005a6e:	0004      	movs	r4, r0
 8005a70:	f7ff ffec 	bl	8005a4c <__sinit_lock_acquire>
 8005a74:	69a3      	ldr	r3, [r4, #24]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d002      	beq.n	8005a80 <__sinit+0x14>
 8005a7a:	f7ff ffef 	bl	8005a5c <__sinit_lock_release>
 8005a7e:	bd13      	pop	{r0, r1, r4, pc}
 8005a80:	64a3      	str	r3, [r4, #72]	; 0x48
 8005a82:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005a84:	6523      	str	r3, [r4, #80]	; 0x50
 8005a86:	4b13      	ldr	r3, [pc, #76]	; (8005ad4 <__sinit+0x68>)
 8005a88:	4a13      	ldr	r2, [pc, #76]	; (8005ad8 <__sinit+0x6c>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005a8e:	9301      	str	r3, [sp, #4]
 8005a90:	42a3      	cmp	r3, r4
 8005a92:	d101      	bne.n	8005a98 <__sinit+0x2c>
 8005a94:	2301      	movs	r3, #1
 8005a96:	61a3      	str	r3, [r4, #24]
 8005a98:	0020      	movs	r0, r4
 8005a9a:	f000 f81f 	bl	8005adc <__sfp>
 8005a9e:	6060      	str	r0, [r4, #4]
 8005aa0:	0020      	movs	r0, r4
 8005aa2:	f000 f81b 	bl	8005adc <__sfp>
 8005aa6:	60a0      	str	r0, [r4, #8]
 8005aa8:	0020      	movs	r0, r4
 8005aaa:	f000 f817 	bl	8005adc <__sfp>
 8005aae:	2200      	movs	r2, #0
 8005ab0:	2104      	movs	r1, #4
 8005ab2:	60e0      	str	r0, [r4, #12]
 8005ab4:	6860      	ldr	r0, [r4, #4]
 8005ab6:	f7ff ff77 	bl	80059a8 <std>
 8005aba:	2201      	movs	r2, #1
 8005abc:	2109      	movs	r1, #9
 8005abe:	68a0      	ldr	r0, [r4, #8]
 8005ac0:	f7ff ff72 	bl	80059a8 <std>
 8005ac4:	2202      	movs	r2, #2
 8005ac6:	2112      	movs	r1, #18
 8005ac8:	68e0      	ldr	r0, [r4, #12]
 8005aca:	f7ff ff6d 	bl	80059a8 <std>
 8005ace:	2301      	movs	r3, #1
 8005ad0:	61a3      	str	r3, [r4, #24]
 8005ad2:	e7d2      	b.n	8005a7a <__sinit+0xe>
 8005ad4:	08006770 	.word	0x08006770
 8005ad8:	080059f1 	.word	0x080059f1

08005adc <__sfp>:
 8005adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ade:	0007      	movs	r7, r0
 8005ae0:	f7ff ffa4 	bl	8005a2c <__sfp_lock_acquire>
 8005ae4:	4b1f      	ldr	r3, [pc, #124]	; (8005b64 <__sfp+0x88>)
 8005ae6:	681e      	ldr	r6, [r3, #0]
 8005ae8:	69b3      	ldr	r3, [r6, #24]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d102      	bne.n	8005af4 <__sfp+0x18>
 8005aee:	0030      	movs	r0, r6
 8005af0:	f7ff ffbc 	bl	8005a6c <__sinit>
 8005af4:	3648      	adds	r6, #72	; 0x48
 8005af6:	68b4      	ldr	r4, [r6, #8]
 8005af8:	6873      	ldr	r3, [r6, #4]
 8005afa:	3b01      	subs	r3, #1
 8005afc:	d504      	bpl.n	8005b08 <__sfp+0x2c>
 8005afe:	6833      	ldr	r3, [r6, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d022      	beq.n	8005b4a <__sfp+0x6e>
 8005b04:	6836      	ldr	r6, [r6, #0]
 8005b06:	e7f6      	b.n	8005af6 <__sfp+0x1a>
 8005b08:	220c      	movs	r2, #12
 8005b0a:	5ea5      	ldrsh	r5, [r4, r2]
 8005b0c:	2d00      	cmp	r5, #0
 8005b0e:	d11a      	bne.n	8005b46 <__sfp+0x6a>
 8005b10:	0020      	movs	r0, r4
 8005b12:	4b15      	ldr	r3, [pc, #84]	; (8005b68 <__sfp+0x8c>)
 8005b14:	3058      	adds	r0, #88	; 0x58
 8005b16:	60e3      	str	r3, [r4, #12]
 8005b18:	6665      	str	r5, [r4, #100]	; 0x64
 8005b1a:	f000 f847 	bl	8005bac <__retarget_lock_init_recursive>
 8005b1e:	f7ff ff8d 	bl	8005a3c <__sfp_lock_release>
 8005b22:	0020      	movs	r0, r4
 8005b24:	2208      	movs	r2, #8
 8005b26:	0029      	movs	r1, r5
 8005b28:	6025      	str	r5, [r4, #0]
 8005b2a:	60a5      	str	r5, [r4, #8]
 8005b2c:	6065      	str	r5, [r4, #4]
 8005b2e:	6125      	str	r5, [r4, #16]
 8005b30:	6165      	str	r5, [r4, #20]
 8005b32:	61a5      	str	r5, [r4, #24]
 8005b34:	305c      	adds	r0, #92	; 0x5c
 8005b36:	f7ff fcfe 	bl	8005536 <memset>
 8005b3a:	6365      	str	r5, [r4, #52]	; 0x34
 8005b3c:	63a5      	str	r5, [r4, #56]	; 0x38
 8005b3e:	64a5      	str	r5, [r4, #72]	; 0x48
 8005b40:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005b42:	0020      	movs	r0, r4
 8005b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b46:	3468      	adds	r4, #104	; 0x68
 8005b48:	e7d7      	b.n	8005afa <__sfp+0x1e>
 8005b4a:	2104      	movs	r1, #4
 8005b4c:	0038      	movs	r0, r7
 8005b4e:	f7ff ff57 	bl	8005a00 <__sfmoreglue>
 8005b52:	1e04      	subs	r4, r0, #0
 8005b54:	6030      	str	r0, [r6, #0]
 8005b56:	d1d5      	bne.n	8005b04 <__sfp+0x28>
 8005b58:	f7ff ff70 	bl	8005a3c <__sfp_lock_release>
 8005b5c:	230c      	movs	r3, #12
 8005b5e:	603b      	str	r3, [r7, #0]
 8005b60:	e7ef      	b.n	8005b42 <__sfp+0x66>
 8005b62:	46c0      	nop			; (mov r8, r8)
 8005b64:	08006770 	.word	0x08006770
 8005b68:	ffff0001 	.word	0xffff0001

08005b6c <_fwalk_reent>:
 8005b6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b6e:	0004      	movs	r4, r0
 8005b70:	0006      	movs	r6, r0
 8005b72:	2700      	movs	r7, #0
 8005b74:	9101      	str	r1, [sp, #4]
 8005b76:	3448      	adds	r4, #72	; 0x48
 8005b78:	6863      	ldr	r3, [r4, #4]
 8005b7a:	68a5      	ldr	r5, [r4, #8]
 8005b7c:	9300      	str	r3, [sp, #0]
 8005b7e:	9b00      	ldr	r3, [sp, #0]
 8005b80:	3b01      	subs	r3, #1
 8005b82:	9300      	str	r3, [sp, #0]
 8005b84:	d504      	bpl.n	8005b90 <_fwalk_reent+0x24>
 8005b86:	6824      	ldr	r4, [r4, #0]
 8005b88:	2c00      	cmp	r4, #0
 8005b8a:	d1f5      	bne.n	8005b78 <_fwalk_reent+0xc>
 8005b8c:	0038      	movs	r0, r7
 8005b8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005b90:	89ab      	ldrh	r3, [r5, #12]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d908      	bls.n	8005ba8 <_fwalk_reent+0x3c>
 8005b96:	220e      	movs	r2, #14
 8005b98:	5eab      	ldrsh	r3, [r5, r2]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	d004      	beq.n	8005ba8 <_fwalk_reent+0x3c>
 8005b9e:	0029      	movs	r1, r5
 8005ba0:	0030      	movs	r0, r6
 8005ba2:	9b01      	ldr	r3, [sp, #4]
 8005ba4:	4798      	blx	r3
 8005ba6:	4307      	orrs	r7, r0
 8005ba8:	3568      	adds	r5, #104	; 0x68
 8005baa:	e7e8      	b.n	8005b7e <_fwalk_reent+0x12>

08005bac <__retarget_lock_init_recursive>:
 8005bac:	4770      	bx	lr

08005bae <__retarget_lock_acquire_recursive>:
 8005bae:	4770      	bx	lr

08005bb0 <__retarget_lock_release_recursive>:
 8005bb0:	4770      	bx	lr
	...

08005bb4 <__swhatbuf_r>:
 8005bb4:	b570      	push	{r4, r5, r6, lr}
 8005bb6:	000e      	movs	r6, r1
 8005bb8:	001d      	movs	r5, r3
 8005bba:	230e      	movs	r3, #14
 8005bbc:	5ec9      	ldrsh	r1, [r1, r3]
 8005bbe:	0014      	movs	r4, r2
 8005bc0:	b096      	sub	sp, #88	; 0x58
 8005bc2:	2900      	cmp	r1, #0
 8005bc4:	da08      	bge.n	8005bd8 <__swhatbuf_r+0x24>
 8005bc6:	220c      	movs	r2, #12
 8005bc8:	5eb3      	ldrsh	r3, [r6, r2]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	602a      	str	r2, [r5, #0]
 8005bce:	061b      	lsls	r3, r3, #24
 8005bd0:	d411      	bmi.n	8005bf6 <__swhatbuf_r+0x42>
 8005bd2:	2380      	movs	r3, #128	; 0x80
 8005bd4:	00db      	lsls	r3, r3, #3
 8005bd6:	e00f      	b.n	8005bf8 <__swhatbuf_r+0x44>
 8005bd8:	466a      	mov	r2, sp
 8005bda:	f000 fca1 	bl	8006520 <_fstat_r>
 8005bde:	2800      	cmp	r0, #0
 8005be0:	dbf1      	blt.n	8005bc6 <__swhatbuf_r+0x12>
 8005be2:	23f0      	movs	r3, #240	; 0xf0
 8005be4:	9901      	ldr	r1, [sp, #4]
 8005be6:	021b      	lsls	r3, r3, #8
 8005be8:	4019      	ands	r1, r3
 8005bea:	4b05      	ldr	r3, [pc, #20]	; (8005c00 <__swhatbuf_r+0x4c>)
 8005bec:	18c9      	adds	r1, r1, r3
 8005bee:	424b      	negs	r3, r1
 8005bf0:	4159      	adcs	r1, r3
 8005bf2:	6029      	str	r1, [r5, #0]
 8005bf4:	e7ed      	b.n	8005bd2 <__swhatbuf_r+0x1e>
 8005bf6:	2340      	movs	r3, #64	; 0x40
 8005bf8:	2000      	movs	r0, #0
 8005bfa:	6023      	str	r3, [r4, #0]
 8005bfc:	b016      	add	sp, #88	; 0x58
 8005bfe:	bd70      	pop	{r4, r5, r6, pc}
 8005c00:	ffffe000 	.word	0xffffe000

08005c04 <__smakebuf_r>:
 8005c04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c06:	2602      	movs	r6, #2
 8005c08:	898b      	ldrh	r3, [r1, #12]
 8005c0a:	0005      	movs	r5, r0
 8005c0c:	000c      	movs	r4, r1
 8005c0e:	4233      	tst	r3, r6
 8005c10:	d006      	beq.n	8005c20 <__smakebuf_r+0x1c>
 8005c12:	0023      	movs	r3, r4
 8005c14:	3347      	adds	r3, #71	; 0x47
 8005c16:	6023      	str	r3, [r4, #0]
 8005c18:	6123      	str	r3, [r4, #16]
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	6163      	str	r3, [r4, #20]
 8005c1e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005c20:	466a      	mov	r2, sp
 8005c22:	ab01      	add	r3, sp, #4
 8005c24:	f7ff ffc6 	bl	8005bb4 <__swhatbuf_r>
 8005c28:	9900      	ldr	r1, [sp, #0]
 8005c2a:	0007      	movs	r7, r0
 8005c2c:	0028      	movs	r0, r5
 8005c2e:	f000 f899 	bl	8005d64 <_malloc_r>
 8005c32:	2800      	cmp	r0, #0
 8005c34:	d108      	bne.n	8005c48 <__smakebuf_r+0x44>
 8005c36:	220c      	movs	r2, #12
 8005c38:	5ea3      	ldrsh	r3, [r4, r2]
 8005c3a:	059a      	lsls	r2, r3, #22
 8005c3c:	d4ef      	bmi.n	8005c1e <__smakebuf_r+0x1a>
 8005c3e:	2203      	movs	r2, #3
 8005c40:	4393      	bics	r3, r2
 8005c42:	431e      	orrs	r6, r3
 8005c44:	81a6      	strh	r6, [r4, #12]
 8005c46:	e7e4      	b.n	8005c12 <__smakebuf_r+0xe>
 8005c48:	4b0f      	ldr	r3, [pc, #60]	; (8005c88 <__smakebuf_r+0x84>)
 8005c4a:	62ab      	str	r3, [r5, #40]	; 0x28
 8005c4c:	2380      	movs	r3, #128	; 0x80
 8005c4e:	89a2      	ldrh	r2, [r4, #12]
 8005c50:	6020      	str	r0, [r4, #0]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	81a3      	strh	r3, [r4, #12]
 8005c56:	9b00      	ldr	r3, [sp, #0]
 8005c58:	6120      	str	r0, [r4, #16]
 8005c5a:	6163      	str	r3, [r4, #20]
 8005c5c:	9b01      	ldr	r3, [sp, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00d      	beq.n	8005c7e <__smakebuf_r+0x7a>
 8005c62:	0028      	movs	r0, r5
 8005c64:	230e      	movs	r3, #14
 8005c66:	5ee1      	ldrsh	r1, [r4, r3]
 8005c68:	f000 fc6c 	bl	8006544 <_isatty_r>
 8005c6c:	2800      	cmp	r0, #0
 8005c6e:	d006      	beq.n	8005c7e <__smakebuf_r+0x7a>
 8005c70:	2203      	movs	r2, #3
 8005c72:	89a3      	ldrh	r3, [r4, #12]
 8005c74:	4393      	bics	r3, r2
 8005c76:	001a      	movs	r2, r3
 8005c78:	2301      	movs	r3, #1
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	81a3      	strh	r3, [r4, #12]
 8005c7e:	89a0      	ldrh	r0, [r4, #12]
 8005c80:	4307      	orrs	r7, r0
 8005c82:	81a7      	strh	r7, [r4, #12]
 8005c84:	e7cb      	b.n	8005c1e <__smakebuf_r+0x1a>
 8005c86:	46c0      	nop			; (mov r8, r8)
 8005c88:	080059f1 	.word	0x080059f1

08005c8c <_free_r>:
 8005c8c:	b570      	push	{r4, r5, r6, lr}
 8005c8e:	0005      	movs	r5, r0
 8005c90:	2900      	cmp	r1, #0
 8005c92:	d010      	beq.n	8005cb6 <_free_r+0x2a>
 8005c94:	1f0c      	subs	r4, r1, #4
 8005c96:	6823      	ldr	r3, [r4, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	da00      	bge.n	8005c9e <_free_r+0x12>
 8005c9c:	18e4      	adds	r4, r4, r3
 8005c9e:	0028      	movs	r0, r5
 8005ca0:	f000 fc82 	bl	80065a8 <__malloc_lock>
 8005ca4:	4a1d      	ldr	r2, [pc, #116]	; (8005d1c <_free_r+0x90>)
 8005ca6:	6813      	ldr	r3, [r2, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d105      	bne.n	8005cb8 <_free_r+0x2c>
 8005cac:	6063      	str	r3, [r4, #4]
 8005cae:	6014      	str	r4, [r2, #0]
 8005cb0:	0028      	movs	r0, r5
 8005cb2:	f000 fc81 	bl	80065b8 <__malloc_unlock>
 8005cb6:	bd70      	pop	{r4, r5, r6, pc}
 8005cb8:	42a3      	cmp	r3, r4
 8005cba:	d908      	bls.n	8005cce <_free_r+0x42>
 8005cbc:	6821      	ldr	r1, [r4, #0]
 8005cbe:	1860      	adds	r0, r4, r1
 8005cc0:	4283      	cmp	r3, r0
 8005cc2:	d1f3      	bne.n	8005cac <_free_r+0x20>
 8005cc4:	6818      	ldr	r0, [r3, #0]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	1841      	adds	r1, r0, r1
 8005cca:	6021      	str	r1, [r4, #0]
 8005ccc:	e7ee      	b.n	8005cac <_free_r+0x20>
 8005cce:	001a      	movs	r2, r3
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d001      	beq.n	8005cda <_free_r+0x4e>
 8005cd6:	42a3      	cmp	r3, r4
 8005cd8:	d9f9      	bls.n	8005cce <_free_r+0x42>
 8005cda:	6811      	ldr	r1, [r2, #0]
 8005cdc:	1850      	adds	r0, r2, r1
 8005cde:	42a0      	cmp	r0, r4
 8005ce0:	d10b      	bne.n	8005cfa <_free_r+0x6e>
 8005ce2:	6820      	ldr	r0, [r4, #0]
 8005ce4:	1809      	adds	r1, r1, r0
 8005ce6:	1850      	adds	r0, r2, r1
 8005ce8:	6011      	str	r1, [r2, #0]
 8005cea:	4283      	cmp	r3, r0
 8005cec:	d1e0      	bne.n	8005cb0 <_free_r+0x24>
 8005cee:	6818      	ldr	r0, [r3, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	1841      	adds	r1, r0, r1
 8005cf4:	6011      	str	r1, [r2, #0]
 8005cf6:	6053      	str	r3, [r2, #4]
 8005cf8:	e7da      	b.n	8005cb0 <_free_r+0x24>
 8005cfa:	42a0      	cmp	r0, r4
 8005cfc:	d902      	bls.n	8005d04 <_free_r+0x78>
 8005cfe:	230c      	movs	r3, #12
 8005d00:	602b      	str	r3, [r5, #0]
 8005d02:	e7d5      	b.n	8005cb0 <_free_r+0x24>
 8005d04:	6821      	ldr	r1, [r4, #0]
 8005d06:	1860      	adds	r0, r4, r1
 8005d08:	4283      	cmp	r3, r0
 8005d0a:	d103      	bne.n	8005d14 <_free_r+0x88>
 8005d0c:	6818      	ldr	r0, [r3, #0]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	1841      	adds	r1, r0, r1
 8005d12:	6021      	str	r1, [r4, #0]
 8005d14:	6063      	str	r3, [r4, #4]
 8005d16:	6054      	str	r4, [r2, #4]
 8005d18:	e7ca      	b.n	8005cb0 <_free_r+0x24>
 8005d1a:	46c0      	nop			; (mov r8, r8)
 8005d1c:	20001fb8 	.word	0x20001fb8

08005d20 <sbrk_aligned>:
 8005d20:	b570      	push	{r4, r5, r6, lr}
 8005d22:	4e0f      	ldr	r6, [pc, #60]	; (8005d60 <sbrk_aligned+0x40>)
 8005d24:	000d      	movs	r5, r1
 8005d26:	6831      	ldr	r1, [r6, #0]
 8005d28:	0004      	movs	r4, r0
 8005d2a:	2900      	cmp	r1, #0
 8005d2c:	d102      	bne.n	8005d34 <sbrk_aligned+0x14>
 8005d2e:	f000 fb73 	bl	8006418 <_sbrk_r>
 8005d32:	6030      	str	r0, [r6, #0]
 8005d34:	0029      	movs	r1, r5
 8005d36:	0020      	movs	r0, r4
 8005d38:	f000 fb6e 	bl	8006418 <_sbrk_r>
 8005d3c:	1c43      	adds	r3, r0, #1
 8005d3e:	d00a      	beq.n	8005d56 <sbrk_aligned+0x36>
 8005d40:	2303      	movs	r3, #3
 8005d42:	1cc5      	adds	r5, r0, #3
 8005d44:	439d      	bics	r5, r3
 8005d46:	42a8      	cmp	r0, r5
 8005d48:	d007      	beq.n	8005d5a <sbrk_aligned+0x3a>
 8005d4a:	1a29      	subs	r1, r5, r0
 8005d4c:	0020      	movs	r0, r4
 8005d4e:	f000 fb63 	bl	8006418 <_sbrk_r>
 8005d52:	1c43      	adds	r3, r0, #1
 8005d54:	d101      	bne.n	8005d5a <sbrk_aligned+0x3a>
 8005d56:	2501      	movs	r5, #1
 8005d58:	426d      	negs	r5, r5
 8005d5a:	0028      	movs	r0, r5
 8005d5c:	bd70      	pop	{r4, r5, r6, pc}
 8005d5e:	46c0      	nop			; (mov r8, r8)
 8005d60:	20001fbc 	.word	0x20001fbc

08005d64 <_malloc_r>:
 8005d64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d66:	2203      	movs	r2, #3
 8005d68:	1ccb      	adds	r3, r1, #3
 8005d6a:	4393      	bics	r3, r2
 8005d6c:	3308      	adds	r3, #8
 8005d6e:	0006      	movs	r6, r0
 8005d70:	001f      	movs	r7, r3
 8005d72:	2b0c      	cmp	r3, #12
 8005d74:	d232      	bcs.n	8005ddc <_malloc_r+0x78>
 8005d76:	270c      	movs	r7, #12
 8005d78:	42b9      	cmp	r1, r7
 8005d7a:	d831      	bhi.n	8005de0 <_malloc_r+0x7c>
 8005d7c:	0030      	movs	r0, r6
 8005d7e:	f000 fc13 	bl	80065a8 <__malloc_lock>
 8005d82:	4d32      	ldr	r5, [pc, #200]	; (8005e4c <_malloc_r+0xe8>)
 8005d84:	682b      	ldr	r3, [r5, #0]
 8005d86:	001c      	movs	r4, r3
 8005d88:	2c00      	cmp	r4, #0
 8005d8a:	d12e      	bne.n	8005dea <_malloc_r+0x86>
 8005d8c:	0039      	movs	r1, r7
 8005d8e:	0030      	movs	r0, r6
 8005d90:	f7ff ffc6 	bl	8005d20 <sbrk_aligned>
 8005d94:	0004      	movs	r4, r0
 8005d96:	1c43      	adds	r3, r0, #1
 8005d98:	d11e      	bne.n	8005dd8 <_malloc_r+0x74>
 8005d9a:	682c      	ldr	r4, [r5, #0]
 8005d9c:	0025      	movs	r5, r4
 8005d9e:	2d00      	cmp	r5, #0
 8005da0:	d14a      	bne.n	8005e38 <_malloc_r+0xd4>
 8005da2:	6823      	ldr	r3, [r4, #0]
 8005da4:	0029      	movs	r1, r5
 8005da6:	18e3      	adds	r3, r4, r3
 8005da8:	0030      	movs	r0, r6
 8005daa:	9301      	str	r3, [sp, #4]
 8005dac:	f000 fb34 	bl	8006418 <_sbrk_r>
 8005db0:	9b01      	ldr	r3, [sp, #4]
 8005db2:	4283      	cmp	r3, r0
 8005db4:	d143      	bne.n	8005e3e <_malloc_r+0xda>
 8005db6:	6823      	ldr	r3, [r4, #0]
 8005db8:	3703      	adds	r7, #3
 8005dba:	1aff      	subs	r7, r7, r3
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	439f      	bics	r7, r3
 8005dc0:	3708      	adds	r7, #8
 8005dc2:	2f0c      	cmp	r7, #12
 8005dc4:	d200      	bcs.n	8005dc8 <_malloc_r+0x64>
 8005dc6:	270c      	movs	r7, #12
 8005dc8:	0039      	movs	r1, r7
 8005dca:	0030      	movs	r0, r6
 8005dcc:	f7ff ffa8 	bl	8005d20 <sbrk_aligned>
 8005dd0:	1c43      	adds	r3, r0, #1
 8005dd2:	d034      	beq.n	8005e3e <_malloc_r+0xda>
 8005dd4:	6823      	ldr	r3, [r4, #0]
 8005dd6:	19df      	adds	r7, r3, r7
 8005dd8:	6027      	str	r7, [r4, #0]
 8005dda:	e013      	b.n	8005e04 <_malloc_r+0xa0>
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	dacb      	bge.n	8005d78 <_malloc_r+0x14>
 8005de0:	230c      	movs	r3, #12
 8005de2:	2500      	movs	r5, #0
 8005de4:	6033      	str	r3, [r6, #0]
 8005de6:	0028      	movs	r0, r5
 8005de8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005dea:	6822      	ldr	r2, [r4, #0]
 8005dec:	1bd1      	subs	r1, r2, r7
 8005dee:	d420      	bmi.n	8005e32 <_malloc_r+0xce>
 8005df0:	290b      	cmp	r1, #11
 8005df2:	d917      	bls.n	8005e24 <_malloc_r+0xc0>
 8005df4:	19e2      	adds	r2, r4, r7
 8005df6:	6027      	str	r7, [r4, #0]
 8005df8:	42a3      	cmp	r3, r4
 8005dfa:	d111      	bne.n	8005e20 <_malloc_r+0xbc>
 8005dfc:	602a      	str	r2, [r5, #0]
 8005dfe:	6863      	ldr	r3, [r4, #4]
 8005e00:	6011      	str	r1, [r2, #0]
 8005e02:	6053      	str	r3, [r2, #4]
 8005e04:	0030      	movs	r0, r6
 8005e06:	0025      	movs	r5, r4
 8005e08:	f000 fbd6 	bl	80065b8 <__malloc_unlock>
 8005e0c:	2207      	movs	r2, #7
 8005e0e:	350b      	adds	r5, #11
 8005e10:	1d23      	adds	r3, r4, #4
 8005e12:	4395      	bics	r5, r2
 8005e14:	1aea      	subs	r2, r5, r3
 8005e16:	429d      	cmp	r5, r3
 8005e18:	d0e5      	beq.n	8005de6 <_malloc_r+0x82>
 8005e1a:	1b5b      	subs	r3, r3, r5
 8005e1c:	50a3      	str	r3, [r4, r2]
 8005e1e:	e7e2      	b.n	8005de6 <_malloc_r+0x82>
 8005e20:	605a      	str	r2, [r3, #4]
 8005e22:	e7ec      	b.n	8005dfe <_malloc_r+0x9a>
 8005e24:	6862      	ldr	r2, [r4, #4]
 8005e26:	42a3      	cmp	r3, r4
 8005e28:	d101      	bne.n	8005e2e <_malloc_r+0xca>
 8005e2a:	602a      	str	r2, [r5, #0]
 8005e2c:	e7ea      	b.n	8005e04 <_malloc_r+0xa0>
 8005e2e:	605a      	str	r2, [r3, #4]
 8005e30:	e7e8      	b.n	8005e04 <_malloc_r+0xa0>
 8005e32:	0023      	movs	r3, r4
 8005e34:	6864      	ldr	r4, [r4, #4]
 8005e36:	e7a7      	b.n	8005d88 <_malloc_r+0x24>
 8005e38:	002c      	movs	r4, r5
 8005e3a:	686d      	ldr	r5, [r5, #4]
 8005e3c:	e7af      	b.n	8005d9e <_malloc_r+0x3a>
 8005e3e:	230c      	movs	r3, #12
 8005e40:	0030      	movs	r0, r6
 8005e42:	6033      	str	r3, [r6, #0]
 8005e44:	f000 fbb8 	bl	80065b8 <__malloc_unlock>
 8005e48:	e7cd      	b.n	8005de6 <_malloc_r+0x82>
 8005e4a:	46c0      	nop			; (mov r8, r8)
 8005e4c:	20001fb8 	.word	0x20001fb8

08005e50 <__sfputc_r>:
 8005e50:	6893      	ldr	r3, [r2, #8]
 8005e52:	b510      	push	{r4, lr}
 8005e54:	3b01      	subs	r3, #1
 8005e56:	6093      	str	r3, [r2, #8]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	da04      	bge.n	8005e66 <__sfputc_r+0x16>
 8005e5c:	6994      	ldr	r4, [r2, #24]
 8005e5e:	42a3      	cmp	r3, r4
 8005e60:	db07      	blt.n	8005e72 <__sfputc_r+0x22>
 8005e62:	290a      	cmp	r1, #10
 8005e64:	d005      	beq.n	8005e72 <__sfputc_r+0x22>
 8005e66:	6813      	ldr	r3, [r2, #0]
 8005e68:	1c58      	adds	r0, r3, #1
 8005e6a:	6010      	str	r0, [r2, #0]
 8005e6c:	7019      	strb	r1, [r3, #0]
 8005e6e:	0008      	movs	r0, r1
 8005e70:	bd10      	pop	{r4, pc}
 8005e72:	f7ff fbff 	bl	8005674 <__swbuf_r>
 8005e76:	0001      	movs	r1, r0
 8005e78:	e7f9      	b.n	8005e6e <__sfputc_r+0x1e>

08005e7a <__sfputs_r>:
 8005e7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e7c:	0006      	movs	r6, r0
 8005e7e:	000f      	movs	r7, r1
 8005e80:	0014      	movs	r4, r2
 8005e82:	18d5      	adds	r5, r2, r3
 8005e84:	42ac      	cmp	r4, r5
 8005e86:	d101      	bne.n	8005e8c <__sfputs_r+0x12>
 8005e88:	2000      	movs	r0, #0
 8005e8a:	e007      	b.n	8005e9c <__sfputs_r+0x22>
 8005e8c:	7821      	ldrb	r1, [r4, #0]
 8005e8e:	003a      	movs	r2, r7
 8005e90:	0030      	movs	r0, r6
 8005e92:	f7ff ffdd 	bl	8005e50 <__sfputc_r>
 8005e96:	3401      	adds	r4, #1
 8005e98:	1c43      	adds	r3, r0, #1
 8005e9a:	d1f3      	bne.n	8005e84 <__sfputs_r+0xa>
 8005e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ea0 <_vfiprintf_r>:
 8005ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ea2:	b0a1      	sub	sp, #132	; 0x84
 8005ea4:	0006      	movs	r6, r0
 8005ea6:	000c      	movs	r4, r1
 8005ea8:	001f      	movs	r7, r3
 8005eaa:	9203      	str	r2, [sp, #12]
 8005eac:	2800      	cmp	r0, #0
 8005eae:	d004      	beq.n	8005eba <_vfiprintf_r+0x1a>
 8005eb0:	6983      	ldr	r3, [r0, #24]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d101      	bne.n	8005eba <_vfiprintf_r+0x1a>
 8005eb6:	f7ff fdd9 	bl	8005a6c <__sinit>
 8005eba:	4b8e      	ldr	r3, [pc, #568]	; (80060f4 <_vfiprintf_r+0x254>)
 8005ebc:	429c      	cmp	r4, r3
 8005ebe:	d11c      	bne.n	8005efa <_vfiprintf_r+0x5a>
 8005ec0:	6874      	ldr	r4, [r6, #4]
 8005ec2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ec4:	07db      	lsls	r3, r3, #31
 8005ec6:	d405      	bmi.n	8005ed4 <_vfiprintf_r+0x34>
 8005ec8:	89a3      	ldrh	r3, [r4, #12]
 8005eca:	059b      	lsls	r3, r3, #22
 8005ecc:	d402      	bmi.n	8005ed4 <_vfiprintf_r+0x34>
 8005ece:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ed0:	f7ff fe6d 	bl	8005bae <__retarget_lock_acquire_recursive>
 8005ed4:	89a3      	ldrh	r3, [r4, #12]
 8005ed6:	071b      	lsls	r3, r3, #28
 8005ed8:	d502      	bpl.n	8005ee0 <_vfiprintf_r+0x40>
 8005eda:	6923      	ldr	r3, [r4, #16]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d11d      	bne.n	8005f1c <_vfiprintf_r+0x7c>
 8005ee0:	0021      	movs	r1, r4
 8005ee2:	0030      	movs	r0, r6
 8005ee4:	f7ff fc1c 	bl	8005720 <__swsetup_r>
 8005ee8:	2800      	cmp	r0, #0
 8005eea:	d017      	beq.n	8005f1c <_vfiprintf_r+0x7c>
 8005eec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005eee:	07db      	lsls	r3, r3, #31
 8005ef0:	d50d      	bpl.n	8005f0e <_vfiprintf_r+0x6e>
 8005ef2:	2001      	movs	r0, #1
 8005ef4:	4240      	negs	r0, r0
 8005ef6:	b021      	add	sp, #132	; 0x84
 8005ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005efa:	4b7f      	ldr	r3, [pc, #508]	; (80060f8 <_vfiprintf_r+0x258>)
 8005efc:	429c      	cmp	r4, r3
 8005efe:	d101      	bne.n	8005f04 <_vfiprintf_r+0x64>
 8005f00:	68b4      	ldr	r4, [r6, #8]
 8005f02:	e7de      	b.n	8005ec2 <_vfiprintf_r+0x22>
 8005f04:	4b7d      	ldr	r3, [pc, #500]	; (80060fc <_vfiprintf_r+0x25c>)
 8005f06:	429c      	cmp	r4, r3
 8005f08:	d1db      	bne.n	8005ec2 <_vfiprintf_r+0x22>
 8005f0a:	68f4      	ldr	r4, [r6, #12]
 8005f0c:	e7d9      	b.n	8005ec2 <_vfiprintf_r+0x22>
 8005f0e:	89a3      	ldrh	r3, [r4, #12]
 8005f10:	059b      	lsls	r3, r3, #22
 8005f12:	d4ee      	bmi.n	8005ef2 <_vfiprintf_r+0x52>
 8005f14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f16:	f7ff fe4b 	bl	8005bb0 <__retarget_lock_release_recursive>
 8005f1a:	e7ea      	b.n	8005ef2 <_vfiprintf_r+0x52>
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	ad08      	add	r5, sp, #32
 8005f20:	616b      	str	r3, [r5, #20]
 8005f22:	3320      	adds	r3, #32
 8005f24:	766b      	strb	r3, [r5, #25]
 8005f26:	3310      	adds	r3, #16
 8005f28:	76ab      	strb	r3, [r5, #26]
 8005f2a:	9707      	str	r7, [sp, #28]
 8005f2c:	9f03      	ldr	r7, [sp, #12]
 8005f2e:	783b      	ldrb	r3, [r7, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d001      	beq.n	8005f38 <_vfiprintf_r+0x98>
 8005f34:	2b25      	cmp	r3, #37	; 0x25
 8005f36:	d14e      	bne.n	8005fd6 <_vfiprintf_r+0x136>
 8005f38:	9b03      	ldr	r3, [sp, #12]
 8005f3a:	1afb      	subs	r3, r7, r3
 8005f3c:	9305      	str	r3, [sp, #20]
 8005f3e:	9b03      	ldr	r3, [sp, #12]
 8005f40:	429f      	cmp	r7, r3
 8005f42:	d00d      	beq.n	8005f60 <_vfiprintf_r+0xc0>
 8005f44:	9b05      	ldr	r3, [sp, #20]
 8005f46:	0021      	movs	r1, r4
 8005f48:	0030      	movs	r0, r6
 8005f4a:	9a03      	ldr	r2, [sp, #12]
 8005f4c:	f7ff ff95 	bl	8005e7a <__sfputs_r>
 8005f50:	1c43      	adds	r3, r0, #1
 8005f52:	d100      	bne.n	8005f56 <_vfiprintf_r+0xb6>
 8005f54:	e0b5      	b.n	80060c2 <_vfiprintf_r+0x222>
 8005f56:	696a      	ldr	r2, [r5, #20]
 8005f58:	9b05      	ldr	r3, [sp, #20]
 8005f5a:	4694      	mov	ip, r2
 8005f5c:	4463      	add	r3, ip
 8005f5e:	616b      	str	r3, [r5, #20]
 8005f60:	783b      	ldrb	r3, [r7, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d100      	bne.n	8005f68 <_vfiprintf_r+0xc8>
 8005f66:	e0ac      	b.n	80060c2 <_vfiprintf_r+0x222>
 8005f68:	2201      	movs	r2, #1
 8005f6a:	1c7b      	adds	r3, r7, #1
 8005f6c:	9303      	str	r3, [sp, #12]
 8005f6e:	2300      	movs	r3, #0
 8005f70:	4252      	negs	r2, r2
 8005f72:	606a      	str	r2, [r5, #4]
 8005f74:	a904      	add	r1, sp, #16
 8005f76:	3254      	adds	r2, #84	; 0x54
 8005f78:	1852      	adds	r2, r2, r1
 8005f7a:	602b      	str	r3, [r5, #0]
 8005f7c:	60eb      	str	r3, [r5, #12]
 8005f7e:	60ab      	str	r3, [r5, #8]
 8005f80:	7013      	strb	r3, [r2, #0]
 8005f82:	65ab      	str	r3, [r5, #88]	; 0x58
 8005f84:	9b03      	ldr	r3, [sp, #12]
 8005f86:	2205      	movs	r2, #5
 8005f88:	7819      	ldrb	r1, [r3, #0]
 8005f8a:	485d      	ldr	r0, [pc, #372]	; (8006100 <_vfiprintf_r+0x260>)
 8005f8c:	f000 fb00 	bl	8006590 <memchr>
 8005f90:	9b03      	ldr	r3, [sp, #12]
 8005f92:	1c5f      	adds	r7, r3, #1
 8005f94:	2800      	cmp	r0, #0
 8005f96:	d120      	bne.n	8005fda <_vfiprintf_r+0x13a>
 8005f98:	682a      	ldr	r2, [r5, #0]
 8005f9a:	06d3      	lsls	r3, r2, #27
 8005f9c:	d504      	bpl.n	8005fa8 <_vfiprintf_r+0x108>
 8005f9e:	2353      	movs	r3, #83	; 0x53
 8005fa0:	a904      	add	r1, sp, #16
 8005fa2:	185b      	adds	r3, r3, r1
 8005fa4:	2120      	movs	r1, #32
 8005fa6:	7019      	strb	r1, [r3, #0]
 8005fa8:	0713      	lsls	r3, r2, #28
 8005faa:	d504      	bpl.n	8005fb6 <_vfiprintf_r+0x116>
 8005fac:	2353      	movs	r3, #83	; 0x53
 8005fae:	a904      	add	r1, sp, #16
 8005fb0:	185b      	adds	r3, r3, r1
 8005fb2:	212b      	movs	r1, #43	; 0x2b
 8005fb4:	7019      	strb	r1, [r3, #0]
 8005fb6:	9b03      	ldr	r3, [sp, #12]
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	2b2a      	cmp	r3, #42	; 0x2a
 8005fbc:	d016      	beq.n	8005fec <_vfiprintf_r+0x14c>
 8005fbe:	2100      	movs	r1, #0
 8005fc0:	68eb      	ldr	r3, [r5, #12]
 8005fc2:	9f03      	ldr	r7, [sp, #12]
 8005fc4:	783a      	ldrb	r2, [r7, #0]
 8005fc6:	1c78      	adds	r0, r7, #1
 8005fc8:	3a30      	subs	r2, #48	; 0x30
 8005fca:	4684      	mov	ip, r0
 8005fcc:	2a09      	cmp	r2, #9
 8005fce:	d94f      	bls.n	8006070 <_vfiprintf_r+0x1d0>
 8005fd0:	2900      	cmp	r1, #0
 8005fd2:	d111      	bne.n	8005ff8 <_vfiprintf_r+0x158>
 8005fd4:	e017      	b.n	8006006 <_vfiprintf_r+0x166>
 8005fd6:	3701      	adds	r7, #1
 8005fd8:	e7a9      	b.n	8005f2e <_vfiprintf_r+0x8e>
 8005fda:	4b49      	ldr	r3, [pc, #292]	; (8006100 <_vfiprintf_r+0x260>)
 8005fdc:	682a      	ldr	r2, [r5, #0]
 8005fde:	1ac0      	subs	r0, r0, r3
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	4083      	lsls	r3, r0
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	602b      	str	r3, [r5, #0]
 8005fe8:	9703      	str	r7, [sp, #12]
 8005fea:	e7cb      	b.n	8005f84 <_vfiprintf_r+0xe4>
 8005fec:	9b07      	ldr	r3, [sp, #28]
 8005fee:	1d19      	adds	r1, r3, #4
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	9107      	str	r1, [sp, #28]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	db01      	blt.n	8005ffc <_vfiprintf_r+0x15c>
 8005ff8:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ffa:	e004      	b.n	8006006 <_vfiprintf_r+0x166>
 8005ffc:	425b      	negs	r3, r3
 8005ffe:	60eb      	str	r3, [r5, #12]
 8006000:	2302      	movs	r3, #2
 8006002:	4313      	orrs	r3, r2
 8006004:	602b      	str	r3, [r5, #0]
 8006006:	783b      	ldrb	r3, [r7, #0]
 8006008:	2b2e      	cmp	r3, #46	; 0x2e
 800600a:	d10a      	bne.n	8006022 <_vfiprintf_r+0x182>
 800600c:	787b      	ldrb	r3, [r7, #1]
 800600e:	2b2a      	cmp	r3, #42	; 0x2a
 8006010:	d137      	bne.n	8006082 <_vfiprintf_r+0x1e2>
 8006012:	9b07      	ldr	r3, [sp, #28]
 8006014:	3702      	adds	r7, #2
 8006016:	1d1a      	adds	r2, r3, #4
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	9207      	str	r2, [sp, #28]
 800601c:	2b00      	cmp	r3, #0
 800601e:	db2d      	blt.n	800607c <_vfiprintf_r+0x1dc>
 8006020:	9309      	str	r3, [sp, #36]	; 0x24
 8006022:	2203      	movs	r2, #3
 8006024:	7839      	ldrb	r1, [r7, #0]
 8006026:	4837      	ldr	r0, [pc, #220]	; (8006104 <_vfiprintf_r+0x264>)
 8006028:	f000 fab2 	bl	8006590 <memchr>
 800602c:	2800      	cmp	r0, #0
 800602e:	d007      	beq.n	8006040 <_vfiprintf_r+0x1a0>
 8006030:	4b34      	ldr	r3, [pc, #208]	; (8006104 <_vfiprintf_r+0x264>)
 8006032:	682a      	ldr	r2, [r5, #0]
 8006034:	1ac0      	subs	r0, r0, r3
 8006036:	2340      	movs	r3, #64	; 0x40
 8006038:	4083      	lsls	r3, r0
 800603a:	4313      	orrs	r3, r2
 800603c:	3701      	adds	r7, #1
 800603e:	602b      	str	r3, [r5, #0]
 8006040:	7839      	ldrb	r1, [r7, #0]
 8006042:	1c7b      	adds	r3, r7, #1
 8006044:	2206      	movs	r2, #6
 8006046:	4830      	ldr	r0, [pc, #192]	; (8006108 <_vfiprintf_r+0x268>)
 8006048:	9303      	str	r3, [sp, #12]
 800604a:	7629      	strb	r1, [r5, #24]
 800604c:	f000 faa0 	bl	8006590 <memchr>
 8006050:	2800      	cmp	r0, #0
 8006052:	d045      	beq.n	80060e0 <_vfiprintf_r+0x240>
 8006054:	4b2d      	ldr	r3, [pc, #180]	; (800610c <_vfiprintf_r+0x26c>)
 8006056:	2b00      	cmp	r3, #0
 8006058:	d127      	bne.n	80060aa <_vfiprintf_r+0x20a>
 800605a:	2207      	movs	r2, #7
 800605c:	9b07      	ldr	r3, [sp, #28]
 800605e:	3307      	adds	r3, #7
 8006060:	4393      	bics	r3, r2
 8006062:	3308      	adds	r3, #8
 8006064:	9307      	str	r3, [sp, #28]
 8006066:	696b      	ldr	r3, [r5, #20]
 8006068:	9a04      	ldr	r2, [sp, #16]
 800606a:	189b      	adds	r3, r3, r2
 800606c:	616b      	str	r3, [r5, #20]
 800606e:	e75d      	b.n	8005f2c <_vfiprintf_r+0x8c>
 8006070:	210a      	movs	r1, #10
 8006072:	434b      	muls	r3, r1
 8006074:	4667      	mov	r7, ip
 8006076:	189b      	adds	r3, r3, r2
 8006078:	3909      	subs	r1, #9
 800607a:	e7a3      	b.n	8005fc4 <_vfiprintf_r+0x124>
 800607c:	2301      	movs	r3, #1
 800607e:	425b      	negs	r3, r3
 8006080:	e7ce      	b.n	8006020 <_vfiprintf_r+0x180>
 8006082:	2300      	movs	r3, #0
 8006084:	001a      	movs	r2, r3
 8006086:	3701      	adds	r7, #1
 8006088:	606b      	str	r3, [r5, #4]
 800608a:	7839      	ldrb	r1, [r7, #0]
 800608c:	1c78      	adds	r0, r7, #1
 800608e:	3930      	subs	r1, #48	; 0x30
 8006090:	4684      	mov	ip, r0
 8006092:	2909      	cmp	r1, #9
 8006094:	d903      	bls.n	800609e <_vfiprintf_r+0x1fe>
 8006096:	2b00      	cmp	r3, #0
 8006098:	d0c3      	beq.n	8006022 <_vfiprintf_r+0x182>
 800609a:	9209      	str	r2, [sp, #36]	; 0x24
 800609c:	e7c1      	b.n	8006022 <_vfiprintf_r+0x182>
 800609e:	230a      	movs	r3, #10
 80060a0:	435a      	muls	r2, r3
 80060a2:	4667      	mov	r7, ip
 80060a4:	1852      	adds	r2, r2, r1
 80060a6:	3b09      	subs	r3, #9
 80060a8:	e7ef      	b.n	800608a <_vfiprintf_r+0x1ea>
 80060aa:	ab07      	add	r3, sp, #28
 80060ac:	9300      	str	r3, [sp, #0]
 80060ae:	0022      	movs	r2, r4
 80060b0:	0029      	movs	r1, r5
 80060b2:	0030      	movs	r0, r6
 80060b4:	4b16      	ldr	r3, [pc, #88]	; (8006110 <_vfiprintf_r+0x270>)
 80060b6:	e000      	b.n	80060ba <_vfiprintf_r+0x21a>
 80060b8:	bf00      	nop
 80060ba:	9004      	str	r0, [sp, #16]
 80060bc:	9b04      	ldr	r3, [sp, #16]
 80060be:	3301      	adds	r3, #1
 80060c0:	d1d1      	bne.n	8006066 <_vfiprintf_r+0x1c6>
 80060c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060c4:	07db      	lsls	r3, r3, #31
 80060c6:	d405      	bmi.n	80060d4 <_vfiprintf_r+0x234>
 80060c8:	89a3      	ldrh	r3, [r4, #12]
 80060ca:	059b      	lsls	r3, r3, #22
 80060cc:	d402      	bmi.n	80060d4 <_vfiprintf_r+0x234>
 80060ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060d0:	f7ff fd6e 	bl	8005bb0 <__retarget_lock_release_recursive>
 80060d4:	89a3      	ldrh	r3, [r4, #12]
 80060d6:	065b      	lsls	r3, r3, #25
 80060d8:	d500      	bpl.n	80060dc <_vfiprintf_r+0x23c>
 80060da:	e70a      	b.n	8005ef2 <_vfiprintf_r+0x52>
 80060dc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80060de:	e70a      	b.n	8005ef6 <_vfiprintf_r+0x56>
 80060e0:	ab07      	add	r3, sp, #28
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	0022      	movs	r2, r4
 80060e6:	0029      	movs	r1, r5
 80060e8:	0030      	movs	r0, r6
 80060ea:	4b09      	ldr	r3, [pc, #36]	; (8006110 <_vfiprintf_r+0x270>)
 80060ec:	f000 f882 	bl	80061f4 <_printf_i>
 80060f0:	e7e3      	b.n	80060ba <_vfiprintf_r+0x21a>
 80060f2:	46c0      	nop			; (mov r8, r8)
 80060f4:	08006794 	.word	0x08006794
 80060f8:	080067b4 	.word	0x080067b4
 80060fc:	08006774 	.word	0x08006774
 8006100:	080067d4 	.word	0x080067d4
 8006104:	080067da 	.word	0x080067da
 8006108:	080067de 	.word	0x080067de
 800610c:	00000000 	.word	0x00000000
 8006110:	08005e7b 	.word	0x08005e7b

08006114 <_printf_common>:
 8006114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006116:	0015      	movs	r5, r2
 8006118:	9301      	str	r3, [sp, #4]
 800611a:	688a      	ldr	r2, [r1, #8]
 800611c:	690b      	ldr	r3, [r1, #16]
 800611e:	000c      	movs	r4, r1
 8006120:	9000      	str	r0, [sp, #0]
 8006122:	4293      	cmp	r3, r2
 8006124:	da00      	bge.n	8006128 <_printf_common+0x14>
 8006126:	0013      	movs	r3, r2
 8006128:	0022      	movs	r2, r4
 800612a:	602b      	str	r3, [r5, #0]
 800612c:	3243      	adds	r2, #67	; 0x43
 800612e:	7812      	ldrb	r2, [r2, #0]
 8006130:	2a00      	cmp	r2, #0
 8006132:	d001      	beq.n	8006138 <_printf_common+0x24>
 8006134:	3301      	adds	r3, #1
 8006136:	602b      	str	r3, [r5, #0]
 8006138:	6823      	ldr	r3, [r4, #0]
 800613a:	069b      	lsls	r3, r3, #26
 800613c:	d502      	bpl.n	8006144 <_printf_common+0x30>
 800613e:	682b      	ldr	r3, [r5, #0]
 8006140:	3302      	adds	r3, #2
 8006142:	602b      	str	r3, [r5, #0]
 8006144:	6822      	ldr	r2, [r4, #0]
 8006146:	2306      	movs	r3, #6
 8006148:	0017      	movs	r7, r2
 800614a:	401f      	ands	r7, r3
 800614c:	421a      	tst	r2, r3
 800614e:	d027      	beq.n	80061a0 <_printf_common+0x8c>
 8006150:	0023      	movs	r3, r4
 8006152:	3343      	adds	r3, #67	; 0x43
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	1e5a      	subs	r2, r3, #1
 8006158:	4193      	sbcs	r3, r2
 800615a:	6822      	ldr	r2, [r4, #0]
 800615c:	0692      	lsls	r2, r2, #26
 800615e:	d430      	bmi.n	80061c2 <_printf_common+0xae>
 8006160:	0022      	movs	r2, r4
 8006162:	9901      	ldr	r1, [sp, #4]
 8006164:	9800      	ldr	r0, [sp, #0]
 8006166:	9e08      	ldr	r6, [sp, #32]
 8006168:	3243      	adds	r2, #67	; 0x43
 800616a:	47b0      	blx	r6
 800616c:	1c43      	adds	r3, r0, #1
 800616e:	d025      	beq.n	80061bc <_printf_common+0xa8>
 8006170:	2306      	movs	r3, #6
 8006172:	6820      	ldr	r0, [r4, #0]
 8006174:	682a      	ldr	r2, [r5, #0]
 8006176:	68e1      	ldr	r1, [r4, #12]
 8006178:	2500      	movs	r5, #0
 800617a:	4003      	ands	r3, r0
 800617c:	2b04      	cmp	r3, #4
 800617e:	d103      	bne.n	8006188 <_printf_common+0x74>
 8006180:	1a8d      	subs	r5, r1, r2
 8006182:	43eb      	mvns	r3, r5
 8006184:	17db      	asrs	r3, r3, #31
 8006186:	401d      	ands	r5, r3
 8006188:	68a3      	ldr	r3, [r4, #8]
 800618a:	6922      	ldr	r2, [r4, #16]
 800618c:	4293      	cmp	r3, r2
 800618e:	dd01      	ble.n	8006194 <_printf_common+0x80>
 8006190:	1a9b      	subs	r3, r3, r2
 8006192:	18ed      	adds	r5, r5, r3
 8006194:	2700      	movs	r7, #0
 8006196:	42bd      	cmp	r5, r7
 8006198:	d120      	bne.n	80061dc <_printf_common+0xc8>
 800619a:	2000      	movs	r0, #0
 800619c:	e010      	b.n	80061c0 <_printf_common+0xac>
 800619e:	3701      	adds	r7, #1
 80061a0:	68e3      	ldr	r3, [r4, #12]
 80061a2:	682a      	ldr	r2, [r5, #0]
 80061a4:	1a9b      	subs	r3, r3, r2
 80061a6:	42bb      	cmp	r3, r7
 80061a8:	ddd2      	ble.n	8006150 <_printf_common+0x3c>
 80061aa:	0022      	movs	r2, r4
 80061ac:	2301      	movs	r3, #1
 80061ae:	9901      	ldr	r1, [sp, #4]
 80061b0:	9800      	ldr	r0, [sp, #0]
 80061b2:	9e08      	ldr	r6, [sp, #32]
 80061b4:	3219      	adds	r2, #25
 80061b6:	47b0      	blx	r6
 80061b8:	1c43      	adds	r3, r0, #1
 80061ba:	d1f0      	bne.n	800619e <_printf_common+0x8a>
 80061bc:	2001      	movs	r0, #1
 80061be:	4240      	negs	r0, r0
 80061c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80061c2:	2030      	movs	r0, #48	; 0x30
 80061c4:	18e1      	adds	r1, r4, r3
 80061c6:	3143      	adds	r1, #67	; 0x43
 80061c8:	7008      	strb	r0, [r1, #0]
 80061ca:	0021      	movs	r1, r4
 80061cc:	1c5a      	adds	r2, r3, #1
 80061ce:	3145      	adds	r1, #69	; 0x45
 80061d0:	7809      	ldrb	r1, [r1, #0]
 80061d2:	18a2      	adds	r2, r4, r2
 80061d4:	3243      	adds	r2, #67	; 0x43
 80061d6:	3302      	adds	r3, #2
 80061d8:	7011      	strb	r1, [r2, #0]
 80061da:	e7c1      	b.n	8006160 <_printf_common+0x4c>
 80061dc:	0022      	movs	r2, r4
 80061de:	2301      	movs	r3, #1
 80061e0:	9901      	ldr	r1, [sp, #4]
 80061e2:	9800      	ldr	r0, [sp, #0]
 80061e4:	9e08      	ldr	r6, [sp, #32]
 80061e6:	321a      	adds	r2, #26
 80061e8:	47b0      	blx	r6
 80061ea:	1c43      	adds	r3, r0, #1
 80061ec:	d0e6      	beq.n	80061bc <_printf_common+0xa8>
 80061ee:	3701      	adds	r7, #1
 80061f0:	e7d1      	b.n	8006196 <_printf_common+0x82>
	...

080061f4 <_printf_i>:
 80061f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061f6:	b08b      	sub	sp, #44	; 0x2c
 80061f8:	9206      	str	r2, [sp, #24]
 80061fa:	000a      	movs	r2, r1
 80061fc:	3243      	adds	r2, #67	; 0x43
 80061fe:	9307      	str	r3, [sp, #28]
 8006200:	9005      	str	r0, [sp, #20]
 8006202:	9204      	str	r2, [sp, #16]
 8006204:	7e0a      	ldrb	r2, [r1, #24]
 8006206:	000c      	movs	r4, r1
 8006208:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800620a:	2a78      	cmp	r2, #120	; 0x78
 800620c:	d807      	bhi.n	800621e <_printf_i+0x2a>
 800620e:	2a62      	cmp	r2, #98	; 0x62
 8006210:	d809      	bhi.n	8006226 <_printf_i+0x32>
 8006212:	2a00      	cmp	r2, #0
 8006214:	d100      	bne.n	8006218 <_printf_i+0x24>
 8006216:	e0c1      	b.n	800639c <_printf_i+0x1a8>
 8006218:	2a58      	cmp	r2, #88	; 0x58
 800621a:	d100      	bne.n	800621e <_printf_i+0x2a>
 800621c:	e08c      	b.n	8006338 <_printf_i+0x144>
 800621e:	0026      	movs	r6, r4
 8006220:	3642      	adds	r6, #66	; 0x42
 8006222:	7032      	strb	r2, [r6, #0]
 8006224:	e022      	b.n	800626c <_printf_i+0x78>
 8006226:	0010      	movs	r0, r2
 8006228:	3863      	subs	r0, #99	; 0x63
 800622a:	2815      	cmp	r0, #21
 800622c:	d8f7      	bhi.n	800621e <_printf_i+0x2a>
 800622e:	f7f9 ff6b 	bl	8000108 <__gnu_thumb1_case_shi>
 8006232:	0016      	.short	0x0016
 8006234:	fff6001f 	.word	0xfff6001f
 8006238:	fff6fff6 	.word	0xfff6fff6
 800623c:	001ffff6 	.word	0x001ffff6
 8006240:	fff6fff6 	.word	0xfff6fff6
 8006244:	fff6fff6 	.word	0xfff6fff6
 8006248:	003600a8 	.word	0x003600a8
 800624c:	fff6009a 	.word	0xfff6009a
 8006250:	00b9fff6 	.word	0x00b9fff6
 8006254:	0036fff6 	.word	0x0036fff6
 8006258:	fff6fff6 	.word	0xfff6fff6
 800625c:	009e      	.short	0x009e
 800625e:	0026      	movs	r6, r4
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	3642      	adds	r6, #66	; 0x42
 8006264:	1d11      	adds	r1, r2, #4
 8006266:	6019      	str	r1, [r3, #0]
 8006268:	6813      	ldr	r3, [r2, #0]
 800626a:	7033      	strb	r3, [r6, #0]
 800626c:	2301      	movs	r3, #1
 800626e:	e0a7      	b.n	80063c0 <_printf_i+0x1cc>
 8006270:	6808      	ldr	r0, [r1, #0]
 8006272:	6819      	ldr	r1, [r3, #0]
 8006274:	1d0a      	adds	r2, r1, #4
 8006276:	0605      	lsls	r5, r0, #24
 8006278:	d50b      	bpl.n	8006292 <_printf_i+0x9e>
 800627a:	680d      	ldr	r5, [r1, #0]
 800627c:	601a      	str	r2, [r3, #0]
 800627e:	2d00      	cmp	r5, #0
 8006280:	da03      	bge.n	800628a <_printf_i+0x96>
 8006282:	232d      	movs	r3, #45	; 0x2d
 8006284:	9a04      	ldr	r2, [sp, #16]
 8006286:	426d      	negs	r5, r5
 8006288:	7013      	strb	r3, [r2, #0]
 800628a:	4b61      	ldr	r3, [pc, #388]	; (8006410 <_printf_i+0x21c>)
 800628c:	270a      	movs	r7, #10
 800628e:	9303      	str	r3, [sp, #12]
 8006290:	e01b      	b.n	80062ca <_printf_i+0xd6>
 8006292:	680d      	ldr	r5, [r1, #0]
 8006294:	601a      	str	r2, [r3, #0]
 8006296:	0641      	lsls	r1, r0, #25
 8006298:	d5f1      	bpl.n	800627e <_printf_i+0x8a>
 800629a:	b22d      	sxth	r5, r5
 800629c:	e7ef      	b.n	800627e <_printf_i+0x8a>
 800629e:	680d      	ldr	r5, [r1, #0]
 80062a0:	6819      	ldr	r1, [r3, #0]
 80062a2:	1d08      	adds	r0, r1, #4
 80062a4:	6018      	str	r0, [r3, #0]
 80062a6:	062e      	lsls	r6, r5, #24
 80062a8:	d501      	bpl.n	80062ae <_printf_i+0xba>
 80062aa:	680d      	ldr	r5, [r1, #0]
 80062ac:	e003      	b.n	80062b6 <_printf_i+0xc2>
 80062ae:	066d      	lsls	r5, r5, #25
 80062b0:	d5fb      	bpl.n	80062aa <_printf_i+0xb6>
 80062b2:	680d      	ldr	r5, [r1, #0]
 80062b4:	b2ad      	uxth	r5, r5
 80062b6:	4b56      	ldr	r3, [pc, #344]	; (8006410 <_printf_i+0x21c>)
 80062b8:	2708      	movs	r7, #8
 80062ba:	9303      	str	r3, [sp, #12]
 80062bc:	2a6f      	cmp	r2, #111	; 0x6f
 80062be:	d000      	beq.n	80062c2 <_printf_i+0xce>
 80062c0:	3702      	adds	r7, #2
 80062c2:	0023      	movs	r3, r4
 80062c4:	2200      	movs	r2, #0
 80062c6:	3343      	adds	r3, #67	; 0x43
 80062c8:	701a      	strb	r2, [r3, #0]
 80062ca:	6863      	ldr	r3, [r4, #4]
 80062cc:	60a3      	str	r3, [r4, #8]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	db03      	blt.n	80062da <_printf_i+0xe6>
 80062d2:	2204      	movs	r2, #4
 80062d4:	6821      	ldr	r1, [r4, #0]
 80062d6:	4391      	bics	r1, r2
 80062d8:	6021      	str	r1, [r4, #0]
 80062da:	2d00      	cmp	r5, #0
 80062dc:	d102      	bne.n	80062e4 <_printf_i+0xf0>
 80062de:	9e04      	ldr	r6, [sp, #16]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00c      	beq.n	80062fe <_printf_i+0x10a>
 80062e4:	9e04      	ldr	r6, [sp, #16]
 80062e6:	0028      	movs	r0, r5
 80062e8:	0039      	movs	r1, r7
 80062ea:	f7f9 ff9d 	bl	8000228 <__aeabi_uidivmod>
 80062ee:	9b03      	ldr	r3, [sp, #12]
 80062f0:	3e01      	subs	r6, #1
 80062f2:	5c5b      	ldrb	r3, [r3, r1]
 80062f4:	7033      	strb	r3, [r6, #0]
 80062f6:	002b      	movs	r3, r5
 80062f8:	0005      	movs	r5, r0
 80062fa:	429f      	cmp	r7, r3
 80062fc:	d9f3      	bls.n	80062e6 <_printf_i+0xf2>
 80062fe:	2f08      	cmp	r7, #8
 8006300:	d109      	bne.n	8006316 <_printf_i+0x122>
 8006302:	6823      	ldr	r3, [r4, #0]
 8006304:	07db      	lsls	r3, r3, #31
 8006306:	d506      	bpl.n	8006316 <_printf_i+0x122>
 8006308:	6863      	ldr	r3, [r4, #4]
 800630a:	6922      	ldr	r2, [r4, #16]
 800630c:	4293      	cmp	r3, r2
 800630e:	dc02      	bgt.n	8006316 <_printf_i+0x122>
 8006310:	2330      	movs	r3, #48	; 0x30
 8006312:	3e01      	subs	r6, #1
 8006314:	7033      	strb	r3, [r6, #0]
 8006316:	9b04      	ldr	r3, [sp, #16]
 8006318:	1b9b      	subs	r3, r3, r6
 800631a:	6123      	str	r3, [r4, #16]
 800631c:	9b07      	ldr	r3, [sp, #28]
 800631e:	0021      	movs	r1, r4
 8006320:	9300      	str	r3, [sp, #0]
 8006322:	9805      	ldr	r0, [sp, #20]
 8006324:	9b06      	ldr	r3, [sp, #24]
 8006326:	aa09      	add	r2, sp, #36	; 0x24
 8006328:	f7ff fef4 	bl	8006114 <_printf_common>
 800632c:	1c43      	adds	r3, r0, #1
 800632e:	d14c      	bne.n	80063ca <_printf_i+0x1d6>
 8006330:	2001      	movs	r0, #1
 8006332:	4240      	negs	r0, r0
 8006334:	b00b      	add	sp, #44	; 0x2c
 8006336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006338:	3145      	adds	r1, #69	; 0x45
 800633a:	700a      	strb	r2, [r1, #0]
 800633c:	4a34      	ldr	r2, [pc, #208]	; (8006410 <_printf_i+0x21c>)
 800633e:	9203      	str	r2, [sp, #12]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	6821      	ldr	r1, [r4, #0]
 8006344:	ca20      	ldmia	r2!, {r5}
 8006346:	601a      	str	r2, [r3, #0]
 8006348:	0608      	lsls	r0, r1, #24
 800634a:	d516      	bpl.n	800637a <_printf_i+0x186>
 800634c:	07cb      	lsls	r3, r1, #31
 800634e:	d502      	bpl.n	8006356 <_printf_i+0x162>
 8006350:	2320      	movs	r3, #32
 8006352:	4319      	orrs	r1, r3
 8006354:	6021      	str	r1, [r4, #0]
 8006356:	2710      	movs	r7, #16
 8006358:	2d00      	cmp	r5, #0
 800635a:	d1b2      	bne.n	80062c2 <_printf_i+0xce>
 800635c:	2320      	movs	r3, #32
 800635e:	6822      	ldr	r2, [r4, #0]
 8006360:	439a      	bics	r2, r3
 8006362:	6022      	str	r2, [r4, #0]
 8006364:	e7ad      	b.n	80062c2 <_printf_i+0xce>
 8006366:	2220      	movs	r2, #32
 8006368:	6809      	ldr	r1, [r1, #0]
 800636a:	430a      	orrs	r2, r1
 800636c:	6022      	str	r2, [r4, #0]
 800636e:	0022      	movs	r2, r4
 8006370:	2178      	movs	r1, #120	; 0x78
 8006372:	3245      	adds	r2, #69	; 0x45
 8006374:	7011      	strb	r1, [r2, #0]
 8006376:	4a27      	ldr	r2, [pc, #156]	; (8006414 <_printf_i+0x220>)
 8006378:	e7e1      	b.n	800633e <_printf_i+0x14a>
 800637a:	0648      	lsls	r0, r1, #25
 800637c:	d5e6      	bpl.n	800634c <_printf_i+0x158>
 800637e:	b2ad      	uxth	r5, r5
 8006380:	e7e4      	b.n	800634c <_printf_i+0x158>
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	680d      	ldr	r5, [r1, #0]
 8006386:	1d10      	adds	r0, r2, #4
 8006388:	6949      	ldr	r1, [r1, #20]
 800638a:	6018      	str	r0, [r3, #0]
 800638c:	6813      	ldr	r3, [r2, #0]
 800638e:	062e      	lsls	r6, r5, #24
 8006390:	d501      	bpl.n	8006396 <_printf_i+0x1a2>
 8006392:	6019      	str	r1, [r3, #0]
 8006394:	e002      	b.n	800639c <_printf_i+0x1a8>
 8006396:	066d      	lsls	r5, r5, #25
 8006398:	d5fb      	bpl.n	8006392 <_printf_i+0x19e>
 800639a:	8019      	strh	r1, [r3, #0]
 800639c:	2300      	movs	r3, #0
 800639e:	9e04      	ldr	r6, [sp, #16]
 80063a0:	6123      	str	r3, [r4, #16]
 80063a2:	e7bb      	b.n	800631c <_printf_i+0x128>
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	1d11      	adds	r1, r2, #4
 80063a8:	6019      	str	r1, [r3, #0]
 80063aa:	6816      	ldr	r6, [r2, #0]
 80063ac:	2100      	movs	r1, #0
 80063ae:	0030      	movs	r0, r6
 80063b0:	6862      	ldr	r2, [r4, #4]
 80063b2:	f000 f8ed 	bl	8006590 <memchr>
 80063b6:	2800      	cmp	r0, #0
 80063b8:	d001      	beq.n	80063be <_printf_i+0x1ca>
 80063ba:	1b80      	subs	r0, r0, r6
 80063bc:	6060      	str	r0, [r4, #4]
 80063be:	6863      	ldr	r3, [r4, #4]
 80063c0:	6123      	str	r3, [r4, #16]
 80063c2:	2300      	movs	r3, #0
 80063c4:	9a04      	ldr	r2, [sp, #16]
 80063c6:	7013      	strb	r3, [r2, #0]
 80063c8:	e7a8      	b.n	800631c <_printf_i+0x128>
 80063ca:	6923      	ldr	r3, [r4, #16]
 80063cc:	0032      	movs	r2, r6
 80063ce:	9906      	ldr	r1, [sp, #24]
 80063d0:	9805      	ldr	r0, [sp, #20]
 80063d2:	9d07      	ldr	r5, [sp, #28]
 80063d4:	47a8      	blx	r5
 80063d6:	1c43      	adds	r3, r0, #1
 80063d8:	d0aa      	beq.n	8006330 <_printf_i+0x13c>
 80063da:	6823      	ldr	r3, [r4, #0]
 80063dc:	079b      	lsls	r3, r3, #30
 80063de:	d415      	bmi.n	800640c <_printf_i+0x218>
 80063e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063e2:	68e0      	ldr	r0, [r4, #12]
 80063e4:	4298      	cmp	r0, r3
 80063e6:	daa5      	bge.n	8006334 <_printf_i+0x140>
 80063e8:	0018      	movs	r0, r3
 80063ea:	e7a3      	b.n	8006334 <_printf_i+0x140>
 80063ec:	0022      	movs	r2, r4
 80063ee:	2301      	movs	r3, #1
 80063f0:	9906      	ldr	r1, [sp, #24]
 80063f2:	9805      	ldr	r0, [sp, #20]
 80063f4:	9e07      	ldr	r6, [sp, #28]
 80063f6:	3219      	adds	r2, #25
 80063f8:	47b0      	blx	r6
 80063fa:	1c43      	adds	r3, r0, #1
 80063fc:	d098      	beq.n	8006330 <_printf_i+0x13c>
 80063fe:	3501      	adds	r5, #1
 8006400:	68e3      	ldr	r3, [r4, #12]
 8006402:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006404:	1a9b      	subs	r3, r3, r2
 8006406:	42ab      	cmp	r3, r5
 8006408:	dcf0      	bgt.n	80063ec <_printf_i+0x1f8>
 800640a:	e7e9      	b.n	80063e0 <_printf_i+0x1ec>
 800640c:	2500      	movs	r5, #0
 800640e:	e7f7      	b.n	8006400 <_printf_i+0x20c>
 8006410:	080067e5 	.word	0x080067e5
 8006414:	080067f6 	.word	0x080067f6

08006418 <_sbrk_r>:
 8006418:	2300      	movs	r3, #0
 800641a:	b570      	push	{r4, r5, r6, lr}
 800641c:	4d06      	ldr	r5, [pc, #24]	; (8006438 <_sbrk_r+0x20>)
 800641e:	0004      	movs	r4, r0
 8006420:	0008      	movs	r0, r1
 8006422:	602b      	str	r3, [r5, #0]
 8006424:	f000 f8e4 	bl	80065f0 <_sbrk>
 8006428:	1c43      	adds	r3, r0, #1
 800642a:	d103      	bne.n	8006434 <_sbrk_r+0x1c>
 800642c:	682b      	ldr	r3, [r5, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d000      	beq.n	8006434 <_sbrk_r+0x1c>
 8006432:	6023      	str	r3, [r4, #0]
 8006434:	bd70      	pop	{r4, r5, r6, pc}
 8006436:	46c0      	nop			; (mov r8, r8)
 8006438:	20001fc0 	.word	0x20001fc0

0800643c <__sread>:
 800643c:	b570      	push	{r4, r5, r6, lr}
 800643e:	000c      	movs	r4, r1
 8006440:	250e      	movs	r5, #14
 8006442:	5f49      	ldrsh	r1, [r1, r5]
 8006444:	f000 f8c0 	bl	80065c8 <_read_r>
 8006448:	2800      	cmp	r0, #0
 800644a:	db03      	blt.n	8006454 <__sread+0x18>
 800644c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800644e:	181b      	adds	r3, r3, r0
 8006450:	6563      	str	r3, [r4, #84]	; 0x54
 8006452:	bd70      	pop	{r4, r5, r6, pc}
 8006454:	89a3      	ldrh	r3, [r4, #12]
 8006456:	4a02      	ldr	r2, [pc, #8]	; (8006460 <__sread+0x24>)
 8006458:	4013      	ands	r3, r2
 800645a:	81a3      	strh	r3, [r4, #12]
 800645c:	e7f9      	b.n	8006452 <__sread+0x16>
 800645e:	46c0      	nop			; (mov r8, r8)
 8006460:	ffffefff 	.word	0xffffefff

08006464 <__swrite>:
 8006464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006466:	001f      	movs	r7, r3
 8006468:	898b      	ldrh	r3, [r1, #12]
 800646a:	0005      	movs	r5, r0
 800646c:	000c      	movs	r4, r1
 800646e:	0016      	movs	r6, r2
 8006470:	05db      	lsls	r3, r3, #23
 8006472:	d505      	bpl.n	8006480 <__swrite+0x1c>
 8006474:	230e      	movs	r3, #14
 8006476:	5ec9      	ldrsh	r1, [r1, r3]
 8006478:	2200      	movs	r2, #0
 800647a:	2302      	movs	r3, #2
 800647c:	f000 f874 	bl	8006568 <_lseek_r>
 8006480:	89a3      	ldrh	r3, [r4, #12]
 8006482:	4a05      	ldr	r2, [pc, #20]	; (8006498 <__swrite+0x34>)
 8006484:	0028      	movs	r0, r5
 8006486:	4013      	ands	r3, r2
 8006488:	81a3      	strh	r3, [r4, #12]
 800648a:	0032      	movs	r2, r6
 800648c:	230e      	movs	r3, #14
 800648e:	5ee1      	ldrsh	r1, [r4, r3]
 8006490:	003b      	movs	r3, r7
 8006492:	f000 f81f 	bl	80064d4 <_write_r>
 8006496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006498:	ffffefff 	.word	0xffffefff

0800649c <__sseek>:
 800649c:	b570      	push	{r4, r5, r6, lr}
 800649e:	000c      	movs	r4, r1
 80064a0:	250e      	movs	r5, #14
 80064a2:	5f49      	ldrsh	r1, [r1, r5]
 80064a4:	f000 f860 	bl	8006568 <_lseek_r>
 80064a8:	89a3      	ldrh	r3, [r4, #12]
 80064aa:	1c42      	adds	r2, r0, #1
 80064ac:	d103      	bne.n	80064b6 <__sseek+0x1a>
 80064ae:	4a05      	ldr	r2, [pc, #20]	; (80064c4 <__sseek+0x28>)
 80064b0:	4013      	ands	r3, r2
 80064b2:	81a3      	strh	r3, [r4, #12]
 80064b4:	bd70      	pop	{r4, r5, r6, pc}
 80064b6:	2280      	movs	r2, #128	; 0x80
 80064b8:	0152      	lsls	r2, r2, #5
 80064ba:	4313      	orrs	r3, r2
 80064bc:	81a3      	strh	r3, [r4, #12]
 80064be:	6560      	str	r0, [r4, #84]	; 0x54
 80064c0:	e7f8      	b.n	80064b4 <__sseek+0x18>
 80064c2:	46c0      	nop			; (mov r8, r8)
 80064c4:	ffffefff 	.word	0xffffefff

080064c8 <__sclose>:
 80064c8:	b510      	push	{r4, lr}
 80064ca:	230e      	movs	r3, #14
 80064cc:	5ec9      	ldrsh	r1, [r1, r3]
 80064ce:	f000 f815 	bl	80064fc <_close_r>
 80064d2:	bd10      	pop	{r4, pc}

080064d4 <_write_r>:
 80064d4:	b570      	push	{r4, r5, r6, lr}
 80064d6:	0004      	movs	r4, r0
 80064d8:	0008      	movs	r0, r1
 80064da:	0011      	movs	r1, r2
 80064dc:	001a      	movs	r2, r3
 80064de:	2300      	movs	r3, #0
 80064e0:	4d05      	ldr	r5, [pc, #20]	; (80064f8 <_write_r+0x24>)
 80064e2:	602b      	str	r3, [r5, #0]
 80064e4:	f7fa fc6b 	bl	8000dbe <_write>
 80064e8:	1c43      	adds	r3, r0, #1
 80064ea:	d103      	bne.n	80064f4 <_write_r+0x20>
 80064ec:	682b      	ldr	r3, [r5, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d000      	beq.n	80064f4 <_write_r+0x20>
 80064f2:	6023      	str	r3, [r4, #0]
 80064f4:	bd70      	pop	{r4, r5, r6, pc}
 80064f6:	46c0      	nop			; (mov r8, r8)
 80064f8:	20001fc0 	.word	0x20001fc0

080064fc <_close_r>:
 80064fc:	2300      	movs	r3, #0
 80064fe:	b570      	push	{r4, r5, r6, lr}
 8006500:	4d06      	ldr	r5, [pc, #24]	; (800651c <_close_r+0x20>)
 8006502:	0004      	movs	r4, r0
 8006504:	0008      	movs	r0, r1
 8006506:	602b      	str	r3, [r5, #0]
 8006508:	f7fa fc75 	bl	8000df6 <_close>
 800650c:	1c43      	adds	r3, r0, #1
 800650e:	d103      	bne.n	8006518 <_close_r+0x1c>
 8006510:	682b      	ldr	r3, [r5, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d000      	beq.n	8006518 <_close_r+0x1c>
 8006516:	6023      	str	r3, [r4, #0]
 8006518:	bd70      	pop	{r4, r5, r6, pc}
 800651a:	46c0      	nop			; (mov r8, r8)
 800651c:	20001fc0 	.word	0x20001fc0

08006520 <_fstat_r>:
 8006520:	2300      	movs	r3, #0
 8006522:	b570      	push	{r4, r5, r6, lr}
 8006524:	4d06      	ldr	r5, [pc, #24]	; (8006540 <_fstat_r+0x20>)
 8006526:	0004      	movs	r4, r0
 8006528:	0008      	movs	r0, r1
 800652a:	0011      	movs	r1, r2
 800652c:	602b      	str	r3, [r5, #0]
 800652e:	f7fa fc6c 	bl	8000e0a <_fstat>
 8006532:	1c43      	adds	r3, r0, #1
 8006534:	d103      	bne.n	800653e <_fstat_r+0x1e>
 8006536:	682b      	ldr	r3, [r5, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d000      	beq.n	800653e <_fstat_r+0x1e>
 800653c:	6023      	str	r3, [r4, #0]
 800653e:	bd70      	pop	{r4, r5, r6, pc}
 8006540:	20001fc0 	.word	0x20001fc0

08006544 <_isatty_r>:
 8006544:	2300      	movs	r3, #0
 8006546:	b570      	push	{r4, r5, r6, lr}
 8006548:	4d06      	ldr	r5, [pc, #24]	; (8006564 <_isatty_r+0x20>)
 800654a:	0004      	movs	r4, r0
 800654c:	0008      	movs	r0, r1
 800654e:	602b      	str	r3, [r5, #0]
 8006550:	f7fa fc69 	bl	8000e26 <_isatty>
 8006554:	1c43      	adds	r3, r0, #1
 8006556:	d103      	bne.n	8006560 <_isatty_r+0x1c>
 8006558:	682b      	ldr	r3, [r5, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d000      	beq.n	8006560 <_isatty_r+0x1c>
 800655e:	6023      	str	r3, [r4, #0]
 8006560:	bd70      	pop	{r4, r5, r6, pc}
 8006562:	46c0      	nop			; (mov r8, r8)
 8006564:	20001fc0 	.word	0x20001fc0

08006568 <_lseek_r>:
 8006568:	b570      	push	{r4, r5, r6, lr}
 800656a:	0004      	movs	r4, r0
 800656c:	0008      	movs	r0, r1
 800656e:	0011      	movs	r1, r2
 8006570:	001a      	movs	r2, r3
 8006572:	2300      	movs	r3, #0
 8006574:	4d05      	ldr	r5, [pc, #20]	; (800658c <_lseek_r+0x24>)
 8006576:	602b      	str	r3, [r5, #0]
 8006578:	f7fa fc5e 	bl	8000e38 <_lseek>
 800657c:	1c43      	adds	r3, r0, #1
 800657e:	d103      	bne.n	8006588 <_lseek_r+0x20>
 8006580:	682b      	ldr	r3, [r5, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d000      	beq.n	8006588 <_lseek_r+0x20>
 8006586:	6023      	str	r3, [r4, #0]
 8006588:	bd70      	pop	{r4, r5, r6, pc}
 800658a:	46c0      	nop			; (mov r8, r8)
 800658c:	20001fc0 	.word	0x20001fc0

08006590 <memchr>:
 8006590:	b2c9      	uxtb	r1, r1
 8006592:	1882      	adds	r2, r0, r2
 8006594:	4290      	cmp	r0, r2
 8006596:	d101      	bne.n	800659c <memchr+0xc>
 8006598:	2000      	movs	r0, #0
 800659a:	4770      	bx	lr
 800659c:	7803      	ldrb	r3, [r0, #0]
 800659e:	428b      	cmp	r3, r1
 80065a0:	d0fb      	beq.n	800659a <memchr+0xa>
 80065a2:	3001      	adds	r0, #1
 80065a4:	e7f6      	b.n	8006594 <memchr+0x4>
	...

080065a8 <__malloc_lock>:
 80065a8:	b510      	push	{r4, lr}
 80065aa:	4802      	ldr	r0, [pc, #8]	; (80065b4 <__malloc_lock+0xc>)
 80065ac:	f7ff faff 	bl	8005bae <__retarget_lock_acquire_recursive>
 80065b0:	bd10      	pop	{r4, pc}
 80065b2:	46c0      	nop			; (mov r8, r8)
 80065b4:	20001fb4 	.word	0x20001fb4

080065b8 <__malloc_unlock>:
 80065b8:	b510      	push	{r4, lr}
 80065ba:	4802      	ldr	r0, [pc, #8]	; (80065c4 <__malloc_unlock+0xc>)
 80065bc:	f7ff faf8 	bl	8005bb0 <__retarget_lock_release_recursive>
 80065c0:	bd10      	pop	{r4, pc}
 80065c2:	46c0      	nop			; (mov r8, r8)
 80065c4:	20001fb4 	.word	0x20001fb4

080065c8 <_read_r>:
 80065c8:	b570      	push	{r4, r5, r6, lr}
 80065ca:	0004      	movs	r4, r0
 80065cc:	0008      	movs	r0, r1
 80065ce:	0011      	movs	r1, r2
 80065d0:	001a      	movs	r2, r3
 80065d2:	2300      	movs	r3, #0
 80065d4:	4d05      	ldr	r5, [pc, #20]	; (80065ec <_read_r+0x24>)
 80065d6:	602b      	str	r3, [r5, #0]
 80065d8:	f7fa fbd4 	bl	8000d84 <_read>
 80065dc:	1c43      	adds	r3, r0, #1
 80065de:	d103      	bne.n	80065e8 <_read_r+0x20>
 80065e0:	682b      	ldr	r3, [r5, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d000      	beq.n	80065e8 <_read_r+0x20>
 80065e6:	6023      	str	r3, [r4, #0]
 80065e8:	bd70      	pop	{r4, r5, r6, pc}
 80065ea:	46c0      	nop			; (mov r8, r8)
 80065ec:	20001fc0 	.word	0x20001fc0

080065f0 <_sbrk>:
 80065f0:	4a05      	ldr	r2, [pc, #20]	; (8006608 <_sbrk+0x18>)
 80065f2:	0003      	movs	r3, r0
 80065f4:	6811      	ldr	r1, [r2, #0]
 80065f6:	2900      	cmp	r1, #0
 80065f8:	d101      	bne.n	80065fe <_sbrk+0xe>
 80065fa:	4904      	ldr	r1, [pc, #16]	; (800660c <_sbrk+0x1c>)
 80065fc:	6011      	str	r1, [r2, #0]
 80065fe:	6810      	ldr	r0, [r2, #0]
 8006600:	18c3      	adds	r3, r0, r3
 8006602:	6013      	str	r3, [r2, #0]
 8006604:	4770      	bx	lr
 8006606:	46c0      	nop			; (mov r8, r8)
 8006608:	20001fc4 	.word	0x20001fc4
 800660c:	20001fc8 	.word	0x20001fc8

08006610 <_init>:
 8006610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006612:	46c0      	nop			; (mov r8, r8)
 8006614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006616:	bc08      	pop	{r3}
 8006618:	469e      	mov	lr, r3
 800661a:	4770      	bx	lr

0800661c <_fini>:
 800661c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800661e:	46c0      	nop			; (mov r8, r8)
 8006620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006622:	bc08      	pop	{r3}
 8006624:	469e      	mov	lr, r3
 8006626:	4770      	bx	lr
