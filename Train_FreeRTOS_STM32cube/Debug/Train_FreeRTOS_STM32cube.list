
Train_FreeRTOS_STM32cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002908  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  080029c8  080029c8  000129c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a84  08002a84  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002a84  08002a84  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a84  08002a84  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a84  08002a84  00012a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a88  08002a88  00012a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002a8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d7c  20000010  08002a9c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d8c  08002a9c  00021d8c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af5b  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001db5  00000000  00000000  0002af93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c90  00000000  00000000  0002cd48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b98  00000000  00000000  0002d9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c135  00000000  00000000  0002e570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc86  00000000  00000000  0004a6a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab465  00000000  00000000  0005832b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00103790  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c30  00000000  00000000  001037e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080029b0 	.word	0x080029b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080029b0 	.word	0x080029b0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	b0a9      	sub	sp, #164	; 0xa4
 8000224:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fadf 	bl	80007e8 <HAL_Init>

  /* USER CODE BEGIN Init */
  //Transitions
  MEF_Transition OFF_TRANSITIONS[NUMBER_TRANSITIONS_OFF] = {
 800022a:	216c      	movs	r1, #108	; 0x6c
 800022c:	187b      	adds	r3, r7, r1
 800022e:	4a44      	ldr	r2, [pc, #272]	; (8000340 <main+0x120>)
 8000230:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000232:	c331      	stmia	r3!, {r0, r4, r5}
 8000234:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000236:	c331      	stmia	r3!, {r0, r4, r5}
		  {evaluate_Event_Off_Off, OFF_STATE},
		  {evaluate_Event_Off_to_On, ON_STATE},
		  {evaluate_Event_Off_to_Emergency, EMERGENCY_STATE}
  };
  MEF_Transition ON_TRANSITIONS[NUMBER_TRANSITIONS_ON] = {
 8000238:	2354      	movs	r3, #84	; 0x54
 800023a:	18fb      	adds	r3, r7, r3
 800023c:	4a41      	ldr	r2, [pc, #260]	; (8000344 <main+0x124>)
 800023e:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000240:	c331      	stmia	r3!, {r0, r4, r5}
 8000242:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000244:	c331      	stmia	r3!, {r0, r4, r5}
		  {evaluate_Event_On_On, ON_STATE},
		  {evaluate_Event_On_to_Off, OFF_STATE},
		  {evaluate_Event_On_to_Emergency, EMERGENCY_STATE}
  };
  MEF_Transition EMERGENCY_TRANSITIONS[NUMBER_TRANSITIONS_EMERGENCY] = {
 8000246:	233c      	movs	r3, #60	; 0x3c
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	4a3f      	ldr	r2, [pc, #252]	; (8000348 <main+0x128>)
 800024c:	ca31      	ldmia	r2!, {r0, r4, r5}
 800024e:	c331      	stmia	r3!, {r0, r4, r5}
 8000250:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000252:	c331      	stmia	r3!, {r0, r4, r5}
		  {evaluate_Event_Emergency_Emergency, EMERGENCY_STATE},
		  {evaluate_Event_Emergency_to_Off, OFF_STATE},
		  {evaluate_Event_Emergency_to_On, ON_STATE}
  };
  //States
  MEF_State MEF1_STATES_ARRAY[NUMBER_STATES] = {
 8000254:	200c      	movs	r0, #12
 8000256:	183b      	adds	r3, r7, r0
 8000258:	4a3c      	ldr	r2, [pc, #240]	; (800034c <main+0x12c>)
 800025a:	ca70      	ldmia	r2!, {r4, r5, r6}
 800025c:	c370      	stmia	r3!, {r4, r5, r6}
 800025e:	ca70      	ldmia	r2!, {r4, r5, r6}
 8000260:	c370      	stmia	r3!, {r4, r5, r6}
 8000262:	ca70      	ldmia	r2!, {r4, r5, r6}
 8000264:	c370      	stmia	r3!, {r4, r5, r6}
 8000266:	ca70      	ldmia	r2!, {r4, r5, r6}
 8000268:	c370      	stmia	r3!, {r4, r5, r6}
		  {onEntry_Off, during_Off, onExit_Off, NUMBER_TRANSITIONS_OFF},
		  {onEntry_On, during_On, onExit_On, NUMBER_TRANSITIONS_ON},
		  {onEntry_Emergency, during_Emergency, onExit_Emergency, NUMBER_TRANSITIONS_EMERGENCY}
  };
  //FSM instances
  MEF_MEF MEF1 = {FSM_ACTIVE, OFF_STATE, NUMBER_STATES, STATE_NOT_CHANGED, OFF_TRANSITIONS, MEF1_STATES_ARRAY};
 800026a:	003b      	movs	r3, r7
 800026c:	2201      	movs	r2, #1
 800026e:	701a      	strb	r2, [r3, #0]
 8000270:	003b      	movs	r3, r7
 8000272:	2200      	movs	r2, #0
 8000274:	705a      	strb	r2, [r3, #1]
 8000276:	003b      	movs	r3, r7
 8000278:	2203      	movs	r2, #3
 800027a:	709a      	strb	r2, [r3, #2]
 800027c:	003b      	movs	r3, r7
 800027e:	2200      	movs	r2, #0
 8000280:	70da      	strb	r2, [r3, #3]
 8000282:	003b      	movs	r3, r7
 8000284:	187a      	adds	r2, r7, r1
 8000286:	605a      	str	r2, [r3, #4]
 8000288:	003b      	movs	r3, r7
 800028a:	183a      	adds	r2, r7, r0
 800028c:	609a      	str	r2, [r3, #8]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028e:	f000 f869 	bl	8000364 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000292:	f000 f8a3 	bl	80003dc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  task_Status = xTaskCreate(FSM_task_handler, "FSMcontrol", 200, NULL, 2, &FSM_taskPointer);
 8000296:	492e      	ldr	r1, [pc, #184]	; (8000350 <main+0x130>)
 8000298:	482e      	ldr	r0, [pc, #184]	; (8000354 <main+0x134>)
 800029a:	2390      	movs	r3, #144	; 0x90
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	9301      	str	r3, [sp, #4]
 80002a0:	2302      	movs	r3, #2
 80002a2:	9300      	str	r3, [sp, #0]
 80002a4:	2300      	movs	r3, #0
 80002a6:	22c8      	movs	r2, #200	; 0xc8
 80002a8:	f001 fcd5 	bl	8001c56 <xTaskCreate>
 80002ac:	0003      	movs	r3, r0
 80002ae:	2294      	movs	r2, #148	; 0x94
 80002b0:	18b9      	adds	r1, r7, r2
 80002b2:	600b      	str	r3, [r1, #0]
  configASSERT(task_Status == pdPASS); //if false, then infinite loop. good for debugging
 80002b4:	18bb      	adds	r3, r7, r2
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	2b01      	cmp	r3, #1
 80002ba:	d001      	beq.n	80002c0 <main+0xa0>
 80002bc:	b672      	cpsid	i
 80002be:	e7fe      	b.n	80002be <main+0x9e>
  task_Status = xTaskCreate(Motor_Control_task_handler, "FSMcontrol", 200, NULL, 3, &Motor_Control_taskPointer);
 80002c0:	4923      	ldr	r1, [pc, #140]	; (8000350 <main+0x130>)
 80002c2:	4825      	ldr	r0, [pc, #148]	; (8000358 <main+0x138>)
 80002c4:	238c      	movs	r3, #140	; 0x8c
 80002c6:	18fb      	adds	r3, r7, r3
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2303      	movs	r3, #3
 80002cc:	9300      	str	r3, [sp, #0]
 80002ce:	2300      	movs	r3, #0
 80002d0:	22c8      	movs	r2, #200	; 0xc8
 80002d2:	f001 fcc0 	bl	8001c56 <xTaskCreate>
 80002d6:	0003      	movs	r3, r0
 80002d8:	2294      	movs	r2, #148	; 0x94
 80002da:	18b9      	adds	r1, r7, r2
 80002dc:	600b      	str	r3, [r1, #0]
  configASSERT(task_Status == pdPASS); //if false, then infinite loop. good for debugging
 80002de:	18bb      	adds	r3, r7, r2
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	d001      	beq.n	80002ea <main+0xca>
 80002e6:	b672      	cpsid	i
 80002e8:	e7fe      	b.n	80002e8 <main+0xc8>
  task_Status = xTaskCreate(Read_Temperature_task_handler, "FSMcontrol", 200, NULL, 2, &Read_Temperature_taskPointer);
 80002ea:	4919      	ldr	r1, [pc, #100]	; (8000350 <main+0x130>)
 80002ec:	481b      	ldr	r0, [pc, #108]	; (800035c <main+0x13c>)
 80002ee:	2388      	movs	r3, #136	; 0x88
 80002f0:	18fb      	adds	r3, r7, r3
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	2302      	movs	r3, #2
 80002f6:	9300      	str	r3, [sp, #0]
 80002f8:	2300      	movs	r3, #0
 80002fa:	22c8      	movs	r2, #200	; 0xc8
 80002fc:	f001 fcab 	bl	8001c56 <xTaskCreate>
 8000300:	0003      	movs	r3, r0
 8000302:	2294      	movs	r2, #148	; 0x94
 8000304:	18b9      	adds	r1, r7, r2
 8000306:	600b      	str	r3, [r1, #0]
  configASSERT(task_Status == pdPASS); //if false, then infinite loop. good for debugging
 8000308:	18bb      	adds	r3, r7, r2
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	2b01      	cmp	r3, #1
 800030e:	d001      	beq.n	8000314 <main+0xf4>
 8000310:	b672      	cpsid	i
 8000312:	e7fe      	b.n	8000312 <main+0xf2>
  task_Status = xTaskCreate(LCD_Arduino_task_handler, "FSMcontrol", 200, NULL, 1, &LCD_Arduino_taskPointer);
 8000314:	490e      	ldr	r1, [pc, #56]	; (8000350 <main+0x130>)
 8000316:	4812      	ldr	r0, [pc, #72]	; (8000360 <main+0x140>)
 8000318:	2384      	movs	r3, #132	; 0x84
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	9300      	str	r3, [sp, #0]
 8000322:	2300      	movs	r3, #0
 8000324:	22c8      	movs	r2, #200	; 0xc8
 8000326:	f001 fc96 	bl	8001c56 <xTaskCreate>
 800032a:	0003      	movs	r3, r0
 800032c:	2294      	movs	r2, #148	; 0x94
 800032e:	18b9      	adds	r1, r7, r2
 8000330:	600b      	str	r3, [r1, #0]
  configASSERT(task_Status == pdPASS); //if false, then infinite loop. good for debugging
 8000332:	18bb      	adds	r3, r7, r2
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	2b01      	cmp	r3, #1
 8000338:	d001      	beq.n	800033e <main+0x11e>
 800033a:	b672      	cpsid	i
 800033c:	e7fe      	b.n	800033c <main+0x11c>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800033e:	e7fe      	b.n	800033e <main+0x11e>
 8000340:	080029d4 	.word	0x080029d4
 8000344:	080029ec 	.word	0x080029ec
 8000348:	08002a04 	.word	0x08002a04
 800034c:	08002a1c 	.word	0x08002a1c
 8000350:	080029c8 	.word	0x080029c8
 8000354:	080005a3 	.word	0x080005a3
 8000358:	080005b3 	.word	0x080005b3
 800035c:	080005c3 	.word	0x080005c3
 8000360:	080005d3 	.word	0x080005d3

08000364 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000364:	b590      	push	{r4, r7, lr}
 8000366:	b093      	sub	sp, #76	; 0x4c
 8000368:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800036a:	2414      	movs	r4, #20
 800036c:	193b      	adds	r3, r7, r4
 800036e:	0018      	movs	r0, r3
 8000370:	2334      	movs	r3, #52	; 0x34
 8000372:	001a      	movs	r2, r3
 8000374:	2100      	movs	r1, #0
 8000376:	f002 fb13 	bl	80029a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800037a:	1d3b      	adds	r3, r7, #4
 800037c:	0018      	movs	r0, r3
 800037e:	2310      	movs	r3, #16
 8000380:	001a      	movs	r2, r3
 8000382:	2100      	movs	r1, #0
 8000384:	f002 fb0c 	bl	80029a0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000388:	193b      	adds	r3, r7, r4
 800038a:	2220      	movs	r2, #32
 800038c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800038e:	193b      	adds	r3, r7, r4
 8000390:	2201      	movs	r2, #1
 8000392:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000394:	193b      	adds	r3, r7, r4
 8000396:	2200      	movs	r2, #0
 8000398:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800039a:	193b      	adds	r3, r7, r4
 800039c:	0018      	movs	r0, r3
 800039e:	f000 fc97 	bl	8000cd0 <HAL_RCC_OscConfig>
 80003a2:	1e03      	subs	r3, r0, #0
 80003a4:	d001      	beq.n	80003aa <SystemClock_Config+0x46>
  {
    Error_Handler();
 80003a6:	f000 f92f 	bl	8000608 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	2207      	movs	r2, #7
 80003ae:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	2203      	movs	r2, #3
 80003b4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b6:	1d3b      	adds	r3, r7, #4
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003bc:	1d3b      	adds	r3, r7, #4
 80003be:	2200      	movs	r2, #0
 80003c0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003c2:	1d3b      	adds	r3, r7, #4
 80003c4:	2101      	movs	r1, #1
 80003c6:	0018      	movs	r0, r3
 80003c8:	f001 f808 	bl	80013dc <HAL_RCC_ClockConfig>
 80003cc:	1e03      	subs	r3, r0, #0
 80003ce:	d001      	beq.n	80003d4 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80003d0:	f000 f91a 	bl	8000608 <Error_Handler>
  }
}
 80003d4:	46c0      	nop			; (mov r8, r8)
 80003d6:	46bd      	mov	sp, r7
 80003d8:	b013      	add	sp, #76	; 0x4c
 80003da:	bd90      	pop	{r4, r7, pc}

080003dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003dc:	b590      	push	{r4, r7, lr}
 80003de:	b089      	sub	sp, #36	; 0x24
 80003e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e2:	240c      	movs	r4, #12
 80003e4:	193b      	adds	r3, r7, r4
 80003e6:	0018      	movs	r0, r3
 80003e8:	2314      	movs	r3, #20
 80003ea:	001a      	movs	r2, r3
 80003ec:	2100      	movs	r1, #0
 80003ee:	f002 fad7 	bl	80029a0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003f2:	4b38      	ldr	r3, [pc, #224]	; (80004d4 <MX_GPIO_Init+0xf8>)
 80003f4:	695a      	ldr	r2, [r3, #20]
 80003f6:	4b37      	ldr	r3, [pc, #220]	; (80004d4 <MX_GPIO_Init+0xf8>)
 80003f8:	2180      	movs	r1, #128	; 0x80
 80003fa:	0309      	lsls	r1, r1, #12
 80003fc:	430a      	orrs	r2, r1
 80003fe:	615a      	str	r2, [r3, #20]
 8000400:	4b34      	ldr	r3, [pc, #208]	; (80004d4 <MX_GPIO_Init+0xf8>)
 8000402:	695a      	ldr	r2, [r3, #20]
 8000404:	2380      	movs	r3, #128	; 0x80
 8000406:	031b      	lsls	r3, r3, #12
 8000408:	4013      	ands	r3, r2
 800040a:	60bb      	str	r3, [r7, #8]
 800040c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800040e:	4b31      	ldr	r3, [pc, #196]	; (80004d4 <MX_GPIO_Init+0xf8>)
 8000410:	695a      	ldr	r2, [r3, #20]
 8000412:	4b30      	ldr	r3, [pc, #192]	; (80004d4 <MX_GPIO_Init+0xf8>)
 8000414:	2180      	movs	r1, #128	; 0x80
 8000416:	03c9      	lsls	r1, r1, #15
 8000418:	430a      	orrs	r2, r1
 800041a:	615a      	str	r2, [r3, #20]
 800041c:	4b2d      	ldr	r3, [pc, #180]	; (80004d4 <MX_GPIO_Init+0xf8>)
 800041e:	695a      	ldr	r2, [r3, #20]
 8000420:	2380      	movs	r3, #128	; 0x80
 8000422:	03db      	lsls	r3, r3, #15
 8000424:	4013      	ands	r3, r2
 8000426:	607b      	str	r3, [r7, #4]
 8000428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800042a:	4b2a      	ldr	r3, [pc, #168]	; (80004d4 <MX_GPIO_Init+0xf8>)
 800042c:	695a      	ldr	r2, [r3, #20]
 800042e:	4b29      	ldr	r3, [pc, #164]	; (80004d4 <MX_GPIO_Init+0xf8>)
 8000430:	2180      	movs	r1, #128	; 0x80
 8000432:	0289      	lsls	r1, r1, #10
 8000434:	430a      	orrs	r2, r1
 8000436:	615a      	str	r2, [r3, #20]
 8000438:	4b26      	ldr	r3, [pc, #152]	; (80004d4 <MX_GPIO_Init+0xf8>)
 800043a:	695a      	ldr	r2, [r3, #20]
 800043c:	2380      	movs	r3, #128	; 0x80
 800043e:	029b      	lsls	r3, r3, #10
 8000440:	4013      	ands	r3, r2
 8000442:	603b      	str	r3, [r7, #0]
 8000444:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000446:	2390      	movs	r3, #144	; 0x90
 8000448:	05db      	lsls	r3, r3, #23
 800044a:	2200      	movs	r2, #0
 800044c:	2120      	movs	r1, #32
 800044e:	0018      	movs	r0, r3
 8000450:	f000 fc20 	bl	8000c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000454:	193b      	adds	r3, r7, r4
 8000456:	2280      	movs	r2, #128	; 0x80
 8000458:	0192      	lsls	r2, r2, #6
 800045a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800045c:	193b      	adds	r3, r7, r4
 800045e:	2284      	movs	r2, #132	; 0x84
 8000460:	0392      	lsls	r2, r2, #14
 8000462:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000464:	193b      	adds	r3, r7, r4
 8000466:	2200      	movs	r2, #0
 8000468:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800046a:	193b      	adds	r3, r7, r4
 800046c:	4a1a      	ldr	r2, [pc, #104]	; (80004d8 <MX_GPIO_Init+0xfc>)
 800046e:	0019      	movs	r1, r3
 8000470:	0010      	movs	r0, r2
 8000472:	f000 fa97 	bl	80009a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000476:	193b      	adds	r3, r7, r4
 8000478:	220c      	movs	r2, #12
 800047a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800047c:	193b      	adds	r3, r7, r4
 800047e:	2202      	movs	r2, #2
 8000480:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000482:	193b      	adds	r3, r7, r4
 8000484:	2200      	movs	r2, #0
 8000486:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000488:	193b      	adds	r3, r7, r4
 800048a:	2200      	movs	r2, #0
 800048c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800048e:	193b      	adds	r3, r7, r4
 8000490:	2201      	movs	r2, #1
 8000492:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000494:	193a      	adds	r2, r7, r4
 8000496:	2390      	movs	r3, #144	; 0x90
 8000498:	05db      	lsls	r3, r3, #23
 800049a:	0011      	movs	r1, r2
 800049c:	0018      	movs	r0, r3
 800049e:	f000 fa81 	bl	80009a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80004a2:	0021      	movs	r1, r4
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	2220      	movs	r2, #32
 80004a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	2201      	movs	r2, #1
 80004ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b0:	187b      	adds	r3, r7, r1
 80004b2:	2200      	movs	r2, #0
 80004b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b6:	187b      	adds	r3, r7, r1
 80004b8:	2200      	movs	r2, #0
 80004ba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80004bc:	187a      	adds	r2, r7, r1
 80004be:	2390      	movs	r3, #144	; 0x90
 80004c0:	05db      	lsls	r3, r3, #23
 80004c2:	0011      	movs	r1, r2
 80004c4:	0018      	movs	r0, r3
 80004c6:	f000 fa6d 	bl	80009a4 <HAL_GPIO_Init>

}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	46bd      	mov	sp, r7
 80004ce:	b009      	add	sp, #36	; 0x24
 80004d0:	bd90      	pop	{r4, r7, pc}
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	40021000 	.word	0x40021000
 80004d8:	48000800 	.word	0x48000800

080004dc <onEntry_Off>:

/* USER CODE BEGIN 4 */
// Related to states: onEntry, during, onExit
void onEntry_Off(){};
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
 80004e0:	46c0      	nop			; (mov r8, r8)
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}

080004e6 <during_Off>:
void during_Off(){};
 80004e6:	b580      	push	{r7, lr}
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <onExit_Off>:
void onExit_Off(){};
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	46c0      	nop			; (mov r8, r8)
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}

080004fa <onEntry_On>:
void onEntry_On(){};
 80004fa:	b580      	push	{r7, lr}
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}

08000504 <during_On>:
void during_On(){};
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
 8000508:	46c0      	nop			; (mov r8, r8)
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}

0800050e <onExit_On>:
void onExit_On(){};
 800050e:	b580      	push	{r7, lr}
 8000510:	af00      	add	r7, sp, #0
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}

08000518 <onEntry_Emergency>:
void onEntry_Emergency(){};
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
 800051c:	46c0      	nop			; (mov r8, r8)
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}

08000522 <during_Emergency>:
void during_Emergency(){};
 8000522:	b580      	push	{r7, lr}
 8000524:	af00      	add	r7, sp, #0
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}

0800052c <onExit_Emergency>:
void onExit_Emergency(){};
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
 8000530:	46c0      	nop			; (mov r8, r8)
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}

08000536 <evaluate_Event_Off_to_On>:
// Evaluate events for transitions
uint8_t evaluate_Event_Off_to_On(){
 8000536:	b580      	push	{r7, lr}
 8000538:	af00      	add	r7, sp, #0
	return FALSE;
 800053a:	2300      	movs	r3, #0
};
 800053c:	0018      	movs	r0, r3
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}

08000542 <evaluate_Event_Off_to_Emergency>:
uint8_t evaluate_Event_Off_to_Emergency(){
 8000542:	b580      	push	{r7, lr}
 8000544:	af00      	add	r7, sp, #0
	return FALSE;
 8000546:	2300      	movs	r3, #0
};
 8000548:	0018      	movs	r0, r3
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}

0800054e <evaluate_Event_Off_Off>:
uint8_t evaluate_Event_Off_Off(){
 800054e:	b580      	push	{r7, lr}
 8000550:	af00      	add	r7, sp, #0
	return FALSE;
 8000552:	2300      	movs	r3, #0
};
 8000554:	0018      	movs	r0, r3
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <evaluate_Event_On_to_Off>:
uint8_t evaluate_Event_On_to_Off(){
 800055a:	b580      	push	{r7, lr}
 800055c:	af00      	add	r7, sp, #0
	return FALSE;
 800055e:	2300      	movs	r3, #0
};
 8000560:	0018      	movs	r0, r3
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}

08000566 <evaluate_Event_On_to_Emergency>:
uint8_t evaluate_Event_On_to_Emergency(){
 8000566:	b580      	push	{r7, lr}
 8000568:	af00      	add	r7, sp, #0
	return FALSE;
 800056a:	2300      	movs	r3, #0
};
 800056c:	0018      	movs	r0, r3
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}

08000572 <evaluate_Event_On_On>:
uint8_t evaluate_Event_On_On(){
 8000572:	b580      	push	{r7, lr}
 8000574:	af00      	add	r7, sp, #0
	return FALSE;
 8000576:	2300      	movs	r3, #0
};
 8000578:	0018      	movs	r0, r3
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}

0800057e <evaluate_Event_Emergency_to_Off>:
uint8_t evaluate_Event_Emergency_to_Off(){
 800057e:	b580      	push	{r7, lr}
 8000580:	af00      	add	r7, sp, #0
	return FALSE;
 8000582:	2300      	movs	r3, #0
};
 8000584:	0018      	movs	r0, r3
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <evaluate_Event_Emergency_to_On>:
uint8_t evaluate_Event_Emergency_to_On(){
 800058a:	b580      	push	{r7, lr}
 800058c:	af00      	add	r7, sp, #0
	return FALSE;
 800058e:	2300      	movs	r3, #0
};
 8000590:	0018      	movs	r0, r3
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}

08000596 <evaluate_Event_Emergency_Emergency>:
uint8_t evaluate_Event_Emergency_Emergency(){
 8000596:	b580      	push	{r7, lr}
 8000598:	af00      	add	r7, sp, #0
	return FALSE;
 800059a:	2300      	movs	r3, #0
};
 800059c:	0018      	movs	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <FSM_task_handler>:
/** Task handlers **/
static void FSM_task_handler (void *parameters){
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b082      	sub	sp, #8
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]

}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	46bd      	mov	sp, r7
 80005ae:	b002      	add	sp, #8
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <Motor_Control_task_handler>:

static void Motor_Control_task_handler (void *parameters){
 80005b2:	b580      	push	{r7, lr}
 80005b4:	b082      	sub	sp, #8
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]

}
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	46bd      	mov	sp, r7
 80005be:	b002      	add	sp, #8
 80005c0:	bd80      	pop	{r7, pc}

080005c2 <Read_Temperature_task_handler>:

static void Read_Temperature_task_handler (void *parameters){
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b082      	sub	sp, #8
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]

}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	46bd      	mov	sp, r7
 80005ce:	b002      	add	sp, #8
 80005d0:	bd80      	pop	{r7, pc}

080005d2 <LCD_Arduino_task_handler>:

static void LCD_Arduino_task_handler (void *parameters){
 80005d2:	b580      	push	{r7, lr}
 80005d4:	b082      	sub	sp, #8
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]

}
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	46bd      	mov	sp, r7
 80005de:	b002      	add	sp, #8
 80005e0:	bd80      	pop	{r7, pc}
	...

080005e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a04      	ldr	r2, [pc, #16]	; (8000604 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d101      	bne.n	80005fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005f6:	f000 f90b 	bl	8000810 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	46bd      	mov	sp, r7
 80005fe:	b002      	add	sp, #8
 8000600:	bd80      	pop	{r7, pc}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	40001000 	.word	0x40001000

08000608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800060c:	b672      	cpsid	i
}
 800060e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000610:	e7fe      	b.n	8000610 <Error_Handler+0x8>
	...

08000614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800061a:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <HAL_MspInit+0x44>)
 800061c:	699a      	ldr	r2, [r3, #24]
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <HAL_MspInit+0x44>)
 8000620:	2101      	movs	r1, #1
 8000622:	430a      	orrs	r2, r1
 8000624:	619a      	str	r2, [r3, #24]
 8000626:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <HAL_MspInit+0x44>)
 8000628:	699b      	ldr	r3, [r3, #24]
 800062a:	2201      	movs	r2, #1
 800062c:	4013      	ands	r3, r2
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000632:	4b09      	ldr	r3, [pc, #36]	; (8000658 <HAL_MspInit+0x44>)
 8000634:	69da      	ldr	r2, [r3, #28]
 8000636:	4b08      	ldr	r3, [pc, #32]	; (8000658 <HAL_MspInit+0x44>)
 8000638:	2180      	movs	r1, #128	; 0x80
 800063a:	0549      	lsls	r1, r1, #21
 800063c:	430a      	orrs	r2, r1
 800063e:	61da      	str	r2, [r3, #28]
 8000640:	4b05      	ldr	r3, [pc, #20]	; (8000658 <HAL_MspInit+0x44>)
 8000642:	69da      	ldr	r2, [r3, #28]
 8000644:	2380      	movs	r3, #128	; 0x80
 8000646:	055b      	lsls	r3, r3, #21
 8000648:	4013      	ands	r3, r2
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	46bd      	mov	sp, r7
 8000652:	b002      	add	sp, #8
 8000654:	bd80      	pop	{r7, pc}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	40021000 	.word	0x40021000

0800065c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800065c:	b5b0      	push	{r4, r5, r7, lr}
 800065e:	b08c      	sub	sp, #48	; 0x30
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000664:	2300      	movs	r3, #0
 8000666:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t              uwPrescalerValue = 0U;
 8000668:	2300      	movs	r3, #0
 800066a:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800066c:	4b37      	ldr	r3, [pc, #220]	; (800074c <HAL_InitTick+0xf0>)
 800066e:	69da      	ldr	r2, [r3, #28]
 8000670:	4b36      	ldr	r3, [pc, #216]	; (800074c <HAL_InitTick+0xf0>)
 8000672:	2110      	movs	r1, #16
 8000674:	430a      	orrs	r2, r1
 8000676:	61da      	str	r2, [r3, #28]
 8000678:	4b34      	ldr	r3, [pc, #208]	; (800074c <HAL_InitTick+0xf0>)
 800067a:	69db      	ldr	r3, [r3, #28]
 800067c:	2210      	movs	r2, #16
 800067e:	4013      	ands	r3, r2
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000684:	230c      	movs	r3, #12
 8000686:	18fa      	adds	r2, r7, r3
 8000688:	2410      	movs	r4, #16
 800068a:	193b      	adds	r3, r7, r4
 800068c:	0011      	movs	r1, r2
 800068e:	0018      	movs	r0, r3
 8000690:	f001 f81e 	bl	80016d0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000694:	193b      	adds	r3, r7, r4
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800069a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069c:	2b00      	cmp	r3, #0
 800069e:	d104      	bne.n	80006aa <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80006a0:	f001 f800 	bl	80016a4 <HAL_RCC_GetPCLK1Freq>
 80006a4:	0003      	movs	r3, r0
 80006a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006a8:	e004      	b.n	80006b4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80006aa:	f000 fffb 	bl	80016a4 <HAL_RCC_GetPCLK1Freq>
 80006ae:	0003      	movs	r3, r0
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006b6:	4926      	ldr	r1, [pc, #152]	; (8000750 <HAL_InitTick+0xf4>)
 80006b8:	0018      	movs	r0, r3
 80006ba:	f7ff fd25 	bl	8000108 <__udivsi3>
 80006be:	0003      	movs	r3, r0
 80006c0:	3b01      	subs	r3, #1
 80006c2:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80006c4:	4b23      	ldr	r3, [pc, #140]	; (8000754 <HAL_InitTick+0xf8>)
 80006c6:	4a24      	ldr	r2, [pc, #144]	; (8000758 <HAL_InitTick+0xfc>)
 80006c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80006ca:	4b22      	ldr	r3, [pc, #136]	; (8000754 <HAL_InitTick+0xf8>)
 80006cc:	4a23      	ldr	r2, [pc, #140]	; (800075c <HAL_InitTick+0x100>)
 80006ce:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80006d0:	4b20      	ldr	r3, [pc, #128]	; (8000754 <HAL_InitTick+0xf8>)
 80006d2:	6a3a      	ldr	r2, [r7, #32]
 80006d4:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 80006d6:	4b1f      	ldr	r3, [pc, #124]	; (8000754 <HAL_InitTick+0xf8>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006dc:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <HAL_InitTick+0xf8>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e2:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <HAL_InitTick+0xf8>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80006e8:	252b      	movs	r5, #43	; 0x2b
 80006ea:	197c      	adds	r4, r7, r5
 80006ec:	4b19      	ldr	r3, [pc, #100]	; (8000754 <HAL_InitTick+0xf8>)
 80006ee:	0018      	movs	r0, r3
 80006f0:	f001 f818 	bl	8001724 <HAL_TIM_Base_Init>
 80006f4:	0003      	movs	r3, r0
 80006f6:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 80006f8:	197b      	adds	r3, r7, r5
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d11e      	bne.n	800073e <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000700:	197c      	adds	r4, r7, r5
 8000702:	4b14      	ldr	r3, [pc, #80]	; (8000754 <HAL_InitTick+0xf8>)
 8000704:	0018      	movs	r0, r3
 8000706:	f001 f865 	bl	80017d4 <HAL_TIM_Base_Start_IT>
 800070a:	0003      	movs	r3, r0
 800070c:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 800070e:	197b      	adds	r3, r7, r5
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d113      	bne.n	800073e <HAL_InitTick+0xe2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000716:	2011      	movs	r0, #17
 8000718:	f000 f933 	bl	8000982 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2b03      	cmp	r3, #3
 8000720:	d809      	bhi.n	8000736 <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2200      	movs	r2, #0
 8000726:	0019      	movs	r1, r3
 8000728:	2011      	movs	r0, #17
 800072a:	f000 f915 	bl	8000958 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <HAL_InitTick+0x104>)
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	e003      	b.n	800073e <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 8000736:	232b      	movs	r3, #43	; 0x2b
 8000738:	18fb      	adds	r3, r7, r3
 800073a:	2201      	movs	r2, #1
 800073c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 800073e:	232b      	movs	r3, #43	; 0x2b
 8000740:	18fb      	adds	r3, r7, r3
 8000742:	781b      	ldrb	r3, [r3, #0]
}
 8000744:	0018      	movs	r0, r3
 8000746:	46bd      	mov	sp, r7
 8000748:	b00c      	add	sp, #48	; 0x30
 800074a:	bdb0      	pop	{r4, r5, r7, pc}
 800074c:	40021000 	.word	0x40021000
 8000750:	000f4240 	.word	0x000f4240
 8000754:	2000002c 	.word	0x2000002c
 8000758:	40001000 	.word	0x40001000
 800075c:	000003e7 	.word	0x000003e7
 8000760:	20000004 	.word	0x20000004

08000764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000768:	e7fe      	b.n	8000768 <NMI_Handler+0x4>

0800076a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076e:	e7fe      	b.n	800076e <HardFault_Handler+0x4>

08000770 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000774:	4b03      	ldr	r3, [pc, #12]	; (8000784 <TIM6_DAC_IRQHandler+0x14>)
 8000776:	0018      	movs	r0, r3
 8000778:	f001 f87e 	bl	8001878 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800077c:	46c0      	nop			; (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	2000002c 	.word	0x2000002c

08000788 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800078c:	46c0      	nop			; (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
	...

08000794 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000794:	480d      	ldr	r0, [pc, #52]	; (80007cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000796:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000798:	480d      	ldr	r0, [pc, #52]	; (80007d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800079a:	490e      	ldr	r1, [pc, #56]	; (80007d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800079c:	4a0e      	ldr	r2, [pc, #56]	; (80007d8 <LoopForever+0xe>)
  movs r3, #0
 800079e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007a0:	e002      	b.n	80007a8 <LoopCopyDataInit>

080007a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007a6:	3304      	adds	r3, #4

080007a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007ac:	d3f9      	bcc.n	80007a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ae:	4a0b      	ldr	r2, [pc, #44]	; (80007dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80007b0:	4c0b      	ldr	r4, [pc, #44]	; (80007e0 <LoopForever+0x16>)
  movs r3, #0
 80007b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007b4:	e001      	b.n	80007ba <LoopFillZerobss>

080007b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007b8:	3204      	adds	r2, #4

080007ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007bc:	d3fb      	bcc.n	80007b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80007be:	f7ff ffe3 	bl	8000788 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80007c2:	f002 f8c9 	bl	8002958 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007c6:	f7ff fd2b 	bl	8000220 <main>

080007ca <LoopForever>:

LoopForever:
    b LoopForever
 80007ca:	e7fe      	b.n	80007ca <LoopForever>
  ldr   r0, =_estack
 80007cc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80007d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007d4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80007d8:	08002a8c 	.word	0x08002a8c
  ldr r2, =_sbss
 80007dc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80007e0:	20001d8c 	.word	0x20001d8c

080007e4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007e4:	e7fe      	b.n	80007e4 <ADC1_COMP_IRQHandler>
	...

080007e8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007ec:	4b07      	ldr	r3, [pc, #28]	; (800080c <HAL_Init+0x24>)
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <HAL_Init+0x24>)
 80007f2:	2110      	movs	r1, #16
 80007f4:	430a      	orrs	r2, r1
 80007f6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80007f8:	2003      	movs	r0, #3
 80007fa:	f7ff ff2f 	bl	800065c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007fe:	f7ff ff09 	bl	8000614 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000802:	2300      	movs	r3, #0
}
 8000804:	0018      	movs	r0, r3
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	40022000 	.word	0x40022000

08000810 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000814:	4b05      	ldr	r3, [pc, #20]	; (800082c <HAL_IncTick+0x1c>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	001a      	movs	r2, r3
 800081a:	4b05      	ldr	r3, [pc, #20]	; (8000830 <HAL_IncTick+0x20>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	18d2      	adds	r2, r2, r3
 8000820:	4b03      	ldr	r3, [pc, #12]	; (8000830 <HAL_IncTick+0x20>)
 8000822:	601a      	str	r2, [r3, #0]
}
 8000824:	46c0      	nop			; (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	20000008 	.word	0x20000008
 8000830:	20000074 	.word	0x20000074

08000834 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  return uwTick;
 8000838:	4b02      	ldr	r3, [pc, #8]	; (8000844 <HAL_GetTick+0x10>)
 800083a:	681b      	ldr	r3, [r3, #0]
}
 800083c:	0018      	movs	r0, r3
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	20000074 	.word	0x20000074

08000848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	0002      	movs	r2, r0
 8000850:	1dfb      	adds	r3, r7, #7
 8000852:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000854:	1dfb      	adds	r3, r7, #7
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2b7f      	cmp	r3, #127	; 0x7f
 800085a:	d809      	bhi.n	8000870 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800085c:	1dfb      	adds	r3, r7, #7
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	001a      	movs	r2, r3
 8000862:	231f      	movs	r3, #31
 8000864:	401a      	ands	r2, r3
 8000866:	4b04      	ldr	r3, [pc, #16]	; (8000878 <__NVIC_EnableIRQ+0x30>)
 8000868:	2101      	movs	r1, #1
 800086a:	4091      	lsls	r1, r2
 800086c:	000a      	movs	r2, r1
 800086e:	601a      	str	r2, [r3, #0]
  }
}
 8000870:	46c0      	nop			; (mov r8, r8)
 8000872:	46bd      	mov	sp, r7
 8000874:	b002      	add	sp, #8
 8000876:	bd80      	pop	{r7, pc}
 8000878:	e000e100 	.word	0xe000e100

0800087c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800087c:	b590      	push	{r4, r7, lr}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	0002      	movs	r2, r0
 8000884:	6039      	str	r1, [r7, #0]
 8000886:	1dfb      	adds	r3, r7, #7
 8000888:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800088a:	1dfb      	adds	r3, r7, #7
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	2b7f      	cmp	r3, #127	; 0x7f
 8000890:	d828      	bhi.n	80008e4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000892:	4a2f      	ldr	r2, [pc, #188]	; (8000950 <__NVIC_SetPriority+0xd4>)
 8000894:	1dfb      	adds	r3, r7, #7
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	b25b      	sxtb	r3, r3
 800089a:	089b      	lsrs	r3, r3, #2
 800089c:	33c0      	adds	r3, #192	; 0xc0
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	589b      	ldr	r3, [r3, r2]
 80008a2:	1dfa      	adds	r2, r7, #7
 80008a4:	7812      	ldrb	r2, [r2, #0]
 80008a6:	0011      	movs	r1, r2
 80008a8:	2203      	movs	r2, #3
 80008aa:	400a      	ands	r2, r1
 80008ac:	00d2      	lsls	r2, r2, #3
 80008ae:	21ff      	movs	r1, #255	; 0xff
 80008b0:	4091      	lsls	r1, r2
 80008b2:	000a      	movs	r2, r1
 80008b4:	43d2      	mvns	r2, r2
 80008b6:	401a      	ands	r2, r3
 80008b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	019b      	lsls	r3, r3, #6
 80008be:	22ff      	movs	r2, #255	; 0xff
 80008c0:	401a      	ands	r2, r3
 80008c2:	1dfb      	adds	r3, r7, #7
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	0018      	movs	r0, r3
 80008c8:	2303      	movs	r3, #3
 80008ca:	4003      	ands	r3, r0
 80008cc:	00db      	lsls	r3, r3, #3
 80008ce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008d0:	481f      	ldr	r0, [pc, #124]	; (8000950 <__NVIC_SetPriority+0xd4>)
 80008d2:	1dfb      	adds	r3, r7, #7
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	b25b      	sxtb	r3, r3
 80008d8:	089b      	lsrs	r3, r3, #2
 80008da:	430a      	orrs	r2, r1
 80008dc:	33c0      	adds	r3, #192	; 0xc0
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008e2:	e031      	b.n	8000948 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008e4:	4a1b      	ldr	r2, [pc, #108]	; (8000954 <__NVIC_SetPriority+0xd8>)
 80008e6:	1dfb      	adds	r3, r7, #7
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	0019      	movs	r1, r3
 80008ec:	230f      	movs	r3, #15
 80008ee:	400b      	ands	r3, r1
 80008f0:	3b08      	subs	r3, #8
 80008f2:	089b      	lsrs	r3, r3, #2
 80008f4:	3306      	adds	r3, #6
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	18d3      	adds	r3, r2, r3
 80008fa:	3304      	adds	r3, #4
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	1dfa      	adds	r2, r7, #7
 8000900:	7812      	ldrb	r2, [r2, #0]
 8000902:	0011      	movs	r1, r2
 8000904:	2203      	movs	r2, #3
 8000906:	400a      	ands	r2, r1
 8000908:	00d2      	lsls	r2, r2, #3
 800090a:	21ff      	movs	r1, #255	; 0xff
 800090c:	4091      	lsls	r1, r2
 800090e:	000a      	movs	r2, r1
 8000910:	43d2      	mvns	r2, r2
 8000912:	401a      	ands	r2, r3
 8000914:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	019b      	lsls	r3, r3, #6
 800091a:	22ff      	movs	r2, #255	; 0xff
 800091c:	401a      	ands	r2, r3
 800091e:	1dfb      	adds	r3, r7, #7
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	0018      	movs	r0, r3
 8000924:	2303      	movs	r3, #3
 8000926:	4003      	ands	r3, r0
 8000928:	00db      	lsls	r3, r3, #3
 800092a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800092c:	4809      	ldr	r0, [pc, #36]	; (8000954 <__NVIC_SetPriority+0xd8>)
 800092e:	1dfb      	adds	r3, r7, #7
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	001c      	movs	r4, r3
 8000934:	230f      	movs	r3, #15
 8000936:	4023      	ands	r3, r4
 8000938:	3b08      	subs	r3, #8
 800093a:	089b      	lsrs	r3, r3, #2
 800093c:	430a      	orrs	r2, r1
 800093e:	3306      	adds	r3, #6
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	18c3      	adds	r3, r0, r3
 8000944:	3304      	adds	r3, #4
 8000946:	601a      	str	r2, [r3, #0]
}
 8000948:	46c0      	nop			; (mov r8, r8)
 800094a:	46bd      	mov	sp, r7
 800094c:	b003      	add	sp, #12
 800094e:	bd90      	pop	{r4, r7, pc}
 8000950:	e000e100 	.word	0xe000e100
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	60b9      	str	r1, [r7, #8]
 8000960:	607a      	str	r2, [r7, #4]
 8000962:	210f      	movs	r1, #15
 8000964:	187b      	adds	r3, r7, r1
 8000966:	1c02      	adds	r2, r0, #0
 8000968:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800096a:	68ba      	ldr	r2, [r7, #8]
 800096c:	187b      	adds	r3, r7, r1
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	b25b      	sxtb	r3, r3
 8000972:	0011      	movs	r1, r2
 8000974:	0018      	movs	r0, r3
 8000976:	f7ff ff81 	bl	800087c <__NVIC_SetPriority>
}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	46bd      	mov	sp, r7
 800097e:	b004      	add	sp, #16
 8000980:	bd80      	pop	{r7, pc}

08000982 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b082      	sub	sp, #8
 8000986:	af00      	add	r7, sp, #0
 8000988:	0002      	movs	r2, r0
 800098a:	1dfb      	adds	r3, r7, #7
 800098c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800098e:	1dfb      	adds	r3, r7, #7
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	b25b      	sxtb	r3, r3
 8000994:	0018      	movs	r0, r3
 8000996:	f7ff ff57 	bl	8000848 <__NVIC_EnableIRQ>
}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	46bd      	mov	sp, r7
 800099e:	b002      	add	sp, #8
 80009a0:	bd80      	pop	{r7, pc}
	...

080009a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009b2:	e155      	b.n	8000c60 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2101      	movs	r1, #1
 80009ba:	697a      	ldr	r2, [r7, #20]
 80009bc:	4091      	lsls	r1, r2
 80009be:	000a      	movs	r2, r1
 80009c0:	4013      	ands	r3, r2
 80009c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d100      	bne.n	80009cc <HAL_GPIO_Init+0x28>
 80009ca:	e146      	b.n	8000c5a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	2203      	movs	r2, #3
 80009d2:	4013      	ands	r3, r2
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d005      	beq.n	80009e4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	2203      	movs	r2, #3
 80009de:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009e0:	2b02      	cmp	r3, #2
 80009e2:	d130      	bne.n	8000a46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	689b      	ldr	r3, [r3, #8]
 80009e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	2203      	movs	r2, #3
 80009f0:	409a      	lsls	r2, r3
 80009f2:	0013      	movs	r3, r2
 80009f4:	43da      	mvns	r2, r3
 80009f6:	693b      	ldr	r3, [r7, #16]
 80009f8:	4013      	ands	r3, r2
 80009fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	68da      	ldr	r2, [r3, #12]
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	409a      	lsls	r2, r3
 8000a06:	0013      	movs	r3, r2
 8000a08:	693a      	ldr	r2, [r7, #16]
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	693a      	ldr	r2, [r7, #16]
 8000a12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	409a      	lsls	r2, r3
 8000a20:	0013      	movs	r3, r2
 8000a22:	43da      	mvns	r2, r3
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	4013      	ands	r3, r2
 8000a28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	091b      	lsrs	r3, r3, #4
 8000a30:	2201      	movs	r2, #1
 8000a32:	401a      	ands	r2, r3
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	409a      	lsls	r2, r3
 8000a38:	0013      	movs	r3, r2
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	2203      	movs	r2, #3
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	2b03      	cmp	r3, #3
 8000a50:	d017      	beq.n	8000a82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	68db      	ldr	r3, [r3, #12]
 8000a56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	2203      	movs	r2, #3
 8000a5e:	409a      	lsls	r2, r3
 8000a60:	0013      	movs	r3, r2
 8000a62:	43da      	mvns	r2, r3
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	4013      	ands	r3, r2
 8000a68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	689a      	ldr	r2, [r3, #8]
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	409a      	lsls	r2, r3
 8000a74:	0013      	movs	r3, r2
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	2203      	movs	r2, #3
 8000a88:	4013      	ands	r3, r2
 8000a8a:	2b02      	cmp	r3, #2
 8000a8c:	d123      	bne.n	8000ad6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	08da      	lsrs	r2, r3, #3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	3208      	adds	r2, #8
 8000a96:	0092      	lsls	r2, r2, #2
 8000a98:	58d3      	ldr	r3, [r2, r3]
 8000a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	2207      	movs	r2, #7
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	220f      	movs	r2, #15
 8000aa6:	409a      	lsls	r2, r3
 8000aa8:	0013      	movs	r3, r2
 8000aaa:	43da      	mvns	r2, r3
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	4013      	ands	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	691a      	ldr	r2, [r3, #16]
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	2107      	movs	r1, #7
 8000aba:	400b      	ands	r3, r1
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	409a      	lsls	r2, r3
 8000ac0:	0013      	movs	r3, r2
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	08da      	lsrs	r2, r3, #3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	3208      	adds	r2, #8
 8000ad0:	0092      	lsls	r2, r2, #2
 8000ad2:	6939      	ldr	r1, [r7, #16]
 8000ad4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	2203      	movs	r2, #3
 8000ae2:	409a      	lsls	r2, r3
 8000ae4:	0013      	movs	r3, r2
 8000ae6:	43da      	mvns	r2, r3
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	4013      	ands	r3, r2
 8000aec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	2203      	movs	r2, #3
 8000af4:	401a      	ands	r2, r3
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	409a      	lsls	r2, r3
 8000afc:	0013      	movs	r3, r2
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685a      	ldr	r2, [r3, #4]
 8000b0e:	23c0      	movs	r3, #192	; 0xc0
 8000b10:	029b      	lsls	r3, r3, #10
 8000b12:	4013      	ands	r3, r2
 8000b14:	d100      	bne.n	8000b18 <HAL_GPIO_Init+0x174>
 8000b16:	e0a0      	b.n	8000c5a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b18:	4b57      	ldr	r3, [pc, #348]	; (8000c78 <HAL_GPIO_Init+0x2d4>)
 8000b1a:	699a      	ldr	r2, [r3, #24]
 8000b1c:	4b56      	ldr	r3, [pc, #344]	; (8000c78 <HAL_GPIO_Init+0x2d4>)
 8000b1e:	2101      	movs	r1, #1
 8000b20:	430a      	orrs	r2, r1
 8000b22:	619a      	str	r2, [r3, #24]
 8000b24:	4b54      	ldr	r3, [pc, #336]	; (8000c78 <HAL_GPIO_Init+0x2d4>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	2201      	movs	r2, #1
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b30:	4a52      	ldr	r2, [pc, #328]	; (8000c7c <HAL_GPIO_Init+0x2d8>)
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	089b      	lsrs	r3, r3, #2
 8000b36:	3302      	adds	r3, #2
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	589b      	ldr	r3, [r3, r2]
 8000b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	2203      	movs	r2, #3
 8000b42:	4013      	ands	r3, r2
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	220f      	movs	r2, #15
 8000b48:	409a      	lsls	r2, r3
 8000b4a:	0013      	movs	r3, r2
 8000b4c:	43da      	mvns	r2, r3
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	4013      	ands	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b54:	687a      	ldr	r2, [r7, #4]
 8000b56:	2390      	movs	r3, #144	; 0x90
 8000b58:	05db      	lsls	r3, r3, #23
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	d019      	beq.n	8000b92 <HAL_GPIO_Init+0x1ee>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4a47      	ldr	r2, [pc, #284]	; (8000c80 <HAL_GPIO_Init+0x2dc>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d013      	beq.n	8000b8e <HAL_GPIO_Init+0x1ea>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4a46      	ldr	r2, [pc, #280]	; (8000c84 <HAL_GPIO_Init+0x2e0>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d00d      	beq.n	8000b8a <HAL_GPIO_Init+0x1e6>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4a45      	ldr	r2, [pc, #276]	; (8000c88 <HAL_GPIO_Init+0x2e4>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d007      	beq.n	8000b86 <HAL_GPIO_Init+0x1e2>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4a44      	ldr	r2, [pc, #272]	; (8000c8c <HAL_GPIO_Init+0x2e8>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d101      	bne.n	8000b82 <HAL_GPIO_Init+0x1de>
 8000b7e:	2304      	movs	r3, #4
 8000b80:	e008      	b.n	8000b94 <HAL_GPIO_Init+0x1f0>
 8000b82:	2305      	movs	r3, #5
 8000b84:	e006      	b.n	8000b94 <HAL_GPIO_Init+0x1f0>
 8000b86:	2303      	movs	r3, #3
 8000b88:	e004      	b.n	8000b94 <HAL_GPIO_Init+0x1f0>
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	e002      	b.n	8000b94 <HAL_GPIO_Init+0x1f0>
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e000      	b.n	8000b94 <HAL_GPIO_Init+0x1f0>
 8000b92:	2300      	movs	r3, #0
 8000b94:	697a      	ldr	r2, [r7, #20]
 8000b96:	2103      	movs	r1, #3
 8000b98:	400a      	ands	r2, r1
 8000b9a:	0092      	lsls	r2, r2, #2
 8000b9c:	4093      	lsls	r3, r2
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ba4:	4935      	ldr	r1, [pc, #212]	; (8000c7c <HAL_GPIO_Init+0x2d8>)
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	089b      	lsrs	r3, r3, #2
 8000baa:	3302      	adds	r3, #2
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bb2:	4b37      	ldr	r3, [pc, #220]	; (8000c90 <HAL_GPIO_Init+0x2ec>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	43da      	mvns	r2, r3
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685a      	ldr	r2, [r3, #4]
 8000bc6:	2380      	movs	r3, #128	; 0x80
 8000bc8:	025b      	lsls	r3, r3, #9
 8000bca:	4013      	ands	r3, r2
 8000bcc:	d003      	beq.n	8000bd6 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000bd6:	4b2e      	ldr	r3, [pc, #184]	; (8000c90 <HAL_GPIO_Init+0x2ec>)
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000bdc:	4b2c      	ldr	r3, [pc, #176]	; (8000c90 <HAL_GPIO_Init+0x2ec>)
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	43da      	mvns	r2, r3
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	4013      	ands	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685a      	ldr	r2, [r3, #4]
 8000bf0:	2380      	movs	r3, #128	; 0x80
 8000bf2:	029b      	lsls	r3, r3, #10
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	d003      	beq.n	8000c00 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c00:	4b23      	ldr	r3, [pc, #140]	; (8000c90 <HAL_GPIO_Init+0x2ec>)
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c06:	4b22      	ldr	r3, [pc, #136]	; (8000c90 <HAL_GPIO_Init+0x2ec>)
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	43da      	mvns	r2, r3
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	4013      	ands	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685a      	ldr	r2, [r3, #4]
 8000c1a:	2380      	movs	r3, #128	; 0x80
 8000c1c:	035b      	lsls	r3, r3, #13
 8000c1e:	4013      	ands	r3, r2
 8000c20:	d003      	beq.n	8000c2a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c2a:	4b19      	ldr	r3, [pc, #100]	; (8000c90 <HAL_GPIO_Init+0x2ec>)
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000c30:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <HAL_GPIO_Init+0x2ec>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	43da      	mvns	r2, r3
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685a      	ldr	r2, [r3, #4]
 8000c44:	2380      	movs	r3, #128	; 0x80
 8000c46:	039b      	lsls	r3, r3, #14
 8000c48:	4013      	ands	r3, r2
 8000c4a:	d003      	beq.n	8000c54 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c54:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <HAL_GPIO_Init+0x2ec>)
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	40da      	lsrs	r2, r3
 8000c68:	1e13      	subs	r3, r2, #0
 8000c6a:	d000      	beq.n	8000c6e <HAL_GPIO_Init+0x2ca>
 8000c6c:	e6a2      	b.n	80009b4 <HAL_GPIO_Init+0x10>
  } 
}
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	46c0      	nop			; (mov r8, r8)
 8000c72:	46bd      	mov	sp, r7
 8000c74:	b006      	add	sp, #24
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	40010000 	.word	0x40010000
 8000c80:	48000400 	.word	0x48000400
 8000c84:	48000800 	.word	0x48000800
 8000c88:	48000c00 	.word	0x48000c00
 8000c8c:	48001000 	.word	0x48001000
 8000c90:	40010400 	.word	0x40010400

08000c94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	0008      	movs	r0, r1
 8000c9e:	0011      	movs	r1, r2
 8000ca0:	1cbb      	adds	r3, r7, #2
 8000ca2:	1c02      	adds	r2, r0, #0
 8000ca4:	801a      	strh	r2, [r3, #0]
 8000ca6:	1c7b      	adds	r3, r7, #1
 8000ca8:	1c0a      	adds	r2, r1, #0
 8000caa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cac:	1c7b      	adds	r3, r7, #1
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d004      	beq.n	8000cbe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cb4:	1cbb      	adds	r3, r7, #2
 8000cb6:	881a      	ldrh	r2, [r3, #0]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cbc:	e003      	b.n	8000cc6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cbe:	1cbb      	adds	r3, r7, #2
 8000cc0:	881a      	ldrh	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	b002      	add	sp, #8
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b088      	sub	sp, #32
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d102      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	f000 fb76 	bl	80013d0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2201      	movs	r2, #1
 8000cea:	4013      	ands	r3, r2
 8000cec:	d100      	bne.n	8000cf0 <HAL_RCC_OscConfig+0x20>
 8000cee:	e08e      	b.n	8000e0e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cf0:	4bc5      	ldr	r3, [pc, #788]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	220c      	movs	r2, #12
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	2b04      	cmp	r3, #4
 8000cfa:	d00e      	beq.n	8000d1a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cfc:	4bc2      	ldr	r3, [pc, #776]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	220c      	movs	r2, #12
 8000d02:	4013      	ands	r3, r2
 8000d04:	2b08      	cmp	r3, #8
 8000d06:	d117      	bne.n	8000d38 <HAL_RCC_OscConfig+0x68>
 8000d08:	4bbf      	ldr	r3, [pc, #764]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000d0a:	685a      	ldr	r2, [r3, #4]
 8000d0c:	23c0      	movs	r3, #192	; 0xc0
 8000d0e:	025b      	lsls	r3, r3, #9
 8000d10:	401a      	ands	r2, r3
 8000d12:	2380      	movs	r3, #128	; 0x80
 8000d14:	025b      	lsls	r3, r3, #9
 8000d16:	429a      	cmp	r2, r3
 8000d18:	d10e      	bne.n	8000d38 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d1a:	4bbb      	ldr	r3, [pc, #748]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	2380      	movs	r3, #128	; 0x80
 8000d20:	029b      	lsls	r3, r3, #10
 8000d22:	4013      	ands	r3, r2
 8000d24:	d100      	bne.n	8000d28 <HAL_RCC_OscConfig+0x58>
 8000d26:	e071      	b.n	8000e0c <HAL_RCC_OscConfig+0x13c>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d000      	beq.n	8000d32 <HAL_RCC_OscConfig+0x62>
 8000d30:	e06c      	b.n	8000e0c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	f000 fb4c 	bl	80013d0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d107      	bne.n	8000d50 <HAL_RCC_OscConfig+0x80>
 8000d40:	4bb1      	ldr	r3, [pc, #708]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4bb0      	ldr	r3, [pc, #704]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000d46:	2180      	movs	r1, #128	; 0x80
 8000d48:	0249      	lsls	r1, r1, #9
 8000d4a:	430a      	orrs	r2, r1
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	e02f      	b.n	8000db0 <HAL_RCC_OscConfig+0xe0>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d10c      	bne.n	8000d72 <HAL_RCC_OscConfig+0xa2>
 8000d58:	4bab      	ldr	r3, [pc, #684]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4baa      	ldr	r3, [pc, #680]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000d5e:	49ab      	ldr	r1, [pc, #684]	; (800100c <HAL_RCC_OscConfig+0x33c>)
 8000d60:	400a      	ands	r2, r1
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	4ba8      	ldr	r3, [pc, #672]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4ba7      	ldr	r3, [pc, #668]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000d6a:	49a9      	ldr	r1, [pc, #676]	; (8001010 <HAL_RCC_OscConfig+0x340>)
 8000d6c:	400a      	ands	r2, r1
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	e01e      	b.n	8000db0 <HAL_RCC_OscConfig+0xe0>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	2b05      	cmp	r3, #5
 8000d78:	d10e      	bne.n	8000d98 <HAL_RCC_OscConfig+0xc8>
 8000d7a:	4ba3      	ldr	r3, [pc, #652]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	4ba2      	ldr	r3, [pc, #648]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000d80:	2180      	movs	r1, #128	; 0x80
 8000d82:	02c9      	lsls	r1, r1, #11
 8000d84:	430a      	orrs	r2, r1
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	4b9f      	ldr	r3, [pc, #636]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4b9e      	ldr	r3, [pc, #632]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000d8e:	2180      	movs	r1, #128	; 0x80
 8000d90:	0249      	lsls	r1, r1, #9
 8000d92:	430a      	orrs	r2, r1
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	e00b      	b.n	8000db0 <HAL_RCC_OscConfig+0xe0>
 8000d98:	4b9b      	ldr	r3, [pc, #620]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	4b9a      	ldr	r3, [pc, #616]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000d9e:	499b      	ldr	r1, [pc, #620]	; (800100c <HAL_RCC_OscConfig+0x33c>)
 8000da0:	400a      	ands	r2, r1
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	4b98      	ldr	r3, [pc, #608]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4b97      	ldr	r3, [pc, #604]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000daa:	4999      	ldr	r1, [pc, #612]	; (8001010 <HAL_RCC_OscConfig+0x340>)
 8000dac:	400a      	ands	r2, r1
 8000dae:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d014      	beq.n	8000de2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db8:	f7ff fd3c 	bl	8000834 <HAL_GetTick>
 8000dbc:	0003      	movs	r3, r0
 8000dbe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dc0:	e008      	b.n	8000dd4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dc2:	f7ff fd37 	bl	8000834 <HAL_GetTick>
 8000dc6:	0002      	movs	r2, r0
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	1ad3      	subs	r3, r2, r3
 8000dcc:	2b64      	cmp	r3, #100	; 0x64
 8000dce:	d901      	bls.n	8000dd4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	e2fd      	b.n	80013d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dd4:	4b8c      	ldr	r3, [pc, #560]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	2380      	movs	r3, #128	; 0x80
 8000dda:	029b      	lsls	r3, r3, #10
 8000ddc:	4013      	ands	r3, r2
 8000dde:	d0f0      	beq.n	8000dc2 <HAL_RCC_OscConfig+0xf2>
 8000de0:	e015      	b.n	8000e0e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000de2:	f7ff fd27 	bl	8000834 <HAL_GetTick>
 8000de6:	0003      	movs	r3, r0
 8000de8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dea:	e008      	b.n	8000dfe <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dec:	f7ff fd22 	bl	8000834 <HAL_GetTick>
 8000df0:	0002      	movs	r2, r0
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	2b64      	cmp	r3, #100	; 0x64
 8000df8:	d901      	bls.n	8000dfe <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	e2e8      	b.n	80013d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dfe:	4b82      	ldr	r3, [pc, #520]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	2380      	movs	r3, #128	; 0x80
 8000e04:	029b      	lsls	r3, r3, #10
 8000e06:	4013      	ands	r3, r2
 8000e08:	d1f0      	bne.n	8000dec <HAL_RCC_OscConfig+0x11c>
 8000e0a:	e000      	b.n	8000e0e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e0c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2202      	movs	r2, #2
 8000e14:	4013      	ands	r3, r2
 8000e16:	d100      	bne.n	8000e1a <HAL_RCC_OscConfig+0x14a>
 8000e18:	e06c      	b.n	8000ef4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e1a:	4b7b      	ldr	r3, [pc, #492]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	220c      	movs	r2, #12
 8000e20:	4013      	ands	r3, r2
 8000e22:	d00e      	beq.n	8000e42 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e24:	4b78      	ldr	r3, [pc, #480]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	220c      	movs	r2, #12
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	2b08      	cmp	r3, #8
 8000e2e:	d11f      	bne.n	8000e70 <HAL_RCC_OscConfig+0x1a0>
 8000e30:	4b75      	ldr	r3, [pc, #468]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000e32:	685a      	ldr	r2, [r3, #4]
 8000e34:	23c0      	movs	r3, #192	; 0xc0
 8000e36:	025b      	lsls	r3, r3, #9
 8000e38:	401a      	ands	r2, r3
 8000e3a:	2380      	movs	r3, #128	; 0x80
 8000e3c:	021b      	lsls	r3, r3, #8
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d116      	bne.n	8000e70 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e42:	4b71      	ldr	r3, [pc, #452]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2202      	movs	r2, #2
 8000e48:	4013      	ands	r3, r2
 8000e4a:	d005      	beq.n	8000e58 <HAL_RCC_OscConfig+0x188>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d001      	beq.n	8000e58 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	e2bb      	b.n	80013d0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e58:	4b6b      	ldr	r3, [pc, #428]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	22f8      	movs	r2, #248	; 0xf8
 8000e5e:	4393      	bics	r3, r2
 8000e60:	0019      	movs	r1, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	691b      	ldr	r3, [r3, #16]
 8000e66:	00da      	lsls	r2, r3, #3
 8000e68:	4b67      	ldr	r3, [pc, #412]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000e6a:	430a      	orrs	r2, r1
 8000e6c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e6e:	e041      	b.n	8000ef4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d024      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e78:	4b63      	ldr	r3, [pc, #396]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4b62      	ldr	r3, [pc, #392]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000e7e:	2101      	movs	r1, #1
 8000e80:	430a      	orrs	r2, r1
 8000e82:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e84:	f7ff fcd6 	bl	8000834 <HAL_GetTick>
 8000e88:	0003      	movs	r3, r0
 8000e8a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e8c:	e008      	b.n	8000ea0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e8e:	f7ff fcd1 	bl	8000834 <HAL_GetTick>
 8000e92:	0002      	movs	r2, r0
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d901      	bls.n	8000ea0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	e297      	b.n	80013d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ea0:	4b59      	ldr	r3, [pc, #356]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2202      	movs	r2, #2
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	d0f1      	beq.n	8000e8e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eaa:	4b57      	ldr	r3, [pc, #348]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	22f8      	movs	r2, #248	; 0xf8
 8000eb0:	4393      	bics	r3, r2
 8000eb2:	0019      	movs	r1, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	691b      	ldr	r3, [r3, #16]
 8000eb8:	00da      	lsls	r2, r3, #3
 8000eba:	4b53      	ldr	r3, [pc, #332]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	e018      	b.n	8000ef4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ec2:	4b51      	ldr	r3, [pc, #324]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	4b50      	ldr	r3, [pc, #320]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000ec8:	2101      	movs	r1, #1
 8000eca:	438a      	bics	r2, r1
 8000ecc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ece:	f7ff fcb1 	bl	8000834 <HAL_GetTick>
 8000ed2:	0003      	movs	r3, r0
 8000ed4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ed6:	e008      	b.n	8000eea <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ed8:	f7ff fcac 	bl	8000834 <HAL_GetTick>
 8000edc:	0002      	movs	r2, r0
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d901      	bls.n	8000eea <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e272      	b.n	80013d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eea:	4b47      	ldr	r3, [pc, #284]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2202      	movs	r2, #2
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	d1f1      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2208      	movs	r2, #8
 8000efa:	4013      	ands	r3, r2
 8000efc:	d036      	beq.n	8000f6c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	69db      	ldr	r3, [r3, #28]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d019      	beq.n	8000f3a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f06:	4b40      	ldr	r3, [pc, #256]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000f08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f0a:	4b3f      	ldr	r3, [pc, #252]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	430a      	orrs	r2, r1
 8000f10:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f12:	f7ff fc8f 	bl	8000834 <HAL_GetTick>
 8000f16:	0003      	movs	r3, r0
 8000f18:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f1a:	e008      	b.n	8000f2e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f1c:	f7ff fc8a 	bl	8000834 <HAL_GetTick>
 8000f20:	0002      	movs	r2, r0
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d901      	bls.n	8000f2e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e250      	b.n	80013d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f2e:	4b36      	ldr	r3, [pc, #216]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f32:	2202      	movs	r2, #2
 8000f34:	4013      	ands	r3, r2
 8000f36:	d0f1      	beq.n	8000f1c <HAL_RCC_OscConfig+0x24c>
 8000f38:	e018      	b.n	8000f6c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f3a:	4b33      	ldr	r3, [pc, #204]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000f3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f3e:	4b32      	ldr	r3, [pc, #200]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000f40:	2101      	movs	r1, #1
 8000f42:	438a      	bics	r2, r1
 8000f44:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f46:	f7ff fc75 	bl	8000834 <HAL_GetTick>
 8000f4a:	0003      	movs	r3, r0
 8000f4c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f4e:	e008      	b.n	8000f62 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f50:	f7ff fc70 	bl	8000834 <HAL_GetTick>
 8000f54:	0002      	movs	r2, r0
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d901      	bls.n	8000f62 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e236      	b.n	80013d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f62:	4b29      	ldr	r3, [pc, #164]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f66:	2202      	movs	r2, #2
 8000f68:	4013      	ands	r3, r2
 8000f6a:	d1f1      	bne.n	8000f50 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2204      	movs	r2, #4
 8000f72:	4013      	ands	r3, r2
 8000f74:	d100      	bne.n	8000f78 <HAL_RCC_OscConfig+0x2a8>
 8000f76:	e0b5      	b.n	80010e4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f78:	201f      	movs	r0, #31
 8000f7a:	183b      	adds	r3, r7, r0
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f80:	4b21      	ldr	r3, [pc, #132]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000f82:	69da      	ldr	r2, [r3, #28]
 8000f84:	2380      	movs	r3, #128	; 0x80
 8000f86:	055b      	lsls	r3, r3, #21
 8000f88:	4013      	ands	r3, r2
 8000f8a:	d110      	bne.n	8000fae <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f8c:	4b1e      	ldr	r3, [pc, #120]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000f8e:	69da      	ldr	r2, [r3, #28]
 8000f90:	4b1d      	ldr	r3, [pc, #116]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000f92:	2180      	movs	r1, #128	; 0x80
 8000f94:	0549      	lsls	r1, r1, #21
 8000f96:	430a      	orrs	r2, r1
 8000f98:	61da      	str	r2, [r3, #28]
 8000f9a:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000f9c:	69da      	ldr	r2, [r3, #28]
 8000f9e:	2380      	movs	r3, #128	; 0x80
 8000fa0:	055b      	lsls	r3, r3, #21
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000fa8:	183b      	adds	r3, r7, r0
 8000faa:	2201      	movs	r2, #1
 8000fac:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fae:	4b19      	ldr	r3, [pc, #100]	; (8001014 <HAL_RCC_OscConfig+0x344>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	2380      	movs	r3, #128	; 0x80
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	d11a      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fba:	4b16      	ldr	r3, [pc, #88]	; (8001014 <HAL_RCC_OscConfig+0x344>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	4b15      	ldr	r3, [pc, #84]	; (8001014 <HAL_RCC_OscConfig+0x344>)
 8000fc0:	2180      	movs	r1, #128	; 0x80
 8000fc2:	0049      	lsls	r1, r1, #1
 8000fc4:	430a      	orrs	r2, r1
 8000fc6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fc8:	f7ff fc34 	bl	8000834 <HAL_GetTick>
 8000fcc:	0003      	movs	r3, r0
 8000fce:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd0:	e008      	b.n	8000fe4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fd2:	f7ff fc2f 	bl	8000834 <HAL_GetTick>
 8000fd6:	0002      	movs	r2, r0
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	2b64      	cmp	r3, #100	; 0x64
 8000fde:	d901      	bls.n	8000fe4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	e1f5      	b.n	80013d0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <HAL_RCC_OscConfig+0x344>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	2380      	movs	r3, #128	; 0x80
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	4013      	ands	r3, r2
 8000fee:	d0f0      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d10f      	bne.n	8001018 <HAL_RCC_OscConfig+0x348>
 8000ff8:	4b03      	ldr	r3, [pc, #12]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000ffa:	6a1a      	ldr	r2, [r3, #32]
 8000ffc:	4b02      	ldr	r3, [pc, #8]	; (8001008 <HAL_RCC_OscConfig+0x338>)
 8000ffe:	2101      	movs	r1, #1
 8001000:	430a      	orrs	r2, r1
 8001002:	621a      	str	r2, [r3, #32]
 8001004:	e036      	b.n	8001074 <HAL_RCC_OscConfig+0x3a4>
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	40021000 	.word	0x40021000
 800100c:	fffeffff 	.word	0xfffeffff
 8001010:	fffbffff 	.word	0xfffbffff
 8001014:	40007000 	.word	0x40007000
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d10c      	bne.n	800103a <HAL_RCC_OscConfig+0x36a>
 8001020:	4bca      	ldr	r3, [pc, #808]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 8001022:	6a1a      	ldr	r2, [r3, #32]
 8001024:	4bc9      	ldr	r3, [pc, #804]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 8001026:	2101      	movs	r1, #1
 8001028:	438a      	bics	r2, r1
 800102a:	621a      	str	r2, [r3, #32]
 800102c:	4bc7      	ldr	r3, [pc, #796]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 800102e:	6a1a      	ldr	r2, [r3, #32]
 8001030:	4bc6      	ldr	r3, [pc, #792]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 8001032:	2104      	movs	r1, #4
 8001034:	438a      	bics	r2, r1
 8001036:	621a      	str	r2, [r3, #32]
 8001038:	e01c      	b.n	8001074 <HAL_RCC_OscConfig+0x3a4>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	2b05      	cmp	r3, #5
 8001040:	d10c      	bne.n	800105c <HAL_RCC_OscConfig+0x38c>
 8001042:	4bc2      	ldr	r3, [pc, #776]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 8001044:	6a1a      	ldr	r2, [r3, #32]
 8001046:	4bc1      	ldr	r3, [pc, #772]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 8001048:	2104      	movs	r1, #4
 800104a:	430a      	orrs	r2, r1
 800104c:	621a      	str	r2, [r3, #32]
 800104e:	4bbf      	ldr	r3, [pc, #764]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 8001050:	6a1a      	ldr	r2, [r3, #32]
 8001052:	4bbe      	ldr	r3, [pc, #760]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 8001054:	2101      	movs	r1, #1
 8001056:	430a      	orrs	r2, r1
 8001058:	621a      	str	r2, [r3, #32]
 800105a:	e00b      	b.n	8001074 <HAL_RCC_OscConfig+0x3a4>
 800105c:	4bbb      	ldr	r3, [pc, #748]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 800105e:	6a1a      	ldr	r2, [r3, #32]
 8001060:	4bba      	ldr	r3, [pc, #744]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 8001062:	2101      	movs	r1, #1
 8001064:	438a      	bics	r2, r1
 8001066:	621a      	str	r2, [r3, #32]
 8001068:	4bb8      	ldr	r3, [pc, #736]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 800106a:	6a1a      	ldr	r2, [r3, #32]
 800106c:	4bb7      	ldr	r3, [pc, #732]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 800106e:	2104      	movs	r1, #4
 8001070:	438a      	bics	r2, r1
 8001072:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d014      	beq.n	80010a6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800107c:	f7ff fbda 	bl	8000834 <HAL_GetTick>
 8001080:	0003      	movs	r3, r0
 8001082:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001084:	e009      	b.n	800109a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001086:	f7ff fbd5 	bl	8000834 <HAL_GetTick>
 800108a:	0002      	movs	r2, r0
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	4aaf      	ldr	r2, [pc, #700]	; (8001350 <HAL_RCC_OscConfig+0x680>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d901      	bls.n	800109a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001096:	2303      	movs	r3, #3
 8001098:	e19a      	b.n	80013d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800109a:	4bac      	ldr	r3, [pc, #688]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 800109c:	6a1b      	ldr	r3, [r3, #32]
 800109e:	2202      	movs	r2, #2
 80010a0:	4013      	ands	r3, r2
 80010a2:	d0f0      	beq.n	8001086 <HAL_RCC_OscConfig+0x3b6>
 80010a4:	e013      	b.n	80010ce <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010a6:	f7ff fbc5 	bl	8000834 <HAL_GetTick>
 80010aa:	0003      	movs	r3, r0
 80010ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010ae:	e009      	b.n	80010c4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010b0:	f7ff fbc0 	bl	8000834 <HAL_GetTick>
 80010b4:	0002      	movs	r2, r0
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	4aa5      	ldr	r2, [pc, #660]	; (8001350 <HAL_RCC_OscConfig+0x680>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d901      	bls.n	80010c4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80010c0:	2303      	movs	r3, #3
 80010c2:	e185      	b.n	80013d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010c4:	4ba1      	ldr	r3, [pc, #644]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 80010c6:	6a1b      	ldr	r3, [r3, #32]
 80010c8:	2202      	movs	r2, #2
 80010ca:	4013      	ands	r3, r2
 80010cc:	d1f0      	bne.n	80010b0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80010ce:	231f      	movs	r3, #31
 80010d0:	18fb      	adds	r3, r7, r3
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d105      	bne.n	80010e4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010d8:	4b9c      	ldr	r3, [pc, #624]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 80010da:	69da      	ldr	r2, [r3, #28]
 80010dc:	4b9b      	ldr	r3, [pc, #620]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 80010de:	499d      	ldr	r1, [pc, #628]	; (8001354 <HAL_RCC_OscConfig+0x684>)
 80010e0:	400a      	ands	r2, r1
 80010e2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2210      	movs	r2, #16
 80010ea:	4013      	ands	r3, r2
 80010ec:	d063      	beq.n	80011b6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d12a      	bne.n	800114c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80010f6:	4b95      	ldr	r3, [pc, #596]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 80010f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010fa:	4b94      	ldr	r3, [pc, #592]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 80010fc:	2104      	movs	r1, #4
 80010fe:	430a      	orrs	r2, r1
 8001100:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001102:	4b92      	ldr	r3, [pc, #584]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 8001104:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001106:	4b91      	ldr	r3, [pc, #580]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 8001108:	2101      	movs	r1, #1
 800110a:	430a      	orrs	r2, r1
 800110c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800110e:	f7ff fb91 	bl	8000834 <HAL_GetTick>
 8001112:	0003      	movs	r3, r0
 8001114:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001116:	e008      	b.n	800112a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001118:	f7ff fb8c 	bl	8000834 <HAL_GetTick>
 800111c:	0002      	movs	r2, r0
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d901      	bls.n	800112a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e152      	b.n	80013d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800112a:	4b88      	ldr	r3, [pc, #544]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 800112c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800112e:	2202      	movs	r2, #2
 8001130:	4013      	ands	r3, r2
 8001132:	d0f1      	beq.n	8001118 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001134:	4b85      	ldr	r3, [pc, #532]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 8001136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001138:	22f8      	movs	r2, #248	; 0xf8
 800113a:	4393      	bics	r3, r2
 800113c:	0019      	movs	r1, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	00da      	lsls	r2, r3, #3
 8001144:	4b81      	ldr	r3, [pc, #516]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 8001146:	430a      	orrs	r2, r1
 8001148:	635a      	str	r2, [r3, #52]	; 0x34
 800114a:	e034      	b.n	80011b6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	695b      	ldr	r3, [r3, #20]
 8001150:	3305      	adds	r3, #5
 8001152:	d111      	bne.n	8001178 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001154:	4b7d      	ldr	r3, [pc, #500]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 8001156:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001158:	4b7c      	ldr	r3, [pc, #496]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 800115a:	2104      	movs	r1, #4
 800115c:	438a      	bics	r2, r1
 800115e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001160:	4b7a      	ldr	r3, [pc, #488]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 8001162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001164:	22f8      	movs	r2, #248	; 0xf8
 8001166:	4393      	bics	r3, r2
 8001168:	0019      	movs	r1, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	699b      	ldr	r3, [r3, #24]
 800116e:	00da      	lsls	r2, r3, #3
 8001170:	4b76      	ldr	r3, [pc, #472]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 8001172:	430a      	orrs	r2, r1
 8001174:	635a      	str	r2, [r3, #52]	; 0x34
 8001176:	e01e      	b.n	80011b6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001178:	4b74      	ldr	r3, [pc, #464]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 800117a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800117c:	4b73      	ldr	r3, [pc, #460]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 800117e:	2104      	movs	r1, #4
 8001180:	430a      	orrs	r2, r1
 8001182:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001184:	4b71      	ldr	r3, [pc, #452]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 8001186:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001188:	4b70      	ldr	r3, [pc, #448]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 800118a:	2101      	movs	r1, #1
 800118c:	438a      	bics	r2, r1
 800118e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001190:	f7ff fb50 	bl	8000834 <HAL_GetTick>
 8001194:	0003      	movs	r3, r0
 8001196:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001198:	e008      	b.n	80011ac <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800119a:	f7ff fb4b 	bl	8000834 <HAL_GetTick>
 800119e:	0002      	movs	r2, r0
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d901      	bls.n	80011ac <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e111      	b.n	80013d0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80011ac:	4b67      	ldr	r3, [pc, #412]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 80011ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011b0:	2202      	movs	r2, #2
 80011b2:	4013      	ands	r3, r2
 80011b4:	d1f1      	bne.n	800119a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2220      	movs	r2, #32
 80011bc:	4013      	ands	r3, r2
 80011be:	d05c      	beq.n	800127a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80011c0:	4b62      	ldr	r3, [pc, #392]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	220c      	movs	r2, #12
 80011c6:	4013      	ands	r3, r2
 80011c8:	2b0c      	cmp	r3, #12
 80011ca:	d00e      	beq.n	80011ea <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80011cc:	4b5f      	ldr	r3, [pc, #380]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	220c      	movs	r2, #12
 80011d2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80011d4:	2b08      	cmp	r3, #8
 80011d6:	d114      	bne.n	8001202 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80011d8:	4b5c      	ldr	r3, [pc, #368]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	23c0      	movs	r3, #192	; 0xc0
 80011de:	025b      	lsls	r3, r3, #9
 80011e0:	401a      	ands	r2, r3
 80011e2:	23c0      	movs	r3, #192	; 0xc0
 80011e4:	025b      	lsls	r3, r3, #9
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d10b      	bne.n	8001202 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80011ea:	4b58      	ldr	r3, [pc, #352]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 80011ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011ee:	2380      	movs	r3, #128	; 0x80
 80011f0:	025b      	lsls	r3, r3, #9
 80011f2:	4013      	ands	r3, r2
 80011f4:	d040      	beq.n	8001278 <HAL_RCC_OscConfig+0x5a8>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a1b      	ldr	r3, [r3, #32]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d03c      	beq.n	8001278 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e0e6      	b.n	80013d0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6a1b      	ldr	r3, [r3, #32]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d01b      	beq.n	8001242 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800120a:	4b50      	ldr	r3, [pc, #320]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 800120c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800120e:	4b4f      	ldr	r3, [pc, #316]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 8001210:	2180      	movs	r1, #128	; 0x80
 8001212:	0249      	lsls	r1, r1, #9
 8001214:	430a      	orrs	r2, r1
 8001216:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001218:	f7ff fb0c 	bl	8000834 <HAL_GetTick>
 800121c:	0003      	movs	r3, r0
 800121e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001220:	e008      	b.n	8001234 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001222:	f7ff fb07 	bl	8000834 <HAL_GetTick>
 8001226:	0002      	movs	r2, r0
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e0cd      	b.n	80013d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001234:	4b45      	ldr	r3, [pc, #276]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 8001236:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001238:	2380      	movs	r3, #128	; 0x80
 800123a:	025b      	lsls	r3, r3, #9
 800123c:	4013      	ands	r3, r2
 800123e:	d0f0      	beq.n	8001222 <HAL_RCC_OscConfig+0x552>
 8001240:	e01b      	b.n	800127a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001242:	4b42      	ldr	r3, [pc, #264]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 8001244:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001246:	4b41      	ldr	r3, [pc, #260]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 8001248:	4943      	ldr	r1, [pc, #268]	; (8001358 <HAL_RCC_OscConfig+0x688>)
 800124a:	400a      	ands	r2, r1
 800124c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124e:	f7ff faf1 	bl	8000834 <HAL_GetTick>
 8001252:	0003      	movs	r3, r0
 8001254:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001258:	f7ff faec 	bl	8000834 <HAL_GetTick>
 800125c:	0002      	movs	r2, r0
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b02      	cmp	r3, #2
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e0b2      	b.n	80013d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800126a:	4b38      	ldr	r3, [pc, #224]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 800126c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800126e:	2380      	movs	r3, #128	; 0x80
 8001270:	025b      	lsls	r3, r3, #9
 8001272:	4013      	ands	r3, r2
 8001274:	d1f0      	bne.n	8001258 <HAL_RCC_OscConfig+0x588>
 8001276:	e000      	b.n	800127a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001278:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127e:	2b00      	cmp	r3, #0
 8001280:	d100      	bne.n	8001284 <HAL_RCC_OscConfig+0x5b4>
 8001282:	e0a4      	b.n	80013ce <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001284:	4b31      	ldr	r3, [pc, #196]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	220c      	movs	r2, #12
 800128a:	4013      	ands	r3, r2
 800128c:	2b08      	cmp	r3, #8
 800128e:	d100      	bne.n	8001292 <HAL_RCC_OscConfig+0x5c2>
 8001290:	e078      	b.n	8001384 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001296:	2b02      	cmp	r3, #2
 8001298:	d14c      	bne.n	8001334 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800129a:	4b2c      	ldr	r3, [pc, #176]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	4b2b      	ldr	r3, [pc, #172]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 80012a0:	492e      	ldr	r1, [pc, #184]	; (800135c <HAL_RCC_OscConfig+0x68c>)
 80012a2:	400a      	ands	r2, r1
 80012a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a6:	f7ff fac5 	bl	8000834 <HAL_GetTick>
 80012aa:	0003      	movs	r3, r0
 80012ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012b0:	f7ff fac0 	bl	8000834 <HAL_GetTick>
 80012b4:	0002      	movs	r2, r0
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e086      	b.n	80013d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012c2:	4b22      	ldr	r3, [pc, #136]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	2380      	movs	r3, #128	; 0x80
 80012c8:	049b      	lsls	r3, r3, #18
 80012ca:	4013      	ands	r3, r2
 80012cc:	d1f0      	bne.n	80012b0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012ce:	4b1f      	ldr	r3, [pc, #124]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 80012d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d2:	220f      	movs	r2, #15
 80012d4:	4393      	bics	r3, r2
 80012d6:	0019      	movs	r1, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012dc:	4b1b      	ldr	r3, [pc, #108]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 80012de:	430a      	orrs	r2, r1
 80012e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80012e2:	4b1a      	ldr	r3, [pc, #104]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	4a1e      	ldr	r2, [pc, #120]	; (8001360 <HAL_RCC_OscConfig+0x690>)
 80012e8:	4013      	ands	r3, r2
 80012ea:	0019      	movs	r1, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f4:	431a      	orrs	r2, r3
 80012f6:	4b15      	ldr	r3, [pc, #84]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 80012f8:	430a      	orrs	r2, r1
 80012fa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012fc:	4b13      	ldr	r3, [pc, #76]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 8001302:	2180      	movs	r1, #128	; 0x80
 8001304:	0449      	lsls	r1, r1, #17
 8001306:	430a      	orrs	r2, r1
 8001308:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130a:	f7ff fa93 	bl	8000834 <HAL_GetTick>
 800130e:	0003      	movs	r3, r0
 8001310:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001314:	f7ff fa8e 	bl	8000834 <HAL_GetTick>
 8001318:	0002      	movs	r2, r0
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e054      	b.n	80013d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	2380      	movs	r3, #128	; 0x80
 800132c:	049b      	lsls	r3, r3, #18
 800132e:	4013      	ands	r3, r2
 8001330:	d0f0      	beq.n	8001314 <HAL_RCC_OscConfig+0x644>
 8001332:	e04c      	b.n	80013ce <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001334:	4b05      	ldr	r3, [pc, #20]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4b04      	ldr	r3, [pc, #16]	; (800134c <HAL_RCC_OscConfig+0x67c>)
 800133a:	4908      	ldr	r1, [pc, #32]	; (800135c <HAL_RCC_OscConfig+0x68c>)
 800133c:	400a      	ands	r2, r1
 800133e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001340:	f7ff fa78 	bl	8000834 <HAL_GetTick>
 8001344:	0003      	movs	r3, r0
 8001346:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001348:	e015      	b.n	8001376 <HAL_RCC_OscConfig+0x6a6>
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	40021000 	.word	0x40021000
 8001350:	00001388 	.word	0x00001388
 8001354:	efffffff 	.word	0xefffffff
 8001358:	fffeffff 	.word	0xfffeffff
 800135c:	feffffff 	.word	0xfeffffff
 8001360:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001364:	f7ff fa66 	bl	8000834 <HAL_GetTick>
 8001368:	0002      	movs	r2, r0
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e02c      	b.n	80013d0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001376:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <HAL_RCC_OscConfig+0x708>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	2380      	movs	r3, #128	; 0x80
 800137c:	049b      	lsls	r3, r3, #18
 800137e:	4013      	ands	r3, r2
 8001380:	d1f0      	bne.n	8001364 <HAL_RCC_OscConfig+0x694>
 8001382:	e024      	b.n	80013ce <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001388:	2b01      	cmp	r3, #1
 800138a:	d101      	bne.n	8001390 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e01f      	b.n	80013d0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <HAL_RCC_OscConfig+0x708>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <HAL_RCC_OscConfig+0x708>)
 8001398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800139c:	697a      	ldr	r2, [r7, #20]
 800139e:	23c0      	movs	r3, #192	; 0xc0
 80013a0:	025b      	lsls	r3, r3, #9
 80013a2:	401a      	ands	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d10e      	bne.n	80013ca <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	220f      	movs	r2, #15
 80013b0:	401a      	ands	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d107      	bne.n	80013ca <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80013ba:	697a      	ldr	r2, [r7, #20]
 80013bc:	23f0      	movs	r3, #240	; 0xf0
 80013be:	039b      	lsls	r3, r3, #14
 80013c0:	401a      	ands	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d001      	beq.n	80013ce <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e000      	b.n	80013d0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	0018      	movs	r0, r3
 80013d2:	46bd      	mov	sp, r7
 80013d4:	b008      	add	sp, #32
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40021000 	.word	0x40021000

080013dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d101      	bne.n	80013f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e0bf      	b.n	8001570 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013f0:	4b61      	ldr	r3, [pc, #388]	; (8001578 <HAL_RCC_ClockConfig+0x19c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2201      	movs	r2, #1
 80013f6:	4013      	ands	r3, r2
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d911      	bls.n	8001422 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013fe:	4b5e      	ldr	r3, [pc, #376]	; (8001578 <HAL_RCC_ClockConfig+0x19c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2201      	movs	r2, #1
 8001404:	4393      	bics	r3, r2
 8001406:	0019      	movs	r1, r3
 8001408:	4b5b      	ldr	r3, [pc, #364]	; (8001578 <HAL_RCC_ClockConfig+0x19c>)
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	430a      	orrs	r2, r1
 800140e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001410:	4b59      	ldr	r3, [pc, #356]	; (8001578 <HAL_RCC_ClockConfig+0x19c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2201      	movs	r2, #1
 8001416:	4013      	ands	r3, r2
 8001418:	683a      	ldr	r2, [r7, #0]
 800141a:	429a      	cmp	r2, r3
 800141c:	d001      	beq.n	8001422 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e0a6      	b.n	8001570 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2202      	movs	r2, #2
 8001428:	4013      	ands	r3, r2
 800142a:	d015      	beq.n	8001458 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2204      	movs	r2, #4
 8001432:	4013      	ands	r3, r2
 8001434:	d006      	beq.n	8001444 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001436:	4b51      	ldr	r3, [pc, #324]	; (800157c <HAL_RCC_ClockConfig+0x1a0>)
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	4b50      	ldr	r3, [pc, #320]	; (800157c <HAL_RCC_ClockConfig+0x1a0>)
 800143c:	21e0      	movs	r1, #224	; 0xe0
 800143e:	00c9      	lsls	r1, r1, #3
 8001440:	430a      	orrs	r2, r1
 8001442:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001444:	4b4d      	ldr	r3, [pc, #308]	; (800157c <HAL_RCC_ClockConfig+0x1a0>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	22f0      	movs	r2, #240	; 0xf0
 800144a:	4393      	bics	r3, r2
 800144c:	0019      	movs	r1, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	689a      	ldr	r2, [r3, #8]
 8001452:	4b4a      	ldr	r3, [pc, #296]	; (800157c <HAL_RCC_ClockConfig+0x1a0>)
 8001454:	430a      	orrs	r2, r1
 8001456:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2201      	movs	r2, #1
 800145e:	4013      	ands	r3, r2
 8001460:	d04c      	beq.n	80014fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d107      	bne.n	800147a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146a:	4b44      	ldr	r3, [pc, #272]	; (800157c <HAL_RCC_ClockConfig+0x1a0>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	2380      	movs	r3, #128	; 0x80
 8001470:	029b      	lsls	r3, r3, #10
 8001472:	4013      	ands	r3, r2
 8001474:	d120      	bne.n	80014b8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e07a      	b.n	8001570 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2b02      	cmp	r3, #2
 8001480:	d107      	bne.n	8001492 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001482:	4b3e      	ldr	r3, [pc, #248]	; (800157c <HAL_RCC_ClockConfig+0x1a0>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	2380      	movs	r3, #128	; 0x80
 8001488:	049b      	lsls	r3, r3, #18
 800148a:	4013      	ands	r3, r2
 800148c:	d114      	bne.n	80014b8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e06e      	b.n	8001570 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b03      	cmp	r3, #3
 8001498:	d107      	bne.n	80014aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800149a:	4b38      	ldr	r3, [pc, #224]	; (800157c <HAL_RCC_ClockConfig+0x1a0>)
 800149c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800149e:	2380      	movs	r3, #128	; 0x80
 80014a0:	025b      	lsls	r3, r3, #9
 80014a2:	4013      	ands	r3, r2
 80014a4:	d108      	bne.n	80014b8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e062      	b.n	8001570 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014aa:	4b34      	ldr	r3, [pc, #208]	; (800157c <HAL_RCC_ClockConfig+0x1a0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2202      	movs	r2, #2
 80014b0:	4013      	ands	r3, r2
 80014b2:	d101      	bne.n	80014b8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e05b      	b.n	8001570 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014b8:	4b30      	ldr	r3, [pc, #192]	; (800157c <HAL_RCC_ClockConfig+0x1a0>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	2203      	movs	r2, #3
 80014be:	4393      	bics	r3, r2
 80014c0:	0019      	movs	r1, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685a      	ldr	r2, [r3, #4]
 80014c6:	4b2d      	ldr	r3, [pc, #180]	; (800157c <HAL_RCC_ClockConfig+0x1a0>)
 80014c8:	430a      	orrs	r2, r1
 80014ca:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014cc:	f7ff f9b2 	bl	8000834 <HAL_GetTick>
 80014d0:	0003      	movs	r3, r0
 80014d2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014d4:	e009      	b.n	80014ea <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014d6:	f7ff f9ad 	bl	8000834 <HAL_GetTick>
 80014da:	0002      	movs	r2, r0
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	4a27      	ldr	r2, [pc, #156]	; (8001580 <HAL_RCC_ClockConfig+0x1a4>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e042      	b.n	8001570 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ea:	4b24      	ldr	r3, [pc, #144]	; (800157c <HAL_RCC_ClockConfig+0x1a0>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	220c      	movs	r2, #12
 80014f0:	401a      	ands	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d1ec      	bne.n	80014d6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014fc:	4b1e      	ldr	r3, [pc, #120]	; (8001578 <HAL_RCC_ClockConfig+0x19c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2201      	movs	r2, #1
 8001502:	4013      	ands	r3, r2
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	429a      	cmp	r2, r3
 8001508:	d211      	bcs.n	800152e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800150a:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <HAL_RCC_ClockConfig+0x19c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2201      	movs	r2, #1
 8001510:	4393      	bics	r3, r2
 8001512:	0019      	movs	r1, r3
 8001514:	4b18      	ldr	r3, [pc, #96]	; (8001578 <HAL_RCC_ClockConfig+0x19c>)
 8001516:	683a      	ldr	r2, [r7, #0]
 8001518:	430a      	orrs	r2, r1
 800151a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800151c:	4b16      	ldr	r3, [pc, #88]	; (8001578 <HAL_RCC_ClockConfig+0x19c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2201      	movs	r2, #1
 8001522:	4013      	ands	r3, r2
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	429a      	cmp	r2, r3
 8001528:	d001      	beq.n	800152e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e020      	b.n	8001570 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2204      	movs	r2, #4
 8001534:	4013      	ands	r3, r2
 8001536:	d009      	beq.n	800154c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001538:	4b10      	ldr	r3, [pc, #64]	; (800157c <HAL_RCC_ClockConfig+0x1a0>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	4a11      	ldr	r2, [pc, #68]	; (8001584 <HAL_RCC_ClockConfig+0x1a8>)
 800153e:	4013      	ands	r3, r2
 8001540:	0019      	movs	r1, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	68da      	ldr	r2, [r3, #12]
 8001546:	4b0d      	ldr	r3, [pc, #52]	; (800157c <HAL_RCC_ClockConfig+0x1a0>)
 8001548:	430a      	orrs	r2, r1
 800154a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800154c:	f000 f820 	bl	8001590 <HAL_RCC_GetSysClockFreq>
 8001550:	0001      	movs	r1, r0
 8001552:	4b0a      	ldr	r3, [pc, #40]	; (800157c <HAL_RCC_ClockConfig+0x1a0>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	091b      	lsrs	r3, r3, #4
 8001558:	220f      	movs	r2, #15
 800155a:	4013      	ands	r3, r2
 800155c:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <HAL_RCC_ClockConfig+0x1ac>)
 800155e:	5cd3      	ldrb	r3, [r2, r3]
 8001560:	000a      	movs	r2, r1
 8001562:	40da      	lsrs	r2, r3
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <HAL_RCC_ClockConfig+0x1b0>)
 8001566:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001568:	2003      	movs	r0, #3
 800156a:	f7ff f877 	bl	800065c <HAL_InitTick>
  
  return HAL_OK;
 800156e:	2300      	movs	r3, #0
}
 8001570:	0018      	movs	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	b004      	add	sp, #16
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40022000 	.word	0x40022000
 800157c:	40021000 	.word	0x40021000
 8001580:	00001388 	.word	0x00001388
 8001584:	fffff8ff 	.word	0xfffff8ff
 8001588:	08002a6c 	.word	0x08002a6c
 800158c:	20000000 	.word	0x20000000

08001590 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001590:	b590      	push	{r4, r7, lr}
 8001592:	b08f      	sub	sp, #60	; 0x3c
 8001594:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001596:	2314      	movs	r3, #20
 8001598:	18fb      	adds	r3, r7, r3
 800159a:	4a38      	ldr	r2, [pc, #224]	; (800167c <HAL_RCC_GetSysClockFreq+0xec>)
 800159c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800159e:	c313      	stmia	r3!, {r0, r1, r4}
 80015a0:	6812      	ldr	r2, [r2, #0]
 80015a2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80015a4:	1d3b      	adds	r3, r7, #4
 80015a6:	4a36      	ldr	r2, [pc, #216]	; (8001680 <HAL_RCC_GetSysClockFreq+0xf0>)
 80015a8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80015aa:	c313      	stmia	r3!, {r0, r1, r4}
 80015ac:	6812      	ldr	r2, [r2, #0]
 80015ae:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015b4:	2300      	movs	r3, #0
 80015b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80015b8:	2300      	movs	r3, #0
 80015ba:	637b      	str	r3, [r7, #52]	; 0x34
 80015bc:	2300      	movs	r3, #0
 80015be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80015c0:	2300      	movs	r3, #0
 80015c2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80015c4:	4b2f      	ldr	r3, [pc, #188]	; (8001684 <HAL_RCC_GetSysClockFreq+0xf4>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015cc:	220c      	movs	r2, #12
 80015ce:	4013      	ands	r3, r2
 80015d0:	2b0c      	cmp	r3, #12
 80015d2:	d047      	beq.n	8001664 <HAL_RCC_GetSysClockFreq+0xd4>
 80015d4:	d849      	bhi.n	800166a <HAL_RCC_GetSysClockFreq+0xda>
 80015d6:	2b04      	cmp	r3, #4
 80015d8:	d002      	beq.n	80015e0 <HAL_RCC_GetSysClockFreq+0x50>
 80015da:	2b08      	cmp	r3, #8
 80015dc:	d003      	beq.n	80015e6 <HAL_RCC_GetSysClockFreq+0x56>
 80015de:	e044      	b.n	800166a <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015e0:	4b29      	ldr	r3, [pc, #164]	; (8001688 <HAL_RCC_GetSysClockFreq+0xf8>)
 80015e2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80015e4:	e044      	b.n	8001670 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80015e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e8:	0c9b      	lsrs	r3, r3, #18
 80015ea:	220f      	movs	r2, #15
 80015ec:	4013      	ands	r3, r2
 80015ee:	2214      	movs	r2, #20
 80015f0:	18ba      	adds	r2, r7, r2
 80015f2:	5cd3      	ldrb	r3, [r2, r3]
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80015f6:	4b23      	ldr	r3, [pc, #140]	; (8001684 <HAL_RCC_GetSysClockFreq+0xf4>)
 80015f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fa:	220f      	movs	r2, #15
 80015fc:	4013      	ands	r3, r2
 80015fe:	1d3a      	adds	r2, r7, #4
 8001600:	5cd3      	ldrb	r3, [r2, r3]
 8001602:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001606:	23c0      	movs	r3, #192	; 0xc0
 8001608:	025b      	lsls	r3, r3, #9
 800160a:	401a      	ands	r2, r3
 800160c:	2380      	movs	r3, #128	; 0x80
 800160e:	025b      	lsls	r3, r3, #9
 8001610:	429a      	cmp	r2, r3
 8001612:	d109      	bne.n	8001628 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001614:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001616:	481c      	ldr	r0, [pc, #112]	; (8001688 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001618:	f7fe fd76 	bl	8000108 <__udivsi3>
 800161c:	0003      	movs	r3, r0
 800161e:	001a      	movs	r2, r3
 8001620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001622:	4353      	muls	r3, r2
 8001624:	637b      	str	r3, [r7, #52]	; 0x34
 8001626:	e01a      	b.n	800165e <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800162a:	23c0      	movs	r3, #192	; 0xc0
 800162c:	025b      	lsls	r3, r3, #9
 800162e:	401a      	ands	r2, r3
 8001630:	23c0      	movs	r3, #192	; 0xc0
 8001632:	025b      	lsls	r3, r3, #9
 8001634:	429a      	cmp	r2, r3
 8001636:	d109      	bne.n	800164c <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001638:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800163a:	4814      	ldr	r0, [pc, #80]	; (800168c <HAL_RCC_GetSysClockFreq+0xfc>)
 800163c:	f7fe fd64 	bl	8000108 <__udivsi3>
 8001640:	0003      	movs	r3, r0
 8001642:	001a      	movs	r2, r3
 8001644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001646:	4353      	muls	r3, r2
 8001648:	637b      	str	r3, [r7, #52]	; 0x34
 800164a:	e008      	b.n	800165e <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800164c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800164e:	480e      	ldr	r0, [pc, #56]	; (8001688 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001650:	f7fe fd5a 	bl	8000108 <__udivsi3>
 8001654:	0003      	movs	r3, r0
 8001656:	001a      	movs	r2, r3
 8001658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165a:	4353      	muls	r3, r2
 800165c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800165e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001660:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001662:	e005      	b.n	8001670 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001664:	4b09      	ldr	r3, [pc, #36]	; (800168c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001666:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001668:	e002      	b.n	8001670 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800166a:	4b07      	ldr	r3, [pc, #28]	; (8001688 <HAL_RCC_GetSysClockFreq+0xf8>)
 800166c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800166e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001672:	0018      	movs	r0, r3
 8001674:	46bd      	mov	sp, r7
 8001676:	b00f      	add	sp, #60	; 0x3c
 8001678:	bd90      	pop	{r4, r7, pc}
 800167a:	46c0      	nop			; (mov r8, r8)
 800167c:	08002a4c 	.word	0x08002a4c
 8001680:	08002a5c 	.word	0x08002a5c
 8001684:	40021000 	.word	0x40021000
 8001688:	007a1200 	.word	0x007a1200
 800168c:	02dc6c00 	.word	0x02dc6c00

08001690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001694:	4b02      	ldr	r3, [pc, #8]	; (80016a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001696:	681b      	ldr	r3, [r3, #0]
}
 8001698:	0018      	movs	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	20000000 	.word	0x20000000

080016a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80016a8:	f7ff fff2 	bl	8001690 <HAL_RCC_GetHCLKFreq>
 80016ac:	0001      	movs	r1, r0
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	0a1b      	lsrs	r3, r3, #8
 80016b4:	2207      	movs	r2, #7
 80016b6:	4013      	ands	r3, r2
 80016b8:	4a04      	ldr	r2, [pc, #16]	; (80016cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80016ba:	5cd3      	ldrb	r3, [r2, r3]
 80016bc:	40d9      	lsrs	r1, r3
 80016be:	000b      	movs	r3, r1
}    
 80016c0:	0018      	movs	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	40021000 	.word	0x40021000
 80016cc:	08002a7c 	.word	0x08002a7c

080016d0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2207      	movs	r2, #7
 80016de:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80016e0:	4b0e      	ldr	r3, [pc, #56]	; (800171c <HAL_RCC_GetClockConfig+0x4c>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	2203      	movs	r2, #3
 80016e6:	401a      	ands	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80016ec:	4b0b      	ldr	r3, [pc, #44]	; (800171c <HAL_RCC_GetClockConfig+0x4c>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	22f0      	movs	r2, #240	; 0xf0
 80016f2:	401a      	ands	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <HAL_RCC_GetClockConfig+0x4c>)
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	23e0      	movs	r3, #224	; 0xe0
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	401a      	ands	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <HAL_RCC_GetClockConfig+0x50>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2201      	movs	r2, #1
 800170c:	401a      	ands	r2, r3
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	601a      	str	r2, [r3, #0]
}
 8001712:	46c0      	nop			; (mov r8, r8)
 8001714:	46bd      	mov	sp, r7
 8001716:	b002      	add	sp, #8
 8001718:	bd80      	pop	{r7, pc}
 800171a:	46c0      	nop			; (mov r8, r8)
 800171c:	40021000 	.word	0x40021000
 8001720:	40022000 	.word	0x40022000

08001724 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e042      	b.n	80017bc <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	223d      	movs	r2, #61	; 0x3d
 800173a:	5c9b      	ldrb	r3, [r3, r2]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b00      	cmp	r3, #0
 8001740:	d107      	bne.n	8001752 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	223c      	movs	r2, #60	; 0x3c
 8001746:	2100      	movs	r1, #0
 8001748:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	0018      	movs	r0, r3
 800174e:	f000 f839 	bl	80017c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	223d      	movs	r2, #61	; 0x3d
 8001756:	2102      	movs	r1, #2
 8001758:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3304      	adds	r3, #4
 8001762:	0019      	movs	r1, r3
 8001764:	0010      	movs	r0, r2
 8001766:	f000 f9bd 	bl	8001ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2246      	movs	r2, #70	; 0x46
 800176e:	2101      	movs	r1, #1
 8001770:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	223e      	movs	r2, #62	; 0x3e
 8001776:	2101      	movs	r1, #1
 8001778:	5499      	strb	r1, [r3, r2]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	223f      	movs	r2, #63	; 0x3f
 800177e:	2101      	movs	r1, #1
 8001780:	5499      	strb	r1, [r3, r2]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2240      	movs	r2, #64	; 0x40
 8001786:	2101      	movs	r1, #1
 8001788:	5499      	strb	r1, [r3, r2]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2241      	movs	r2, #65	; 0x41
 800178e:	2101      	movs	r1, #1
 8001790:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2242      	movs	r2, #66	; 0x42
 8001796:	2101      	movs	r1, #1
 8001798:	5499      	strb	r1, [r3, r2]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2243      	movs	r2, #67	; 0x43
 800179e:	2101      	movs	r1, #1
 80017a0:	5499      	strb	r1, [r3, r2]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2244      	movs	r2, #68	; 0x44
 80017a6:	2101      	movs	r1, #1
 80017a8:	5499      	strb	r1, [r3, r2]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2245      	movs	r2, #69	; 0x45
 80017ae:	2101      	movs	r1, #1
 80017b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	223d      	movs	r2, #61	; 0x3d
 80017b6:	2101      	movs	r1, #1
 80017b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	0018      	movs	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	b002      	add	sp, #8
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80017cc:	46c0      	nop			; (mov r8, r8)
 80017ce:	46bd      	mov	sp, r7
 80017d0:	b002      	add	sp, #8
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	223d      	movs	r2, #61	; 0x3d
 80017e0:	5c9b      	ldrb	r3, [r3, r2]
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d001      	beq.n	80017ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e03b      	b.n	8001864 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	223d      	movs	r2, #61	; 0x3d
 80017f0:	2102      	movs	r1, #2
 80017f2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	68da      	ldr	r2, [r3, #12]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2101      	movs	r1, #1
 8001800:	430a      	orrs	r2, r1
 8001802:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a18      	ldr	r2, [pc, #96]	; (800186c <HAL_TIM_Base_Start_IT+0x98>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d00f      	beq.n	800182e <HAL_TIM_Base_Start_IT+0x5a>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	2380      	movs	r3, #128	; 0x80
 8001814:	05db      	lsls	r3, r3, #23
 8001816:	429a      	cmp	r2, r3
 8001818:	d009      	beq.n	800182e <HAL_TIM_Base_Start_IT+0x5a>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a14      	ldr	r2, [pc, #80]	; (8001870 <HAL_TIM_Base_Start_IT+0x9c>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d004      	beq.n	800182e <HAL_TIM_Base_Start_IT+0x5a>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a12      	ldr	r2, [pc, #72]	; (8001874 <HAL_TIM_Base_Start_IT+0xa0>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d111      	bne.n	8001852 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	2207      	movs	r2, #7
 8001836:	4013      	ands	r3, r2
 8001838:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2b06      	cmp	r3, #6
 800183e:	d010      	beq.n	8001862 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2101      	movs	r1, #1
 800184c:	430a      	orrs	r2, r1
 800184e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001850:	e007      	b.n	8001862 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2101      	movs	r1, #1
 800185e:	430a      	orrs	r2, r1
 8001860:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	0018      	movs	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	b004      	add	sp, #16
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40012c00 	.word	0x40012c00
 8001870:	40000400 	.word	0x40000400
 8001874:	40014000 	.word	0x40014000

08001878 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	2202      	movs	r2, #2
 8001888:	4013      	ands	r3, r2
 800188a:	2b02      	cmp	r3, #2
 800188c:	d124      	bne.n	80018d8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	2202      	movs	r2, #2
 8001896:	4013      	ands	r3, r2
 8001898:	2b02      	cmp	r3, #2
 800189a:	d11d      	bne.n	80018d8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2203      	movs	r2, #3
 80018a2:	4252      	negs	r2, r2
 80018a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2201      	movs	r2, #1
 80018aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	2203      	movs	r2, #3
 80018b4:	4013      	ands	r3, r2
 80018b6:	d004      	beq.n	80018c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	0018      	movs	r0, r3
 80018bc:	f000 f8fa 	bl	8001ab4 <HAL_TIM_IC_CaptureCallback>
 80018c0:	e007      	b.n	80018d2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	0018      	movs	r0, r3
 80018c6:	f000 f8ed 	bl	8001aa4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	0018      	movs	r0, r3
 80018ce:	f000 f8f9 	bl	8001ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	2204      	movs	r2, #4
 80018e0:	4013      	ands	r3, r2
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	d125      	bne.n	8001932 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	2204      	movs	r2, #4
 80018ee:	4013      	ands	r3, r2
 80018f0:	2b04      	cmp	r3, #4
 80018f2:	d11e      	bne.n	8001932 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2205      	movs	r2, #5
 80018fa:	4252      	negs	r2, r2
 80018fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2202      	movs	r2, #2
 8001902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	699a      	ldr	r2, [r3, #24]
 800190a:	23c0      	movs	r3, #192	; 0xc0
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	4013      	ands	r3, r2
 8001910:	d004      	beq.n	800191c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	0018      	movs	r0, r3
 8001916:	f000 f8cd 	bl	8001ab4 <HAL_TIM_IC_CaptureCallback>
 800191a:	e007      	b.n	800192c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	0018      	movs	r0, r3
 8001920:	f000 f8c0 	bl	8001aa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	0018      	movs	r0, r3
 8001928:	f000 f8cc 	bl	8001ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	2208      	movs	r2, #8
 800193a:	4013      	ands	r3, r2
 800193c:	2b08      	cmp	r3, #8
 800193e:	d124      	bne.n	800198a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	2208      	movs	r2, #8
 8001948:	4013      	ands	r3, r2
 800194a:	2b08      	cmp	r3, #8
 800194c:	d11d      	bne.n	800198a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2209      	movs	r2, #9
 8001954:	4252      	negs	r2, r2
 8001956:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2204      	movs	r2, #4
 800195c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	2203      	movs	r2, #3
 8001966:	4013      	ands	r3, r2
 8001968:	d004      	beq.n	8001974 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	0018      	movs	r0, r3
 800196e:	f000 f8a1 	bl	8001ab4 <HAL_TIM_IC_CaptureCallback>
 8001972:	e007      	b.n	8001984 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	0018      	movs	r0, r3
 8001978:	f000 f894 	bl	8001aa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	0018      	movs	r0, r3
 8001980:	f000 f8a0 	bl	8001ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	2210      	movs	r2, #16
 8001992:	4013      	ands	r3, r2
 8001994:	2b10      	cmp	r3, #16
 8001996:	d125      	bne.n	80019e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	2210      	movs	r2, #16
 80019a0:	4013      	ands	r3, r2
 80019a2:	2b10      	cmp	r3, #16
 80019a4:	d11e      	bne.n	80019e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2211      	movs	r2, #17
 80019ac:	4252      	negs	r2, r2
 80019ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2208      	movs	r2, #8
 80019b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	69da      	ldr	r2, [r3, #28]
 80019bc:	23c0      	movs	r3, #192	; 0xc0
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4013      	ands	r3, r2
 80019c2:	d004      	beq.n	80019ce <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	0018      	movs	r0, r3
 80019c8:	f000 f874 	bl	8001ab4 <HAL_TIM_IC_CaptureCallback>
 80019cc:	e007      	b.n	80019de <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	0018      	movs	r0, r3
 80019d2:	f000 f867 	bl	8001aa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	0018      	movs	r0, r3
 80019da:	f000 f873 	bl	8001ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	2201      	movs	r2, #1
 80019ec:	4013      	ands	r3, r2
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d10f      	bne.n	8001a12 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	2201      	movs	r2, #1
 80019fa:	4013      	ands	r3, r2
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d108      	bne.n	8001a12 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2202      	movs	r2, #2
 8001a06:	4252      	negs	r2, r2
 8001a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	f7fe fde9 	bl	80005e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	2280      	movs	r2, #128	; 0x80
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	2b80      	cmp	r3, #128	; 0x80
 8001a1e:	d10f      	bne.n	8001a40 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	2280      	movs	r2, #128	; 0x80
 8001a28:	4013      	ands	r3, r2
 8001a2a:	2b80      	cmp	r3, #128	; 0x80
 8001a2c:	d108      	bne.n	8001a40 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2281      	movs	r2, #129	; 0x81
 8001a34:	4252      	negs	r2, r2
 8001a36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	f000 f8da 	bl	8001bf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	2240      	movs	r2, #64	; 0x40
 8001a48:	4013      	ands	r3, r2
 8001a4a:	2b40      	cmp	r3, #64	; 0x40
 8001a4c:	d10f      	bne.n	8001a6e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	2240      	movs	r2, #64	; 0x40
 8001a56:	4013      	ands	r3, r2
 8001a58:	2b40      	cmp	r3, #64	; 0x40
 8001a5a:	d108      	bne.n	8001a6e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2241      	movs	r2, #65	; 0x41
 8001a62:	4252      	negs	r2, r2
 8001a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	0018      	movs	r0, r3
 8001a6a:	f000 f833 	bl	8001ad4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	2220      	movs	r2, #32
 8001a76:	4013      	ands	r3, r2
 8001a78:	2b20      	cmp	r3, #32
 8001a7a:	d10f      	bne.n	8001a9c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	2220      	movs	r2, #32
 8001a84:	4013      	ands	r3, r2
 8001a86:	2b20      	cmp	r3, #32
 8001a88:	d108      	bne.n	8001a9c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2221      	movs	r2, #33	; 0x21
 8001a90:	4252      	negs	r2, r2
 8001a92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	0018      	movs	r0, r3
 8001a98:	f000 f8a4 	bl	8001be4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a9c:	46c0      	nop			; (mov r8, r8)
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	b002      	add	sp, #8
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001aac:	46c0      	nop			; (mov r8, r8)
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	b002      	add	sp, #8
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001abc:	46c0      	nop			; (mov r8, r8)
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	b002      	add	sp, #8
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001acc:	46c0      	nop			; (mov r8, r8)
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	b002      	add	sp, #8
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001adc:	46c0      	nop			; (mov r8, r8)
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	b002      	add	sp, #8
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a34      	ldr	r2, [pc, #208]	; (8001bc8 <TIM_Base_SetConfig+0xe4>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d008      	beq.n	8001b0e <TIM_Base_SetConfig+0x2a>
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	2380      	movs	r3, #128	; 0x80
 8001b00:	05db      	lsls	r3, r3, #23
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d003      	beq.n	8001b0e <TIM_Base_SetConfig+0x2a>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a30      	ldr	r2, [pc, #192]	; (8001bcc <TIM_Base_SetConfig+0xe8>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d108      	bne.n	8001b20 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2270      	movs	r2, #112	; 0x70
 8001b12:	4393      	bics	r3, r2
 8001b14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a29      	ldr	r2, [pc, #164]	; (8001bc8 <TIM_Base_SetConfig+0xe4>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d018      	beq.n	8001b5a <TIM_Base_SetConfig+0x76>
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	2380      	movs	r3, #128	; 0x80
 8001b2c:	05db      	lsls	r3, r3, #23
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d013      	beq.n	8001b5a <TIM_Base_SetConfig+0x76>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a25      	ldr	r2, [pc, #148]	; (8001bcc <TIM_Base_SetConfig+0xe8>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d00f      	beq.n	8001b5a <TIM_Base_SetConfig+0x76>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a24      	ldr	r2, [pc, #144]	; (8001bd0 <TIM_Base_SetConfig+0xec>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d00b      	beq.n	8001b5a <TIM_Base_SetConfig+0x76>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a23      	ldr	r2, [pc, #140]	; (8001bd4 <TIM_Base_SetConfig+0xf0>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d007      	beq.n	8001b5a <TIM_Base_SetConfig+0x76>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a22      	ldr	r2, [pc, #136]	; (8001bd8 <TIM_Base_SetConfig+0xf4>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d003      	beq.n	8001b5a <TIM_Base_SetConfig+0x76>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a21      	ldr	r2, [pc, #132]	; (8001bdc <TIM_Base_SetConfig+0xf8>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d108      	bne.n	8001b6c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	4a20      	ldr	r2, [pc, #128]	; (8001be0 <TIM_Base_SetConfig+0xfc>)
 8001b5e:	4013      	ands	r3, r2
 8001b60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2280      	movs	r2, #128	; 0x80
 8001b70:	4393      	bics	r3, r2
 8001b72:	001a      	movs	r2, r3
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	689a      	ldr	r2, [r3, #8]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a0c      	ldr	r2, [pc, #48]	; (8001bc8 <TIM_Base_SetConfig+0xe4>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d00b      	beq.n	8001bb2 <TIM_Base_SetConfig+0xce>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a0d      	ldr	r2, [pc, #52]	; (8001bd4 <TIM_Base_SetConfig+0xf0>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d007      	beq.n	8001bb2 <TIM_Base_SetConfig+0xce>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a0c      	ldr	r2, [pc, #48]	; (8001bd8 <TIM_Base_SetConfig+0xf4>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d003      	beq.n	8001bb2 <TIM_Base_SetConfig+0xce>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a0b      	ldr	r2, [pc, #44]	; (8001bdc <TIM_Base_SetConfig+0xf8>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d103      	bne.n	8001bba <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	691a      	ldr	r2, [r3, #16]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	615a      	str	r2, [r3, #20]
}
 8001bc0:	46c0      	nop			; (mov r8, r8)
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	b004      	add	sp, #16
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40012c00 	.word	0x40012c00
 8001bcc:	40000400 	.word	0x40000400
 8001bd0:	40002000 	.word	0x40002000
 8001bd4:	40014000 	.word	0x40014000
 8001bd8:	40014400 	.word	0x40014400
 8001bdc:	40014800 	.word	0x40014800
 8001be0:	fffffcff 	.word	0xfffffcff

08001be4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001bec:	46c0      	nop			; (mov r8, r8)
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	b002      	add	sp, #8
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001bfc:	46c0      	nop			; (mov r8, r8)
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	b002      	add	sp, #8
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3308      	adds	r3, #8
 8001c10:	001a      	movs	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	4252      	negs	r2, r2
 8001c1c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3308      	adds	r3, #8
 8001c22:	001a      	movs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3308      	adds	r3, #8
 8001c2c:	001a      	movs	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001c38:	46c0      	nop			; (mov r8, r8)
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	b002      	add	sp, #8
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001c4e:	46c0      	nop			; (mov r8, r8)
 8001c50:	46bd      	mov	sp, r7
 8001c52:	b002      	add	sp, #8
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001c56:	b590      	push	{r4, r7, lr}
 8001c58:	b08d      	sub	sp, #52	; 0x34
 8001c5a:	af04      	add	r7, sp, #16
 8001c5c:	60f8      	str	r0, [r7, #12]
 8001c5e:	60b9      	str	r1, [r7, #8]
 8001c60:	603b      	str	r3, [r7, #0]
 8001c62:	1dbb      	adds	r3, r7, #6
 8001c64:	801a      	strh	r2, [r3, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001c66:	1dbb      	adds	r3, r7, #6
 8001c68:	881b      	ldrh	r3, [r3, #0]
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	f000 fccd 	bl	800260c <pvPortMalloc>
 8001c72:	0003      	movs	r3, r0
 8001c74:	617b      	str	r3, [r7, #20]

            if( pxStack != NULL )
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d016      	beq.n	8001caa <xTaskCreate+0x54>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001c7c:	2064      	movs	r0, #100	; 0x64
 8001c7e:	f000 fcc5 	bl	800260c <pvPortMalloc>
 8001c82:	0003      	movs	r3, r0
 8001c84:	61fb      	str	r3, [r7, #28]

                if( pxNewTCB != NULL )
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d009      	beq.n	8001ca0 <xTaskCreate+0x4a>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	2264      	movs	r2, #100	; 0x64
 8001c90:	2100      	movs	r1, #0
 8001c92:	0018      	movs	r0, r3
 8001c94:	f000 fe84 	bl	80029a0 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	631a      	str	r2, [r3, #48]	; 0x30
 8001c9e:	e006      	b.n	8001cae <xTaskCreate+0x58>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f000 fd5a 	bl	800275c <vPortFree>
 8001ca8:	e001      	b.n	8001cae <xTaskCreate+0x58>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d01a      	beq.n	8001cea <xTaskCreate+0x94>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	2263      	movs	r2, #99	; 0x63
 8001cb8:	2100      	movs	r1, #0
 8001cba:	5499      	strb	r1, [r3, r2]
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001cbc:	1dbb      	adds	r3, r7, #6
 8001cbe:	881a      	ldrh	r2, [r3, #0]
 8001cc0:	683c      	ldr	r4, [r7, #0]
 8001cc2:	68b9      	ldr	r1, [r7, #8]
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	9303      	str	r3, [sp, #12]
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	9302      	str	r3, [sp, #8]
 8001cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cd0:	9301      	str	r3, [sp, #4]
 8001cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	0023      	movs	r3, r4
 8001cd8:	f000 f810 	bl	8001cfc <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	0018      	movs	r0, r3
 8001ce0:	f000 f88c 	bl	8001dfc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	61bb      	str	r3, [r7, #24]
 8001ce8:	e002      	b.n	8001cf0 <xTaskCreate+0x9a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001cea:	2301      	movs	r3, #1
 8001cec:	425b      	negs	r3, r3
 8001cee:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001cf0:	69bb      	ldr	r3, [r7, #24]
    }
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	b009      	add	sp, #36	; 0x24
 8001cf8:	bd90      	pop	{r4, r7, pc}
	...

08001cfc <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
 8001d08:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d0c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	001a      	movs	r2, r3
 8001d14:	21a5      	movs	r1, #165	; 0xa5
 8001d16:	f000 fe43 	bl	80029a0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4935      	ldr	r1, [pc, #212]	; (8001df8 <prvInitialiseNewTask+0xfc>)
 8001d22:	468c      	mov	ip, r1
 8001d24:	4463      	add	r3, ip
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	18d3      	adds	r3, r2, r3
 8001d2a:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	2207      	movs	r2, #7
 8001d30:	4393      	bics	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	2207      	movs	r2, #7
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d001      	beq.n	8001d40 <prvInitialiseNewTask+0x44>
 8001d3c:	b672      	cpsid	i
 8001d3e:	e7fe      	b.n	8001d3e <prvInitialiseNewTask+0x42>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d01f      	beq.n	8001d86 <prvInitialiseNewTask+0x8a>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
 8001d4a:	e013      	b.n	8001d74 <prvInitialiseNewTask+0x78>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001d4c:	68ba      	ldr	r2, [r7, #8]
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	18d3      	adds	r3, r2, r3
 8001d52:	7818      	ldrb	r0, [r3, #0]
 8001d54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d56:	2134      	movs	r1, #52	; 0x34
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	18d3      	adds	r3, r2, r3
 8001d5c:	185b      	adds	r3, r3, r1
 8001d5e:	1c02      	adds	r2, r0, #0
 8001d60:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001d62:	68ba      	ldr	r2, [r7, #8]
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	18d3      	adds	r3, r2, r3
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d006      	beq.n	8001d7c <prvInitialiseNewTask+0x80>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	3301      	adds	r3, #1
 8001d72:	617b      	str	r3, [r7, #20]
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	2b0f      	cmp	r3, #15
 8001d78:	d9e8      	bls.n	8001d4c <prvInitialiseNewTask+0x50>
 8001d7a:	e000      	b.n	8001d7e <prvInitialiseNewTask+0x82>
            {
                break;
 8001d7c:	46c0      	nop			; (mov r8, r8)
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d80:	2243      	movs	r2, #67	; 0x43
 8001d82:	2100      	movs	r1, #0
 8001d84:	5499      	strb	r1, [r3, r2]
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001d86:	6a3b      	ldr	r3, [r7, #32]
 8001d88:	2b37      	cmp	r3, #55	; 0x37
 8001d8a:	d901      	bls.n	8001d90 <prvInitialiseNewTask+0x94>
 8001d8c:	b672      	cpsid	i
 8001d8e:	e7fe      	b.n	8001d8e <prvInitialiseNewTask+0x92>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001d90:	6a3b      	ldr	r3, [r7, #32]
 8001d92:	2b37      	cmp	r3, #55	; 0x37
 8001d94:	d901      	bls.n	8001d9a <prvInitialiseNewTask+0x9e>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001d96:	2337      	movs	r3, #55	; 0x37
 8001d98:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d9c:	6a3a      	ldr	r2, [r7, #32]
 8001d9e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da2:	6a3a      	ldr	r2, [r7, #32]
 8001da4:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da8:	3304      	adds	r3, #4
 8001daa:	0018      	movs	r0, r3
 8001dac:	f7ff ff48 	bl	8001c40 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db2:	3318      	adds	r3, #24
 8001db4:	0018      	movs	r0, r3
 8001db6:	f7ff ff43 	bl	8001c40 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001dbe:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001dc0:	6a3b      	ldr	r3, [r7, #32]
 8001dc2:	2238      	movs	r2, #56	; 0x38
 8001dc4:	1ad2      	subs	r2, r2, r3
 8001dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001dce:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	68f9      	ldr	r1, [r7, #12]
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	f000 fb4e 	bl	8002478 <pxPortInitialiseStack>
 8001ddc:	0002      	movs	r2, r0
 8001dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de0:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d002      	beq.n	8001dee <prvInitialiseNewTask+0xf2>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001dec:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001dee:	46c0      	nop			; (mov r8, r8)
 8001df0:	46bd      	mov	sp, r7
 8001df2:	b006      	add	sp, #24
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	46c0      	nop			; (mov r8, r8)
 8001df8:	3fffffff 	.word	0x3fffffff

08001dfc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001e04:	f000 fb90 	bl	8002528 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001e08:	4b3d      	ldr	r3, [pc, #244]	; (8001f00 <prvAddNewTaskToReadyList+0x104>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	1c5a      	adds	r2, r3, #1
 8001e0e:	4b3c      	ldr	r3, [pc, #240]	; (8001f00 <prvAddNewTaskToReadyList+0x104>)
 8001e10:	601a      	str	r2, [r3, #0]

        if( pxCurrentTCB == NULL )
 8001e12:	4b3c      	ldr	r3, [pc, #240]	; (8001f04 <prvAddNewTaskToReadyList+0x108>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d109      	bne.n	8001e2e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001e1a:	4b3a      	ldr	r3, [pc, #232]	; (8001f04 <prvAddNewTaskToReadyList+0x108>)
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	601a      	str	r2, [r3, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001e20:	4b37      	ldr	r3, [pc, #220]	; (8001f00 <prvAddNewTaskToReadyList+0x104>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d110      	bne.n	8001e4a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001e28:	f000 fac8 	bl	80023bc <prvInitialiseTaskLists>
 8001e2c:	e00d      	b.n	8001e4a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001e2e:	4b36      	ldr	r3, [pc, #216]	; (8001f08 <prvAddNewTaskToReadyList+0x10c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d109      	bne.n	8001e4a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001e36:	4b33      	ldr	r3, [pc, #204]	; (8001f04 <prvAddNewTaskToReadyList+0x108>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d802      	bhi.n	8001e4a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001e44:	4b2f      	ldr	r3, [pc, #188]	; (8001f04 <prvAddNewTaskToReadyList+0x108>)
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	601a      	str	r2, [r3, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001e4a:	4b30      	ldr	r3, [pc, #192]	; (8001f0c <prvAddNewTaskToReadyList+0x110>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	1c5a      	adds	r2, r3, #1
 8001e50:	4b2e      	ldr	r3, [pc, #184]	; (8001f0c <prvAddNewTaskToReadyList+0x110>)
 8001e52:	601a      	str	r2, [r3, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001e54:	4b2d      	ldr	r3, [pc, #180]	; (8001f0c <prvAddNewTaskToReadyList+0x110>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	645a      	str	r2, [r3, #68]	; 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e60:	4b2b      	ldr	r3, [pc, #172]	; (8001f10 <prvAddNewTaskToReadyList+0x114>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d903      	bls.n	8001e70 <prvAddNewTaskToReadyList+0x74>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e6c:	4b28      	ldr	r3, [pc, #160]	; (8001f10 <prvAddNewTaskToReadyList+0x114>)
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e74:	4927      	ldr	r1, [pc, #156]	; (8001f14 <prvAddNewTaskToReadyList+0x118>)
 8001e76:	0013      	movs	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	189b      	adds	r3, r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	18cb      	adds	r3, r1, r3
 8001e80:	3304      	adds	r3, #4
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	60da      	str	r2, [r3, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	3204      	adds	r2, #4
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	1d1a      	adds	r2, r3, #4
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	609a      	str	r2, [r3, #8]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eaa:	0013      	movs	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	189b      	adds	r3, r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4a18      	ldr	r2, [pc, #96]	; (8001f14 <prvAddNewTaskToReadyList+0x118>)
 8001eb4:	189a      	adds	r2, r3, r2
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	615a      	str	r2, [r3, #20]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ebe:	4915      	ldr	r1, [pc, #84]	; (8001f14 <prvAddNewTaskToReadyList+0x118>)
 8001ec0:	0013      	movs	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	189b      	adds	r3, r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	585b      	ldr	r3, [r3, r1]
 8001eca:	1c58      	adds	r0, r3, #1
 8001ecc:	4911      	ldr	r1, [pc, #68]	; (8001f14 <prvAddNewTaskToReadyList+0x118>)
 8001ece:	0013      	movs	r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	189b      	adds	r3, r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	5058      	str	r0, [r3, r1]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001ed8:	f000 fb38 	bl	800254c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001edc:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <prvAddNewTaskToReadyList+0x10c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d008      	beq.n	8001ef6 <prvAddNewTaskToReadyList+0xfa>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001ee4:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <prvAddNewTaskToReadyList+0x108>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d201      	bcs.n	8001ef6 <prvAddNewTaskToReadyList+0xfa>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001ef2:	f000 fb09 	bl	8002508 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001ef6:	46c0      	nop			; (mov r8, r8)
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	b004      	add	sp, #16
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	46c0      	nop			; (mov r8, r8)
 8001f00:	20000548 	.word	0x20000548
 8001f04:	20000078 	.word	0x20000078
 8001f08:	20000554 	.word	0x20000554
 8001f0c:	20000564 	.word	0x20000564
 8001f10:	20000550 	.word	0x20000550
 8001f14:	2000007c 	.word	0x2000007c

08001f18 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001f1c:	4b03      	ldr	r3, [pc, #12]	; (8001f2c <vTaskSuspendAll+0x14>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	1c5a      	adds	r2, r3, #1
 8001f22:	4b02      	ldr	r3, [pc, #8]	; (8001f2c <vTaskSuspendAll+0x14>)
 8001f24:	601a      	str	r2, [r3, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001f26:	46c0      	nop			; (mov r8, r8)
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	2000056c 	.word	0x2000056c

08001f30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001f3e:	4b68      	ldr	r3, [pc, #416]	; (80020e0 <xTaskResumeAll+0x1b0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <xTaskResumeAll+0x1a>
 8001f46:	b672      	cpsid	i
 8001f48:	e7fe      	b.n	8001f48 <xTaskResumeAll+0x18>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001f4a:	f000 faed 	bl	8002528 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001f4e:	4b64      	ldr	r3, [pc, #400]	; (80020e0 <xTaskResumeAll+0x1b0>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	1e5a      	subs	r2, r3, #1
 8001f54:	4b62      	ldr	r3, [pc, #392]	; (80020e0 <xTaskResumeAll+0x1b0>)
 8001f56:	601a      	str	r2, [r3, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f58:	4b61      	ldr	r3, [pc, #388]	; (80020e0 <xTaskResumeAll+0x1b0>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d000      	beq.n	8001f62 <xTaskResumeAll+0x32>
 8001f60:	e0b7      	b.n	80020d2 <xTaskResumeAll+0x1a2>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001f62:	4b60      	ldr	r3, [pc, #384]	; (80020e4 <xTaskResumeAll+0x1b4>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d100      	bne.n	8001f6c <xTaskResumeAll+0x3c>
 8001f6a:	e0b2      	b.n	80020d2 <xTaskResumeAll+0x1a2>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001f6c:	e089      	b.n	8002082 <xTaskResumeAll+0x152>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f6e:	4b5e      	ldr	r3, [pc, #376]	; (80020e8 <xTaskResumeAll+0x1b8>)
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7a:	60bb      	str	r3, [r7, #8]
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	69db      	ldr	r3, [r3, #28]
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	6a12      	ldr	r2, [r2, #32]
 8001f84:	609a      	str	r2, [r3, #8]
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	69d2      	ldr	r2, [r2, #28]
 8001f8e:	605a      	str	r2, [r3, #4]
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	3318      	adds	r3, #24
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d103      	bne.n	8001fa4 <xTaskResumeAll+0x74>
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	6a1a      	ldr	r2, [r3, #32]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	605a      	str	r2, [r3, #4]
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	629a      	str	r2, [r3, #40]	; 0x28
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	1e5a      	subs	r2, r3, #1
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	695b      	ldr	r3, [r3, #20]
 8001fb8:	607b      	str	r3, [r7, #4]
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	68d2      	ldr	r2, [r2, #12]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	697a      	ldr	r2, [r7, #20]
 8001fca:	6892      	ldr	r2, [r2, #8]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d103      	bne.n	8001fe2 <xTaskResumeAll+0xb2>
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	68da      	ldr	r2, [r3, #12]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	615a      	str	r2, [r3, #20]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	1e5a      	subs	r2, r3, #1
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ff6:	4b3d      	ldr	r3, [pc, #244]	; (80020ec <xTaskResumeAll+0x1bc>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d903      	bls.n	8002006 <xTaskResumeAll+0xd6>
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002002:	4b3a      	ldr	r3, [pc, #232]	; (80020ec <xTaskResumeAll+0x1bc>)
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800200a:	4939      	ldr	r1, [pc, #228]	; (80020f0 <xTaskResumeAll+0x1c0>)
 800200c:	0013      	movs	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	189b      	adds	r3, r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	18cb      	adds	r3, r1, r3
 8002016:	3304      	adds	r3, #4
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	603b      	str	r3, [r7, #0]
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	609a      	str	r2, [r3, #8]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	689a      	ldr	r2, [r3, #8]
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	60da      	str	r2, [r3, #12]
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	3204      	adds	r2, #4
 8002032:	605a      	str	r2, [r3, #4]
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	1d1a      	adds	r2, r3, #4
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002040:	0013      	movs	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	189b      	adds	r3, r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4a29      	ldr	r2, [pc, #164]	; (80020f0 <xTaskResumeAll+0x1c0>)
 800204a:	189a      	adds	r2, r3, r2
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	615a      	str	r2, [r3, #20]
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002054:	4926      	ldr	r1, [pc, #152]	; (80020f0 <xTaskResumeAll+0x1c0>)
 8002056:	0013      	movs	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	189b      	adds	r3, r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	585b      	ldr	r3, [r3, r1]
 8002060:	1c58      	adds	r0, r3, #1
 8002062:	4923      	ldr	r1, [pc, #140]	; (80020f0 <xTaskResumeAll+0x1c0>)
 8002064:	0013      	movs	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	189b      	adds	r3, r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	5058      	str	r0, [r3, r1]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002072:	4b20      	ldr	r3, [pc, #128]	; (80020f4 <xTaskResumeAll+0x1c4>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002078:	429a      	cmp	r2, r3
 800207a:	d302      	bcc.n	8002082 <xTaskResumeAll+0x152>
                    {
                        xYieldPending = pdTRUE;
 800207c:	4b1e      	ldr	r3, [pc, #120]	; (80020f8 <xTaskResumeAll+0x1c8>)
 800207e:	2201      	movs	r2, #1
 8002080:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002082:	4b19      	ldr	r3, [pc, #100]	; (80020e8 <xTaskResumeAll+0x1b8>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d000      	beq.n	800208c <xTaskResumeAll+0x15c>
 800208a:	e770      	b.n	8001f6e <xTaskResumeAll+0x3e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <xTaskResumeAll+0x166>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002092:	f000 f9d7 	bl	8002444 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002096:	4b19      	ldr	r3, [pc, #100]	; (80020fc <xTaskResumeAll+0x1cc>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00f      	beq.n	80020c2 <xTaskResumeAll+0x192>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80020a2:	f000 f82d 	bl	8002100 <xTaskIncrementTick>
 80020a6:	1e03      	subs	r3, r0, #0
 80020a8:	d002      	beq.n	80020b0 <xTaskResumeAll+0x180>
                            {
                                xYieldPending = pdTRUE;
 80020aa:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <xTaskResumeAll+0x1c8>)
 80020ac:	2201      	movs	r2, #1
 80020ae:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1f2      	bne.n	80020a2 <xTaskResumeAll+0x172>

                        xPendedTicks = 0;
 80020bc:	4b0f      	ldr	r3, [pc, #60]	; (80020fc <xTaskResumeAll+0x1cc>)
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80020c2:	4b0d      	ldr	r3, [pc, #52]	; (80020f8 <xTaskResumeAll+0x1c8>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <xTaskResumeAll+0x1a2>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80020ca:	2301      	movs	r3, #1
 80020cc:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80020ce:	f000 fa1b 	bl	8002508 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80020d2:	f000 fa3b 	bl	800254c <vPortExitCritical>

    return xAlreadyYielded;
 80020d6:	693b      	ldr	r3, [r7, #16]
}
 80020d8:	0018      	movs	r0, r3
 80020da:	46bd      	mov	sp, r7
 80020dc:	b006      	add	sp, #24
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	2000056c 	.word	0x2000056c
 80020e4:	20000548 	.word	0x20000548
 80020e8:	2000050c 	.word	0x2000050c
 80020ec:	20000550 	.word	0x20000550
 80020f0:	2000007c 	.word	0x2000007c
 80020f4:	20000078 	.word	0x20000078
 80020f8:	2000055c 	.word	0x2000055c
 80020fc:	20000558 	.word	0x20000558

08002100 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b088      	sub	sp, #32
 8002104:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800210a:	4b78      	ldr	r3, [pc, #480]	; (80022ec <xTaskIncrementTick+0x1ec>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d000      	beq.n	8002114 <xTaskIncrementTick+0x14>
 8002112:	e0e0      	b.n	80022d6 <xTaskIncrementTick+0x1d6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002114:	4b76      	ldr	r3, [pc, #472]	; (80022f0 <xTaskIncrementTick+0x1f0>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	3301      	adds	r3, #1
 800211a:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800211c:	4b74      	ldr	r3, [pc, #464]	; (80022f0 <xTaskIncrementTick+0x1f0>)
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d117      	bne.n	8002158 <xTaskIncrementTick+0x58>
        {
            taskSWITCH_DELAYED_LISTS();
 8002128:	4b72      	ldr	r3, [pc, #456]	; (80022f4 <xTaskIncrementTick+0x1f4>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <xTaskIncrementTick+0x36>
 8002132:	b672      	cpsid	i
 8002134:	e7fe      	b.n	8002134 <xTaskIncrementTick+0x34>
 8002136:	4b6f      	ldr	r3, [pc, #444]	; (80022f4 <xTaskIncrementTick+0x1f4>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	617b      	str	r3, [r7, #20]
 800213c:	4b6e      	ldr	r3, [pc, #440]	; (80022f8 <xTaskIncrementTick+0x1f8>)
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	4b6c      	ldr	r3, [pc, #432]	; (80022f4 <xTaskIncrementTick+0x1f4>)
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	4b6c      	ldr	r3, [pc, #432]	; (80022f8 <xTaskIncrementTick+0x1f8>)
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	4b6c      	ldr	r3, [pc, #432]	; (80022fc <xTaskIncrementTick+0x1fc>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	1c5a      	adds	r2, r3, #1
 8002150:	4b6a      	ldr	r3, [pc, #424]	; (80022fc <xTaskIncrementTick+0x1fc>)
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	f000 f976 	bl	8002444 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002158:	4b69      	ldr	r3, [pc, #420]	; (8002300 <xTaskIncrementTick+0x200>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	429a      	cmp	r2, r3
 8002160:	d200      	bcs.n	8002164 <xTaskIncrementTick+0x64>
 8002162:	e0a4      	b.n	80022ae <xTaskIncrementTick+0x1ae>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002164:	4b63      	ldr	r3, [pc, #396]	; (80022f4 <xTaskIncrementTick+0x1f4>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d104      	bne.n	8002178 <xTaskIncrementTick+0x78>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800216e:	4b64      	ldr	r3, [pc, #400]	; (8002300 <xTaskIncrementTick+0x200>)
 8002170:	2201      	movs	r2, #1
 8002172:	4252      	negs	r2, r2
 8002174:	601a      	str	r2, [r3, #0]
                    break;
 8002176:	e09a      	b.n	80022ae <xTaskIncrementTick+0x1ae>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002178:	4b5e      	ldr	r3, [pc, #376]	; (80022f4 <xTaskIncrementTick+0x1f4>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	429a      	cmp	r2, r3
 800218e:	d203      	bcs.n	8002198 <xTaskIncrementTick+0x98>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002190:	4b5b      	ldr	r3, [pc, #364]	; (8002300 <xTaskIncrementTick+0x200>)
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002196:	e08a      	b.n	80022ae <xTaskIncrementTick+0x1ae>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	695b      	ldr	r3, [r3, #20]
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	68d2      	ldr	r2, [r2, #12]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	6892      	ldr	r2, [r2, #8]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	3304      	adds	r3, #4
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d103      	bne.n	80021c6 <xTaskIncrementTick+0xc6>
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	68da      	ldr	r2, [r3, #12]
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	2200      	movs	r2, #0
 80021ca:	615a      	str	r2, [r3, #20]
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	1e5a      	subs	r2, r3, #1
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d01e      	beq.n	800221c <xTaskIncrementTick+0x11c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e2:	607b      	str	r3, [r7, #4]
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	69db      	ldr	r3, [r3, #28]
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	6a12      	ldr	r2, [r2, #32]
 80021ec:	609a      	str	r2, [r3, #8]
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	69d2      	ldr	r2, [r2, #28]
 80021f6:	605a      	str	r2, [r3, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	3318      	adds	r3, #24
 8002200:	429a      	cmp	r2, r3
 8002202:	d103      	bne.n	800220c <xTaskIncrementTick+0x10c>
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	6a1a      	ldr	r2, [r3, #32]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	605a      	str	r2, [r3, #4]
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	2200      	movs	r2, #0
 8002210:	629a      	str	r2, [r3, #40]	; 0x28
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	1e5a      	subs	r2, r3, #1
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002220:	4b38      	ldr	r3, [pc, #224]	; (8002304 <xTaskIncrementTick+0x204>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	429a      	cmp	r2, r3
 8002226:	d903      	bls.n	8002230 <xTaskIncrementTick+0x130>
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800222c:	4b35      	ldr	r3, [pc, #212]	; (8002304 <xTaskIncrementTick+0x204>)
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002234:	4934      	ldr	r1, [pc, #208]	; (8002308 <xTaskIncrementTick+0x208>)
 8002236:	0013      	movs	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	189b      	adds	r3, r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	18cb      	adds	r3, r1, r3
 8002240:	3304      	adds	r3, #4
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	603b      	str	r3, [r7, #0]
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	60da      	str	r2, [r3, #12]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	3204      	adds	r2, #4
 800225c:	605a      	str	r2, [r3, #4]
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1d1a      	adds	r2, r3, #4
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	609a      	str	r2, [r3, #8]
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800226a:	0013      	movs	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	189b      	adds	r3, r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4a25      	ldr	r2, [pc, #148]	; (8002308 <xTaskIncrementTick+0x208>)
 8002274:	189a      	adds	r2, r3, r2
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	615a      	str	r2, [r3, #20]
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800227e:	4922      	ldr	r1, [pc, #136]	; (8002308 <xTaskIncrementTick+0x208>)
 8002280:	0013      	movs	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	189b      	adds	r3, r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	585b      	ldr	r3, [r3, r1]
 800228a:	1c58      	adds	r0, r3, #1
 800228c:	491e      	ldr	r1, [pc, #120]	; (8002308 <xTaskIncrementTick+0x208>)
 800228e:	0013      	movs	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	189b      	adds	r3, r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	5058      	str	r0, [r3, r1]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800229c:	4b1b      	ldr	r3, [pc, #108]	; (800230c <xTaskIncrementTick+0x20c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d800      	bhi.n	80022a8 <xTaskIncrementTick+0x1a8>
 80022a6:	e75d      	b.n	8002164 <xTaskIncrementTick+0x64>
                        {
                            xSwitchRequired = pdTRUE;
 80022a8:	2301      	movs	r3, #1
 80022aa:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80022ac:	e75a      	b.n	8002164 <xTaskIncrementTick+0x64>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80022ae:	4b17      	ldr	r3, [pc, #92]	; (800230c <xTaskIncrementTick+0x20c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022b4:	4914      	ldr	r1, [pc, #80]	; (8002308 <xTaskIncrementTick+0x208>)
 80022b6:	0013      	movs	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	189b      	adds	r3, r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	585b      	ldr	r3, [r3, r1]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d901      	bls.n	80022c8 <xTaskIncrementTick+0x1c8>
            {
                xSwitchRequired = pdTRUE;
 80022c4:	2301      	movs	r3, #1
 80022c6:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80022c8:	4b11      	ldr	r3, [pc, #68]	; (8002310 <xTaskIncrementTick+0x210>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d007      	beq.n	80022e0 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 80022d0:	2301      	movs	r3, #1
 80022d2:	61fb      	str	r3, [r7, #28]
 80022d4:	e004      	b.n	80022e0 <xTaskIncrementTick+0x1e0>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80022d6:	4b0f      	ldr	r3, [pc, #60]	; (8002314 <xTaskIncrementTick+0x214>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	4b0d      	ldr	r3, [pc, #52]	; (8002314 <xTaskIncrementTick+0x214>)
 80022de:	601a      	str	r2, [r3, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80022e0:	69fb      	ldr	r3, [r7, #28]
}
 80022e2:	0018      	movs	r0, r3
 80022e4:	46bd      	mov	sp, r7
 80022e6:	b008      	add	sp, #32
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	2000056c 	.word	0x2000056c
 80022f0:	2000054c 	.word	0x2000054c
 80022f4:	20000504 	.word	0x20000504
 80022f8:	20000508 	.word	0x20000508
 80022fc:	20000560 	.word	0x20000560
 8002300:	20000568 	.word	0x20000568
 8002304:	20000550 	.word	0x20000550
 8002308:	2000007c 	.word	0x2000007c
 800230c:	20000078 	.word	0x20000078
 8002310:	2000055c 	.word	0x2000055c
 8002314:	20000558 	.word	0x20000558

08002318 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800231e:	4b22      	ldr	r3, [pc, #136]	; (80023a8 <vTaskSwitchContext+0x90>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002326:	4b21      	ldr	r3, [pc, #132]	; (80023ac <vTaskSwitchContext+0x94>)
 8002328:	2201      	movs	r2, #1
 800232a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800232c:	e037      	b.n	800239e <vTaskSwitchContext+0x86>
        xYieldPending = pdFALSE;
 800232e:	4b1f      	ldr	r3, [pc, #124]	; (80023ac <vTaskSwitchContext+0x94>)
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002334:	4b1e      	ldr	r3, [pc, #120]	; (80023b0 <vTaskSwitchContext+0x98>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	607b      	str	r3, [r7, #4]
 800233a:	e007      	b.n	800234c <vTaskSwitchContext+0x34>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <vTaskSwitchContext+0x2e>
 8002342:	b672      	cpsid	i
 8002344:	e7fe      	b.n	8002344 <vTaskSwitchContext+0x2c>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	3b01      	subs	r3, #1
 800234a:	607b      	str	r3, [r7, #4]
 800234c:	4919      	ldr	r1, [pc, #100]	; (80023b4 <vTaskSwitchContext+0x9c>)
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	0013      	movs	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	189b      	adds	r3, r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	585b      	ldr	r3, [r3, r1]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0ee      	beq.n	800233c <vTaskSwitchContext+0x24>
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	0013      	movs	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	189b      	adds	r3, r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4a12      	ldr	r2, [pc, #72]	; (80023b4 <vTaskSwitchContext+0x9c>)
 800236a:	189b      	adds	r3, r3, r2
 800236c:	603b      	str	r3, [r7, #0]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	605a      	str	r2, [r3, #4]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	3308      	adds	r3, #8
 8002380:	429a      	cmp	r2, r3
 8002382:	d104      	bne.n	800238e <vTaskSwitchContext+0x76>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	68da      	ldr	r2, [r3, #12]
 8002394:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <vTaskSwitchContext+0xa0>)
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <vTaskSwitchContext+0x98>)
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	601a      	str	r2, [r3, #0]
}
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	46bd      	mov	sp, r7
 80023a2:	b002      	add	sp, #8
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	46c0      	nop			; (mov r8, r8)
 80023a8:	2000056c 	.word	0x2000056c
 80023ac:	2000055c 	.word	0x2000055c
 80023b0:	20000550 	.word	0x20000550
 80023b4:	2000007c 	.word	0x2000007c
 80023b8:	20000078 	.word	0x20000078

080023bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80023c2:	2300      	movs	r3, #0
 80023c4:	607b      	str	r3, [r7, #4]
 80023c6:	e00c      	b.n	80023e2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	0013      	movs	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	189b      	adds	r3, r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4a14      	ldr	r2, [pc, #80]	; (8002424 <prvInitialiseTaskLists+0x68>)
 80023d4:	189b      	adds	r3, r3, r2
 80023d6:	0018      	movs	r0, r3
 80023d8:	f7ff fc14 	bl	8001c04 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3301      	adds	r3, #1
 80023e0:	607b      	str	r3, [r7, #4]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b37      	cmp	r3, #55	; 0x37
 80023e6:	d9ef      	bls.n	80023c8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80023e8:	4b0f      	ldr	r3, [pc, #60]	; (8002428 <prvInitialiseTaskLists+0x6c>)
 80023ea:	0018      	movs	r0, r3
 80023ec:	f7ff fc0a 	bl	8001c04 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80023f0:	4b0e      	ldr	r3, [pc, #56]	; (800242c <prvInitialiseTaskLists+0x70>)
 80023f2:	0018      	movs	r0, r3
 80023f4:	f7ff fc06 	bl	8001c04 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80023f8:	4b0d      	ldr	r3, [pc, #52]	; (8002430 <prvInitialiseTaskLists+0x74>)
 80023fa:	0018      	movs	r0, r3
 80023fc:	f7ff fc02 	bl	8001c04 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002400:	4b0c      	ldr	r3, [pc, #48]	; (8002434 <prvInitialiseTaskLists+0x78>)
 8002402:	0018      	movs	r0, r3
 8002404:	f7ff fbfe 	bl	8001c04 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002408:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <prvInitialiseTaskLists+0x7c>)
 800240a:	0018      	movs	r0, r3
 800240c:	f7ff fbfa 	bl	8001c04 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002410:	4b0a      	ldr	r3, [pc, #40]	; (800243c <prvInitialiseTaskLists+0x80>)
 8002412:	4a05      	ldr	r2, [pc, #20]	; (8002428 <prvInitialiseTaskLists+0x6c>)
 8002414:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002416:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <prvInitialiseTaskLists+0x84>)
 8002418:	4a04      	ldr	r2, [pc, #16]	; (800242c <prvInitialiseTaskLists+0x70>)
 800241a:	601a      	str	r2, [r3, #0]
}
 800241c:	46c0      	nop			; (mov r8, r8)
 800241e:	46bd      	mov	sp, r7
 8002420:	b002      	add	sp, #8
 8002422:	bd80      	pop	{r7, pc}
 8002424:	2000007c 	.word	0x2000007c
 8002428:	200004dc 	.word	0x200004dc
 800242c:	200004f0 	.word	0x200004f0
 8002430:	2000050c 	.word	0x2000050c
 8002434:	20000520 	.word	0x20000520
 8002438:	20000534 	.word	0x20000534
 800243c:	20000504 	.word	0x20000504
 8002440:	20000508 	.word	0x20000508

08002444 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002448:	4b09      	ldr	r3, [pc, #36]	; (8002470 <prvResetNextTaskUnblockTime+0x2c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d104      	bne.n	800245c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002452:	4b08      	ldr	r3, [pc, #32]	; (8002474 <prvResetNextTaskUnblockTime+0x30>)
 8002454:	2201      	movs	r2, #1
 8002456:	4252      	negs	r2, r2
 8002458:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800245a:	e005      	b.n	8002468 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800245c:	4b04      	ldr	r3, [pc, #16]	; (8002470 <prvResetNextTaskUnblockTime+0x2c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	4b03      	ldr	r3, [pc, #12]	; (8002474 <prvResetNextTaskUnblockTime+0x30>)
 8002466:	601a      	str	r2, [r3, #0]
}
 8002468:	46c0      	nop			; (mov r8, r8)
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	20000504 	.word	0x20000504
 8002474:	20000568 	.word	0x20000568

08002478 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	3b04      	subs	r3, #4
 8002488:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2280      	movs	r2, #128	; 0x80
 800248e:	0452      	lsls	r2, r2, #17
 8002490:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	3b04      	subs	r3, #4
 8002496:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 8002498:	68ba      	ldr	r2, [r7, #8]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	3b04      	subs	r3, #4
 80024a2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 80024a4:	4a08      	ldr	r2, [pc, #32]	; (80024c8 <pxPortInitialiseStack+0x50>)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                       /* R12, R3, R2 and R1. */
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	3b14      	subs	r3, #20
 80024ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                       /* R11..R4. */
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	3b20      	subs	r3, #32
 80024ba:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80024bc:	68fb      	ldr	r3, [r7, #12]
}
 80024be:	0018      	movs	r0, r3
 80024c0:	46bd      	mov	sp, r7
 80024c2:	b004      	add	sp, #16
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	080024cd 	.word	0x080024cd

080024cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 80024d2:	2300      	movs	r3, #0
 80024d4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80024d6:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <prvTaskExitError+0x2c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	3301      	adds	r3, #1
 80024dc:	d001      	beq.n	80024e2 <prvTaskExitError+0x16>
 80024de:	b672      	cpsid	i
 80024e0:	e7fe      	b.n	80024e0 <prvTaskExitError+0x14>
    portDISABLE_INTERRUPTS();
 80024e2:	b672      	cpsid	i

    while( ulDummy == 0 )
 80024e4:	46c0      	nop			; (mov r8, r8)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0fc      	beq.n	80024e6 <prvTaskExitError+0x1a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80024ec:	46c0      	nop			; (mov r8, r8)
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	46bd      	mov	sp, r7
 80024f2:	b002      	add	sp, #8
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	46c0      	nop			; (mov r8, r8)
 80024f8:	2000000c 	.word	0x2000000c

080024fc <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
    /* This function is no longer used, but retained for backward
     * compatibility. */
}
 8002500:	46c0      	nop			; (mov r8, r8)
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
	...

08002508 <vPortYield>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800250c:	4b05      	ldr	r3, [pc, #20]	; (8002524 <vPortYield+0x1c>)
 800250e:	2280      	movs	r2, #128	; 0x80
 8002510:	0552      	lsls	r2, r2, #21
 8002512:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is completely
     * within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8002514:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8002518:	f3bf 8f6f 	isb	sy
}
 800251c:	46c0      	nop			; (mov r8, r8)
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	e000ed04 	.word	0xe000ed04

08002528 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 800252c:	b672      	cpsid	i
    uxCriticalNesting++;
 800252e:	4b06      	ldr	r3, [pc, #24]	; (8002548 <vPortEnterCritical+0x20>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	1c5a      	adds	r2, r3, #1
 8002534:	4b04      	ldr	r3, [pc, #16]	; (8002548 <vPortEnterCritical+0x20>)
 8002536:	601a      	str	r2, [r3, #0]
    __asm volatile ( "dsb" ::: "memory" );
 8002538:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800253c:	f3bf 8f6f 	isb	sy
}
 8002540:	46c0      	nop			; (mov r8, r8)
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	2000000c 	.word	0x2000000c

0800254c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002550:	4b09      	ldr	r3, [pc, #36]	; (8002578 <vPortExitCritical+0x2c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <vPortExitCritical+0x10>
 8002558:	b672      	cpsid	i
 800255a:	e7fe      	b.n	800255a <vPortExitCritical+0xe>
    uxCriticalNesting--;
 800255c:	4b06      	ldr	r3, [pc, #24]	; (8002578 <vPortExitCritical+0x2c>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	1e5a      	subs	r2, r3, #1
 8002562:	4b05      	ldr	r3, [pc, #20]	; (8002578 <vPortExitCritical+0x2c>)
 8002564:	601a      	str	r2, [r3, #0]

    if( uxCriticalNesting == 0 )
 8002566:	4b04      	ldr	r3, [pc, #16]	; (8002578 <vPortExitCritical+0x2c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d100      	bne.n	8002570 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 800256e:	b662      	cpsie	i
    }
}
 8002570:	46c0      	nop			; (mov r8, r8)
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	46c0      	nop			; (mov r8, r8)
 8002578:	2000000c 	.word	0x2000000c

0800257c <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 800257c:	f3ef 8010 	mrs	r0, PRIMASK
 8002580:	b672      	cpsid	i
 8002582:	4770      	bx	lr
        " mrs r0, PRIMASK	\n"
        " cpsid i			\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8002584:	46c0      	nop			; (mov r8, r8)
 8002586:	0018      	movs	r0, r3

08002588 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 8002588:	f380 8810 	msr	PRIMASK, r0
 800258c:	4770      	bx	lr
        " msr PRIMASK, r0	\n"
        " bx lr				  "
        ::: "memory"
        );
}
 800258e:	46c0      	nop			; (mov r8, r8)

08002590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002590:	f3ef 8009 	mrs	r0, PSP
 8002594:	4b0e      	ldr	r3, [pc, #56]	; (80025d0 <pxCurrentTCBConst>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	3820      	subs	r0, #32
 800259a:	6010      	str	r0, [r2, #0]
 800259c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800259e:	4644      	mov	r4, r8
 80025a0:	464d      	mov	r5, r9
 80025a2:	4656      	mov	r6, sl
 80025a4:	465f      	mov	r7, fp
 80025a6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80025a8:	b508      	push	{r3, lr}
 80025aa:	b672      	cpsid	i
 80025ac:	f7ff feb4 	bl	8002318 <vTaskSwitchContext>
 80025b0:	b662      	cpsie	i
 80025b2:	bc0c      	pop	{r2, r3}
 80025b4:	6811      	ldr	r1, [r2, #0]
 80025b6:	6808      	ldr	r0, [r1, #0]
 80025b8:	3010      	adds	r0, #16
 80025ba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80025bc:	46a0      	mov	r8, r4
 80025be:	46a9      	mov	r9, r5
 80025c0:	46b2      	mov	sl, r6
 80025c2:	46bb      	mov	fp, r7
 80025c4:	f380 8809 	msr	PSP, r0
 80025c8:	3820      	subs	r0, #32
 80025ca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80025cc:	4718      	bx	r3
 80025ce:	46c0      	nop			; (mov r8, r8)

080025d0 <pxCurrentTCBConst>:
 80025d0:	20000078 	.word	0x20000078
        "	bx r3								\n"
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	  "
    );
}
 80025d4:	46c0      	nop			; (mov r8, r8)
 80025d6:	46c0      	nop			; (mov r8, r8)

080025d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80025de:	f7ff ffcd 	bl	800257c <ulSetInterruptMaskFromISR>
 80025e2:	0003      	movs	r3, r0
 80025e4:	607b      	str	r3, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80025e6:	f7ff fd8b 	bl	8002100 <xTaskIncrementTick>
 80025ea:	1e03      	subs	r3, r0, #0
 80025ec:	d003      	beq.n	80025f6 <SysTick_Handler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80025ee:	4b06      	ldr	r3, [pc, #24]	; (8002608 <SysTick_Handler+0x30>)
 80025f0:	2280      	movs	r2, #128	; 0x80
 80025f2:	0552      	lsls	r2, r2, #21
 80025f4:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	0018      	movs	r0, r3
 80025fa:	f7ff ffc5 	bl	8002588 <vClearInterruptMaskFromISR>
}
 80025fe:	46c0      	nop			; (mov r8, r8)
 8002600:	46bd      	mov	sp, r7
 8002602:	b002      	add	sp, #8
 8002604:	bd80      	pop	{r7, pc}
 8002606:	46c0      	nop			; (mov r8, r8)
 8002608:	e000ed04 	.word	0xe000ed04

0800260c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b088      	sub	sp, #32
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8002618:	f7ff fc7e 	bl	8001f18 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800261c:	4b4a      	ldr	r3, [pc, #296]	; (8002748 <pvPortMalloc+0x13c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002624:	f000 f8e6 	bl	80027f4 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d012      	beq.n	8002654 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800262e:	2208      	movs	r2, #8
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2107      	movs	r1, #7
 8002634:	400b      	ands	r3, r1
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	3308      	adds	r3, #8
 800263a:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	43db      	mvns	r3, r3
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	429a      	cmp	r2, r3
 8002644:	d804      	bhi.n	8002650 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	18d3      	adds	r3, r2, r3
 800264c:	607b      	str	r3, [r7, #4]
 800264e:	e001      	b.n	8002654 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8002650:	2300      	movs	r3, #0
 8002652:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	db68      	blt.n	800272c <pvPortMalloc+0x120>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d065      	beq.n	800272c <pvPortMalloc+0x120>
 8002660:	4b3a      	ldr	r3, [pc, #232]	; (800274c <pvPortMalloc+0x140>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	429a      	cmp	r2, r3
 8002668:	d860      	bhi.n	800272c <pvPortMalloc+0x120>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800266a:	4b39      	ldr	r3, [pc, #228]	; (8002750 <pvPortMalloc+0x144>)
 800266c:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 800266e:	4b38      	ldr	r3, [pc, #224]	; (8002750 <pvPortMalloc+0x144>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002674:	e004      	b.n	8002680 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	429a      	cmp	r2, r3
 8002688:	d903      	bls.n	8002692 <pvPortMalloc+0x86>
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f1      	bne.n	8002676 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002692:	4b2d      	ldr	r3, [pc, #180]	; (8002748 <pvPortMalloc+0x13c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	69fa      	ldr	r2, [r7, #28]
 8002698:	429a      	cmp	r2, r3
 800269a:	d047      	beq.n	800272c <pvPortMalloc+0x120>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2208      	movs	r2, #8
 80026a2:	189b      	adds	r3, r3, r2
 80026a4:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	1ad2      	subs	r2, r2, r3
 80026b6:	2308      	movs	r3, #8
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d916      	bls.n	80026ec <pvPortMalloc+0xe0>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80026be:	69fa      	ldr	r2, [r7, #28]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	18d3      	adds	r3, r2, r3
 80026c4:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2207      	movs	r2, #7
 80026ca:	4013      	ands	r3, r2
 80026cc:	d001      	beq.n	80026d2 <pvPortMalloc+0xc6>
 80026ce:	b672      	cpsid	i
 80026d0:	e7fe      	b.n	80026d0 <pvPortMalloc+0xc4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	1ad2      	subs	r2, r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	0018      	movs	r0, r3
 80026e8:	f000 f8de 	bl	80028a8 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80026ec:	4b17      	ldr	r3, [pc, #92]	; (800274c <pvPortMalloc+0x140>)
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	1ad2      	subs	r2, r2, r3
 80026f6:	4b15      	ldr	r3, [pc, #84]	; (800274c <pvPortMalloc+0x140>)
 80026f8:	601a      	str	r2, [r3, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80026fa:	4b14      	ldr	r3, [pc, #80]	; (800274c <pvPortMalloc+0x140>)
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	4b15      	ldr	r3, [pc, #84]	; (8002754 <pvPortMalloc+0x148>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	429a      	cmp	r2, r3
 8002704:	d203      	bcs.n	800270e <pvPortMalloc+0x102>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002706:	4b11      	ldr	r3, [pc, #68]	; (800274c <pvPortMalloc+0x140>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	4b12      	ldr	r3, [pc, #72]	; (8002754 <pvPortMalloc+0x148>)
 800270c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2280      	movs	r2, #128	; 0x80
 8002714:	0612      	lsls	r2, r2, #24
 8002716:	431a      	orrs	r2, r3
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002722:	4b0d      	ldr	r3, [pc, #52]	; (8002758 <pvPortMalloc+0x14c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	1c5a      	adds	r2, r3, #1
 8002728:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <pvPortMalloc+0x14c>)
 800272a:	601a      	str	r2, [r3, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800272c:	f7ff fc00 	bl	8001f30 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	2207      	movs	r2, #7
 8002734:	4013      	ands	r3, r2
 8002736:	d001      	beq.n	800273c <pvPortMalloc+0x130>
 8002738:	b672      	cpsid	i
 800273a:	e7fe      	b.n	800273a <pvPortMalloc+0x12e>
    return pvReturn;
 800273c:	697b      	ldr	r3, [r7, #20]
}
 800273e:	0018      	movs	r0, r3
 8002740:	46bd      	mov	sp, r7
 8002742:	b008      	add	sp, #32
 8002744:	bd80      	pop	{r7, pc}
 8002746:	46c0      	nop			; (mov r8, r8)
 8002748:	20001d78 	.word	0x20001d78
 800274c:	20001d7c 	.word	0x20001d7c
 8002750:	20001d70 	.word	0x20001d70
 8002754:	20001d80 	.word	0x20001d80
 8002758:	20001d84 	.word	0x20001d84

0800275c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d039      	beq.n	80027e2 <vPortFree+0x86>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800276e:	2308      	movs	r3, #8
 8002770:	425b      	negs	r3, r3
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	18d3      	adds	r3, r2, r3
 8002776:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	db01      	blt.n	8002788 <vPortFree+0x2c>
 8002784:	b672      	cpsid	i
 8002786:	e7fe      	b.n	8002786 <vPortFree+0x2a>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <vPortFree+0x38>
 8002790:	b672      	cpsid	i
 8002792:	e7fe      	b.n	8002792 <vPortFree+0x36>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	0fdb      	lsrs	r3, r3, #31
 800279a:	1c1a      	adds	r2, r3, #0
 800279c:	2301      	movs	r3, #1
 800279e:	4013      	ands	r3, r2
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d01d      	beq.n	80027e2 <vPortFree+0x86>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d119      	bne.n	80027e2 <vPortFree+0x86>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	085a      	lsrs	r2, r3, #1
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80027ba:	f7ff fbad 	bl	8001f18 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	4b0a      	ldr	r3, [pc, #40]	; (80027ec <vPortFree+0x90>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	18d2      	adds	r2, r2, r3
 80027c8:	4b08      	ldr	r3, [pc, #32]	; (80027ec <vPortFree+0x90>)
 80027ca:	601a      	str	r2, [r3, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	0018      	movs	r0, r3
 80027d0:	f000 f86a 	bl	80028a8 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80027d4:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <vPortFree+0x94>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	1c5a      	adds	r2, r3, #1
 80027da:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <vPortFree+0x94>)
 80027dc:	601a      	str	r2, [r3, #0]
                }
                ( void ) xTaskResumeAll();
 80027de:	f7ff fba7 	bl	8001f30 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	46bd      	mov	sp, r7
 80027e6:	b004      	add	sp, #16
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	46c0      	nop			; (mov r8, r8)
 80027ec:	20001d7c 	.word	0x20001d7c
 80027f0:	20001d88 	.word	0x20001d88

080027f4 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80027fa:	23c0      	movs	r3, #192	; 0xc0
 80027fc:	015b      	lsls	r3, r3, #5
 80027fe:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002800:	4b24      	ldr	r3, [pc, #144]	; (8002894 <prvHeapInit+0xa0>)
 8002802:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2207      	movs	r2, #7
 8002808:	4013      	ands	r3, r2
 800280a:	d00c      	beq.n	8002826 <prvHeapInit+0x32>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	3307      	adds	r3, #7
 8002810:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2207      	movs	r2, #7
 8002816:	4393      	bics	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	1ad2      	subs	r2, r2, r3
 8002820:	4b1c      	ldr	r3, [pc, #112]	; (8002894 <prvHeapInit+0xa0>)
 8002822:	18d3      	adds	r3, r2, r3
 8002824:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800282a:	4b1b      	ldr	r3, [pc, #108]	; (8002898 <prvHeapInit+0xa4>)
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	601a      	str	r2, [r3, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002830:	4b19      	ldr	r3, [pc, #100]	; (8002898 <prvHeapInit+0xa4>)
 8002832:	2200      	movs	r2, #0
 8002834:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	18d3      	adds	r3, r2, r3
 800283c:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800283e:	2208      	movs	r2, #8
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	1a9b      	subs	r3, r3, r2
 8002844:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2207      	movs	r2, #7
 800284a:	4393      	bics	r3, r2
 800284c:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	4b12      	ldr	r3, [pc, #72]	; (800289c <prvHeapInit+0xa8>)
 8002852:	601a      	str	r2, [r3, #0]
    pxEnd->xBlockSize = 0;
 8002854:	4b11      	ldr	r3, [pc, #68]	; (800289c <prvHeapInit+0xa8>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2200      	movs	r2, #0
 800285a:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800285c:	4b0f      	ldr	r3, [pc, #60]	; (800289c <prvHeapInit+0xa8>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	1ad2      	subs	r2, r2, r3
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002872:	4b0a      	ldr	r3, [pc, #40]	; (800289c <prvHeapInit+0xa8>)
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	4b08      	ldr	r3, [pc, #32]	; (80028a0 <prvHeapInit+0xac>)
 8002880:	601a      	str	r2, [r3, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	4b07      	ldr	r3, [pc, #28]	; (80028a4 <prvHeapInit+0xb0>)
 8002888:	601a      	str	r2, [r3, #0]
}
 800288a:	46c0      	nop			; (mov r8, r8)
 800288c:	46bd      	mov	sp, r7
 800288e:	b004      	add	sp, #16
 8002890:	bd80      	pop	{r7, pc}
 8002892:	46c0      	nop			; (mov r8, r8)
 8002894:	20000570 	.word	0x20000570
 8002898:	20001d70 	.word	0x20001d70
 800289c:	20001d78 	.word	0x20001d78
 80028a0:	20001d80 	.word	0x20001d80
 80028a4:	20001d7c 	.word	0x20001d7c

080028a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80028b0:	4b27      	ldr	r3, [pc, #156]	; (8002950 <prvInsertBlockIntoFreeList+0xa8>)
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	e002      	b.n	80028bc <prvInsertBlockIntoFreeList+0x14>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d8f7      	bhi.n	80028b6 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	68ba      	ldr	r2, [r7, #8]
 80028d0:	18d3      	adds	r3, r2, r3
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d108      	bne.n	80028ea <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	18d2      	adds	r2, r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	18d2      	adds	r2, r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d118      	bne.n	8002930 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	4b14      	ldr	r3, [pc, #80]	; (8002954 <prvInsertBlockIntoFreeList+0xac>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	429a      	cmp	r2, r3
 8002908:	d00d      	beq.n	8002926 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	18d2      	adds	r2, r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	e008      	b.n	8002938 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002926:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <prvInsertBlockIntoFreeList+0xac>)
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	e003      	b.n	8002938 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	429a      	cmp	r2, r3
 800293e:	d002      	beq.n	8002946 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	46bd      	mov	sp, r7
 800294a:	b004      	add	sp, #16
 800294c:	bd80      	pop	{r7, pc}
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	20001d70 	.word	0x20001d70
 8002954:	20001d78 	.word	0x20001d78

08002958 <__libc_init_array>:
 8002958:	b570      	push	{r4, r5, r6, lr}
 800295a:	2600      	movs	r6, #0
 800295c:	4d0c      	ldr	r5, [pc, #48]	; (8002990 <__libc_init_array+0x38>)
 800295e:	4c0d      	ldr	r4, [pc, #52]	; (8002994 <__libc_init_array+0x3c>)
 8002960:	1b64      	subs	r4, r4, r5
 8002962:	10a4      	asrs	r4, r4, #2
 8002964:	42a6      	cmp	r6, r4
 8002966:	d109      	bne.n	800297c <__libc_init_array+0x24>
 8002968:	2600      	movs	r6, #0
 800296a:	f000 f821 	bl	80029b0 <_init>
 800296e:	4d0a      	ldr	r5, [pc, #40]	; (8002998 <__libc_init_array+0x40>)
 8002970:	4c0a      	ldr	r4, [pc, #40]	; (800299c <__libc_init_array+0x44>)
 8002972:	1b64      	subs	r4, r4, r5
 8002974:	10a4      	asrs	r4, r4, #2
 8002976:	42a6      	cmp	r6, r4
 8002978:	d105      	bne.n	8002986 <__libc_init_array+0x2e>
 800297a:	bd70      	pop	{r4, r5, r6, pc}
 800297c:	00b3      	lsls	r3, r6, #2
 800297e:	58eb      	ldr	r3, [r5, r3]
 8002980:	4798      	blx	r3
 8002982:	3601      	adds	r6, #1
 8002984:	e7ee      	b.n	8002964 <__libc_init_array+0xc>
 8002986:	00b3      	lsls	r3, r6, #2
 8002988:	58eb      	ldr	r3, [r5, r3]
 800298a:	4798      	blx	r3
 800298c:	3601      	adds	r6, #1
 800298e:	e7f2      	b.n	8002976 <__libc_init_array+0x1e>
 8002990:	08002a84 	.word	0x08002a84
 8002994:	08002a84 	.word	0x08002a84
 8002998:	08002a84 	.word	0x08002a84
 800299c:	08002a88 	.word	0x08002a88

080029a0 <memset>:
 80029a0:	0003      	movs	r3, r0
 80029a2:	1882      	adds	r2, r0, r2
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d100      	bne.n	80029aa <memset+0xa>
 80029a8:	4770      	bx	lr
 80029aa:	7019      	strb	r1, [r3, #0]
 80029ac:	3301      	adds	r3, #1
 80029ae:	e7f9      	b.n	80029a4 <memset+0x4>

080029b0 <_init>:
 80029b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029b2:	46c0      	nop			; (mov r8, r8)
 80029b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029b6:	bc08      	pop	{r3}
 80029b8:	469e      	mov	lr, r3
 80029ba:	4770      	bx	lr

080029bc <_fini>:
 80029bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029c2:	bc08      	pop	{r3}
 80029c4:	469e      	mov	lr, r3
 80029c6:	4770      	bx	lr
