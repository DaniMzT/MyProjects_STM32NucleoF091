
Train_FreeRTOS_STM32cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008678  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  08008738  08008738  00018738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008934  08008934  00020108  2**0
                  CONTENTS
  4 .ARM          00000000  08008934  08008934  00020108  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008934  08008934  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008934  08008934  00018934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008938  08008938  00018938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  0800893c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f1c  20000108  08008a44  00020108  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002024  08008a44  00022024  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001713c  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000334f  00000000  00000000  0003726c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001658  00000000  00000000  0003a5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001500  00000000  00000000  0003bc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ec81  00000000  00000000  0003d118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a017  00000000  00000000  0005bd99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b48af  00000000  00000000  00075db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012a65f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058d8  00000000  00000000  0012a6b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000108 	.word	0x20000108
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008720 	.word	0x08008720

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000010c 	.word	0x2000010c
 8000104:	08008720 	.word	0x08008720

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800023c:	2301      	movs	r3, #1
 800023e:	425b      	negs	r3, r3
 8000240:	1d39      	adds	r1, r7, #4
 8000242:	4804      	ldr	r0, [pc, #16]	; (8000254 <__io_putchar+0x20>)
 8000244:	2201      	movs	r2, #1
 8000246:	f004 f8b5 	bl	80043b4 <HAL_UART_Transmit>
  return ch;
 800024a:	687b      	ldr	r3, [r7, #4]
}
 800024c:	0018      	movs	r0, r3
 800024e:	46bd      	mov	sp, r7
 8000250:	b002      	add	sp, #8
 8000252:	bd80      	pop	{r7, pc}
 8000254:	20000170 	.word	0x20000170

08000258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  //Status from tasks (BaseType_t is the most efficient data type for the architecture;i.e.:32-bit for 32-bit architecture)
  BaseType_t task_Status;
  //Event of flags for LCD Arduino task
  xGroupFlagsLCDArduino = xEventGroupCreate();
 800025e:	f004 fcfb 	bl	8004c58 <xEventGroupCreate>
 8000262:	0002      	movs	r2, r0
 8000264:	4b36      	ldr	r3, [pc, #216]	; (8000340 <main+0xe8>)
 8000266:	601a      	str	r2, [r3, #0]
  if (xGroupFlagsLCDArduino == NULL){
 8000268:	4b35      	ldr	r3, [pc, #212]	; (8000340 <main+0xe8>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d103      	bne.n	8000278 <main+0x20>
	  printf("Not possible to create xFlagsLCDArduino event group \n");
 8000270:	4b34      	ldr	r3, [pc, #208]	; (8000344 <main+0xec>)
 8000272:	0018      	movs	r0, r3
 8000274:	f007 fa7c 	bl	8007770 <puts>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000278:	f000 ffa2 	bl	80011c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027c:	f000 f880 	bl	8000380 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000280:	f000 f94c 	bl	800051c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000284:	f000 f91a 	bl	80004bc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000288:	f000 f8d8 	bl	800043c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //although I could turn on the blue LED (OFF state) in MX_GPIO_Init,I prefer to do call the OFF entry
  onEntry_Off();
 800028c:	f000 fa0e 	bl	80006ac <onEntry_Off>
  //I decide to set priorities higher than tskIDLE_PRIORITY.
  //FSM control highest prio as I want that OnOff/Emergency interrupts wakes the task
  task_Status = xTaskCreate(FSM_task_handler, "FSMcontrol", 200, NULL, tskIDLE_PRIORITY+2, &FSM_taskPointer);
 8000290:	492d      	ldr	r1, [pc, #180]	; (8000348 <main+0xf0>)
 8000292:	482e      	ldr	r0, [pc, #184]	; (800034c <main+0xf4>)
 8000294:	4b2e      	ldr	r3, [pc, #184]	; (8000350 <main+0xf8>)
 8000296:	9301      	str	r3, [sp, #4]
 8000298:	2302      	movs	r3, #2
 800029a:	9300      	str	r3, [sp, #0]
 800029c:	2300      	movs	r3, #0
 800029e:	22c8      	movs	r2, #200	; 0xc8
 80002a0:	f005 fa7d 	bl	800579e <xTaskCreate>
 80002a4:	0003      	movs	r3, r0
 80002a6:	607b      	str	r3, [r7, #4]
  configASSERT(task_Status == pdPASS); //if false, then infinite loop. good for debugging
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	2b01      	cmp	r3, #1
 80002ac:	d001      	beq.n	80002b2 <main+0x5a>
 80002ae:	b672      	cpsid	i
 80002b0:	e7fe      	b.n	80002b0 <main+0x58>

  task_Status = xTaskCreate(Motor_Control_task_handler, "MotorControl", 200, NULL, tskIDLE_PRIORITY+1, &Motor_Control_taskPointer);
 80002b2:	4928      	ldr	r1, [pc, #160]	; (8000354 <main+0xfc>)
 80002b4:	4828      	ldr	r0, [pc, #160]	; (8000358 <main+0x100>)
 80002b6:	4b29      	ldr	r3, [pc, #164]	; (800035c <main+0x104>)
 80002b8:	9301      	str	r3, [sp, #4]
 80002ba:	2301      	movs	r3, #1
 80002bc:	9300      	str	r3, [sp, #0]
 80002be:	2300      	movs	r3, #0
 80002c0:	22c8      	movs	r2, #200	; 0xc8
 80002c2:	f005 fa6c 	bl	800579e <xTaskCreate>
 80002c6:	0003      	movs	r3, r0
 80002c8:	607b      	str	r3, [r7, #4]
  configASSERT(task_Status == pdPASS); //if false, then infinite loop. good for debugging
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2b01      	cmp	r3, #1
 80002ce:	d001      	beq.n	80002d4 <main+0x7c>
 80002d0:	b672      	cpsid	i
 80002d2:	e7fe      	b.n	80002d2 <main+0x7a>

  //Create queue for reading temperature. if the queue is not created, do not create the task
  xQueue_Temperature = xQueueCreate(LENGTH_QUEUE_TEMP, sizeof(uint16_t));
 80002d4:	2200      	movs	r2, #0
 80002d6:	2102      	movs	r1, #2
 80002d8:	2002      	movs	r0, #2
 80002da:	f004 ff23 	bl	8005124 <xQueueGenericCreate>
 80002de:	0002      	movs	r2, r0
 80002e0:	4b1f      	ldr	r3, [pc, #124]	; (8000360 <main+0x108>)
 80002e2:	601a      	str	r2, [r3, #0]
  if (xQueue_Temperature != NULL){
 80002e4:	4b1e      	ldr	r3, [pc, #120]	; (8000360 <main+0x108>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d010      	beq.n	800030e <main+0xb6>
	  task_Status = xTaskCreate(Read_Temperature_task_handler, "ReadTemperature", 200, NULL, tskIDLE_PRIORITY+1, &Read_Temperature_taskPointer);
 80002ec:	491d      	ldr	r1, [pc, #116]	; (8000364 <main+0x10c>)
 80002ee:	481e      	ldr	r0, [pc, #120]	; (8000368 <main+0x110>)
 80002f0:	4b1e      	ldr	r3, [pc, #120]	; (800036c <main+0x114>)
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	2301      	movs	r3, #1
 80002f6:	9300      	str	r3, [sp, #0]
 80002f8:	2300      	movs	r3, #0
 80002fa:	22c8      	movs	r2, #200	; 0xc8
 80002fc:	f005 fa4f 	bl	800579e <xTaskCreate>
 8000300:	0003      	movs	r3, r0
 8000302:	607b      	str	r3, [r7, #4]
	  configASSERT(task_Status == pdPASS); //if false, then infinite loop. good for debugging
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	2b01      	cmp	r3, #1
 8000308:	d005      	beq.n	8000316 <main+0xbe>
 800030a:	b672      	cpsid	i
 800030c:	e7fe      	b.n	800030c <main+0xb4>
  }
  else{
	  printf("xQueue_Temperature failed to be created \n");
 800030e:	4b18      	ldr	r3, [pc, #96]	; (8000370 <main+0x118>)
 8000310:	0018      	movs	r0, r3
 8000312:	f007 fa2d 	bl	8007770 <puts>
  }

  task_Status = xTaskCreate(LCD_Arduino_task_handler, "LCDArduino", 200, NULL, tskIDLE_PRIORITY+1, &LCD_Arduino_taskPointer);
 8000316:	4917      	ldr	r1, [pc, #92]	; (8000374 <main+0x11c>)
 8000318:	4817      	ldr	r0, [pc, #92]	; (8000378 <main+0x120>)
 800031a:	4b18      	ldr	r3, [pc, #96]	; (800037c <main+0x124>)
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	9300      	str	r3, [sp, #0]
 8000322:	2300      	movs	r3, #0
 8000324:	22c8      	movs	r2, #200	; 0xc8
 8000326:	f005 fa3a 	bl	800579e <xTaskCreate>
 800032a:	0003      	movs	r3, r0
 800032c:	607b      	str	r3, [r7, #4]
  configASSERT(task_Status == pdPASS); //if false, then infinite loop. good for debugging
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	2b01      	cmp	r3, #1
 8000332:	d001      	beq.n	8000338 <main+0xe0>
 8000334:	b672      	cpsid	i
 8000336:	e7fe      	b.n	8000336 <main+0xde>

  //Start scheduler
  vTaskStartScheduler();
 8000338:	f005 fbb4 	bl	8005aa4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800033c:	e7fe      	b.n	800033c <main+0xe4>
 800033e:	46c0      	nop			; (mov r8, r8)
 8000340:	200001f8 	.word	0x200001f8
 8000344:	08008738 	.word	0x08008738
 8000348:	08008770 	.word	0x08008770
 800034c:	080008f9 	.word	0x080008f9
 8000350:	20000214 	.word	0x20000214
 8000354:	0800877c 	.word	0x0800877c
 8000358:	08000a4d 	.word	0x08000a4d
 800035c:	20000218 	.word	0x20000218
 8000360:	20000200 	.word	0x20000200
 8000364:	0800878c 	.word	0x0800878c
 8000368:	08000a89 	.word	0x08000a89
 800036c:	2000021c 	.word	0x2000021c
 8000370:	0800879c 	.word	0x0800879c
 8000374:	080087c8 	.word	0x080087c8
 8000378:	08000bad 	.word	0x08000bad
 800037c:	20000220 	.word	0x20000220

08000380 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000380:	b590      	push	{r4, r7, lr}
 8000382:	b099      	sub	sp, #100	; 0x64
 8000384:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000386:	242c      	movs	r4, #44	; 0x2c
 8000388:	193b      	adds	r3, r7, r4
 800038a:	0018      	movs	r0, r3
 800038c:	2334      	movs	r3, #52	; 0x34
 800038e:	001a      	movs	r2, r3
 8000390:	2100      	movs	r1, #0
 8000392:	f007 f958 	bl	8007646 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000396:	231c      	movs	r3, #28
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	0018      	movs	r0, r3
 800039c:	2310      	movs	r3, #16
 800039e:	001a      	movs	r2, r3
 80003a0:	2100      	movs	r1, #0
 80003a2:	f007 f950 	bl	8007646 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003a6:	003b      	movs	r3, r7
 80003a8:	0018      	movs	r0, r3
 80003aa:	231c      	movs	r3, #28
 80003ac:	001a      	movs	r2, r3
 80003ae:	2100      	movs	r1, #0
 80003b0:	f007 f949 	bl	8007646 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80003b4:	0021      	movs	r1, r4
 80003b6:	187b      	adds	r3, r7, r1
 80003b8:	2222      	movs	r2, #34	; 0x22
 80003ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003bc:	187b      	adds	r3, r7, r1
 80003be:	2201      	movs	r2, #1
 80003c0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80003c2:	187b      	adds	r3, r7, r1
 80003c4:	2201      	movs	r2, #1
 80003c6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003c8:	187b      	adds	r3, r7, r1
 80003ca:	2210      	movs	r2, #16
 80003cc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003ce:	187b      	adds	r3, r7, r1
 80003d0:	2200      	movs	r2, #0
 80003d2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d4:	187b      	adds	r3, r7, r1
 80003d6:	0018      	movs	r0, r3
 80003d8:	f002 fefe 	bl	80031d8 <HAL_RCC_OscConfig>
 80003dc:	1e03      	subs	r3, r0, #0
 80003de:	d001      	beq.n	80003e4 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80003e0:	f000 fcca 	bl	8000d78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e4:	211c      	movs	r1, #28
 80003e6:	187b      	adds	r3, r7, r1
 80003e8:	2207      	movs	r2, #7
 80003ea:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80003ec:	187b      	adds	r3, r7, r1
 80003ee:	2203      	movs	r2, #3
 80003f0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f2:	187b      	adds	r3, r7, r1
 80003f4:	2200      	movs	r2, #0
 80003f6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003f8:	187b      	adds	r3, r7, r1
 80003fa:	2200      	movs	r2, #0
 80003fc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003fe:	187b      	adds	r3, r7, r1
 8000400:	2101      	movs	r1, #1
 8000402:	0018      	movs	r0, r3
 8000404:	f003 fa6e 	bl	80038e4 <HAL_RCC_ClockConfig>
 8000408:	1e03      	subs	r3, r0, #0
 800040a:	d001      	beq.n	8000410 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800040c:	f000 fcb4 	bl	8000d78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000410:	003b      	movs	r3, r7
 8000412:	2222      	movs	r2, #34	; 0x22
 8000414:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000416:	003b      	movs	r3, r7
 8000418:	2200      	movs	r2, #0
 800041a:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800041c:	003b      	movs	r3, r7
 800041e:	2200      	movs	r2, #0
 8000420:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000422:	003b      	movs	r3, r7
 8000424:	0018      	movs	r0, r3
 8000426:	f003 fc01 	bl	8003c2c <HAL_RCCEx_PeriphCLKConfig>
 800042a:	1e03      	subs	r3, r0, #0
 800042c:	d001      	beq.n	8000432 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800042e:	f000 fca3 	bl	8000d78 <Error_Handler>
  }
}
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	46bd      	mov	sp, r7
 8000436:	b019      	add	sp, #100	; 0x64
 8000438:	bd90      	pop	{r4, r7, pc}
	...

0800043c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000440:	4b1b      	ldr	r3, [pc, #108]	; (80004b0 <MX_I2C1_Init+0x74>)
 8000442:	4a1c      	ldr	r2, [pc, #112]	; (80004b4 <MX_I2C1_Init+0x78>)
 8000444:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000446:	4b1a      	ldr	r3, [pc, #104]	; (80004b0 <MX_I2C1_Init+0x74>)
 8000448:	4a1b      	ldr	r2, [pc, #108]	; (80004b8 <MX_I2C1_Init+0x7c>)
 800044a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800044c:	4b18      	ldr	r3, [pc, #96]	; (80004b0 <MX_I2C1_Init+0x74>)
 800044e:	2200      	movs	r2, #0
 8000450:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000452:	4b17      	ldr	r3, [pc, #92]	; (80004b0 <MX_I2C1_Init+0x74>)
 8000454:	2201      	movs	r2, #1
 8000456:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000458:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <MX_I2C1_Init+0x74>)
 800045a:	2200      	movs	r2, #0
 800045c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800045e:	4b14      	ldr	r3, [pc, #80]	; (80004b0 <MX_I2C1_Init+0x74>)
 8000460:	2200      	movs	r2, #0
 8000462:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000464:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <MX_I2C1_Init+0x74>)
 8000466:	2200      	movs	r2, #0
 8000468:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800046a:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <MX_I2C1_Init+0x74>)
 800046c:	2200      	movs	r2, #0
 800046e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000470:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <MX_I2C1_Init+0x74>)
 8000472:	2200      	movs	r2, #0
 8000474:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000476:	4b0e      	ldr	r3, [pc, #56]	; (80004b0 <MX_I2C1_Init+0x74>)
 8000478:	0018      	movs	r0, r3
 800047a:	f001 f981 	bl	8001780 <HAL_I2C_Init>
 800047e:	1e03      	subs	r3, r0, #0
 8000480:	d001      	beq.n	8000486 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000482:	f000 fc79 	bl	8000d78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000486:	4b0a      	ldr	r3, [pc, #40]	; (80004b0 <MX_I2C1_Init+0x74>)
 8000488:	2100      	movs	r1, #0
 800048a:	0018      	movs	r0, r3
 800048c:	f002 fe0c 	bl	80030a8 <HAL_I2CEx_ConfigAnalogFilter>
 8000490:	1e03      	subs	r3, r0, #0
 8000492:	d001      	beq.n	8000498 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000494:	f000 fc70 	bl	8000d78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000498:	4b05      	ldr	r3, [pc, #20]	; (80004b0 <MX_I2C1_Init+0x74>)
 800049a:	2100      	movs	r1, #0
 800049c:	0018      	movs	r0, r3
 800049e:	f002 fe4f 	bl	8003140 <HAL_I2CEx_ConfigDigitalFilter>
 80004a2:	1e03      	subs	r3, r0, #0
 80004a4:	d001      	beq.n	80004aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004a6:	f000 fc67 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	20000124 	.word	0x20000124
 80004b4:	40005400 	.word	0x40005400
 80004b8:	2000090e 	.word	0x2000090e

080004bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004c0:	4b14      	ldr	r3, [pc, #80]	; (8000514 <MX_USART2_UART_Init+0x58>)
 80004c2:	4a15      	ldr	r2, [pc, #84]	; (8000518 <MX_USART2_UART_Init+0x5c>)
 80004c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004c6:	4b13      	ldr	r3, [pc, #76]	; (8000514 <MX_USART2_UART_Init+0x58>)
 80004c8:	22e1      	movs	r2, #225	; 0xe1
 80004ca:	0252      	lsls	r2, r2, #9
 80004cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004ce:	4b11      	ldr	r3, [pc, #68]	; (8000514 <MX_USART2_UART_Init+0x58>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004d4:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <MX_USART2_UART_Init+0x58>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004da:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <MX_USART2_UART_Init+0x58>)
 80004dc:	2200      	movs	r2, #0
 80004de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004e0:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <MX_USART2_UART_Init+0x58>)
 80004e2:	220c      	movs	r2, #12
 80004e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004e6:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <MX_USART2_UART_Init+0x58>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004ec:	4b09      	ldr	r3, [pc, #36]	; (8000514 <MX_USART2_UART_Init+0x58>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004f2:	4b08      	ldr	r3, [pc, #32]	; (8000514 <MX_USART2_UART_Init+0x58>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <MX_USART2_UART_Init+0x58>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004fe:	4b05      	ldr	r3, [pc, #20]	; (8000514 <MX_USART2_UART_Init+0x58>)
 8000500:	0018      	movs	r0, r3
 8000502:	f003 ff03 	bl	800430c <HAL_UART_Init>
 8000506:	1e03      	subs	r3, r0, #0
 8000508:	d001      	beq.n	800050e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800050a:	f000 fc35 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	20000170 	.word	0x20000170
 8000518:	40004400 	.word	0x40004400

0800051c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800051c:	b590      	push	{r4, r7, lr}
 800051e:	b08b      	sub	sp, #44	; 0x2c
 8000520:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000522:	2414      	movs	r4, #20
 8000524:	193b      	adds	r3, r7, r4
 8000526:	0018      	movs	r0, r3
 8000528:	2314      	movs	r3, #20
 800052a:	001a      	movs	r2, r3
 800052c:	2100      	movs	r1, #0
 800052e:	f007 f88a 	bl	8007646 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000532:	4b5a      	ldr	r3, [pc, #360]	; (800069c <MX_GPIO_Init+0x180>)
 8000534:	695a      	ldr	r2, [r3, #20]
 8000536:	4b59      	ldr	r3, [pc, #356]	; (800069c <MX_GPIO_Init+0x180>)
 8000538:	2180      	movs	r1, #128	; 0x80
 800053a:	0309      	lsls	r1, r1, #12
 800053c:	430a      	orrs	r2, r1
 800053e:	615a      	str	r2, [r3, #20]
 8000540:	4b56      	ldr	r3, [pc, #344]	; (800069c <MX_GPIO_Init+0x180>)
 8000542:	695a      	ldr	r2, [r3, #20]
 8000544:	2380      	movs	r3, #128	; 0x80
 8000546:	031b      	lsls	r3, r3, #12
 8000548:	4013      	ands	r3, r2
 800054a:	613b      	str	r3, [r7, #16]
 800054c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800054e:	4b53      	ldr	r3, [pc, #332]	; (800069c <MX_GPIO_Init+0x180>)
 8000550:	695a      	ldr	r2, [r3, #20]
 8000552:	4b52      	ldr	r3, [pc, #328]	; (800069c <MX_GPIO_Init+0x180>)
 8000554:	2180      	movs	r1, #128	; 0x80
 8000556:	03c9      	lsls	r1, r1, #15
 8000558:	430a      	orrs	r2, r1
 800055a:	615a      	str	r2, [r3, #20]
 800055c:	4b4f      	ldr	r3, [pc, #316]	; (800069c <MX_GPIO_Init+0x180>)
 800055e:	695a      	ldr	r2, [r3, #20]
 8000560:	2380      	movs	r3, #128	; 0x80
 8000562:	03db      	lsls	r3, r3, #15
 8000564:	4013      	ands	r3, r2
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056a:	4b4c      	ldr	r3, [pc, #304]	; (800069c <MX_GPIO_Init+0x180>)
 800056c:	695a      	ldr	r2, [r3, #20]
 800056e:	4b4b      	ldr	r3, [pc, #300]	; (800069c <MX_GPIO_Init+0x180>)
 8000570:	2180      	movs	r1, #128	; 0x80
 8000572:	0289      	lsls	r1, r1, #10
 8000574:	430a      	orrs	r2, r1
 8000576:	615a      	str	r2, [r3, #20]
 8000578:	4b48      	ldr	r3, [pc, #288]	; (800069c <MX_GPIO_Init+0x180>)
 800057a:	695a      	ldr	r2, [r3, #20]
 800057c:	2380      	movs	r3, #128	; 0x80
 800057e:	029b      	lsls	r3, r3, #10
 8000580:	4013      	ands	r3, r2
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000586:	4b45      	ldr	r3, [pc, #276]	; (800069c <MX_GPIO_Init+0x180>)
 8000588:	695a      	ldr	r2, [r3, #20]
 800058a:	4b44      	ldr	r3, [pc, #272]	; (800069c <MX_GPIO_Init+0x180>)
 800058c:	2180      	movs	r1, #128	; 0x80
 800058e:	02c9      	lsls	r1, r1, #11
 8000590:	430a      	orrs	r2, r1
 8000592:	615a      	str	r2, [r3, #20]
 8000594:	4b41      	ldr	r3, [pc, #260]	; (800069c <MX_GPIO_Init+0x180>)
 8000596:	695a      	ldr	r2, [r3, #20]
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	02db      	lsls	r3, r3, #11
 800059c:	4013      	ands	r3, r2
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Green_Pin|LED_Blue_Pin|LED_Red_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 80005a2:	493f      	ldr	r1, [pc, #252]	; (80006a0 <MX_GPIO_Init+0x184>)
 80005a4:	2390      	movs	r3, #144	; 0x90
 80005a6:	05db      	lsls	r3, r3, #23
 80005a8:	2200      	movs	r2, #0
 80005aa:	0018      	movs	r0, r3
 80005ac:	f001 f8ae 	bl	800170c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005b0:	193b      	adds	r3, r7, r4
 80005b2:	2280      	movs	r2, #128	; 0x80
 80005b4:	0192      	lsls	r2, r2, #6
 80005b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005b8:	193b      	adds	r3, r7, r4
 80005ba:	2284      	movs	r2, #132	; 0x84
 80005bc:	0392      	lsls	r2, r2, #14
 80005be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	193b      	adds	r3, r7, r4
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005c6:	193b      	adds	r3, r7, r4
 80005c8:	4a36      	ldr	r2, [pc, #216]	; (80006a4 <MX_GPIO_Init+0x188>)
 80005ca:	0019      	movs	r1, r3
 80005cc:	0010      	movs	r0, r2
 80005ce:	f000 ff25 	bl	800141c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Green_Pin LED_Blue_Pin LED_Red_Pin PA10 */
  GPIO_InitStruct.Pin = LED_Green_Pin|LED_Blue_Pin|LED_Red_Pin|GPIO_PIN_10;
 80005d2:	193b      	adds	r3, r7, r4
 80005d4:	4a32      	ldr	r2, [pc, #200]	; (80006a0 <MX_GPIO_Init+0x184>)
 80005d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d8:	193b      	adds	r3, r7, r4
 80005da:	2201      	movs	r2, #1
 80005dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	193b      	adds	r3, r7, r4
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e4:	193b      	adds	r3, r7, r4
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ea:	193a      	adds	r2, r7, r4
 80005ec:	2390      	movs	r3, #144	; 0x90
 80005ee:	05db      	lsls	r3, r3, #23
 80005f0:	0011      	movs	r1, r2
 80005f2:	0018      	movs	r0, r3
 80005f4:	f000 ff12 	bl	800141c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005f8:	193b      	adds	r3, r7, r4
 80005fa:	2210      	movs	r2, #16
 80005fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fe:	193b      	adds	r3, r7, r4
 8000600:	2202      	movs	r2, #2
 8000602:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	193b      	adds	r3, r7, r4
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800060a:	193b      	adds	r3, r7, r4
 800060c:	2203      	movs	r2, #3
 800060e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000610:	193b      	adds	r3, r7, r4
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000616:	193a      	adds	r2, r7, r4
 8000618:	2390      	movs	r3, #144	; 0x90
 800061a:	05db      	lsls	r3, r3, #23
 800061c:	0011      	movs	r1, r2
 800061e:	0018      	movs	r0, r3
 8000620:	f000 fefc 	bl	800141c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000624:	193b      	adds	r3, r7, r4
 8000626:	22e0      	movs	r2, #224	; 0xe0
 8000628:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062a:	193b      	adds	r3, r7, r4
 800062c:	2202      	movs	r2, #2
 800062e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000630:	193b      	adds	r3, r7, r4
 8000632:	2201      	movs	r2, #1
 8000634:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000636:	193b      	adds	r3, r7, r4
 8000638:	2203      	movs	r2, #3
 800063a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800063c:	193b      	adds	r3, r7, r4
 800063e:	2200      	movs	r2, #0
 8000640:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000642:	193a      	adds	r2, r7, r4
 8000644:	2390      	movs	r3, #144	; 0x90
 8000646:	05db      	lsls	r3, r3, #23
 8000648:	0011      	movs	r1, r2
 800064a:	0018      	movs	r0, r3
 800064c:	f000 fee6 	bl	800141c <HAL_GPIO_Init>

  /*Configure GPIO pins : ButtonOnOff_Pin EmergencyStopButton_Pin */
  GPIO_InitStruct.Pin = ButtonOnOff_Pin|EmergencyStopButton_Pin;
 8000650:	0021      	movs	r1, r4
 8000652:	187b      	adds	r3, r7, r1
 8000654:	2228      	movs	r2, #40	; 0x28
 8000656:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000658:	187b      	adds	r3, r7, r1
 800065a:	2288      	movs	r2, #136	; 0x88
 800065c:	0352      	lsls	r2, r2, #13
 800065e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000660:	187b      	adds	r3, r7, r1
 8000662:	2201      	movs	r2, #1
 8000664:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000666:	187b      	adds	r3, r7, r1
 8000668:	4a0f      	ldr	r2, [pc, #60]	; (80006a8 <MX_GPIO_Init+0x18c>)
 800066a:	0019      	movs	r1, r3
 800066c:	0010      	movs	r0, r2
 800066e:	f000 fed5 	bl	800141c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000672:	2200      	movs	r2, #0
 8000674:	2100      	movs	r1, #0
 8000676:	2006      	movs	r0, #6
 8000678:	f000 fe5a 	bl	8001330 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800067c:	2006      	movs	r0, #6
 800067e:	f000 fe6c 	bl	800135a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000682:	2200      	movs	r2, #0
 8000684:	2100      	movs	r1, #0
 8000686:	2007      	movs	r0, #7
 8000688:	f000 fe52 	bl	8001330 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800068c:	2007      	movs	r0, #7
 800068e:	f000 fe64 	bl	800135a <HAL_NVIC_EnableIRQ>

}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	46bd      	mov	sp, r7
 8000696:	b00b      	add	sp, #44	; 0x2c
 8000698:	bd90      	pop	{r4, r7, pc}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	40021000 	.word	0x40021000
 80006a0:	00000603 	.word	0x00000603
 80006a4:	48000800 	.word	0x48000800
 80006a8:	48000400 	.word	0x48000400

080006ac <onEntry_Off>:

/* USER CODE BEGIN 4 */
// Related to states: onEntry, during, onExit
void onEntry_Off(){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	//turn on blue LED, turn off the rest
	HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_SET);
 80006b0:	2390      	movs	r3, #144	; 0x90
 80006b2:	05db      	lsls	r3, r3, #23
 80006b4:	2201      	movs	r2, #1
 80006b6:	2102      	movs	r1, #2
 80006b8:	0018      	movs	r0, r3
 80006ba:	f001 f827 	bl	800170c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_RESET);
 80006be:	2380      	movs	r3, #128	; 0x80
 80006c0:	0099      	lsls	r1, r3, #2
 80006c2:	2390      	movs	r3, #144	; 0x90
 80006c4:	05db      	lsls	r3, r3, #23
 80006c6:	2200      	movs	r2, #0
 80006c8:	0018      	movs	r0, r3
 80006ca:	f001 f81f 	bl	800170c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_RESET);
 80006ce:	2390      	movs	r3, #144	; 0x90
 80006d0:	05db      	lsls	r3, r3, #23
 80006d2:	2200      	movs	r2, #0
 80006d4:	2101      	movs	r1, #1
 80006d6:	0018      	movs	r0, r3
 80006d8:	f001 f818 	bl	800170c <HAL_GPIO_WritePin>
}
 80006dc:	46c0      	nop			; (mov r8, r8)
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <during_Off>:
void during_Off(){}
 80006e2:	b580      	push	{r7, lr}
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <onExit_Off>:
void onExit_Off(){}
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	46c0      	nop			; (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <onEntry_On>:
void onEntry_On(){
 80006f6:	b580      	push	{r7, lr}
 80006f8:	af00      	add	r7, sp, #0
	//turn on green LED, turn off the rest
	HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_SET);
 80006fa:	2390      	movs	r3, #144	; 0x90
 80006fc:	05db      	lsls	r3, r3, #23
 80006fe:	2201      	movs	r2, #1
 8000700:	2101      	movs	r1, #1
 8000702:	0018      	movs	r0, r3
 8000704:	f001 f802 	bl	800170c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_RESET);
 8000708:	2380      	movs	r3, #128	; 0x80
 800070a:	0099      	lsls	r1, r3, #2
 800070c:	2390      	movs	r3, #144	; 0x90
 800070e:	05db      	lsls	r3, r3, #23
 8000710:	2200      	movs	r2, #0
 8000712:	0018      	movs	r0, r3
 8000714:	f000 fffa 	bl	800170c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 8000718:	2390      	movs	r3, #144	; 0x90
 800071a:	05db      	lsls	r3, r3, #23
 800071c:	2200      	movs	r2, #0
 800071e:	2102      	movs	r1, #2
 8000720:	0018      	movs	r0, r3
 8000722:	f000 fff3 	bl	800170c <HAL_GPIO_WritePin>
}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <during_On>:
void during_On(){}
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
 8000730:	46c0      	nop			; (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}

08000736 <onExit_On>:
void onExit_On(){}
 8000736:	b580      	push	{r7, lr}
 8000738:	af00      	add	r7, sp, #0
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <onEntry_Emergency>:
void onEntry_Emergency(){
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	//turn on red LED, turn off the rest
	HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_SET);
 8000744:	2380      	movs	r3, #128	; 0x80
 8000746:	0099      	lsls	r1, r3, #2
 8000748:	2390      	movs	r3, #144	; 0x90
 800074a:	05db      	lsls	r3, r3, #23
 800074c:	2201      	movs	r2, #1
 800074e:	0018      	movs	r0, r3
 8000750:	f000 ffdc 	bl	800170c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_RESET);
 8000754:	2390      	movs	r3, #144	; 0x90
 8000756:	05db      	lsls	r3, r3, #23
 8000758:	2200      	movs	r2, #0
 800075a:	2101      	movs	r1, #1
 800075c:	0018      	movs	r0, r3
 800075e:	f000 ffd5 	bl	800170c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 8000762:	2390      	movs	r3, #144	; 0x90
 8000764:	05db      	lsls	r3, r3, #23
 8000766:	2200      	movs	r2, #0
 8000768:	2102      	movs	r1, #2
 800076a:	0018      	movs	r0, r3
 800076c:	f000 ffce 	bl	800170c <HAL_GPIO_WritePin>
}
 8000770:	46c0      	nop			; (mov r8, r8)
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <during_Emergency>:
void during_Emergency(){}
 8000776:	b580      	push	{r7, lr}
 8000778:	af00      	add	r7, sp, #0
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <onExit_Emergency>:
void onExit_Emergency(){}
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
	...

0800078c <evaluate_Event_Off_to_On>:
// Evaluate events for transitions
uint8_t evaluate_Event_Off_to_On(){
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
	if (uiFlagOnOff && !uiFlagEmergency){
 8000790:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <evaluate_Event_Off_to_On+0x28>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d008      	beq.n	80007aa <evaluate_Event_Off_to_On+0x1e>
 8000798:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <evaluate_Event_Off_to_On+0x2c>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d104      	bne.n	80007aa <evaluate_Event_Off_to_On+0x1e>
		//clear flag
		uiFlagOnOff = FALSE;
 80007a0:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <evaluate_Event_Off_to_On+0x28>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	701a      	strb	r2, [r3, #0]
		return TRUE;
 80007a6:	2301      	movs	r3, #1
 80007a8:	e000      	b.n	80007ac <evaluate_Event_Off_to_On+0x20>
	}
	return FALSE;
 80007aa:	2300      	movs	r3, #0
}
 80007ac:	0018      	movs	r0, r3
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	200001f4 	.word	0x200001f4
 80007b8:	200001f5 	.word	0x200001f5

080007bc <evaluate_Event_Off_to_Emergency>:
uint8_t evaluate_Event_Off_to_Emergency(){
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	if (uiFlagEmergency){
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <evaluate_Event_Off_to_Emergency+0x20>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d004      	beq.n	80007d2 <evaluate_Event_Off_to_Emergency+0x16>
		//clear flag
		uiFlagEmergency = FALSE;
 80007c8:	4b04      	ldr	r3, [pc, #16]	; (80007dc <evaluate_Event_Off_to_Emergency+0x20>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	701a      	strb	r2, [r3, #0]
		return TRUE;
 80007ce:	2301      	movs	r3, #1
 80007d0:	e000      	b.n	80007d4 <evaluate_Event_Off_to_Emergency+0x18>
	}
	return FALSE;
 80007d2:	2300      	movs	r3, #0
}
 80007d4:	0018      	movs	r0, r3
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	200001f5 	.word	0x200001f5

080007e0 <evaluate_Event_Off_Off>:
uint8_t evaluate_Event_Off_Off(){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	if (!uiFlagOnOff && !uiFlagEmergency){//no change
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <evaluate_Event_Off_Off+0x20>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d105      	bne.n	80007f8 <evaluate_Event_Off_Off+0x18>
 80007ec:	4b05      	ldr	r3, [pc, #20]	; (8000804 <evaluate_Event_Off_Off+0x24>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d101      	bne.n	80007f8 <evaluate_Event_Off_Off+0x18>
		return TRUE;
 80007f4:	2301      	movs	r3, #1
 80007f6:	e000      	b.n	80007fa <evaluate_Event_Off_Off+0x1a>
	}
	return FALSE;
 80007f8:	2300      	movs	r3, #0
}
 80007fa:	0018      	movs	r0, r3
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	200001f4 	.word	0x200001f4
 8000804:	200001f5 	.word	0x200001f5

08000808 <evaluate_Event_On_to_Off>:
uint8_t evaluate_Event_On_to_Off(){
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
	if (uiFlagOnOff && !uiFlagEmergency){
 800080c:	4b08      	ldr	r3, [pc, #32]	; (8000830 <evaluate_Event_On_to_Off+0x28>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d008      	beq.n	8000826 <evaluate_Event_On_to_Off+0x1e>
 8000814:	4b07      	ldr	r3, [pc, #28]	; (8000834 <evaluate_Event_On_to_Off+0x2c>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d104      	bne.n	8000826 <evaluate_Event_On_to_Off+0x1e>
		//clear flag
		uiFlagOnOff = FALSE;
 800081c:	4b04      	ldr	r3, [pc, #16]	; (8000830 <evaluate_Event_On_to_Off+0x28>)
 800081e:	2200      	movs	r2, #0
 8000820:	701a      	strb	r2, [r3, #0]
		return TRUE;
 8000822:	2301      	movs	r3, #1
 8000824:	e000      	b.n	8000828 <evaluate_Event_On_to_Off+0x20>
	}
	return FALSE;
 8000826:	2300      	movs	r3, #0
}
 8000828:	0018      	movs	r0, r3
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	200001f4 	.word	0x200001f4
 8000834:	200001f5 	.word	0x200001f5

08000838 <evaluate_Event_On_to_Emergency>:
uint8_t evaluate_Event_On_to_Emergency(){
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	if (uiFlagEmergency){
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <evaluate_Event_On_to_Emergency+0x20>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d004      	beq.n	800084e <evaluate_Event_On_to_Emergency+0x16>
		//clear flag
		uiFlagEmergency = FALSE;
 8000844:	4b04      	ldr	r3, [pc, #16]	; (8000858 <evaluate_Event_On_to_Emergency+0x20>)
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]
		return TRUE;
 800084a:	2301      	movs	r3, #1
 800084c:	e000      	b.n	8000850 <evaluate_Event_On_to_Emergency+0x18>
	}
	return FALSE;
 800084e:	2300      	movs	r3, #0
}
 8000850:	0018      	movs	r0, r3
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	200001f5 	.word	0x200001f5

0800085c <evaluate_Event_On_On>:
uint8_t evaluate_Event_On_On(){
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	if (!uiFlagOnOff && !uiFlagEmergency){ //no change
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <evaluate_Event_On_On+0x20>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d105      	bne.n	8000874 <evaluate_Event_On_On+0x18>
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <evaluate_Event_On_On+0x24>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d101      	bne.n	8000874 <evaluate_Event_On_On+0x18>
		return TRUE;
 8000870:	2301      	movs	r3, #1
 8000872:	e000      	b.n	8000876 <evaluate_Event_On_On+0x1a>
	}
	return FALSE;
 8000874:	2300      	movs	r3, #0
}
 8000876:	0018      	movs	r0, r3
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	200001f4 	.word	0x200001f4
 8000880:	200001f5 	.word	0x200001f5

08000884 <evaluate_Event_Emergency_to_Off>:
uint8_t evaluate_Event_Emergency_to_Off(){
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
	//to undo emergency state,emergency button has to be pressed again. system can switch off in the middle of an emergency state
	if (uiFlagEmergency && uiFlagOnOff){
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <evaluate_Event_Emergency_to_Off+0x2c>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d00b      	beq.n	80008a8 <evaluate_Event_Emergency_to_Off+0x24>
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <evaluate_Event_Emergency_to_Off+0x30>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d007      	beq.n	80008a8 <evaluate_Event_Emergency_to_Off+0x24>
		//clear flags
		uiFlagEmergency = FALSE;
 8000898:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <evaluate_Event_Emergency_to_Off+0x2c>)
 800089a:	2200      	movs	r2, #0
 800089c:	701a      	strb	r2, [r3, #0]
		uiFlagOnOff = FALSE;
 800089e:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <evaluate_Event_Emergency_to_Off+0x30>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	701a      	strb	r2, [r3, #0]
		return TRUE;
 80008a4:	2301      	movs	r3, #1
 80008a6:	e000      	b.n	80008aa <evaluate_Event_Emergency_to_Off+0x26>
	}
	return FALSE;
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	0018      	movs	r0, r3
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	200001f5 	.word	0x200001f5
 80008b4:	200001f4 	.word	0x200001f4

080008b8 <evaluate_Event_Emergency_to_On>:
uint8_t evaluate_Event_Emergency_to_On(){
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	//to undo emergency state,emergency button has to be pressed again.
	if (uiFlagEmergency){
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <evaluate_Event_Emergency_to_On+0x20>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d004      	beq.n	80008ce <evaluate_Event_Emergency_to_On+0x16>
		//clear flag
		uiFlagEmergency = FALSE;
 80008c4:	4b04      	ldr	r3, [pc, #16]	; (80008d8 <evaluate_Event_Emergency_to_On+0x20>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	701a      	strb	r2, [r3, #0]
		return TRUE;
 80008ca:	2301      	movs	r3, #1
 80008cc:	e000      	b.n	80008d0 <evaluate_Event_Emergency_to_On+0x18>
	}
	return FALSE;
 80008ce:	2300      	movs	r3, #0
}
 80008d0:	0018      	movs	r0, r3
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	200001f5 	.word	0x200001f5

080008dc <evaluate_Event_Emergency_Emergency>:
uint8_t evaluate_Event_Emergency_Emergency(){
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
	if (!uiFlagEmergency){ //no change
 80008e0:	4b04      	ldr	r3, [pc, #16]	; (80008f4 <evaluate_Event_Emergency_Emergency+0x18>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d101      	bne.n	80008ec <evaluate_Event_Emergency_Emergency+0x10>
		return TRUE;
 80008e8:	2301      	movs	r3, #1
 80008ea:	e000      	b.n	80008ee <evaluate_Event_Emergency_Emergency+0x12>
	}
	return FALSE;
 80008ec:	2300      	movs	r3, #0
}
 80008ee:	0018      	movs	r0, r3
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	200001f5 	.word	0x200001f5

080008f8 <FSM_task_handler>:
/** Task handlers **/
static void FSM_task_handler (void *parameters){
 80008f8:	b590      	push	{r4, r7, lr}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	static MEF_State *pState; //initialization to NULL
	static MEF_Transition *pT;
	uint8_t uiTrans;
	for(;;){
		//waken up by a GPIO interrupt handler
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY); //uiFSM_notification = ... not necessary
 8000900:	2301      	movs	r3, #1
 8000902:	425b      	negs	r3, r3
 8000904:	001a      	movs	r2, r3
 8000906:	2101      	movs	r1, #1
 8000908:	2000      	movs	r0, #0
 800090a:	f005 ff61 	bl	80067d0 <ulTaskGenericNotifyTake>
		//Print
		printf("FSM\n");
 800090e:	4b49      	ldr	r3, [pc, #292]	; (8000a34 <FSM_task_handler+0x13c>)
 8000910:	0018      	movs	r0, r3
 8000912:	f006 ff2d 	bl	8007770 <puts>
		pState = MEF1.arrayStates;
 8000916:	4b48      	ldr	r3, [pc, #288]	; (8000a38 <FSM_task_handler+0x140>)
 8000918:	685a      	ldr	r2, [r3, #4]
 800091a:	4b48      	ldr	r3, [pc, #288]	; (8000a3c <FSM_task_handler+0x144>)
 800091c:	601a      	str	r2, [r3, #0]
		pT = pState[MEF1.currentState].arrayTransitions;
 800091e:	4b47      	ldr	r3, [pc, #284]	; (8000a3c <FSM_task_handler+0x144>)
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	4b45      	ldr	r3, [pc, #276]	; (8000a38 <FSM_task_handler+0x140>)
 8000924:	785b      	ldrb	r3, [r3, #1]
 8000926:	b2db      	uxtb	r3, r3
 8000928:	0019      	movs	r1, r3
 800092a:	000b      	movs	r3, r1
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	185b      	adds	r3, r3, r1
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	18d3      	adds	r3, r2, r3
 8000934:	691a      	ldr	r2, [r3, #16]
 8000936:	4b42      	ldr	r3, [pc, #264]	; (8000a40 <FSM_task_handler+0x148>)
 8000938:	601a      	str	r2, [r3, #0]
		//evaluate the state by iterating over the number of transitions of the current state
		for (uiTrans = 0; uiTrans < pState[MEF1.currentState].numberTransitions; uiTrans++){
 800093a:	230f      	movs	r3, #15
 800093c:	18fb      	adds	r3, r7, r3
 800093e:	2200      	movs	r2, #0
 8000940:	701a      	strb	r2, [r3, #0]
 8000942:	e064      	b.n	8000a0e <FSM_task_handler+0x116>
			if (pT[uiTrans].Event() == TRUE){ //event true, transition activated
 8000944:	4b3e      	ldr	r3, [pc, #248]	; (8000a40 <FSM_task_handler+0x148>)
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	240f      	movs	r4, #15
 800094a:	193b      	adds	r3, r7, r4
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	00db      	lsls	r3, r3, #3
 8000950:	18d3      	adds	r3, r2, r3
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4798      	blx	r3
 8000956:	0003      	movs	r3, r0
 8000958:	2b01      	cmp	r3, #1
 800095a:	d152      	bne.n	8000a02 <FSM_task_handler+0x10a>
				// execute exit function of the state
				pState[MEF1.currentState].onExit();
 800095c:	4b37      	ldr	r3, [pc, #220]	; (8000a3c <FSM_task_handler+0x144>)
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	4b35      	ldr	r3, [pc, #212]	; (8000a38 <FSM_task_handler+0x140>)
 8000962:	785b      	ldrb	r3, [r3, #1]
 8000964:	b2db      	uxtb	r3, r3
 8000966:	0019      	movs	r1, r3
 8000968:	000b      	movs	r3, r1
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	185b      	adds	r3, r3, r1
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	18d3      	adds	r3, r2, r3
 8000972:	689b      	ldr	r3, [r3, #8]
 8000974:	4798      	blx	r3
				//assign next state, update the MEF and execute entry/do actions
				if (MEF1.currentState != pT[uiTrans].nextState) { //flag state changed
 8000976:	4b30      	ldr	r3, [pc, #192]	; (8000a38 <FSM_task_handler+0x140>)
 8000978:	785b      	ldrb	r3, [r3, #1]
 800097a:	b2da      	uxtb	r2, r3
 800097c:	4b30      	ldr	r3, [pc, #192]	; (8000a40 <FSM_task_handler+0x148>)
 800097e:	6819      	ldr	r1, [r3, #0]
 8000980:	193b      	adds	r3, r7, r4
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	00db      	lsls	r3, r3, #3
 8000986:	18cb      	adds	r3, r1, r3
 8000988:	791b      	ldrb	r3, [r3, #4]
 800098a:	429a      	cmp	r2, r3
 800098c:	d019      	beq.n	80009c2 <FSM_task_handler+0xca>
					MEF1.flagStateChange = STATE_CHANGED;
 800098e:	4b2a      	ldr	r3, [pc, #168]	; (8000a38 <FSM_task_handler+0x140>)
 8000990:	2201      	movs	r2, #1
 8000992:	70da      	strb	r2, [r3, #3]
					MEF1.currentState = pT[uiTrans].nextState;
 8000994:	4b2a      	ldr	r3, [pc, #168]	; (8000a40 <FSM_task_handler+0x148>)
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	193b      	adds	r3, r7, r4
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	00db      	lsls	r3, r3, #3
 800099e:	18d3      	adds	r3, r2, r3
 80009a0:	791a      	ldrb	r2, [r3, #4]
 80009a2:	4b25      	ldr	r3, [pc, #148]	; (8000a38 <FSM_task_handler+0x140>)
 80009a4:	705a      	strb	r2, [r3, #1]
					//entry action of new state
					MEF1.arrayStates[MEF1.currentState].onEntry();
 80009a6:	4b24      	ldr	r3, [pc, #144]	; (8000a38 <FSM_task_handler+0x140>)
 80009a8:	685a      	ldr	r2, [r3, #4]
 80009aa:	4b23      	ldr	r3, [pc, #140]	; (8000a38 <FSM_task_handler+0x140>)
 80009ac:	785b      	ldrb	r3, [r3, #1]
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	0019      	movs	r1, r3
 80009b2:	000b      	movs	r3, r1
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	185b      	adds	r3, r3, r1
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	18d3      	adds	r3, r2, r3
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4798      	blx	r3
 80009c0:	e00f      	b.n	80009e2 <FSM_task_handler+0xea>
				}
				else{
					MEF1.flagStateChange = STATE_NOT_CHANGED;
 80009c2:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <FSM_task_handler+0x140>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	70da      	strb	r2, [r3, #3]
					//do action
					MEF1.arrayStates[MEF1.currentState].During();
 80009c8:	4b1b      	ldr	r3, [pc, #108]	; (8000a38 <FSM_task_handler+0x140>)
 80009ca:	685a      	ldr	r2, [r3, #4]
 80009cc:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <FSM_task_handler+0x140>)
 80009ce:	785b      	ldrb	r3, [r3, #1]
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	0019      	movs	r1, r3
 80009d4:	000b      	movs	r3, r1
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	185b      	adds	r3, r3, r1
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	18d3      	adds	r3, r2, r3
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	4798      	blx	r3
				}
				//connection with LCD_Arduino task
				uxBitsFlagsLCDArduino = xEventGroupSetBits(xGroupFlagsLCDArduino, (MEF1.flagStateChange)&FLAG_STATUS_CHANGED);
 80009e2:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <FSM_task_handler+0x14c>)
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <FSM_task_handler+0x140>)
 80009e8:	78db      	ldrb	r3, [r3, #3]
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	0019      	movs	r1, r3
 80009ee:	2301      	movs	r3, #1
 80009f0:	400b      	ands	r3, r1
 80009f2:	0019      	movs	r1, r3
 80009f4:	0010      	movs	r0, r2
 80009f6:	f004 f9ed 	bl	8004dd4 <xEventGroupSetBits>
 80009fa:	0002      	movs	r2, r0
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <FSM_task_handler+0x150>)
 80009fe:	601a      	str	r2, [r3, #0]
				//exit the loop
				break;
 8000a00:	e016      	b.n	8000a30 <FSM_task_handler+0x138>
		for (uiTrans = 0; uiTrans < pState[MEF1.currentState].numberTransitions; uiTrans++){
 8000a02:	210f      	movs	r1, #15
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	781a      	ldrb	r2, [r3, #0]
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	3201      	adds	r2, #1
 8000a0c:	701a      	strb	r2, [r3, #0]
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <FSM_task_handler+0x144>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <FSM_task_handler+0x140>)
 8000a14:	785b      	ldrb	r3, [r3, #1]
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	0019      	movs	r1, r3
 8000a1a:	000b      	movs	r3, r1
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	185b      	adds	r3, r3, r1
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	18d3      	adds	r3, r2, r3
 8000a24:	7b1b      	ldrb	r3, [r3, #12]
 8000a26:	220f      	movs	r2, #15
 8000a28:	18ba      	adds	r2, r7, r2
 8000a2a:	7812      	ldrb	r2, [r2, #0]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d389      	bcc.n	8000944 <FSM_task_handler+0x4c>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY); //uiFSM_notification = ... not necessary
 8000a30:	e766      	b.n	8000900 <FSM_task_handler+0x8>
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	080087d4 	.word	0x080087d4
 8000a38:	20000088 	.word	0x20000088
 8000a3c:	20000224 	.word	0x20000224
 8000a40:	20000228 	.word	0x20000228
 8000a44:	200001f8 	.word	0x200001f8
 8000a48:	200001fc 	.word	0x200001fc

08000a4c <Motor_Control_task_handler>:
		}

	}
}

static void Motor_Control_task_handler (void *parameters){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]

	for(;;){
		//Print
		//printf("Motor\n");
		//if state is off/emergency, speed target is 0. If on, it depends on the distance to the station
		switch(MEF1.currentState) {
 8000a54:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <Motor_Control_task_handler+0x34>)
 8000a56:	785b      	ldrb	r3, [r3, #1]
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	2b02      	cmp	r3, #2
 8000a5c:	d009      	beq.n	8000a72 <Motor_Control_task_handler+0x26>
 8000a5e:	dc03      	bgt.n	8000a68 <Motor_Control_task_handler+0x1c>
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d008      	beq.n	8000a76 <Motor_Control_task_handler+0x2a>
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d008      	beq.n	8000a7a <Motor_Control_task_handler+0x2e>
			//Print
			//printf(" EMER\n");
			break;
		default:
			//Print
			printf("Motor error\n");
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <Motor_Control_task_handler+0x38>)
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f006 fe80 	bl	8007770 <puts>
			break;
 8000a70:	e004      	b.n	8000a7c <Motor_Control_task_handler+0x30>
			break;
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	e7ee      	b.n	8000a54 <Motor_Control_task_handler+0x8>
			break;
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	e7ec      	b.n	8000a54 <Motor_Control_task_handler+0x8>
			break;
 8000a7a:	46c0      	nop			; (mov r8, r8)
		switch(MEF1.currentState) {
 8000a7c:	e7ea      	b.n	8000a54 <Motor_Control_task_handler+0x8>
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	20000088 	.word	0x20000088
 8000a84:	080087d8 	.word	0x080087d8

08000a88 <Read_Temperature_task_handler>:
		}
	}
}

static void Read_Temperature_task_handler (void *parameters){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	//periodic function. Block for 5000 ms. */
	const TickType_t xReadTemp_Delay = 5000 / portTICK_PERIOD_MS;
 8000a90:	4b37      	ldr	r3, [pc, #220]	; (8000b70 <Read_Temperature_task_handler+0xe8>)
 8000a92:	60fb      	str	r3, [r7, #12]

	for(;;){
		//Print
		printf("Temperature\n");
 8000a94:	4b37      	ldr	r3, [pc, #220]	; (8000b74 <Read_Temperature_task_handler+0xec>)
 8000a96:	0018      	movs	r0, r3
 8000a98:	f006 fe6a 	bl	8007770 <puts>
		//Configure I2C communication
		/*HAL_I2C_Master_Sequential_Transmit_IT:The device 7 bits address value in datasheet must be shifted to the left before calling the interface.
		*Returns almost immediately and lets the main program continue, while the I2C transfer is in progress.
		*That's why I'm using uiStep, in order not to overwrite calls */
		switch(uiStep){
 8000a9c:	4b36      	ldr	r3, [pc, #216]	; (8000b78 <Read_Temperature_task_handler+0xf0>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	2b02      	cmp	r3, #2
 8000aa4:	d02d      	beq.n	8000b02 <Read_Temperature_task_handler+0x7a>
 8000aa6:	dc52      	bgt.n	8000b4e <Read_Temperature_task_handler+0xc6>
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d002      	beq.n	8000ab2 <Read_Temperature_task_handler+0x2a>
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d017      	beq.n	8000ae0 <Read_Temperature_task_handler+0x58>
 8000ab0:	e04d      	b.n	8000b4e <Read_Temperature_task_handler+0xc6>
		case 0:
			//0.1.Write to config reg (0x01 points to it)
			uiBytes_to_ADS1115_reg[0] = 0x01;
 8000ab2:	4b32      	ldr	r3, [pc, #200]	; (8000b7c <Read_Temperature_task_handler+0xf4>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	701a      	strb	r2, [r3, #0]
			//0.2.+-4.076V,128 sps,b14-12 110:INp=AIN0 AInn=GND (single ended meas A0).b15:begin single conversion.b8: 1-single shot
			uiBytes_to_ADS1115_reg[1] = 0xC3; //0b11000011 (MSB)
 8000ab8:	4b30      	ldr	r3, [pc, #192]	; (8000b7c <Read_Temperature_task_handler+0xf4>)
 8000aba:	22c3      	movs	r2, #195	; 0xc3
 8000abc:	705a      	strb	r2, [r3, #1]
			uiBytes_to_ADS1115_reg[2] = 0x83; //0b10000011 (LSB)
 8000abe:	4b2f      	ldr	r3, [pc, #188]	; (8000b7c <Read_Temperature_task_handler+0xf4>)
 8000ac0:	2283      	movs	r2, #131	; 0x83
 8000ac2:	709a      	strb	r2, [r3, #2]
			if (HAL_I2C_Master_Transmit_IT(&hi2c1, uiADS1115_address, uiBytes_to_ADS1115_reg, 3) != HAL_OK){
 8000ac4:	4b2e      	ldr	r3, [pc, #184]	; (8000b80 <Read_Temperature_task_handler+0xf8>)
 8000ac6:	8819      	ldrh	r1, [r3, #0]
 8000ac8:	4a2c      	ldr	r2, [pc, #176]	; (8000b7c <Read_Temperature_task_handler+0xf4>)
 8000aca:	482e      	ldr	r0, [pc, #184]	; (8000b84 <Read_Temperature_task_handler+0xfc>)
 8000acc:	2303      	movs	r3, #3
 8000ace:	f000 feed 	bl	80018ac <HAL_I2C_Master_Transmit_IT>
 8000ad2:	1e03      	subs	r3, r0, #0
 8000ad4:	d043      	beq.n	8000b5e <Read_Temperature_task_handler+0xd6>
				printf("err1\n");
 8000ad6:	4b2c      	ldr	r3, [pc, #176]	; (8000b88 <Read_Temperature_task_handler+0x100>)
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f006 fe49 	bl	8007770 <puts>
			}
			break;
 8000ade:	e03e      	b.n	8000b5e <Read_Temperature_task_handler+0xd6>
		case 1://1.Select the conversion register by writing to pointer reg:address+0x00(points to conversion register)
			uiBytes_to_ADS1115_reg[0] = 0x00; //0x00(points to conversion register)
 8000ae0:	4b26      	ldr	r3, [pc, #152]	; (8000b7c <Read_Temperature_task_handler+0xf4>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	701a      	strb	r2, [r3, #0]
			if (HAL_I2C_Master_Transmit_IT(&hi2c1, uiADS1115_address, uiBytes_to_ADS1115_reg, 1) != HAL_OK){
 8000ae6:	4b26      	ldr	r3, [pc, #152]	; (8000b80 <Read_Temperature_task_handler+0xf8>)
 8000ae8:	8819      	ldrh	r1, [r3, #0]
 8000aea:	4a24      	ldr	r2, [pc, #144]	; (8000b7c <Read_Temperature_task_handler+0xf4>)
 8000aec:	4825      	ldr	r0, [pc, #148]	; (8000b84 <Read_Temperature_task_handler+0xfc>)
 8000aee:	2301      	movs	r3, #1
 8000af0:	f000 fedc 	bl	80018ac <HAL_I2C_Master_Transmit_IT>
 8000af4:	1e03      	subs	r3, r0, #0
 8000af6:	d034      	beq.n	8000b62 <Read_Temperature_task_handler+0xda>
				printf("err2\n");
 8000af8:	4b24      	ldr	r3, [pc, #144]	; (8000b8c <Read_Temperature_task_handler+0x104>)
 8000afa:	0018      	movs	r0, r3
 8000afc:	f006 fe38 	bl	8007770 <puts>
			}
			break;
 8000b00:	e02f      	b.n	8000b62 <Read_Temperature_task_handler+0xda>
		case 2: //2.Reception
			if (HAL_I2C_Master_Receive_IT(&hi2c1, uiADS1115_address, uiBytes_from_ADS1115, ADS1115_CONVERSION_REGISTER_BYTES) != HAL_OK){
 8000b02:	4b1f      	ldr	r3, [pc, #124]	; (8000b80 <Read_Temperature_task_handler+0xf8>)
 8000b04:	8819      	ldrh	r1, [r3, #0]
 8000b06:	4a22      	ldr	r2, [pc, #136]	; (8000b90 <Read_Temperature_task_handler+0x108>)
 8000b08:	481e      	ldr	r0, [pc, #120]	; (8000b84 <Read_Temperature_task_handler+0xfc>)
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	f000 ff4a 	bl	80019a4 <HAL_I2C_Master_Receive_IT>
 8000b10:	1e03      	subs	r3, r0, #0
 8000b12:	d003      	beq.n	8000b1c <Read_Temperature_task_handler+0x94>
				printf("err3\n");
 8000b14:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <Read_Temperature_task_handler+0x10c>)
 8000b16:	0018      	movs	r0, r3
 8000b18:	f006 fe2a 	bl	8007770 <puts>
			}
			//Wait for reception from queue.Block for 10 ticks if a message is not immediately available.later on,restart transmission
			if(xQueueReceive( xQueue_Temperature, (void *)&uiBuffer_QueueTemperature, (TickType_t) 10 ) == pdPASS )
 8000b1c:	4b1e      	ldr	r3, [pc, #120]	; (8000b98 <Read_Temperature_task_handler+0x110>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	491e      	ldr	r1, [pc, #120]	; (8000b9c <Read_Temperature_task_handler+0x114>)
 8000b22:	220a      	movs	r2, #10
 8000b24:	0018      	movs	r0, r3
 8000b26:	f004 fc08 	bl	800533a <xQueueReceive>
 8000b2a:	0003      	movs	r3, r0
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d109      	bne.n	8000b44 <Read_Temperature_task_handler+0xbc>
			{
				//uiBuffer_QueueTemperature now contains a copy of xQueue_Temperature
				printf(":%d\n", uiBuffer_QueueTemperature);
 8000b30:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <Read_Temperature_task_handler+0x114>)
 8000b32:	881b      	ldrh	r3, [r3, #0]
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	001a      	movs	r2, r3
 8000b38:	4b19      	ldr	r3, [pc, #100]	; (8000ba0 <Read_Temperature_task_handler+0x118>)
 8000b3a:	0011      	movs	r1, r2
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f006 fd8b 	bl	8007658 <iprintf>
			}
			else{
				printf("EmptyQ\n");
			}
			break;
 8000b42:	e00f      	b.n	8000b64 <Read_Temperature_task_handler+0xdc>
				printf("EmptyQ\n");
 8000b44:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <Read_Temperature_task_handler+0x11c>)
 8000b46:	0018      	movs	r0, r3
 8000b48:	f006 fe12 	bl	8007770 <puts>
			break;
 8000b4c:	e00a      	b.n	8000b64 <Read_Temperature_task_handler+0xdc>
		default://error
			printf("NoCase\n");
 8000b4e:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <Read_Temperature_task_handler+0x120>)
 8000b50:	0018      	movs	r0, r3
 8000b52:	f006 fe0d 	bl	8007770 <puts>
			uiStep = 0;//start transmission -> uiStep=0
 8000b56:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <Read_Temperature_task_handler+0xf0>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	701a      	strb	r2, [r3, #0]
			break;
 8000b5c:	e002      	b.n	8000b64 <Read_Temperature_task_handler+0xdc>
			break;
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	e000      	b.n	8000b64 <Read_Temperature_task_handler+0xdc>
			break;
 8000b62:	46c0      	nop			; (mov r8, r8)
		}

		//Block the task for a period of ticks
		vTaskDelay(xReadTemp_Delay);
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	0018      	movs	r0, r3
 8000b68:	f004 ff76 	bl	8005a58 <vTaskDelay>
		printf("Temperature\n");
 8000b6c:	e792      	b.n	8000a94 <Read_Temperature_task_handler+0xc>
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	00001388 	.word	0x00001388
 8000b74:	080087e4 	.word	0x080087e4
 8000b78:	20000212 	.word	0x20000212
 8000b7c:	20000208 	.word	0x20000208
 8000b80:	20000000 	.word	0x20000000
 8000b84:	20000124 	.word	0x20000124
 8000b88:	080087f0 	.word	0x080087f0
 8000b8c:	080087f8 	.word	0x080087f8
 8000b90:	2000020c 	.word	0x2000020c
 8000b94:	08008800 	.word	0x08008800
 8000b98:	20000200 	.word	0x20000200
 8000b9c:	20000204 	.word	0x20000204
 8000ba0:	08008808 	.word	0x08008808
 8000ba4:	08008810 	.word	0x08008810
 8000ba8:	08008818 	.word	0x08008818

08000bac <LCD_Arduino_task_handler>:
	}
}

static void LCD_Arduino_task_handler (void *parameters){
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af02      	add	r7, sp, #8
 8000bb2:	6078      	str	r0, [r7, #4]
	//Task blocked until a flag of the event group is active
	//I want to wait forever,leaving blocked state only when unblock condition happens.const TickType_t xTicksToWait_LCDArduino = 1/portTICK_PERIOD_MS; //1 ms

	for(;;){
		//Print
		printf("LCD\n");
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <LCD_Arduino_task_handler+0x2c>)
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f006 fdda 	bl	8007770 <puts>
		//wait for any flag active ( xWaitForAllBits=FALSE).Clear the active flags ( xClearOnExit=pdTRUE)
		//uxBitsFlagsLCDArduino = xEventGroupWaitBits(xGroupFlagsLCDArduino, FLAG_SPEED_CHANGED|FLAG_STATION_CHANGED|FLAG_STATUS_CHANGED, pdTRUE, pdFALSE, xTicksToWait_LCDArduino);
		uxBitsFlagsLCDArduino = xEventGroupWaitBits(xGroupFlagsLCDArduino, FLAG_SPEED_CHANGED|FLAG_STATION_CHANGED|FLAG_STATUS_CHANGED, pdTRUE, pdFALSE, portMAX_DELAY);
 8000bbc:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <LCD_Arduino_task_handler+0x30>)
 8000bbe:	6818      	ldr	r0, [r3, #0]
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	425b      	negs	r3, r3
 8000bc4:	9300      	str	r3, [sp, #0]
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	2201      	movs	r2, #1
 8000bca:	2107      	movs	r1, #7
 8000bcc:	f004 f85c 	bl	8004c88 <xEventGroupWaitBits>
 8000bd0:	0002      	movs	r2, r0
 8000bd2:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <LCD_Arduino_task_handler+0x34>)
 8000bd4:	601a      	str	r2, [r3, #0]
		printf("LCD\n");
 8000bd6:	e7ed      	b.n	8000bb4 <LCD_Arduino_task_handler+0x8>
 8000bd8:	08008820 	.word	0x08008820
 8000bdc:	200001f8 	.word	0x200001f8
 8000be0:	200001fc 	.word	0x200001fc

08000be4 <HAL_GPIO_EXTI_Callback>:
		//disable SPI
	}
}

//EXTI interrupt handler (OnOff button or emergency stop). __weak void overwritten
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	0002      	movs	r2, r0
 8000bec:	1dbb      	adds	r3, r7, #6
 8000bee:	801a      	strh	r2, [r3, #0]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]
	//from OnOff button
	if (GPIO_Pin == ButtonOnOff_Pin){
 8000bf4:	1dbb      	adds	r3, r7, #6
 8000bf6:	881b      	ldrh	r3, [r3, #0]
 8000bf8:	2b08      	cmp	r3, #8
 8000bfa:	d102      	bne.n	8000c02 <HAL_GPIO_EXTI_Callback+0x1e>
		//set/reset flag
		uiFlagOnOff = TRUE;
 8000bfc:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <HAL_GPIO_EXTI_Callback+0x54>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	701a      	strb	r2, [r3, #0]
		//notify task FSM

	}
	//from emergency stop
	if (GPIO_Pin == EmergencyStopButton_Pin){
 8000c02:	1dbb      	adds	r3, r7, #6
 8000c04:	881b      	ldrh	r3, [r3, #0]
 8000c06:	2b20      	cmp	r3, #32
 8000c08:	d102      	bne.n	8000c10 <HAL_GPIO_EXTI_Callback+0x2c>
		//set/reset flag
		uiFlagEmergency = TRUE;
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <HAL_GPIO_EXTI_Callback+0x58>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	701a      	strb	r2, [r3, #0]
		//notify task FSM

	}
	// Notify the thread so it will wake up when the ISR is complete
	vTaskNotifyGiveFromISR(FSM_taskPointer, &xHigherPriorityTaskWoken);
 8000c10:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	220c      	movs	r2, #12
 8000c16:	18ba      	adds	r2, r7, r2
 8000c18:	2100      	movs	r1, #0
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f005 fe3a 	bl	8006894 <vTaskGenericNotifyGiveFromISR>
	/*Force a context switch if xHigherPriorityTaskWoken is now set to pdTRUE. If vTaskNotifyGiveFromISR indicates that a higher priority task is being woken,
	 *portYIELD_FROM_ISR() routine will context switch to that task after returning from the ISR.Failure to use this function will result
	 *in execution resuming at previous point rather than switching to new context*/
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d003      	beq.n	8000c2e <HAL_GPIO_EXTI_Callback+0x4a>
 8000c26:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <HAL_GPIO_EXTI_Callback+0x60>)
 8000c28:	2280      	movs	r2, #128	; 0x80
 8000c2a:	0552      	lsls	r2, r2, #21
 8000c2c:	601a      	str	r2, [r3, #0]
}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	46bd      	mov	sp, r7
 8000c32:	b004      	add	sp, #16
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	200001f4 	.word	0x200001f4
 8000c3c:	200001f5 	.word	0x200001f5
 8000c40:	20000214 	.word	0x20000214
 8000c44:	e000ed04 	.word	0xe000ed04

08000c48 <HAL_I2C_MasterRxCpltCallback>:

//I2C reception handler callback. __weak void overwritten
void HAL_I2C_MasterRxCpltCallback (I2C_HandleTypeDef *hi2c){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == hi2c1.Instance){ //I2C1
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4b25      	ldr	r3, [pc, #148]	; (8000cec <HAL_I2C_MasterRxCpltCallback+0xa4>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d143      	bne.n	8000ce4 <HAL_I2C_MasterRxCpltCallback+0x9c>
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
		uiLastADS1115_raw = (uiBytes_from_ADS1115[0] << 8)|(uiBytes_from_ADS1115[1]); //byteRead is LSB and firstByteRead is MSB
 8000c60:	4b23      	ldr	r3, [pc, #140]	; (8000cf0 <HAL_I2C_MasterRxCpltCallback+0xa8>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	021b      	lsls	r3, r3, #8
 8000c66:	b21a      	sxth	r2, r3
 8000c68:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <HAL_I2C_MasterRxCpltCallback+0xa8>)
 8000c6a:	785b      	ldrb	r3, [r3, #1]
 8000c6c:	b21b      	sxth	r3, r3
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	b21b      	sxth	r3, r3
 8000c72:	b29a      	uxth	r2, r3
 8000c74:	4b1f      	ldr	r3, [pc, #124]	; (8000cf4 <HAL_I2C_MasterRxCpltCallback+0xac>)
 8000c76:	801a      	strh	r2, [r3, #0]
		uiLastADS1115_mV = uiLastADS1115_raw * ADS1115_GAIN/ADS1115_MAX;
 8000c78:	4b1e      	ldr	r3, [pc, #120]	; (8000cf4 <HAL_I2C_MasterRxCpltCallback+0xac>)
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	001a      	movs	r2, r3
 8000c80:	0013      	movs	r3, r2
 8000c82:	021b      	lsls	r3, r3, #8
 8000c84:	1a9b      	subs	r3, r3, r2
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	1a9b      	subs	r3, r3, r2
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	d502      	bpl.n	8000c94 <HAL_I2C_MasterRxCpltCallback+0x4c>
 8000c8e:	4a1a      	ldr	r2, [pc, #104]	; (8000cf8 <HAL_I2C_MasterRxCpltCallback+0xb0>)
 8000c90:	4694      	mov	ip, r2
 8000c92:	4463      	add	r3, ip
 8000c94:	13db      	asrs	r3, r3, #15
 8000c96:	b29a      	uxth	r2, r3
 8000c98:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <HAL_I2C_MasterRxCpltCallback+0xb4>)
 8000c9a:	801a      	strh	r2, [r3, #0]
		xQueueSendFromISR(xQueue_Temperature, (void *)&uiLastADS1115_mV, &xHigherPriorityTaskWoken);
 8000c9c:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <HAL_I2C_MasterRxCpltCallback+0xb8>)
 8000c9e:	6818      	ldr	r0, [r3, #0]
 8000ca0:	230c      	movs	r3, #12
 8000ca2:	18fa      	adds	r2, r7, r3
 8000ca4:	4915      	ldr	r1, [pc, #84]	; (8000cfc <HAL_I2C_MasterRxCpltCallback+0xb4>)
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	f004 fac1 	bl	800522e <xQueueGenericSendFromISR>
		//switch context if necessary. */
		if( xHigherPriorityTaskWoken )
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d006      	beq.n	8000cc0 <HAL_I2C_MasterRxCpltCallback+0x78>
		{
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d003      	beq.n	8000cc0 <HAL_I2C_MasterRxCpltCallback+0x78>
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <HAL_I2C_MasterRxCpltCallback+0xbc>)
 8000cba:	2280      	movs	r2, #128	; 0x80
 8000cbc:	0552      	lsls	r2, r2, #21
 8000cbe:	601a      	str	r2, [r3, #0]
		}
		uiStep++;
 8000cc0:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <HAL_I2C_MasterRxCpltCallback+0xc0>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <HAL_I2C_MasterRxCpltCallback+0xc0>)
 8000ccc:	701a      	strb	r2, [r3, #0]
		uiStep%=3;
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <HAL_I2C_MasterRxCpltCallback+0xc0>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	2103      	movs	r1, #3
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f7ff faa6 	bl	8000228 <__aeabi_uidivmod>
 8000cdc:	000b      	movs	r3, r1
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <HAL_I2C_MasterRxCpltCallback+0xc0>)
 8000ce2:	701a      	strb	r2, [r3, #0]
	}

}
 8000ce4:	46c0      	nop			; (mov r8, r8)
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	b004      	add	sp, #16
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000124 	.word	0x20000124
 8000cf0:	2000020c 	.word	0x2000020c
 8000cf4:	2000020e 	.word	0x2000020e
 8000cf8:	00007fff 	.word	0x00007fff
 8000cfc:	20000210 	.word	0x20000210
 8000d00:	20000200 	.word	0x20000200
 8000d04:	e000ed04 	.word	0xe000ed04
 8000d08:	20000212 	.word	0x20000212

08000d0c <HAL_I2C_MasterTxCpltCallback>:

//I2C transmission handler callback. __weak void overwritten
void HAL_I2C_MasterTxCpltCallback (I2C_HandleTypeDef *hi2c){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == hi2c1.Instance){ //I2C1
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <HAL_I2C_MasterTxCpltCallback+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d111      	bne.n	8000d44 <HAL_I2C_MasterTxCpltCallback+0x38>
		uiStep++;
 8000d20:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <HAL_I2C_MasterTxCpltCallback+0x44>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	3301      	adds	r3, #1
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <HAL_I2C_MasterTxCpltCallback+0x44>)
 8000d2c:	701a      	strb	r2, [r3, #0]
		uiStep%=3;
 8000d2e:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <HAL_I2C_MasterTxCpltCallback+0x44>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	2103      	movs	r1, #3
 8000d36:	0018      	movs	r0, r3
 8000d38:	f7ff fa76 	bl	8000228 <__aeabi_uidivmod>
 8000d3c:	000b      	movs	r3, r1
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	4b03      	ldr	r3, [pc, #12]	; (8000d50 <HAL_I2C_MasterTxCpltCallback+0x44>)
 8000d42:	701a      	strb	r2, [r3, #0]
	}
}
 8000d44:	46c0      	nop			; (mov r8, r8)
 8000d46:	46bd      	mov	sp, r7
 8000d48:	b002      	add	sp, #8
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000124 	.word	0x20000124
 8000d50:	20000212 	.word	0x20000212

08000d54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d101      	bne.n	8000d6a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d66:	f000 fa3f 	bl	80011e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	b002      	add	sp, #8
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	40001000 	.word	0x40001000

08000d78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d7c:	b672      	cpsid	i
}
 8000d7e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <Error_Handler+0x8>
	...

08000d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <HAL_MspInit+0x44>)
 8000d8c:	699a      	ldr	r2, [r3, #24]
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <HAL_MspInit+0x44>)
 8000d90:	2101      	movs	r1, #1
 8000d92:	430a      	orrs	r2, r1
 8000d94:	619a      	str	r2, [r3, #24]
 8000d96:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <HAL_MspInit+0x44>)
 8000d98:	699b      	ldr	r3, [r3, #24]
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da2:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <HAL_MspInit+0x44>)
 8000da4:	69da      	ldr	r2, [r3, #28]
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <HAL_MspInit+0x44>)
 8000da8:	2180      	movs	r1, #128	; 0x80
 8000daa:	0549      	lsls	r1, r1, #21
 8000dac:	430a      	orrs	r2, r1
 8000dae:	61da      	str	r2, [r3, #28]
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <HAL_MspInit+0x44>)
 8000db2:	69da      	ldr	r2, [r3, #28]
 8000db4:	2380      	movs	r3, #128	; 0x80
 8000db6:	055b      	lsls	r3, r3, #21
 8000db8:	4013      	ands	r3, r2
 8000dba:	603b      	str	r3, [r7, #0]
 8000dbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	b002      	add	sp, #8
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	40021000 	.word	0x40021000

08000dcc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dcc:	b590      	push	{r4, r7, lr}
 8000dce:	b08b      	sub	sp, #44	; 0x2c
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	2414      	movs	r4, #20
 8000dd6:	193b      	adds	r3, r7, r4
 8000dd8:	0018      	movs	r0, r3
 8000dda:	2314      	movs	r3, #20
 8000ddc:	001a      	movs	r2, r3
 8000dde:	2100      	movs	r1, #0
 8000de0:	f006 fc31 	bl	8007646 <memset>
  if(hi2c->Instance==I2C1)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a20      	ldr	r2, [pc, #128]	; (8000e6c <HAL_I2C_MspInit+0xa0>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d13a      	bne.n	8000e64 <HAL_I2C_MspInit+0x98>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dee:	4b20      	ldr	r3, [pc, #128]	; (8000e70 <HAL_I2C_MspInit+0xa4>)
 8000df0:	695a      	ldr	r2, [r3, #20]
 8000df2:	4b1f      	ldr	r3, [pc, #124]	; (8000e70 <HAL_I2C_MspInit+0xa4>)
 8000df4:	2180      	movs	r1, #128	; 0x80
 8000df6:	02c9      	lsls	r1, r1, #11
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	615a      	str	r2, [r3, #20]
 8000dfc:	4b1c      	ldr	r3, [pc, #112]	; (8000e70 <HAL_I2C_MspInit+0xa4>)
 8000dfe:	695a      	ldr	r2, [r3, #20]
 8000e00:	2380      	movs	r3, #128	; 0x80
 8000e02:	02db      	lsls	r3, r3, #11
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000e0a:	193b      	adds	r3, r7, r4
 8000e0c:	2290      	movs	r2, #144	; 0x90
 8000e0e:	0092      	lsls	r2, r2, #2
 8000e10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e12:	0021      	movs	r1, r4
 8000e14:	187b      	adds	r3, r7, r1
 8000e16:	2212      	movs	r2, #18
 8000e18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e1a:	187b      	adds	r3, r7, r1
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	2203      	movs	r2, #3
 8000e24:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000e26:	187b      	adds	r3, r7, r1
 8000e28:	2201      	movs	r2, #1
 8000e2a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	4a11      	ldr	r2, [pc, #68]	; (8000e74 <HAL_I2C_MspInit+0xa8>)
 8000e30:	0019      	movs	r1, r3
 8000e32:	0010      	movs	r0, r2
 8000e34:	f000 faf2 	bl	800141c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e38:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <HAL_I2C_MspInit+0xa4>)
 8000e3a:	69da      	ldr	r2, [r3, #28]
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <HAL_I2C_MspInit+0xa4>)
 8000e3e:	2180      	movs	r1, #128	; 0x80
 8000e40:	0389      	lsls	r1, r1, #14
 8000e42:	430a      	orrs	r2, r1
 8000e44:	61da      	str	r2, [r3, #28]
 8000e46:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <HAL_I2C_MspInit+0xa4>)
 8000e48:	69da      	ldr	r2, [r3, #28]
 8000e4a:	2380      	movs	r3, #128	; 0x80
 8000e4c:	039b      	lsls	r3, r3, #14
 8000e4e:	4013      	ands	r3, r2
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2100      	movs	r1, #0
 8000e58:	2017      	movs	r0, #23
 8000e5a:	f000 fa69 	bl	8001330 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8000e5e:	2017      	movs	r0, #23
 8000e60:	f000 fa7b 	bl	800135a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e64:	46c0      	nop			; (mov r8, r8)
 8000e66:	46bd      	mov	sp, r7
 8000e68:	b00b      	add	sp, #44	; 0x2c
 8000e6a:	bd90      	pop	{r4, r7, pc}
 8000e6c:	40005400 	.word	0x40005400
 8000e70:	40021000 	.word	0x40021000
 8000e74:	48000400 	.word	0x48000400

08000e78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e78:	b590      	push	{r4, r7, lr}
 8000e7a:	b08b      	sub	sp, #44	; 0x2c
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	2414      	movs	r4, #20
 8000e82:	193b      	adds	r3, r7, r4
 8000e84:	0018      	movs	r0, r3
 8000e86:	2314      	movs	r3, #20
 8000e88:	001a      	movs	r2, r3
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	f006 fbdb 	bl	8007646 <memset>
  if(huart->Instance==USART2)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a1c      	ldr	r2, [pc, #112]	; (8000f08 <HAL_UART_MspInit+0x90>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d132      	bne.n	8000f00 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e9a:	4b1c      	ldr	r3, [pc, #112]	; (8000f0c <HAL_UART_MspInit+0x94>)
 8000e9c:	69da      	ldr	r2, [r3, #28]
 8000e9e:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <HAL_UART_MspInit+0x94>)
 8000ea0:	2180      	movs	r1, #128	; 0x80
 8000ea2:	0289      	lsls	r1, r1, #10
 8000ea4:	430a      	orrs	r2, r1
 8000ea6:	61da      	str	r2, [r3, #28]
 8000ea8:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <HAL_UART_MspInit+0x94>)
 8000eaa:	69da      	ldr	r2, [r3, #28]
 8000eac:	2380      	movs	r3, #128	; 0x80
 8000eae:	029b      	lsls	r3, r3, #10
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb6:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <HAL_UART_MspInit+0x94>)
 8000eb8:	695a      	ldr	r2, [r3, #20]
 8000eba:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <HAL_UART_MspInit+0x94>)
 8000ebc:	2180      	movs	r1, #128	; 0x80
 8000ebe:	0289      	lsls	r1, r1, #10
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	615a      	str	r2, [r3, #20]
 8000ec4:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <HAL_UART_MspInit+0x94>)
 8000ec6:	695a      	ldr	r2, [r3, #20]
 8000ec8:	2380      	movs	r3, #128	; 0x80
 8000eca:	029b      	lsls	r3, r3, #10
 8000ecc:	4013      	ands	r3, r2
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ed2:	0021      	movs	r1, r4
 8000ed4:	187b      	adds	r3, r7, r1
 8000ed6:	220c      	movs	r2, #12
 8000ed8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	187b      	adds	r3, r7, r1
 8000edc:	2202      	movs	r2, #2
 8000ede:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	187b      	adds	r3, r7, r1
 8000ee8:	2200      	movs	r2, #0
 8000eea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000eec:	187b      	adds	r3, r7, r1
 8000eee:	2201      	movs	r2, #1
 8000ef0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef2:	187a      	adds	r2, r7, r1
 8000ef4:	2390      	movs	r3, #144	; 0x90
 8000ef6:	05db      	lsls	r3, r3, #23
 8000ef8:	0011      	movs	r1, r2
 8000efa:	0018      	movs	r0, r3
 8000efc:	f000 fa8e 	bl	800141c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f00:	46c0      	nop			; (mov r8, r8)
 8000f02:	46bd      	mov	sp, r7
 8000f04:	b00b      	add	sp, #44	; 0x2c
 8000f06:	bd90      	pop	{r4, r7, pc}
 8000f08:	40004400 	.word	0x40004400
 8000f0c:	40021000 	.word	0x40021000

08000f10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f10:	b5b0      	push	{r4, r5, r7, lr}
 8000f12:	b08c      	sub	sp, #48	; 0x30
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t              uwPrescalerValue = 0U;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f20:	4b37      	ldr	r3, [pc, #220]	; (8001000 <HAL_InitTick+0xf0>)
 8000f22:	69da      	ldr	r2, [r3, #28]
 8000f24:	4b36      	ldr	r3, [pc, #216]	; (8001000 <HAL_InitTick+0xf0>)
 8000f26:	2110      	movs	r1, #16
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	61da      	str	r2, [r3, #28]
 8000f2c:	4b34      	ldr	r3, [pc, #208]	; (8001000 <HAL_InitTick+0xf0>)
 8000f2e:	69db      	ldr	r3, [r3, #28]
 8000f30:	2210      	movs	r2, #16
 8000f32:	4013      	ands	r3, r2
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f38:	230c      	movs	r3, #12
 8000f3a:	18fa      	adds	r2, r7, r3
 8000f3c:	2410      	movs	r4, #16
 8000f3e:	193b      	adds	r3, r7, r4
 8000f40:	0011      	movs	r1, r2
 8000f42:	0018      	movs	r0, r3
 8000f44:	f002 fe48 	bl	8003bd8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f48:	193b      	adds	r3, r7, r4
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d104      	bne.n	8000f5e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f54:	f002 fe2a 	bl	8003bac <HAL_RCC_GetPCLK1Freq>
 8000f58:	0003      	movs	r3, r0
 8000f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f5c:	e004      	b.n	8000f68 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f5e:	f002 fe25 	bl	8003bac <HAL_RCC_GetPCLK1Freq>
 8000f62:	0003      	movs	r3, r0
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f6a:	4926      	ldr	r1, [pc, #152]	; (8001004 <HAL_InitTick+0xf4>)
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f7ff f8d5 	bl	800011c <__udivsi3>
 8000f72:	0003      	movs	r3, r0
 8000f74:	3b01      	subs	r3, #1
 8000f76:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f78:	4b23      	ldr	r3, [pc, #140]	; (8001008 <HAL_InitTick+0xf8>)
 8000f7a:	4a24      	ldr	r2, [pc, #144]	; (800100c <HAL_InitTick+0xfc>)
 8000f7c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f7e:	4b22      	ldr	r3, [pc, #136]	; (8001008 <HAL_InitTick+0xf8>)
 8000f80:	4a23      	ldr	r2, [pc, #140]	; (8001010 <HAL_InitTick+0x100>)
 8000f82:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f84:	4b20      	ldr	r3, [pc, #128]	; (8001008 <HAL_InitTick+0xf8>)
 8000f86:	6a3a      	ldr	r2, [r7, #32]
 8000f88:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8000f8a:	4b1f      	ldr	r3, [pc, #124]	; (8001008 <HAL_InitTick+0xf8>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f90:	4b1d      	ldr	r3, [pc, #116]	; (8001008 <HAL_InitTick+0xf8>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f96:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <HAL_InitTick+0xf8>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000f9c:	252b      	movs	r5, #43	; 0x2b
 8000f9e:	197c      	adds	r4, r7, r5
 8000fa0:	4b19      	ldr	r3, [pc, #100]	; (8001008 <HAL_InitTick+0xf8>)
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f002 ff42 	bl	8003e2c <HAL_TIM_Base_Init>
 8000fa8:	0003      	movs	r3, r0
 8000faa:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8000fac:	197b      	adds	r3, r7, r5
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d11e      	bne.n	8000ff2 <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000fb4:	197c      	adds	r4, r7, r5
 8000fb6:	4b14      	ldr	r3, [pc, #80]	; (8001008 <HAL_InitTick+0xf8>)
 8000fb8:	0018      	movs	r0, r3
 8000fba:	f002 ff8f 	bl	8003edc <HAL_TIM_Base_Start_IT>
 8000fbe:	0003      	movs	r3, r0
 8000fc0:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8000fc2:	197b      	adds	r3, r7, r5
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d113      	bne.n	8000ff2 <HAL_InitTick+0xe2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000fca:	2011      	movs	r0, #17
 8000fcc:	f000 f9c5 	bl	800135a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d809      	bhi.n	8000fea <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	0019      	movs	r1, r3
 8000fdc:	2011      	movs	r0, #17
 8000fde:	f000 f9a7 	bl	8001330 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <HAL_InitTick+0x104>)
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	e003      	b.n	8000ff2 <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 8000fea:	232b      	movs	r3, #43	; 0x2b
 8000fec:	18fb      	adds	r3, r7, r3
 8000fee:	2201      	movs	r2, #1
 8000ff0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8000ff2:	232b      	movs	r3, #43	; 0x2b
 8000ff4:	18fb      	adds	r3, r7, r3
 8000ff6:	781b      	ldrb	r3, [r3, #0]
}
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	b00c      	add	sp, #48	; 0x30
 8000ffe:	bdb0      	pop	{r4, r5, r7, pc}
 8001000:	40021000 	.word	0x40021000
 8001004:	000f4240 	.word	0x000f4240
 8001008:	2000022c 	.word	0x2000022c
 800100c:	40001000 	.word	0x40001000
 8001010:	000003e7 	.word	0x000003e7
 8001014:	20000094 	.word	0x20000094

08001018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800101c:	e7fe      	b.n	800101c <NMI_Handler+0x4>

0800101e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001022:	e7fe      	b.n	8001022 <HardFault_Handler+0x4>

08001024 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ButtonOnOff_Pin);
 8001028:	2008      	movs	r0, #8
 800102a:	f000 fb8d 	bl	8001748 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EmergencyStopButton_Pin);
 8001038:	2020      	movs	r0, #32
 800103a:	f000 fb85 	bl	8001748 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800103e:	2380      	movs	r3, #128	; 0x80
 8001040:	019b      	lsls	r3, r3, #6
 8001042:	0018      	movs	r0, r3
 8001044:	f000 fb80 	bl	8001748 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001048:	46c0      	nop			; (mov r8, r8)
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
	...

08001050 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001054:	4b03      	ldr	r3, [pc, #12]	; (8001064 <TIM6_DAC_IRQHandler+0x14>)
 8001056:	0018      	movs	r0, r3
 8001058:	f002 ff92 	bl	8003f80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800105c:	46c0      	nop			; (mov r8, r8)
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	2000022c 	.word	0x2000022c

08001068 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 800106c:	4b09      	ldr	r3, [pc, #36]	; (8001094 <I2C1_IRQHandler+0x2c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	699a      	ldr	r2, [r3, #24]
 8001072:	23e0      	movs	r3, #224	; 0xe0
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	4013      	ands	r3, r2
 8001078:	d004      	beq.n	8001084 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <I2C1_IRQHandler+0x2c>)
 800107c:	0018      	movs	r0, r3
 800107e:	f000 fd27 	bl	8001ad0 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8001082:	e003      	b.n	800108c <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8001084:	4b03      	ldr	r3, [pc, #12]	; (8001094 <I2C1_IRQHandler+0x2c>)
 8001086:	0018      	movs	r0, r3
 8001088:	f000 fd08 	bl	8001a9c <HAL_I2C_EV_IRQHandler>
}
 800108c:	46c0      	nop			; (mov r8, r8)
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	46c0      	nop			; (mov r8, r8)
 8001094:	20000124 	.word	0x20000124

08001098 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
 80010a8:	e00a      	b.n	80010c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010aa:	e000      	b.n	80010ae <_read+0x16>
 80010ac:	bf00      	nop
 80010ae:	0001      	movs	r1, r0
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	1c5a      	adds	r2, r3, #1
 80010b4:	60ba      	str	r2, [r7, #8]
 80010b6:	b2ca      	uxtb	r2, r1
 80010b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	3301      	adds	r3, #1
 80010be:	617b      	str	r3, [r7, #20]
 80010c0:	697a      	ldr	r2, [r7, #20]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	dbf0      	blt.n	80010aa <_read+0x12>
	}

return len;
 80010c8:	687b      	ldr	r3, [r7, #4]
}
 80010ca:	0018      	movs	r0, r3
 80010cc:	46bd      	mov	sp, r7
 80010ce:	b006      	add	sp, #24
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b086      	sub	sp, #24
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	60f8      	str	r0, [r7, #12]
 80010da:	60b9      	str	r1, [r7, #8]
 80010dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
 80010e2:	e009      	b.n	80010f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	1c5a      	adds	r2, r3, #1
 80010e8:	60ba      	str	r2, [r7, #8]
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	0018      	movs	r0, r3
 80010ee:	f7ff f8a1 	bl	8000234 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	3301      	adds	r3, #1
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	697a      	ldr	r2, [r7, #20]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	dbf1      	blt.n	80010e4 <_write+0x12>
	}
	return len;
 8001100:	687b      	ldr	r3, [r7, #4]
}
 8001102:	0018      	movs	r0, r3
 8001104:	46bd      	mov	sp, r7
 8001106:	b006      	add	sp, #24
 8001108:	bd80      	pop	{r7, pc}

0800110a <_close>:

int _close(int file)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
	return -1;
 8001112:	2301      	movs	r3, #1
 8001114:	425b      	negs	r3, r3
}
 8001116:	0018      	movs	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	b002      	add	sp, #8
 800111c:	bd80      	pop	{r7, pc}

0800111e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
 8001126:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	2280      	movs	r2, #128	; 0x80
 800112c:	0192      	lsls	r2, r2, #6
 800112e:	605a      	str	r2, [r3, #4]
	return 0;
 8001130:	2300      	movs	r3, #0
}
 8001132:	0018      	movs	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	b002      	add	sp, #8
 8001138:	bd80      	pop	{r7, pc}

0800113a <_isatty>:

int _isatty(int file)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
	return 1;
 8001142:	2301      	movs	r3, #1
}
 8001144:	0018      	movs	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	b002      	add	sp, #8
 800114a:	bd80      	pop	{r7, pc}

0800114c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
	return 0;
 8001158:	2300      	movs	r3, #0
}
 800115a:	0018      	movs	r0, r3
 800115c:	46bd      	mov	sp, r7
 800115e:	b004      	add	sp, #16
 8001160:	bd80      	pop	{r7, pc}

08001162 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800116c:	480d      	ldr	r0, [pc, #52]	; (80011a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800116e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001170:	480d      	ldr	r0, [pc, #52]	; (80011a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001172:	490e      	ldr	r1, [pc, #56]	; (80011ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001174:	4a0e      	ldr	r2, [pc, #56]	; (80011b0 <LoopForever+0xe>)
  movs r3, #0
 8001176:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001178:	e002      	b.n	8001180 <LoopCopyDataInit>

0800117a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800117a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800117c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800117e:	3304      	adds	r3, #4

08001180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001184:	d3f9      	bcc.n	800117a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001186:	4a0b      	ldr	r2, [pc, #44]	; (80011b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001188:	4c0b      	ldr	r4, [pc, #44]	; (80011b8 <LoopForever+0x16>)
  movs r3, #0
 800118a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800118c:	e001      	b.n	8001192 <LoopFillZerobss>

0800118e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800118e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001190:	3204      	adds	r2, #4

08001192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001194:	d3fb      	bcc.n	800118e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001196:	f7ff ffe4 	bl	8001162 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800119a:	f006 fa27 	bl	80075ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800119e:	f7ff f85b 	bl	8000258 <main>

080011a2 <LoopForever>:

LoopForever:
    b LoopForever
 80011a2:	e7fe      	b.n	80011a2 <LoopForever>
  ldr   r0, =_estack
 80011a4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80011a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011ac:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 80011b0:	0800893c 	.word	0x0800893c
  ldr r2, =_sbss
 80011b4:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 80011b8:	20002024 	.word	0x20002024

080011bc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011bc:	e7fe      	b.n	80011bc <ADC1_COMP_IRQHandler>
	...

080011c0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <HAL_Init+0x24>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_Init+0x24>)
 80011ca:	2110      	movs	r1, #16
 80011cc:	430a      	orrs	r2, r1
 80011ce:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80011d0:	2003      	movs	r0, #3
 80011d2:	f7ff fe9d 	bl	8000f10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011d6:	f7ff fdd5 	bl	8000d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011da:	2300      	movs	r3, #0
}
 80011dc:	0018      	movs	r0, r3
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	40022000 	.word	0x40022000

080011e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <HAL_IncTick+0x1c>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	001a      	movs	r2, r3
 80011f2:	4b05      	ldr	r3, [pc, #20]	; (8001208 <HAL_IncTick+0x20>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	18d2      	adds	r2, r2, r3
 80011f8:	4b03      	ldr	r3, [pc, #12]	; (8001208 <HAL_IncTick+0x20>)
 80011fa:	601a      	str	r2, [r3, #0]
}
 80011fc:	46c0      	nop			; (mov r8, r8)
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	20000098 	.word	0x20000098
 8001208:	20000274 	.word	0x20000274

0800120c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  return uwTick;
 8001210:	4b02      	ldr	r3, [pc, #8]	; (800121c <HAL_GetTick+0x10>)
 8001212:	681b      	ldr	r3, [r3, #0]
}
 8001214:	0018      	movs	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	46c0      	nop			; (mov r8, r8)
 800121c:	20000274 	.word	0x20000274

08001220 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	0002      	movs	r2, r0
 8001228:	1dfb      	adds	r3, r7, #7
 800122a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800122c:	1dfb      	adds	r3, r7, #7
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b7f      	cmp	r3, #127	; 0x7f
 8001232:	d809      	bhi.n	8001248 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001234:	1dfb      	adds	r3, r7, #7
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	001a      	movs	r2, r3
 800123a:	231f      	movs	r3, #31
 800123c:	401a      	ands	r2, r3
 800123e:	4b04      	ldr	r3, [pc, #16]	; (8001250 <__NVIC_EnableIRQ+0x30>)
 8001240:	2101      	movs	r1, #1
 8001242:	4091      	lsls	r1, r2
 8001244:	000a      	movs	r2, r1
 8001246:	601a      	str	r2, [r3, #0]
  }
}
 8001248:	46c0      	nop			; (mov r8, r8)
 800124a:	46bd      	mov	sp, r7
 800124c:	b002      	add	sp, #8
 800124e:	bd80      	pop	{r7, pc}
 8001250:	e000e100 	.word	0xe000e100

08001254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001254:	b590      	push	{r4, r7, lr}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	0002      	movs	r2, r0
 800125c:	6039      	str	r1, [r7, #0]
 800125e:	1dfb      	adds	r3, r7, #7
 8001260:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001262:	1dfb      	adds	r3, r7, #7
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b7f      	cmp	r3, #127	; 0x7f
 8001268:	d828      	bhi.n	80012bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800126a:	4a2f      	ldr	r2, [pc, #188]	; (8001328 <__NVIC_SetPriority+0xd4>)
 800126c:	1dfb      	adds	r3, r7, #7
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	b25b      	sxtb	r3, r3
 8001272:	089b      	lsrs	r3, r3, #2
 8001274:	33c0      	adds	r3, #192	; 0xc0
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	589b      	ldr	r3, [r3, r2]
 800127a:	1dfa      	adds	r2, r7, #7
 800127c:	7812      	ldrb	r2, [r2, #0]
 800127e:	0011      	movs	r1, r2
 8001280:	2203      	movs	r2, #3
 8001282:	400a      	ands	r2, r1
 8001284:	00d2      	lsls	r2, r2, #3
 8001286:	21ff      	movs	r1, #255	; 0xff
 8001288:	4091      	lsls	r1, r2
 800128a:	000a      	movs	r2, r1
 800128c:	43d2      	mvns	r2, r2
 800128e:	401a      	ands	r2, r3
 8001290:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	019b      	lsls	r3, r3, #6
 8001296:	22ff      	movs	r2, #255	; 0xff
 8001298:	401a      	ands	r2, r3
 800129a:	1dfb      	adds	r3, r7, #7
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	0018      	movs	r0, r3
 80012a0:	2303      	movs	r3, #3
 80012a2:	4003      	ands	r3, r0
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012a8:	481f      	ldr	r0, [pc, #124]	; (8001328 <__NVIC_SetPriority+0xd4>)
 80012aa:	1dfb      	adds	r3, r7, #7
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	b25b      	sxtb	r3, r3
 80012b0:	089b      	lsrs	r3, r3, #2
 80012b2:	430a      	orrs	r2, r1
 80012b4:	33c0      	adds	r3, #192	; 0xc0
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80012ba:	e031      	b.n	8001320 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012bc:	4a1b      	ldr	r2, [pc, #108]	; (800132c <__NVIC_SetPriority+0xd8>)
 80012be:	1dfb      	adds	r3, r7, #7
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	0019      	movs	r1, r3
 80012c4:	230f      	movs	r3, #15
 80012c6:	400b      	ands	r3, r1
 80012c8:	3b08      	subs	r3, #8
 80012ca:	089b      	lsrs	r3, r3, #2
 80012cc:	3306      	adds	r3, #6
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	18d3      	adds	r3, r2, r3
 80012d2:	3304      	adds	r3, #4
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	1dfa      	adds	r2, r7, #7
 80012d8:	7812      	ldrb	r2, [r2, #0]
 80012da:	0011      	movs	r1, r2
 80012dc:	2203      	movs	r2, #3
 80012de:	400a      	ands	r2, r1
 80012e0:	00d2      	lsls	r2, r2, #3
 80012e2:	21ff      	movs	r1, #255	; 0xff
 80012e4:	4091      	lsls	r1, r2
 80012e6:	000a      	movs	r2, r1
 80012e8:	43d2      	mvns	r2, r2
 80012ea:	401a      	ands	r2, r3
 80012ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	019b      	lsls	r3, r3, #6
 80012f2:	22ff      	movs	r2, #255	; 0xff
 80012f4:	401a      	ands	r2, r3
 80012f6:	1dfb      	adds	r3, r7, #7
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	0018      	movs	r0, r3
 80012fc:	2303      	movs	r3, #3
 80012fe:	4003      	ands	r3, r0
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001304:	4809      	ldr	r0, [pc, #36]	; (800132c <__NVIC_SetPriority+0xd8>)
 8001306:	1dfb      	adds	r3, r7, #7
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	001c      	movs	r4, r3
 800130c:	230f      	movs	r3, #15
 800130e:	4023      	ands	r3, r4
 8001310:	3b08      	subs	r3, #8
 8001312:	089b      	lsrs	r3, r3, #2
 8001314:	430a      	orrs	r2, r1
 8001316:	3306      	adds	r3, #6
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	18c3      	adds	r3, r0, r3
 800131c:	3304      	adds	r3, #4
 800131e:	601a      	str	r2, [r3, #0]
}
 8001320:	46c0      	nop			; (mov r8, r8)
 8001322:	46bd      	mov	sp, r7
 8001324:	b003      	add	sp, #12
 8001326:	bd90      	pop	{r4, r7, pc}
 8001328:	e000e100 	.word	0xe000e100
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	607a      	str	r2, [r7, #4]
 800133a:	210f      	movs	r1, #15
 800133c:	187b      	adds	r3, r7, r1
 800133e:	1c02      	adds	r2, r0, #0
 8001340:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	187b      	adds	r3, r7, r1
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	b25b      	sxtb	r3, r3
 800134a:	0011      	movs	r1, r2
 800134c:	0018      	movs	r0, r3
 800134e:	f7ff ff81 	bl	8001254 <__NVIC_SetPriority>
}
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	46bd      	mov	sp, r7
 8001356:	b004      	add	sp, #16
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	0002      	movs	r2, r0
 8001362:	1dfb      	adds	r3, r7, #7
 8001364:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001366:	1dfb      	adds	r3, r7, #7
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	b25b      	sxtb	r3, r3
 800136c:	0018      	movs	r0, r3
 800136e:	f7ff ff57 	bl	8001220 <__NVIC_EnableIRQ>
}
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	46bd      	mov	sp, r7
 8001376:	b002      	add	sp, #8
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800137a:	b580      	push	{r7, lr}
 800137c:	b084      	sub	sp, #16
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001382:	210f      	movs	r1, #15
 8001384:	187b      	adds	r3, r7, r1
 8001386:	2200      	movs	r2, #0
 8001388:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2221      	movs	r2, #33	; 0x21
 800138e:	5c9b      	ldrb	r3, [r3, r2]
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d006      	beq.n	80013a4 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2204      	movs	r2, #4
 800139a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800139c:	187b      	adds	r3, r7, r1
 800139e:	2201      	movs	r2, #1
 80013a0:	701a      	strb	r2, [r3, #0]
 80013a2:	e028      	b.n	80013f6 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	210e      	movs	r1, #14
 80013b0:	438a      	bics	r2, r1
 80013b2:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2101      	movs	r1, #1
 80013c0:	438a      	bics	r2, r1
 80013c2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013cc:	2101      	movs	r1, #1
 80013ce:	4091      	lsls	r1, r2
 80013d0:	000a      	movs	r2, r1
 80013d2:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2221      	movs	r2, #33	; 0x21
 80013d8:	2101      	movs	r1, #1
 80013da:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2220      	movs	r2, #32
 80013e0:	2100      	movs	r1, #0
 80013e2:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d004      	beq.n	80013f6 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	0010      	movs	r0, r2
 80013f4:	4798      	blx	r3
    } 
  }
  return status;
 80013f6:	230f      	movs	r3, #15
 80013f8:	18fb      	adds	r3, r7, r3
 80013fa:	781b      	ldrb	r3, [r3, #0]
}
 80013fc:	0018      	movs	r0, r3
 80013fe:	46bd      	mov	sp, r7
 8001400:	b004      	add	sp, #16
 8001402:	bd80      	pop	{r7, pc}

08001404 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2221      	movs	r2, #33	; 0x21
 8001410:	5c9b      	ldrb	r3, [r3, r2]
 8001412:	b2db      	uxtb	r3, r3
}
 8001414:	0018      	movs	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	b002      	add	sp, #8
 800141a:	bd80      	pop	{r7, pc}

0800141c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800142a:	e155      	b.n	80016d8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2101      	movs	r1, #1
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	4091      	lsls	r1, r2
 8001436:	000a      	movs	r2, r1
 8001438:	4013      	ands	r3, r2
 800143a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d100      	bne.n	8001444 <HAL_GPIO_Init+0x28>
 8001442:	e146      	b.n	80016d2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	2203      	movs	r2, #3
 800144a:	4013      	ands	r3, r2
 800144c:	2b01      	cmp	r3, #1
 800144e:	d005      	beq.n	800145c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	2203      	movs	r2, #3
 8001456:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001458:	2b02      	cmp	r3, #2
 800145a:	d130      	bne.n	80014be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	2203      	movs	r2, #3
 8001468:	409a      	lsls	r2, r3
 800146a:	0013      	movs	r3, r2
 800146c:	43da      	mvns	r2, r3
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	4013      	ands	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	68da      	ldr	r2, [r3, #12]
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	409a      	lsls	r2, r3
 800147e:	0013      	movs	r3, r2
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	4313      	orrs	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001492:	2201      	movs	r2, #1
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	409a      	lsls	r2, r3
 8001498:	0013      	movs	r3, r2
 800149a:	43da      	mvns	r2, r3
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	4013      	ands	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	091b      	lsrs	r3, r3, #4
 80014a8:	2201      	movs	r2, #1
 80014aa:	401a      	ands	r2, r3
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	409a      	lsls	r2, r3
 80014b0:	0013      	movs	r3, r2
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	2203      	movs	r2, #3
 80014c4:	4013      	ands	r3, r2
 80014c6:	2b03      	cmp	r3, #3
 80014c8:	d017      	beq.n	80014fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	2203      	movs	r2, #3
 80014d6:	409a      	lsls	r2, r3
 80014d8:	0013      	movs	r3, r2
 80014da:	43da      	mvns	r2, r3
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	4013      	ands	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	689a      	ldr	r2, [r3, #8]
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	409a      	lsls	r2, r3
 80014ec:	0013      	movs	r3, r2
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2203      	movs	r2, #3
 8001500:	4013      	ands	r3, r2
 8001502:	2b02      	cmp	r3, #2
 8001504:	d123      	bne.n	800154e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	08da      	lsrs	r2, r3, #3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	3208      	adds	r2, #8
 800150e:	0092      	lsls	r2, r2, #2
 8001510:	58d3      	ldr	r3, [r2, r3]
 8001512:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	2207      	movs	r2, #7
 8001518:	4013      	ands	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	220f      	movs	r2, #15
 800151e:	409a      	lsls	r2, r3
 8001520:	0013      	movs	r3, r2
 8001522:	43da      	mvns	r2, r3
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	4013      	ands	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	691a      	ldr	r2, [r3, #16]
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	2107      	movs	r1, #7
 8001532:	400b      	ands	r3, r1
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	409a      	lsls	r2, r3
 8001538:	0013      	movs	r3, r2
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	08da      	lsrs	r2, r3, #3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3208      	adds	r2, #8
 8001548:	0092      	lsls	r2, r2, #2
 800154a:	6939      	ldr	r1, [r7, #16]
 800154c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	2203      	movs	r2, #3
 800155a:	409a      	lsls	r2, r3
 800155c:	0013      	movs	r3, r2
 800155e:	43da      	mvns	r2, r3
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	4013      	ands	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2203      	movs	r2, #3
 800156c:	401a      	ands	r2, r3
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	409a      	lsls	r2, r3
 8001574:	0013      	movs	r3, r2
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4313      	orrs	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685a      	ldr	r2, [r3, #4]
 8001586:	23c0      	movs	r3, #192	; 0xc0
 8001588:	029b      	lsls	r3, r3, #10
 800158a:	4013      	ands	r3, r2
 800158c:	d100      	bne.n	8001590 <HAL_GPIO_Init+0x174>
 800158e:	e0a0      	b.n	80016d2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001590:	4b57      	ldr	r3, [pc, #348]	; (80016f0 <HAL_GPIO_Init+0x2d4>)
 8001592:	699a      	ldr	r2, [r3, #24]
 8001594:	4b56      	ldr	r3, [pc, #344]	; (80016f0 <HAL_GPIO_Init+0x2d4>)
 8001596:	2101      	movs	r1, #1
 8001598:	430a      	orrs	r2, r1
 800159a:	619a      	str	r2, [r3, #24]
 800159c:	4b54      	ldr	r3, [pc, #336]	; (80016f0 <HAL_GPIO_Init+0x2d4>)
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	2201      	movs	r2, #1
 80015a2:	4013      	ands	r3, r2
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015a8:	4a52      	ldr	r2, [pc, #328]	; (80016f4 <HAL_GPIO_Init+0x2d8>)
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	089b      	lsrs	r3, r3, #2
 80015ae:	3302      	adds	r3, #2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	589b      	ldr	r3, [r3, r2]
 80015b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	2203      	movs	r2, #3
 80015ba:	4013      	ands	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	220f      	movs	r2, #15
 80015c0:	409a      	lsls	r2, r3
 80015c2:	0013      	movs	r3, r2
 80015c4:	43da      	mvns	r2, r3
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	4013      	ands	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	2390      	movs	r3, #144	; 0x90
 80015d0:	05db      	lsls	r3, r3, #23
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d019      	beq.n	800160a <HAL_GPIO_Init+0x1ee>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a47      	ldr	r2, [pc, #284]	; (80016f8 <HAL_GPIO_Init+0x2dc>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d013      	beq.n	8001606 <HAL_GPIO_Init+0x1ea>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a46      	ldr	r2, [pc, #280]	; (80016fc <HAL_GPIO_Init+0x2e0>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d00d      	beq.n	8001602 <HAL_GPIO_Init+0x1e6>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a45      	ldr	r2, [pc, #276]	; (8001700 <HAL_GPIO_Init+0x2e4>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d007      	beq.n	80015fe <HAL_GPIO_Init+0x1e2>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a44      	ldr	r2, [pc, #272]	; (8001704 <HAL_GPIO_Init+0x2e8>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d101      	bne.n	80015fa <HAL_GPIO_Init+0x1de>
 80015f6:	2304      	movs	r3, #4
 80015f8:	e008      	b.n	800160c <HAL_GPIO_Init+0x1f0>
 80015fa:	2305      	movs	r3, #5
 80015fc:	e006      	b.n	800160c <HAL_GPIO_Init+0x1f0>
 80015fe:	2303      	movs	r3, #3
 8001600:	e004      	b.n	800160c <HAL_GPIO_Init+0x1f0>
 8001602:	2302      	movs	r3, #2
 8001604:	e002      	b.n	800160c <HAL_GPIO_Init+0x1f0>
 8001606:	2301      	movs	r3, #1
 8001608:	e000      	b.n	800160c <HAL_GPIO_Init+0x1f0>
 800160a:	2300      	movs	r3, #0
 800160c:	697a      	ldr	r2, [r7, #20]
 800160e:	2103      	movs	r1, #3
 8001610:	400a      	ands	r2, r1
 8001612:	0092      	lsls	r2, r2, #2
 8001614:	4093      	lsls	r3, r2
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	4313      	orrs	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800161c:	4935      	ldr	r1, [pc, #212]	; (80016f4 <HAL_GPIO_Init+0x2d8>)
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	089b      	lsrs	r3, r3, #2
 8001622:	3302      	adds	r3, #2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800162a:	4b37      	ldr	r3, [pc, #220]	; (8001708 <HAL_GPIO_Init+0x2ec>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	43da      	mvns	r2, r3
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	4013      	ands	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	2380      	movs	r3, #128	; 0x80
 8001640:	025b      	lsls	r3, r3, #9
 8001642:	4013      	ands	r3, r2
 8001644:	d003      	beq.n	800164e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4313      	orrs	r3, r2
 800164c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800164e:	4b2e      	ldr	r3, [pc, #184]	; (8001708 <HAL_GPIO_Init+0x2ec>)
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001654:	4b2c      	ldr	r3, [pc, #176]	; (8001708 <HAL_GPIO_Init+0x2ec>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	43da      	mvns	r2, r3
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	4013      	ands	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685a      	ldr	r2, [r3, #4]
 8001668:	2380      	movs	r3, #128	; 0x80
 800166a:	029b      	lsls	r3, r3, #10
 800166c:	4013      	ands	r3, r2
 800166e:	d003      	beq.n	8001678 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	4313      	orrs	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001678:	4b23      	ldr	r3, [pc, #140]	; (8001708 <HAL_GPIO_Init+0x2ec>)
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800167e:	4b22      	ldr	r3, [pc, #136]	; (8001708 <HAL_GPIO_Init+0x2ec>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	43da      	mvns	r2, r3
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	4013      	ands	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	2380      	movs	r3, #128	; 0x80
 8001694:	035b      	lsls	r3, r3, #13
 8001696:	4013      	ands	r3, r2
 8001698:	d003      	beq.n	80016a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4313      	orrs	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016a2:	4b19      	ldr	r3, [pc, #100]	; (8001708 <HAL_GPIO_Init+0x2ec>)
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80016a8:	4b17      	ldr	r3, [pc, #92]	; (8001708 <HAL_GPIO_Init+0x2ec>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	43da      	mvns	r2, r3
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	4013      	ands	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	2380      	movs	r3, #128	; 0x80
 80016be:	039b      	lsls	r3, r3, #14
 80016c0:	4013      	ands	r3, r2
 80016c2:	d003      	beq.n	80016cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80016cc:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <HAL_GPIO_Init+0x2ec>)
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	3301      	adds	r3, #1
 80016d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	40da      	lsrs	r2, r3
 80016e0:	1e13      	subs	r3, r2, #0
 80016e2:	d000      	beq.n	80016e6 <HAL_GPIO_Init+0x2ca>
 80016e4:	e6a2      	b.n	800142c <HAL_GPIO_Init+0x10>
  } 
}
 80016e6:	46c0      	nop			; (mov r8, r8)
 80016e8:	46c0      	nop			; (mov r8, r8)
 80016ea:	46bd      	mov	sp, r7
 80016ec:	b006      	add	sp, #24
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40021000 	.word	0x40021000
 80016f4:	40010000 	.word	0x40010000
 80016f8:	48000400 	.word	0x48000400
 80016fc:	48000800 	.word	0x48000800
 8001700:	48000c00 	.word	0x48000c00
 8001704:	48001000 	.word	0x48001000
 8001708:	40010400 	.word	0x40010400

0800170c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	0008      	movs	r0, r1
 8001716:	0011      	movs	r1, r2
 8001718:	1cbb      	adds	r3, r7, #2
 800171a:	1c02      	adds	r2, r0, #0
 800171c:	801a      	strh	r2, [r3, #0]
 800171e:	1c7b      	adds	r3, r7, #1
 8001720:	1c0a      	adds	r2, r1, #0
 8001722:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001724:	1c7b      	adds	r3, r7, #1
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d004      	beq.n	8001736 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800172c:	1cbb      	adds	r3, r7, #2
 800172e:	881a      	ldrh	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001734:	e003      	b.n	800173e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001736:	1cbb      	adds	r3, r7, #2
 8001738:	881a      	ldrh	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800173e:	46c0      	nop			; (mov r8, r8)
 8001740:	46bd      	mov	sp, r7
 8001742:	b002      	add	sp, #8
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	0002      	movs	r2, r0
 8001750:	1dbb      	adds	r3, r7, #6
 8001752:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001754:	4b09      	ldr	r3, [pc, #36]	; (800177c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001756:	695b      	ldr	r3, [r3, #20]
 8001758:	1dba      	adds	r2, r7, #6
 800175a:	8812      	ldrh	r2, [r2, #0]
 800175c:	4013      	ands	r3, r2
 800175e:	d008      	beq.n	8001772 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001762:	1dba      	adds	r2, r7, #6
 8001764:	8812      	ldrh	r2, [r2, #0]
 8001766:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001768:	1dbb      	adds	r3, r7, #6
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	0018      	movs	r0, r3
 800176e:	f7ff fa39 	bl	8000be4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001772:	46c0      	nop			; (mov r8, r8)
 8001774:	46bd      	mov	sp, r7
 8001776:	b002      	add	sp, #8
 8001778:	bd80      	pop	{r7, pc}
 800177a:	46c0      	nop			; (mov r8, r8)
 800177c:	40010400 	.word	0x40010400

08001780 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e082      	b.n	8001898 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2241      	movs	r2, #65	; 0x41
 8001796:	5c9b      	ldrb	r3, [r3, r2]
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d107      	bne.n	80017ae <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2240      	movs	r2, #64	; 0x40
 80017a2:	2100      	movs	r1, #0
 80017a4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	0018      	movs	r0, r3
 80017aa:	f7ff fb0f 	bl	8000dcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2241      	movs	r2, #65	; 0x41
 80017b2:	2124      	movs	r1, #36	; 0x24
 80017b4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2101      	movs	r1, #1
 80017c2:	438a      	bics	r2, r1
 80017c4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685a      	ldr	r2, [r3, #4]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4934      	ldr	r1, [pc, #208]	; (80018a0 <HAL_I2C_Init+0x120>)
 80017d0:	400a      	ands	r2, r1
 80017d2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4931      	ldr	r1, [pc, #196]	; (80018a4 <HAL_I2C_Init+0x124>)
 80017e0:	400a      	ands	r2, r1
 80017e2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d108      	bne.n	80017fe <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2180      	movs	r1, #128	; 0x80
 80017f6:	0209      	lsls	r1, r1, #8
 80017f8:	430a      	orrs	r2, r1
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	e007      	b.n	800180e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689a      	ldr	r2, [r3, #8]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2184      	movs	r1, #132	; 0x84
 8001808:	0209      	lsls	r1, r1, #8
 800180a:	430a      	orrs	r2, r1
 800180c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	2b02      	cmp	r3, #2
 8001814:	d104      	bne.n	8001820 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2280      	movs	r2, #128	; 0x80
 800181c:	0112      	lsls	r2, r2, #4
 800181e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	491f      	ldr	r1, [pc, #124]	; (80018a8 <HAL_I2C_Init+0x128>)
 800182c:	430a      	orrs	r2, r1
 800182e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68da      	ldr	r2, [r3, #12]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	491a      	ldr	r1, [pc, #104]	; (80018a4 <HAL_I2C_Init+0x124>)
 800183c:	400a      	ands	r2, r1
 800183e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	691a      	ldr	r2, [r3, #16]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	695b      	ldr	r3, [r3, #20]
 8001848:	431a      	orrs	r2, r3
 800184a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	430a      	orrs	r2, r1
 8001858:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	69d9      	ldr	r1, [r3, #28]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a1a      	ldr	r2, [r3, #32]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	430a      	orrs	r2, r1
 8001868:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2101      	movs	r1, #1
 8001876:	430a      	orrs	r2, r1
 8001878:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2241      	movs	r2, #65	; 0x41
 8001884:	2120      	movs	r1, #32
 8001886:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2242      	movs	r2, #66	; 0x42
 8001892:	2100      	movs	r1, #0
 8001894:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001896:	2300      	movs	r3, #0
}
 8001898:	0018      	movs	r0, r3
 800189a:	46bd      	mov	sp, r7
 800189c:	b002      	add	sp, #8
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	f0ffffff 	.word	0xf0ffffff
 80018a4:	ffff7fff 	.word	0xffff7fff
 80018a8:	02008000 	.word	0x02008000

080018ac <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 80018ac:	b590      	push	{r4, r7, lr}
 80018ae:	b089      	sub	sp, #36	; 0x24
 80018b0:	af02      	add	r7, sp, #8
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	0008      	movs	r0, r1
 80018b6:	607a      	str	r2, [r7, #4]
 80018b8:	0019      	movs	r1, r3
 80018ba:	230a      	movs	r3, #10
 80018bc:	18fb      	adds	r3, r7, r3
 80018be:	1c02      	adds	r2, r0, #0
 80018c0:	801a      	strh	r2, [r3, #0]
 80018c2:	2308      	movs	r3, #8
 80018c4:	18fb      	adds	r3, r7, r3
 80018c6:	1c0a      	adds	r2, r1, #0
 80018c8:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2241      	movs	r2, #65	; 0x41
 80018ce:	5c9b      	ldrb	r3, [r3, r2]
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b20      	cmp	r3, #32
 80018d4:	d15b      	bne.n	800198e <HAL_I2C_Master_Transmit_IT+0xe2>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	699a      	ldr	r2, [r3, #24]
 80018dc:	2380      	movs	r3, #128	; 0x80
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	401a      	ands	r2, r3
 80018e2:	2380      	movs	r3, #128	; 0x80
 80018e4:	021b      	lsls	r3, r3, #8
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d101      	bne.n	80018ee <HAL_I2C_Master_Transmit_IT+0x42>
    {
      return HAL_BUSY;
 80018ea:	2302      	movs	r3, #2
 80018ec:	e050      	b.n	8001990 <HAL_I2C_Master_Transmit_IT+0xe4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2240      	movs	r2, #64	; 0x40
 80018f2:	5c9b      	ldrb	r3, [r3, r2]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d101      	bne.n	80018fc <HAL_I2C_Master_Transmit_IT+0x50>
 80018f8:	2302      	movs	r3, #2
 80018fa:	e049      	b.n	8001990 <HAL_I2C_Master_Transmit_IT+0xe4>
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2240      	movs	r2, #64	; 0x40
 8001900:	2101      	movs	r1, #1
 8001902:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2241      	movs	r2, #65	; 0x41
 8001908:	2121      	movs	r1, #33	; 0x21
 800190a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2242      	movs	r2, #66	; 0x42
 8001910:	2110      	movs	r1, #16
 8001912:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2208      	movs	r2, #8
 8001924:	18ba      	adds	r2, r7, r2
 8001926:	8812      	ldrh	r2, [r2, #0]
 8001928:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4a1a      	ldr	r2, [pc, #104]	; (8001998 <HAL_I2C_Master_Transmit_IT+0xec>)
 800192e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4a1a      	ldr	r2, [pc, #104]	; (800199c <HAL_I2C_Master_Transmit_IT+0xf0>)
 8001934:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800193a:	b29b      	uxth	r3, r3
 800193c:	2bff      	cmp	r3, #255	; 0xff
 800193e:	d906      	bls.n	800194e <HAL_I2C_Master_Transmit_IT+0xa2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	22ff      	movs	r2, #255	; 0xff
 8001944:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8001946:	2380      	movs	r3, #128	; 0x80
 8001948:	045b      	lsls	r3, r3, #17
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	e007      	b.n	800195e <HAL_I2C_Master_Transmit_IT+0xb2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001952:	b29a      	uxth	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001958:	2380      	movs	r3, #128	; 0x80
 800195a:	049b      	lsls	r3, r3, #18
 800195c:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001962:	b2da      	uxtb	r2, r3
 8001964:	697c      	ldr	r4, [r7, #20]
 8001966:	230a      	movs	r3, #10
 8001968:	18fb      	adds	r3, r7, r3
 800196a:	8819      	ldrh	r1, [r3, #0]
 800196c:	68f8      	ldr	r0, [r7, #12]
 800196e:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <HAL_I2C_Master_Transmit_IT+0xf4>)
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	0023      	movs	r3, r4
 8001974:	f001 fa96 	bl	8002ea4 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2240      	movs	r2, #64	; 0x40
 800197c:	2100      	movs	r1, #0
 800197e:	5499      	strb	r1, [r3, r2]

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2101      	movs	r1, #1
 8001984:	0018      	movs	r0, r3
 8001986:	f001 fac3 	bl	8002f10 <I2C_Enable_IRQ>

    return HAL_OK;
 800198a:	2300      	movs	r3, #0
 800198c:	e000      	b.n	8001990 <HAL_I2C_Master_Transmit_IT+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800198e:	2302      	movs	r3, #2
  }
}
 8001990:	0018      	movs	r0, r3
 8001992:	46bd      	mov	sp, r7
 8001994:	b007      	add	sp, #28
 8001996:	bd90      	pop	{r4, r7, pc}
 8001998:	ffff0000 	.word	0xffff0000
 800199c:	08001c25 	.word	0x08001c25
 80019a0:	80002000 	.word	0x80002000

080019a4 <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 80019a4:	b590      	push	{r4, r7, lr}
 80019a6:	b089      	sub	sp, #36	; 0x24
 80019a8:	af02      	add	r7, sp, #8
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	0008      	movs	r0, r1
 80019ae:	607a      	str	r2, [r7, #4]
 80019b0:	0019      	movs	r1, r3
 80019b2:	230a      	movs	r3, #10
 80019b4:	18fb      	adds	r3, r7, r3
 80019b6:	1c02      	adds	r2, r0, #0
 80019b8:	801a      	strh	r2, [r3, #0]
 80019ba:	2308      	movs	r3, #8
 80019bc:	18fb      	adds	r3, r7, r3
 80019be:	1c0a      	adds	r2, r1, #0
 80019c0:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2241      	movs	r2, #65	; 0x41
 80019c6:	5c9b      	ldrb	r3, [r3, r2]
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b20      	cmp	r3, #32
 80019cc:	d15b      	bne.n	8001a86 <HAL_I2C_Master_Receive_IT+0xe2>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	699a      	ldr	r2, [r3, #24]
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	021b      	lsls	r3, r3, #8
 80019d8:	401a      	ands	r2, r3
 80019da:	2380      	movs	r3, #128	; 0x80
 80019dc:	021b      	lsls	r3, r3, #8
 80019de:	429a      	cmp	r2, r3
 80019e0:	d101      	bne.n	80019e6 <HAL_I2C_Master_Receive_IT+0x42>
    {
      return HAL_BUSY;
 80019e2:	2302      	movs	r3, #2
 80019e4:	e050      	b.n	8001a88 <HAL_I2C_Master_Receive_IT+0xe4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2240      	movs	r2, #64	; 0x40
 80019ea:	5c9b      	ldrb	r3, [r3, r2]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d101      	bne.n	80019f4 <HAL_I2C_Master_Receive_IT+0x50>
 80019f0:	2302      	movs	r3, #2
 80019f2:	e049      	b.n	8001a88 <HAL_I2C_Master_Receive_IT+0xe4>
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2240      	movs	r2, #64	; 0x40
 80019f8:	2101      	movs	r1, #1
 80019fa:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2241      	movs	r2, #65	; 0x41
 8001a00:	2122      	movs	r1, #34	; 0x22
 8001a02:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2242      	movs	r2, #66	; 0x42
 8001a08:	2110      	movs	r1, #16
 8001a0a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2208      	movs	r2, #8
 8001a1c:	18ba      	adds	r2, r7, r2
 8001a1e:	8812      	ldrh	r2, [r2, #0]
 8001a20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	4a1a      	ldr	r2, [pc, #104]	; (8001a90 <HAL_I2C_Master_Receive_IT+0xec>)
 8001a26:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4a1a      	ldr	r2, [pc, #104]	; (8001a94 <HAL_I2C_Master_Receive_IT+0xf0>)
 8001a2c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	2bff      	cmp	r3, #255	; 0xff
 8001a36:	d906      	bls.n	8001a46 <HAL_I2C_Master_Receive_IT+0xa2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	22ff      	movs	r2, #255	; 0xff
 8001a3c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8001a3e:	2380      	movs	r3, #128	; 0x80
 8001a40:	045b      	lsls	r3, r3, #17
 8001a42:	617b      	str	r3, [r7, #20]
 8001a44:	e007      	b.n	8001a56 <HAL_I2C_Master_Receive_IT+0xb2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001a50:	2380      	movs	r3, #128	; 0x80
 8001a52:	049b      	lsls	r3, r3, #18
 8001a54:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	697c      	ldr	r4, [r7, #20]
 8001a5e:	230a      	movs	r3, #10
 8001a60:	18fb      	adds	r3, r7, r3
 8001a62:	8819      	ldrh	r1, [r3, #0]
 8001a64:	68f8      	ldr	r0, [r7, #12]
 8001a66:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <HAL_I2C_Master_Receive_IT+0xf4>)
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	0023      	movs	r3, r4
 8001a6c:	f001 fa1a 	bl	8002ea4 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2240      	movs	r2, #64	; 0x40
 8001a74:	2100      	movs	r1, #0
 8001a76:	5499      	strb	r1, [r3, r2]

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2102      	movs	r1, #2
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	f001 fa47 	bl	8002f10 <I2C_Enable_IRQ>

    return HAL_OK;
 8001a82:	2300      	movs	r3, #0
 8001a84:	e000      	b.n	8001a88 <HAL_I2C_Master_Receive_IT+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8001a86:	2302      	movs	r3, #2
  }
}
 8001a88:	0018      	movs	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	b007      	add	sp, #28
 8001a8e:	bd90      	pop	{r4, r7, pc}
 8001a90:	ffff0000 	.word	0xffff0000
 8001a94:	08001c25 	.word	0x08001c25
 8001a98:	80002400 	.word	0x80002400

08001a9c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d005      	beq.n	8001ac8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ac0:	68ba      	ldr	r2, [r7, #8]
 8001ac2:	68f9      	ldr	r1, [r7, #12]
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	4798      	blx	r3
  }
}
 8001ac8:	46c0      	nop			; (mov r8, r8)
 8001aca:	46bd      	mov	sp, r7
 8001acc:	b004      	add	sp, #16
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	0a1b      	lsrs	r3, r3, #8
 8001aec:	001a      	movs	r2, r3
 8001aee:	2301      	movs	r3, #1
 8001af0:	4013      	ands	r3, r2
 8001af2:	d010      	beq.n	8001b16 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	09db      	lsrs	r3, r3, #7
 8001af8:	001a      	movs	r2, r3
 8001afa:	2301      	movs	r3, #1
 8001afc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001afe:	d00a      	beq.n	8001b16 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b04:	2201      	movs	r2, #1
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2280      	movs	r2, #128	; 0x80
 8001b12:	0052      	lsls	r2, r2, #1
 8001b14:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	0a9b      	lsrs	r3, r3, #10
 8001b1a:	001a      	movs	r2, r3
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d010      	beq.n	8001b44 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	09db      	lsrs	r3, r3, #7
 8001b26:	001a      	movs	r2, r3
 8001b28:	2301      	movs	r3, #1
 8001b2a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001b2c:	d00a      	beq.n	8001b44 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b32:	2208      	movs	r2, #8
 8001b34:	431a      	orrs	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2280      	movs	r2, #128	; 0x80
 8001b40:	00d2      	lsls	r2, r2, #3
 8001b42:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	0a5b      	lsrs	r3, r3, #9
 8001b48:	001a      	movs	r2, r3
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d010      	beq.n	8001b72 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	09db      	lsrs	r3, r3, #7
 8001b54:	001a      	movs	r2, r3
 8001b56:	2301      	movs	r3, #1
 8001b58:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001b5a:	d00a      	beq.n	8001b72 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b60:	2202      	movs	r2, #2
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2280      	movs	r2, #128	; 0x80
 8001b6e:	0092      	lsls	r2, r2, #2
 8001b70:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	220b      	movs	r2, #11
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d005      	beq.n	8001b8c <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	0011      	movs	r1, r2
 8001b86:	0018      	movs	r0, r3
 8001b88:	f001 f840 	bl	8002c0c <I2C_ITError>
  }
}
 8001b8c:	46c0      	nop			; (mov r8, r8)
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	b006      	add	sp, #24
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001b9c:	46c0      	nop			; (mov r8, r8)
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	b002      	add	sp, #8
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001bac:	46c0      	nop			; (mov r8, r8)
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	b002      	add	sp, #8
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	0008      	movs	r0, r1
 8001bbe:	0011      	movs	r1, r2
 8001bc0:	1cfb      	adds	r3, r7, #3
 8001bc2:	1c02      	adds	r2, r0, #0
 8001bc4:	701a      	strb	r2, [r3, #0]
 8001bc6:	003b      	movs	r3, r7
 8001bc8:	1c0a      	adds	r2, r1, #0
 8001bca:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001bcc:	46c0      	nop			; (mov r8, r8)
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	b002      	add	sp, #8
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001bdc:	46c0      	nop			; (mov r8, r8)
 8001bde:	46bd      	mov	sp, r7
 8001be0:	b002      	add	sp, #8
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001bec:	46c0      	nop			; (mov r8, r8)
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	b002      	add	sp, #8
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001bfc:	46c0      	nop			; (mov r8, r8)
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	b002      	add	sp, #8
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001c0c:	46c0      	nop			; (mov r8, r8)
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	b002      	add	sp, #8
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001c1c:	46c0      	nop			; (mov r8, r8)
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	b002      	add	sp, #8
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8001c24:	b590      	push	{r4, r7, lr}
 8001c26:	b089      	sub	sp, #36	; 0x24
 8001c28:	af02      	add	r7, sp, #8
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2240      	movs	r2, #64	; 0x40
 8001c38:	5c9b      	ldrb	r3, [r3, r2]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d101      	bne.n	8001c42 <I2C_Master_ISR_IT+0x1e>
 8001c3e:	2302      	movs	r3, #2
 8001c40:	e12b      	b.n	8001e9a <I2C_Master_ISR_IT+0x276>
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2240      	movs	r2, #64	; 0x40
 8001c46:	2101      	movs	r1, #1
 8001c48:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	091b      	lsrs	r3, r3, #4
 8001c4e:	001a      	movs	r2, r3
 8001c50:	2301      	movs	r3, #1
 8001c52:	4013      	ands	r3, r2
 8001c54:	d014      	beq.n	8001c80 <I2C_Master_ISR_IT+0x5c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	091b      	lsrs	r3, r3, #4
 8001c5a:	001a      	movs	r2, r3
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001c60:	d00e      	beq.n	8001c80 <I2C_Master_ISR_IT+0x5c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2210      	movs	r2, #16
 8001c68:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	2204      	movs	r2, #4
 8001c70:	431a      	orrs	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	0018      	movs	r0, r3
 8001c7a:	f001 f8d2 	bl	8002e22 <I2C_Flush_TXDR>
 8001c7e:	e0f5      	b.n	8001e6c <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	089b      	lsrs	r3, r3, #2
 8001c84:	001a      	movs	r2, r3
 8001c86:	2301      	movs	r3, #1
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d023      	beq.n	8001cd4 <I2C_Master_ISR_IT+0xb0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	089b      	lsrs	r3, r3, #2
 8001c90:	001a      	movs	r2, r3
 8001c92:	2301      	movs	r3, #1
 8001c94:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001c96:	d01d      	beq.n	8001cd4 <I2C_Master_ISR_IT+0xb0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	2204      	movs	r2, #4
 8001c9c:	4393      	bics	r3, r2
 8001c9e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb2:	1c5a      	adds	r2, r3, #1
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001cd2:	e0cb      	b.n	8001e6c <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	085b      	lsrs	r3, r3, #1
 8001cd8:	001a      	movs	r2, r3
 8001cda:	2301      	movs	r3, #1
 8001cdc:	4013      	ands	r3, r2
 8001cde:	d01e      	beq.n	8001d1e <I2C_Master_ISR_IT+0xfa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	085b      	lsrs	r3, r3, #1
 8001ce4:	001a      	movs	r2, r3
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001cea:	d018      	beq.n	8001d1e <I2C_Master_ISR_IT+0xfa>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf0:	781a      	ldrb	r2, [r3, #0]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfc:	1c5a      	adds	r2, r3, #1
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d06:	3b01      	subs	r3, #1
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	3b01      	subs	r3, #1
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d1c:	e0a6      	b.n	8001e6c <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	09db      	lsrs	r3, r3, #7
 8001d22:	001a      	movs	r2, r3
 8001d24:	2301      	movs	r3, #1
 8001d26:	4013      	ands	r3, r2
 8001d28:	d100      	bne.n	8001d2c <I2C_Master_ISR_IT+0x108>
 8001d2a:	e06b      	b.n	8001e04 <I2C_Master_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	099b      	lsrs	r3, r3, #6
 8001d30:	001a      	movs	r2, r3
 8001d32:	2301      	movs	r3, #1
 8001d34:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8001d36:	d065      	beq.n	8001e04 <I2C_Master_ISR_IT+0x1e0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d04a      	beq.n	8001dd8 <I2C_Master_ISR_IT+0x1b4>
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d146      	bne.n	8001dd8 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	2112      	movs	r1, #18
 8001d54:	187b      	adds	r3, r7, r1
 8001d56:	0592      	lsls	r2, r2, #22
 8001d58:	0d92      	lsrs	r2, r2, #22
 8001d5a:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	2bff      	cmp	r3, #255	; 0xff
 8001d64:	d910      	bls.n	8001d88 <I2C_Master_ISR_IT+0x164>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	22ff      	movs	r2, #255	; 0xff
 8001d6a:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	2380      	movs	r3, #128	; 0x80
 8001d74:	045c      	lsls	r4, r3, #17
 8001d76:	187b      	adds	r3, r7, r1
 8001d78:	8819      	ldrh	r1, [r3, #0]
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	9300      	str	r3, [sp, #0]
 8001d80:	0023      	movs	r3, r4
 8001d82:	f001 f88f 	bl	8002ea4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d86:	e03c      	b.n	8001e02 <I2C_Master_ISR_IT+0x1de>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d96:	4a43      	ldr	r2, [pc, #268]	; (8001ea4 <I2C_Master_ISR_IT+0x280>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d00e      	beq.n	8001dba <I2C_Master_ISR_IT+0x196>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001da6:	2312      	movs	r3, #18
 8001da8:	18fb      	adds	r3, r7, r3
 8001daa:	8819      	ldrh	r1, [r3, #0]
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	2300      	movs	r3, #0
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	0023      	movs	r3, r4
 8001db4:	f001 f876 	bl	8002ea4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001db8:	e023      	b.n	8001e02 <I2C_Master_ISR_IT+0x1de>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dbe:	b2da      	uxtb	r2, r3
 8001dc0:	2380      	movs	r3, #128	; 0x80
 8001dc2:	049c      	lsls	r4, r3, #18
 8001dc4:	2312      	movs	r3, #18
 8001dc6:	18fb      	adds	r3, r7, r3
 8001dc8:	8819      	ldrh	r1, [r3, #0]
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	2300      	movs	r3, #0
 8001dce:	9300      	str	r3, [sp, #0]
 8001dd0:	0023      	movs	r3, r4
 8001dd2:	f001 f867 	bl	8002ea4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dd6:	e014      	b.n	8001e02 <I2C_Master_ISR_IT+0x1de>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	2380      	movs	r3, #128	; 0x80
 8001de0:	049b      	lsls	r3, r3, #18
 8001de2:	401a      	ands	r2, r3
 8001de4:	2380      	movs	r3, #128	; 0x80
 8001de6:	049b      	lsls	r3, r3, #18
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d004      	beq.n	8001df6 <I2C_Master_ISR_IT+0x1d2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	0018      	movs	r0, r3
 8001df0:	f000 fc14 	bl	800261c <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001df4:	e03a      	b.n	8001e6c <I2C_Master_ISR_IT+0x248>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2140      	movs	r1, #64	; 0x40
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	f000 ff06 	bl	8002c0c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e00:	e034      	b.n	8001e6c <I2C_Master_ISR_IT+0x248>
 8001e02:	e033      	b.n	8001e6c <I2C_Master_ISR_IT+0x248>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	099b      	lsrs	r3, r3, #6
 8001e08:	001a      	movs	r2, r3
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d02d      	beq.n	8001e6c <I2C_Master_ISR_IT+0x248>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	099b      	lsrs	r3, r3, #6
 8001e14:	001a      	movs	r2, r3
 8001e16:	2301      	movs	r3, #1
 8001e18:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8001e1a:	d027      	beq.n	8001e6c <I2C_Master_ISR_IT+0x248>
  {
    if (hi2c->XferCount == 0U)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d11d      	bne.n	8001e62 <I2C_Master_ISR_IT+0x23e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	2380      	movs	r3, #128	; 0x80
 8001e2e:	049b      	lsls	r3, r3, #18
 8001e30:	401a      	ands	r2, r3
 8001e32:	2380      	movs	r3, #128	; 0x80
 8001e34:	049b      	lsls	r3, r3, #18
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d018      	beq.n	8001e6c <I2C_Master_ISR_IT+0x248>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3e:	4a19      	ldr	r2, [pc, #100]	; (8001ea4 <I2C_Master_ISR_IT+0x280>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d109      	bne.n	8001e58 <I2C_Master_ISR_IT+0x234>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	685a      	ldr	r2, [r3, #4]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2180      	movs	r1, #128	; 0x80
 8001e50:	01c9      	lsls	r1, r1, #7
 8001e52:	430a      	orrs	r2, r1
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	e009      	b.n	8001e6c <I2C_Master_ISR_IT+0x248>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	f000 fbde 	bl	800261c <I2C_ITMasterSeqCplt>
 8001e60:	e004      	b.n	8001e6c <I2C_Master_ISR_IT+0x248>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2140      	movs	r1, #64	; 0x40
 8001e66:	0018      	movs	r0, r3
 8001e68:	f000 fed0 	bl	8002c0c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	095b      	lsrs	r3, r3, #5
 8001e70:	001a      	movs	r2, r3
 8001e72:	2301      	movs	r3, #1
 8001e74:	4013      	ands	r3, r2
 8001e76:	d00b      	beq.n	8001e90 <I2C_Master_ISR_IT+0x26c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	095b      	lsrs	r3, r3, #5
 8001e7c:	001a      	movs	r2, r3
 8001e7e:	2301      	movs	r3, #1
 8001e80:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001e82:	d005      	beq.n	8001e90 <I2C_Master_ISR_IT+0x26c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	0011      	movs	r1, r2
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	f000 fc6e 	bl	800276c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2240      	movs	r2, #64	; 0x40
 8001e94:	2100      	movs	r1, #0
 8001e96:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	b007      	add	sp, #28
 8001ea0:	bd90      	pop	{r4, r7, pc}
 8001ea2:	46c0      	nop			; (mov r8, r8)
 8001ea4:	ffff0000 	.word	0xffff0000

08001ea8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2240      	movs	r2, #64	; 0x40
 8001ec2:	5c9b      	ldrb	r3, [r3, r2]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d101      	bne.n	8001ecc <I2C_Slave_ISR_IT+0x24>
 8001ec8:	2302      	movs	r3, #2
 8001eca:	e0fa      	b.n	80020c2 <I2C_Slave_ISR_IT+0x21a>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2240      	movs	r2, #64	; 0x40
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	095b      	lsrs	r3, r3, #5
 8001ed8:	001a      	movs	r2, r3
 8001eda:	2301      	movs	r3, #1
 8001edc:	4013      	ands	r3, r2
 8001ede:	d00b      	beq.n	8001ef8 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	095b      	lsrs	r3, r3, #5
 8001ee4:	001a      	movs	r2, r3
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001eea:	d005      	beq.n	8001ef8 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	0011      	movs	r1, r2
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	f000 fd0c 	bl	8002910 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	091b      	lsrs	r3, r3, #4
 8001efc:	001a      	movs	r2, r3
 8001efe:	2301      	movs	r3, #1
 8001f00:	4013      	ands	r3, r2
 8001f02:	d054      	beq.n	8001fae <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	091b      	lsrs	r3, r3, #4
 8001f08:	001a      	movs	r2, r3
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001f0e:	d04e      	beq.n	8001fae <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d12d      	bne.n	8001f76 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2241      	movs	r2, #65	; 0x41
 8001f1e:	5c9b      	ldrb	r3, [r3, r2]
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b28      	cmp	r3, #40	; 0x28
 8001f24:	d10b      	bne.n	8001f3e <I2C_Slave_ISR_IT+0x96>
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	2380      	movs	r3, #128	; 0x80
 8001f2a:	049b      	lsls	r3, r3, #18
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d106      	bne.n	8001f3e <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	0011      	movs	r1, r2
 8001f36:	0018      	movs	r0, r3
 8001f38:	f000 fe0e 	bl	8002b58 <I2C_ITListenCplt>
 8001f3c:	e036      	b.n	8001fac <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2241      	movs	r2, #65	; 0x41
 8001f42:	5c9b      	ldrb	r3, [r3, r2]
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b29      	cmp	r3, #41	; 0x29
 8001f48:	d110      	bne.n	8001f6c <I2C_Slave_ISR_IT+0xc4>
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	4a5f      	ldr	r2, [pc, #380]	; (80020cc <I2C_Slave_ISR_IT+0x224>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d00c      	beq.n	8001f6c <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2210      	movs	r2, #16
 8001f58:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	f000 ff60 	bl	8002e22 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	0018      	movs	r0, r3
 8001f66:	f000 fb9b 	bl	80026a0 <I2C_ITSlaveSeqCplt>
 8001f6a:	e01f      	b.n	8001fac <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2210      	movs	r2, #16
 8001f72:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001f74:	e09d      	b.n	80020b2 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2210      	movs	r2, #16
 8001f7c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f82:	2204      	movs	r2, #4
 8001f84:	431a      	orrs	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d005      	beq.n	8001f9c <I2C_Slave_ISR_IT+0xf4>
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	2380      	movs	r3, #128	; 0x80
 8001f94:	045b      	lsls	r3, r3, #17
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d000      	beq.n	8001f9c <I2C_Slave_ISR_IT+0xf4>
 8001f9a:	e08a      	b.n	80020b2 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	0011      	movs	r1, r2
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	f000 fe31 	bl	8002c0c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001faa:	e082      	b.n	80020b2 <I2C_Slave_ISR_IT+0x20a>
 8001fac:	e081      	b.n	80020b2 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	089b      	lsrs	r3, r3, #2
 8001fb2:	001a      	movs	r2, r3
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	d031      	beq.n	800201e <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	089b      	lsrs	r3, r3, #2
 8001fbe:	001a      	movs	r2, r3
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001fc4:	d02b      	beq.n	800201e <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d018      	beq.n	8002002 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe2:	1c5a      	adds	r2, r3, #1
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fec:	3b01      	subs	r3, #1
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002006:	b29b      	uxth	r3, r3
 8002008:	2b00      	cmp	r3, #0
 800200a:	d154      	bne.n	80020b6 <I2C_Slave_ISR_IT+0x20e>
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	4a2f      	ldr	r2, [pc, #188]	; (80020cc <I2C_Slave_ISR_IT+0x224>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d050      	beq.n	80020b6 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	0018      	movs	r0, r3
 8002018:	f000 fb42 	bl	80026a0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800201c:	e04b      	b.n	80020b6 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	08db      	lsrs	r3, r3, #3
 8002022:	001a      	movs	r2, r3
 8002024:	2301      	movs	r3, #1
 8002026:	4013      	ands	r3, r2
 8002028:	d00c      	beq.n	8002044 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	08db      	lsrs	r3, r3, #3
 800202e:	001a      	movs	r2, r3
 8002030:	2301      	movs	r3, #1
 8002032:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002034:	d006      	beq.n	8002044 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	0011      	movs	r1, r2
 800203c:	0018      	movs	r0, r3
 800203e:	f000 fa49 	bl	80024d4 <I2C_ITAddrCplt>
 8002042:	e039      	b.n	80020b8 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	085b      	lsrs	r3, r3, #1
 8002048:	001a      	movs	r2, r3
 800204a:	2301      	movs	r3, #1
 800204c:	4013      	ands	r3, r2
 800204e:	d033      	beq.n	80020b8 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	085b      	lsrs	r3, r3, #1
 8002054:	001a      	movs	r2, r3
 8002056:	2301      	movs	r3, #1
 8002058:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800205a:	d02d      	beq.n	80020b8 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002060:	b29b      	uxth	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d018      	beq.n	8002098 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206a:	781a      	ldrb	r2, [r3, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002076:	1c5a      	adds	r2, r3, #1
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002080:	b29b      	uxth	r3, r3
 8002082:	3b01      	subs	r3, #1
 8002084:	b29a      	uxth	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800208e:	3b01      	subs	r3, #1
 8002090:	b29a      	uxth	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	851a      	strh	r2, [r3, #40]	; 0x28
 8002096:	e00f      	b.n	80020b8 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	2380      	movs	r3, #128	; 0x80
 800209c:	045b      	lsls	r3, r3, #17
 800209e:	429a      	cmp	r2, r3
 80020a0:	d002      	beq.n	80020a8 <I2C_Slave_ISR_IT+0x200>
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d107      	bne.n	80020b8 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	0018      	movs	r0, r3
 80020ac:	f000 faf8 	bl	80026a0 <I2C_ITSlaveSeqCplt>
 80020b0:	e002      	b.n	80020b8 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 80020b2:	46c0      	nop			; (mov r8, r8)
 80020b4:	e000      	b.n	80020b8 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 80020b6:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2240      	movs	r2, #64	; 0x40
 80020bc:	2100      	movs	r1, #0
 80020be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	0018      	movs	r0, r3
 80020c4:	46bd      	mov	sp, r7
 80020c6:	b006      	add	sp, #24
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	46c0      	nop			; (mov r8, r8)
 80020cc:	ffff0000 	.word	0xffff0000

080020d0 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80020d0:	b590      	push	{r4, r7, lr}
 80020d2:	b089      	sub	sp, #36	; 0x24
 80020d4:	af02      	add	r7, sp, #8
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2240      	movs	r2, #64	; 0x40
 80020e0:	5c9b      	ldrb	r3, [r3, r2]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d101      	bne.n	80020ea <I2C_Master_ISR_DMA+0x1a>
 80020e6:	2302      	movs	r3, #2
 80020e8:	e0f7      	b.n	80022da <I2C_Master_ISR_DMA+0x20a>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2240      	movs	r2, #64	; 0x40
 80020ee:	2101      	movs	r1, #1
 80020f0:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	091b      	lsrs	r3, r3, #4
 80020f6:	001a      	movs	r2, r3
 80020f8:	2301      	movs	r3, #1
 80020fa:	4013      	ands	r3, r2
 80020fc:	d019      	beq.n	8002132 <I2C_Master_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	091b      	lsrs	r3, r3, #4
 8002102:	001a      	movs	r2, r3
 8002104:	2301      	movs	r3, #1
 8002106:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002108:	d013      	beq.n	8002132 <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2210      	movs	r2, #16
 8002110:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002116:	2204      	movs	r2, #4
 8002118:	431a      	orrs	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2120      	movs	r1, #32
 8002122:	0018      	movs	r0, r3
 8002124:	f000 fef4 	bl	8002f10 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	0018      	movs	r0, r3
 800212c:	f000 fe79 	bl	8002e22 <I2C_Flush_TXDR>
 8002130:	e0ce      	b.n	80022d0 <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	09db      	lsrs	r3, r3, #7
 8002136:	001a      	movs	r2, r3
 8002138:	2301      	movs	r3, #1
 800213a:	4013      	ands	r3, r2
 800213c:	d100      	bne.n	8002140 <I2C_Master_ISR_DMA+0x70>
 800213e:	e07e      	b.n	800223e <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	099b      	lsrs	r3, r3, #6
 8002144:	001a      	movs	r2, r3
 8002146:	2301      	movs	r3, #1
 8002148:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800214a:	d100      	bne.n	800214e <I2C_Master_ISR_DMA+0x7e>
 800214c:	e077      	b.n	800223e <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2140      	movs	r1, #64	; 0x40
 800215a:	438a      	bics	r2, r1
 800215c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002162:	b29b      	uxth	r3, r3
 8002164:	2b00      	cmp	r3, #0
 8002166:	d055      	beq.n	8002214 <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	b29a      	uxth	r2, r3
 8002170:	2312      	movs	r3, #18
 8002172:	18fb      	adds	r3, r7, r3
 8002174:	0592      	lsls	r2, r2, #22
 8002176:	0d92      	lsrs	r2, r2, #22
 8002178:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217e:	b29b      	uxth	r3, r3
 8002180:	2bff      	cmp	r3, #255	; 0xff
 8002182:	d906      	bls.n	8002192 <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	22ff      	movs	r2, #255	; 0xff
 8002188:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800218a:	2380      	movs	r3, #128	; 0x80
 800218c:	045b      	lsls	r3, r3, #17
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	e010      	b.n	80021b4 <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002196:	b29a      	uxth	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a0:	4a50      	ldr	r2, [pc, #320]	; (80022e4 <I2C_Master_ISR_DMA+0x214>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d003      	beq.n	80021ae <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021aa:	617b      	str	r3, [r7, #20]
 80021ac:	e002      	b.n	80021b4 <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80021ae:	2380      	movs	r3, #128	; 0x80
 80021b0:	049b      	lsls	r3, r3, #18
 80021b2:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	697c      	ldr	r4, [r7, #20]
 80021bc:	2312      	movs	r3, #18
 80021be:	18fb      	adds	r3, r7, r3
 80021c0:	8819      	ldrh	r1, [r3, #0]
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	2300      	movs	r3, #0
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	0023      	movs	r3, r4
 80021ca:	f000 fe6b 	bl	8002ea4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	b29a      	uxth	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2241      	movs	r2, #65	; 0x41
 80021e4:	5c9b      	ldrb	r3, [r3, r2]
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b22      	cmp	r3, #34	; 0x22
 80021ea:	d109      	bne.n	8002200 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2180      	movs	r1, #128	; 0x80
 80021f8:	0209      	lsls	r1, r1, #8
 80021fa:	430a      	orrs	r2, r1
 80021fc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80021fe:	e067      	b.n	80022d0 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2180      	movs	r1, #128	; 0x80
 800220c:	01c9      	lsls	r1, r1, #7
 800220e:	430a      	orrs	r2, r1
 8002210:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002212:	e05d      	b.n	80022d0 <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	2380      	movs	r3, #128	; 0x80
 800221c:	049b      	lsls	r3, r3, #18
 800221e:	401a      	ands	r2, r3
 8002220:	2380      	movs	r3, #128	; 0x80
 8002222:	049b      	lsls	r3, r3, #18
 8002224:	429a      	cmp	r2, r3
 8002226:	d004      	beq.n	8002232 <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	0018      	movs	r0, r3
 800222c:	f000 f9f6 	bl	800261c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002230:	e04e      	b.n	80022d0 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2140      	movs	r1, #64	; 0x40
 8002236:	0018      	movs	r0, r3
 8002238:	f000 fce8 	bl	8002c0c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800223c:	e048      	b.n	80022d0 <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	099b      	lsrs	r3, r3, #6
 8002242:	001a      	movs	r2, r3
 8002244:	2301      	movs	r3, #1
 8002246:	4013      	ands	r3, r2
 8002248:	d02e      	beq.n	80022a8 <I2C_Master_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	099b      	lsrs	r3, r3, #6
 800224e:	001a      	movs	r2, r3
 8002250:	2301      	movs	r3, #1
 8002252:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002254:	d028      	beq.n	80022a8 <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225a:	b29b      	uxth	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	d11d      	bne.n	800229c <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	2380      	movs	r3, #128	; 0x80
 8002268:	049b      	lsls	r3, r3, #18
 800226a:	401a      	ands	r2, r3
 800226c:	2380      	movs	r3, #128	; 0x80
 800226e:	049b      	lsls	r3, r3, #18
 8002270:	429a      	cmp	r2, r3
 8002272:	d02c      	beq.n	80022ce <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002278:	4a1a      	ldr	r2, [pc, #104]	; (80022e4 <I2C_Master_ISR_DMA+0x214>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d109      	bne.n	8002292 <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2180      	movs	r1, #128	; 0x80
 800228a:	01c9      	lsls	r1, r1, #7
 800228c:	430a      	orrs	r2, r1
 800228e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002290:	e01d      	b.n	80022ce <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	0018      	movs	r0, r3
 8002296:	f000 f9c1 	bl	800261c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800229a:	e018      	b.n	80022ce <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2140      	movs	r1, #64	; 0x40
 80022a0:	0018      	movs	r0, r3
 80022a2:	f000 fcb3 	bl	8002c0c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80022a6:	e012      	b.n	80022ce <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	095b      	lsrs	r3, r3, #5
 80022ac:	001a      	movs	r2, r3
 80022ae:	2301      	movs	r3, #1
 80022b0:	4013      	ands	r3, r2
 80022b2:	d00d      	beq.n	80022d0 <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	095b      	lsrs	r3, r3, #5
 80022b8:	001a      	movs	r2, r3
 80022ba:	2301      	movs	r3, #1
 80022bc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80022be:	d007      	beq.n	80022d0 <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	0011      	movs	r1, r2
 80022c6:	0018      	movs	r0, r3
 80022c8:	f000 fa50 	bl	800276c <I2C_ITMasterCplt>
 80022cc:	e000      	b.n	80022d0 <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 80022ce:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2240      	movs	r2, #64	; 0x40
 80022d4:	2100      	movs	r1, #0
 80022d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	0018      	movs	r0, r3
 80022dc:	46bd      	mov	sp, r7
 80022de:	b007      	add	sp, #28
 80022e0:	bd90      	pop	{r4, r7, pc}
 80022e2:	46c0      	nop			; (mov r8, r8)
 80022e4:	ffff0000 	.word	0xffff0000

080022e8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b088      	sub	sp, #32
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2240      	movs	r2, #64	; 0x40
 8002302:	5c9b      	ldrb	r3, [r3, r2]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d101      	bne.n	800230c <I2C_Slave_ISR_DMA+0x24>
 8002308:	2302      	movs	r3, #2
 800230a:	e0dd      	b.n	80024c8 <I2C_Slave_ISR_DMA+0x1e0>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2240      	movs	r2, #64	; 0x40
 8002310:	2101      	movs	r1, #1
 8002312:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	095b      	lsrs	r3, r3, #5
 8002318:	001a      	movs	r2, r3
 800231a:	2301      	movs	r3, #1
 800231c:	4013      	ands	r3, r2
 800231e:	d00b      	beq.n	8002338 <I2C_Slave_ISR_DMA+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	095b      	lsrs	r3, r3, #5
 8002324:	001a      	movs	r2, r3
 8002326:	2301      	movs	r3, #1
 8002328:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800232a:	d005      	beq.n	8002338 <I2C_Slave_ISR_DMA+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	0011      	movs	r1, r2
 8002332:	0018      	movs	r0, r3
 8002334:	f000 faec 	bl	8002910 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	091b      	lsrs	r3, r3, #4
 800233c:	001a      	movs	r2, r3
 800233e:	2301      	movs	r3, #1
 8002340:	4013      	ands	r3, r2
 8002342:	d100      	bne.n	8002346 <I2C_Slave_ISR_DMA+0x5e>
 8002344:	e0a9      	b.n	800249a <I2C_Slave_ISR_DMA+0x1b2>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	091b      	lsrs	r3, r3, #4
 800234a:	001a      	movs	r2, r3
 800234c:	2301      	movs	r3, #1
 800234e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002350:	d100      	bne.n	8002354 <I2C_Slave_ISR_DMA+0x6c>
 8002352:	e0a2      	b.n	800249a <I2C_Slave_ISR_DMA+0x1b2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	0b9b      	lsrs	r3, r3, #14
 8002358:	001a      	movs	r2, r3
 800235a:	2301      	movs	r3, #1
 800235c:	4013      	ands	r3, r2
 800235e:	d106      	bne.n	800236e <I2C_Slave_ISR_DMA+0x86>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	0bdb      	lsrs	r3, r3, #15
 8002364:	001a      	movs	r2, r3
 8002366:	2301      	movs	r3, #1
 8002368:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800236a:	d100      	bne.n	800236e <I2C_Slave_ISR_DMA+0x86>
 800236c:	e08e      	b.n	800248c <I2C_Slave_ISR_DMA+0x1a4>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00d      	beq.n	8002392 <I2C_Slave_ISR_DMA+0xaa>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	0bdb      	lsrs	r3, r3, #15
 800237a:	001a      	movs	r2, r3
 800237c:	2301      	movs	r3, #1
 800237e:	4013      	ands	r3, r2
 8002380:	d007      	beq.n	8002392 <I2C_Slave_ISR_DMA+0xaa>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <I2C_Slave_ISR_DMA+0xaa>
          {
            treatdmanack = 1U;
 800238e:	2301      	movs	r3, #1
 8002390:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00d      	beq.n	80023b6 <I2C_Slave_ISR_DMA+0xce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	0b9b      	lsrs	r3, r3, #14
 800239e:	001a      	movs	r2, r3
 80023a0:	2301      	movs	r3, #1
 80023a2:	4013      	ands	r3, r2
 80023a4:	d007      	beq.n	80023b6 <I2C_Slave_ISR_DMA+0xce>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <I2C_Slave_ISR_DMA+0xce>
          {
            treatdmanack = 1U;
 80023b2:	2301      	movs	r3, #1
 80023b4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d12d      	bne.n	8002418 <I2C_Slave_ISR_DMA+0x130>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2241      	movs	r2, #65	; 0x41
 80023c0:	5c9b      	ldrb	r3, [r3, r2]
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b28      	cmp	r3, #40	; 0x28
 80023c6:	d10b      	bne.n	80023e0 <I2C_Slave_ISR_DMA+0xf8>
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	2380      	movs	r3, #128	; 0x80
 80023cc:	049b      	lsls	r3, r3, #18
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d106      	bne.n	80023e0 <I2C_Slave_ISR_DMA+0xf8>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80023d2:	68ba      	ldr	r2, [r7, #8]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	0011      	movs	r1, r2
 80023d8:	0018      	movs	r0, r3
 80023da:	f000 fbbd 	bl	8002b58 <I2C_ITListenCplt>
 80023de:	e054      	b.n	800248a <I2C_Slave_ISR_DMA+0x1a2>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2241      	movs	r2, #65	; 0x41
 80023e4:	5c9b      	ldrb	r3, [r3, r2]
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b29      	cmp	r3, #41	; 0x29
 80023ea:	d110      	bne.n	800240e <I2C_Slave_ISR_DMA+0x126>
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	4a38      	ldr	r2, [pc, #224]	; (80024d0 <I2C_Slave_ISR_DMA+0x1e8>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d00c      	beq.n	800240e <I2C_Slave_ISR_DMA+0x126>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2210      	movs	r2, #16
 80023fa:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	0018      	movs	r0, r3
 8002400:	f000 fd0f 	bl	8002e22 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	0018      	movs	r0, r3
 8002408:	f000 f94a 	bl	80026a0 <I2C_ITSlaveSeqCplt>
 800240c:	e03d      	b.n	800248a <I2C_Slave_ISR_DMA+0x1a2>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2210      	movs	r2, #16
 8002414:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002416:	e03e      	b.n	8002496 <I2C_Slave_ISR_DMA+0x1ae>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2210      	movs	r2, #16
 800241e:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002424:	2204      	movs	r2, #4
 8002426:	431a      	orrs	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800242c:	2317      	movs	r3, #23
 800242e:	18fb      	adds	r3, r7, r3
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	2141      	movs	r1, #65	; 0x41
 8002434:	5c52      	ldrb	r2, [r2, r1]
 8002436:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d004      	beq.n	8002448 <I2C_Slave_ISR_DMA+0x160>
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	2380      	movs	r3, #128	; 0x80
 8002442:	045b      	lsls	r3, r3, #17
 8002444:	429a      	cmp	r2, r3
 8002446:	d126      	bne.n	8002496 <I2C_Slave_ISR_DMA+0x1ae>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002448:	2217      	movs	r2, #23
 800244a:	18bb      	adds	r3, r7, r2
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b21      	cmp	r3, #33	; 0x21
 8002450:	d003      	beq.n	800245a <I2C_Slave_ISR_DMA+0x172>
 8002452:	18bb      	adds	r3, r7, r2
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	2b29      	cmp	r3, #41	; 0x29
 8002458:	d103      	bne.n	8002462 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2221      	movs	r2, #33	; 0x21
 800245e:	631a      	str	r2, [r3, #48]	; 0x30
 8002460:	e00b      	b.n	800247a <I2C_Slave_ISR_DMA+0x192>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002462:	2217      	movs	r2, #23
 8002464:	18bb      	adds	r3, r7, r2
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b22      	cmp	r3, #34	; 0x22
 800246a:	d003      	beq.n	8002474 <I2C_Slave_ISR_DMA+0x18c>
 800246c:	18bb      	adds	r3, r7, r2
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b2a      	cmp	r3, #42	; 0x2a
 8002472:	d102      	bne.n	800247a <I2C_Slave_ISR_DMA+0x192>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2222      	movs	r2, #34	; 0x22
 8002478:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	0011      	movs	r1, r2
 8002482:	0018      	movs	r0, r3
 8002484:	f000 fbc2 	bl	8002c0c <I2C_ITError>
      if (treatdmanack == 1U)
 8002488:	e005      	b.n	8002496 <I2C_Slave_ISR_DMA+0x1ae>
 800248a:	e004      	b.n	8002496 <I2C_Slave_ISR_DMA+0x1ae>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2210      	movs	r2, #16
 8002492:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002494:	e013      	b.n	80024be <I2C_Slave_ISR_DMA+0x1d6>
      if (treatdmanack == 1U)
 8002496:	46c0      	nop			; (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002498:	e011      	b.n	80024be <I2C_Slave_ISR_DMA+0x1d6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	08db      	lsrs	r3, r3, #3
 800249e:	001a      	movs	r2, r3
 80024a0:	2301      	movs	r3, #1
 80024a2:	4013      	ands	r3, r2
 80024a4:	d00b      	beq.n	80024be <I2C_Slave_ISR_DMA+0x1d6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	08db      	lsrs	r3, r3, #3
 80024aa:	001a      	movs	r2, r3
 80024ac:	2301      	movs	r3, #1
 80024ae:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80024b0:	d005      	beq.n	80024be <I2C_Slave_ISR_DMA+0x1d6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	0011      	movs	r1, r2
 80024b8:	0018      	movs	r0, r3
 80024ba:	f000 f80b 	bl	80024d4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2240      	movs	r2, #64	; 0x40
 80024c2:	2100      	movs	r1, #0
 80024c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	0018      	movs	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	b008      	add	sp, #32
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	ffff0000 	.word	0xffff0000

080024d4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80024d4:	b5b0      	push	{r4, r5, r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2241      	movs	r2, #65	; 0x41
 80024e2:	5c9b      	ldrb	r3, [r3, r2]
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	001a      	movs	r2, r3
 80024e8:	2328      	movs	r3, #40	; 0x28
 80024ea:	4013      	ands	r3, r2
 80024ec:	2b28      	cmp	r3, #40	; 0x28
 80024ee:	d000      	beq.n	80024f2 <I2C_ITAddrCplt+0x1e>
 80024f0:	e088      	b.n	8002604 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	0c1b      	lsrs	r3, r3, #16
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	250f      	movs	r5, #15
 80024fe:	197b      	adds	r3, r7, r5
 8002500:	2101      	movs	r1, #1
 8002502:	400a      	ands	r2, r1
 8002504:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	0c1b      	lsrs	r3, r3, #16
 800250e:	b29a      	uxth	r2, r3
 8002510:	200c      	movs	r0, #12
 8002512:	183b      	adds	r3, r7, r0
 8002514:	21fe      	movs	r1, #254	; 0xfe
 8002516:	400a      	ands	r2, r1
 8002518:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	b29a      	uxth	r2, r3
 8002522:	240a      	movs	r4, #10
 8002524:	193b      	adds	r3, r7, r4
 8002526:	0592      	lsls	r2, r2, #22
 8002528:	0d92      	lsrs	r2, r2, #22
 800252a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	b29a      	uxth	r2, r3
 8002534:	2308      	movs	r3, #8
 8002536:	18fb      	adds	r3, r7, r3
 8002538:	21fe      	movs	r1, #254	; 0xfe
 800253a:	400a      	ands	r2, r1
 800253c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	2b02      	cmp	r3, #2
 8002544:	d148      	bne.n	80025d8 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002546:	0021      	movs	r1, r4
 8002548:	187b      	adds	r3, r7, r1
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	09db      	lsrs	r3, r3, #7
 800254e:	b29a      	uxth	r2, r3
 8002550:	183b      	adds	r3, r7, r0
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	4053      	eors	r3, r2
 8002556:	b29b      	uxth	r3, r3
 8002558:	001a      	movs	r2, r3
 800255a:	2306      	movs	r3, #6
 800255c:	4013      	ands	r3, r2
 800255e:	d120      	bne.n	80025a2 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8002560:	183b      	adds	r3, r7, r0
 8002562:	187a      	adds	r2, r7, r1
 8002564:	8812      	ldrh	r2, [r2, #0]
 8002566:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800256c:	1c5a      	adds	r2, r3, #1
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002576:	2b02      	cmp	r3, #2
 8002578:	d14c      	bne.n	8002614 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2208      	movs	r2, #8
 8002586:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2240      	movs	r2, #64	; 0x40
 800258c:	2100      	movs	r1, #0
 800258e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002590:	183b      	adds	r3, r7, r0
 8002592:	881a      	ldrh	r2, [r3, #0]
 8002594:	197b      	adds	r3, r7, r5
 8002596:	7819      	ldrb	r1, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	0018      	movs	r0, r3
 800259c:	f7ff fb0a 	bl	8001bb4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80025a0:	e038      	b.n	8002614 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80025a2:	240c      	movs	r4, #12
 80025a4:	193b      	adds	r3, r7, r4
 80025a6:	2208      	movs	r2, #8
 80025a8:	18ba      	adds	r2, r7, r2
 80025aa:	8812      	ldrh	r2, [r2, #0]
 80025ac:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80025ae:	2380      	movs	r3, #128	; 0x80
 80025b0:	021a      	lsls	r2, r3, #8
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	0011      	movs	r1, r2
 80025b6:	0018      	movs	r0, r3
 80025b8:	f000 fd12 	bl	8002fe0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2240      	movs	r2, #64	; 0x40
 80025c0:	2100      	movs	r1, #0
 80025c2:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80025c4:	193b      	adds	r3, r7, r4
 80025c6:	881a      	ldrh	r2, [r3, #0]
 80025c8:	230f      	movs	r3, #15
 80025ca:	18fb      	adds	r3, r7, r3
 80025cc:	7819      	ldrb	r1, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	0018      	movs	r0, r3
 80025d2:	f7ff faef 	bl	8001bb4 <HAL_I2C_AddrCallback>
}
 80025d6:	e01d      	b.n	8002614 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80025d8:	2380      	movs	r3, #128	; 0x80
 80025da:	021a      	lsls	r2, r3, #8
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	0011      	movs	r1, r2
 80025e0:	0018      	movs	r0, r3
 80025e2:	f000 fcfd 	bl	8002fe0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2240      	movs	r2, #64	; 0x40
 80025ea:	2100      	movs	r1, #0
 80025ec:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80025ee:	230c      	movs	r3, #12
 80025f0:	18fb      	adds	r3, r7, r3
 80025f2:	881a      	ldrh	r2, [r3, #0]
 80025f4:	230f      	movs	r3, #15
 80025f6:	18fb      	adds	r3, r7, r3
 80025f8:	7819      	ldrb	r1, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	0018      	movs	r0, r3
 80025fe:	f7ff fad9 	bl	8001bb4 <HAL_I2C_AddrCallback>
}
 8002602:	e007      	b.n	8002614 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2208      	movs	r2, #8
 800260a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2240      	movs	r2, #64	; 0x40
 8002610:	2100      	movs	r1, #0
 8002612:	5499      	strb	r1, [r3, r2]
}
 8002614:	46c0      	nop			; (mov r8, r8)
 8002616:	46bd      	mov	sp, r7
 8002618:	b004      	add	sp, #16
 800261a:	bdb0      	pop	{r4, r5, r7, pc}

0800261c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2242      	movs	r2, #66	; 0x42
 8002628:	2100      	movs	r1, #0
 800262a:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2241      	movs	r2, #65	; 0x41
 8002630:	5c9b      	ldrb	r3, [r3, r2]
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b21      	cmp	r3, #33	; 0x21
 8002636:	d117      	bne.n	8002668 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2241      	movs	r2, #65	; 0x41
 800263c:	2120      	movs	r1, #32
 800263e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2211      	movs	r2, #17
 8002644:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2101      	movs	r1, #1
 8002650:	0018      	movs	r0, r3
 8002652:	f000 fcc5 	bl	8002fe0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2240      	movs	r2, #64	; 0x40
 800265a:	2100      	movs	r1, #0
 800265c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	0018      	movs	r0, r3
 8002662:	f7fe fb53 	bl	8000d0c <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002666:	e016      	b.n	8002696 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2241      	movs	r2, #65	; 0x41
 800266c:	2120      	movs	r1, #32
 800266e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2212      	movs	r2, #18
 8002674:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2102      	movs	r1, #2
 8002680:	0018      	movs	r0, r3
 8002682:	f000 fcad 	bl	8002fe0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2240      	movs	r2, #64	; 0x40
 800268a:	2100      	movs	r1, #0
 800268c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	0018      	movs	r0, r3
 8002692:	f7fe fad9 	bl	8000c48 <HAL_I2C_MasterRxCpltCallback>
}
 8002696:	46c0      	nop			; (mov r8, r8)
 8002698:	46bd      	mov	sp, r7
 800269a:	b002      	add	sp, #8
 800269c:	bd80      	pop	{r7, pc}
	...

080026a0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2242      	movs	r2, #66	; 0x42
 80026b4:	2100      	movs	r1, #0
 80026b6:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	0b9b      	lsrs	r3, r3, #14
 80026bc:	001a      	movs	r2, r3
 80026be:	2301      	movs	r3, #1
 80026c0:	4013      	ands	r3, r2
 80026c2:	d008      	beq.n	80026d6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4925      	ldr	r1, [pc, #148]	; (8002764 <I2C_ITSlaveSeqCplt+0xc4>)
 80026d0:	400a      	ands	r2, r1
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	e00d      	b.n	80026f2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	0bdb      	lsrs	r3, r3, #15
 80026da:	001a      	movs	r2, r3
 80026dc:	2301      	movs	r3, #1
 80026de:	4013      	ands	r3, r2
 80026e0:	d007      	beq.n	80026f2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	491e      	ldr	r1, [pc, #120]	; (8002768 <I2C_ITSlaveSeqCplt+0xc8>)
 80026ee:	400a      	ands	r2, r1
 80026f0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2241      	movs	r2, #65	; 0x41
 80026f6:	5c9b      	ldrb	r3, [r3, r2]
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b29      	cmp	r3, #41	; 0x29
 80026fc:	d114      	bne.n	8002728 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2241      	movs	r2, #65	; 0x41
 8002702:	2128      	movs	r1, #40	; 0x28
 8002704:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2221      	movs	r2, #33	; 0x21
 800270a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2101      	movs	r1, #1
 8002710:	0018      	movs	r0, r3
 8002712:	f000 fc65 	bl	8002fe0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2240      	movs	r2, #64	; 0x40
 800271a:	2100      	movs	r1, #0
 800271c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	0018      	movs	r0, r3
 8002722:	f7ff fa37 	bl	8001b94 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002726:	e019      	b.n	800275c <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2241      	movs	r2, #65	; 0x41
 800272c:	5c9b      	ldrb	r3, [r3, r2]
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b2a      	cmp	r3, #42	; 0x2a
 8002732:	d113      	bne.n	800275c <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2241      	movs	r2, #65	; 0x41
 8002738:	2128      	movs	r1, #40	; 0x28
 800273a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2222      	movs	r2, #34	; 0x22
 8002740:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2102      	movs	r1, #2
 8002746:	0018      	movs	r0, r3
 8002748:	f000 fc4a 	bl	8002fe0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2240      	movs	r2, #64	; 0x40
 8002750:	2100      	movs	r1, #0
 8002752:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	0018      	movs	r0, r3
 8002758:	f7ff fa24 	bl	8001ba4 <HAL_I2C_SlaveRxCpltCallback>
}
 800275c:	46c0      	nop			; (mov r8, r8)
 800275e:	46bd      	mov	sp, r7
 8002760:	b004      	add	sp, #16
 8002762:	bd80      	pop	{r7, pc}
 8002764:	ffffbfff 	.word	0xffffbfff
 8002768:	ffff7fff 	.word	0xffff7fff

0800276c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2220      	movs	r2, #32
 8002780:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2241      	movs	r2, #65	; 0x41
 8002786:	5c9b      	ldrb	r3, [r3, r2]
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b21      	cmp	r3, #33	; 0x21
 800278c:	d108      	bne.n	80027a0 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2101      	movs	r1, #1
 8002792:	0018      	movs	r0, r3
 8002794:	f000 fc24 	bl	8002fe0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2211      	movs	r2, #17
 800279c:	631a      	str	r2, [r3, #48]	; 0x30
 800279e:	e00d      	b.n	80027bc <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2241      	movs	r2, #65	; 0x41
 80027a4:	5c9b      	ldrb	r3, [r3, r2]
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b22      	cmp	r3, #34	; 0x22
 80027aa:	d107      	bne.n	80027bc <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2102      	movs	r1, #2
 80027b0:	0018      	movs	r0, r3
 80027b2:	f000 fc15 	bl	8002fe0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2212      	movs	r2, #18
 80027ba:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4950      	ldr	r1, [pc, #320]	; (8002908 <I2C_ITMasterCplt+0x19c>)
 80027c8:	400a      	ands	r2, r1
 80027ca:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a4d      	ldr	r2, [pc, #308]	; (800290c <I2C_ITMasterCplt+0x1a0>)
 80027d6:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	091b      	lsrs	r3, r3, #4
 80027dc:	001a      	movs	r2, r3
 80027de:	2301      	movs	r3, #1
 80027e0:	4013      	ands	r3, r2
 80027e2:	d009      	beq.n	80027f8 <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2210      	movs	r2, #16
 80027ea:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f0:	2204      	movs	r2, #4
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2241      	movs	r2, #65	; 0x41
 80027fc:	5c9b      	ldrb	r3, [r3, r2]
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b60      	cmp	r3, #96	; 0x60
 8002802:	d10b      	bne.n	800281c <I2C_ITMasterCplt+0xb0>
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	089b      	lsrs	r3, r3, #2
 8002808:	001a      	movs	r2, r3
 800280a:	2301      	movs	r3, #1
 800280c:	4013      	ands	r3, r2
 800280e:	d005      	beq.n	800281c <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002816:	b2db      	uxtb	r3, r3
 8002818:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800281a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	0018      	movs	r0, r3
 8002820:	f000 faff 	bl	8002e22 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002828:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2241      	movs	r2, #65	; 0x41
 800282e:	5c9b      	ldrb	r3, [r3, r2]
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b60      	cmp	r3, #96	; 0x60
 8002834:	d002      	beq.n	800283c <I2C_ITMasterCplt+0xd0>
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d007      	beq.n	800284c <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	0011      	movs	r1, r2
 8002844:	0018      	movs	r0, r3
 8002846:	f000 f9e1 	bl	8002c0c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800284a:	e058      	b.n	80028fe <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2241      	movs	r2, #65	; 0x41
 8002850:	5c9b      	ldrb	r3, [r3, r2]
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b21      	cmp	r3, #33	; 0x21
 8002856:	d126      	bne.n	80028a6 <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2241      	movs	r2, #65	; 0x41
 800285c:	2120      	movs	r1, #32
 800285e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2242      	movs	r2, #66	; 0x42
 800286a:	5c9b      	ldrb	r3, [r3, r2]
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b40      	cmp	r3, #64	; 0x40
 8002870:	d10c      	bne.n	800288c <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2242      	movs	r2, #66	; 0x42
 8002876:	2100      	movs	r1, #0
 8002878:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2240      	movs	r2, #64	; 0x40
 800287e:	2100      	movs	r1, #0
 8002880:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	0018      	movs	r0, r3
 8002886:	f7ff f9ad 	bl	8001be4 <HAL_I2C_MemTxCpltCallback>
}
 800288a:	e038      	b.n	80028fe <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2242      	movs	r2, #66	; 0x42
 8002890:	2100      	movs	r1, #0
 8002892:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2240      	movs	r2, #64	; 0x40
 8002898:	2100      	movs	r1, #0
 800289a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	0018      	movs	r0, r3
 80028a0:	f7fe fa34 	bl	8000d0c <HAL_I2C_MasterTxCpltCallback>
}
 80028a4:	e02b      	b.n	80028fe <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2241      	movs	r2, #65	; 0x41
 80028aa:	5c9b      	ldrb	r3, [r3, r2]
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b22      	cmp	r3, #34	; 0x22
 80028b0:	d125      	bne.n	80028fe <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2241      	movs	r2, #65	; 0x41
 80028b6:	2120      	movs	r1, #32
 80028b8:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2242      	movs	r2, #66	; 0x42
 80028c4:	5c9b      	ldrb	r3, [r3, r2]
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b40      	cmp	r3, #64	; 0x40
 80028ca:	d10c      	bne.n	80028e6 <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2242      	movs	r2, #66	; 0x42
 80028d0:	2100      	movs	r1, #0
 80028d2:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2240      	movs	r2, #64	; 0x40
 80028d8:	2100      	movs	r1, #0
 80028da:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	0018      	movs	r0, r3
 80028e0:	f7ff f988 	bl	8001bf4 <HAL_I2C_MemRxCpltCallback>
}
 80028e4:	e00b      	b.n	80028fe <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2242      	movs	r2, #66	; 0x42
 80028ea:	2100      	movs	r1, #0
 80028ec:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2240      	movs	r2, #64	; 0x40
 80028f2:	2100      	movs	r1, #0
 80028f4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	0018      	movs	r0, r3
 80028fa:	f7fe f9a5 	bl	8000c48 <HAL_I2C_MasterRxCpltCallback>
}
 80028fe:	46c0      	nop			; (mov r8, r8)
 8002900:	46bd      	mov	sp, r7
 8002902:	b006      	add	sp, #24
 8002904:	bd80      	pop	{r7, pc}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	fe00e800 	.word	0xfe00e800
 800290c:	ffff0000 	.word	0xffff0000

08002910 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002926:	200f      	movs	r0, #15
 8002928:	183b      	adds	r3, r7, r0
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	2141      	movs	r1, #65	; 0x41
 800292e:	5c52      	ldrb	r2, [r2, r1]
 8002930:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2220      	movs	r2, #32
 8002938:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800293a:	183b      	adds	r3, r7, r0
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b21      	cmp	r3, #33	; 0x21
 8002940:	d003      	beq.n	800294a <I2C_ITSlaveCplt+0x3a>
 8002942:	183b      	adds	r3, r7, r0
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2b29      	cmp	r3, #41	; 0x29
 8002948:	d109      	bne.n	800295e <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800294a:	4a7d      	ldr	r2, [pc, #500]	; (8002b40 <I2C_ITSlaveCplt+0x230>)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	0011      	movs	r1, r2
 8002950:	0018      	movs	r0, r3
 8002952:	f000 fb45 	bl	8002fe0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2221      	movs	r2, #33	; 0x21
 800295a:	631a      	str	r2, [r3, #48]	; 0x30
 800295c:	e011      	b.n	8002982 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800295e:	220f      	movs	r2, #15
 8002960:	18bb      	adds	r3, r7, r2
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2b22      	cmp	r3, #34	; 0x22
 8002966:	d003      	beq.n	8002970 <I2C_ITSlaveCplt+0x60>
 8002968:	18bb      	adds	r3, r7, r2
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b2a      	cmp	r3, #42	; 0x2a
 800296e:	d108      	bne.n	8002982 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002970:	4a74      	ldr	r2, [pc, #464]	; (8002b44 <I2C_ITSlaveCplt+0x234>)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	0011      	movs	r1, r2
 8002976:	0018      	movs	r0, r3
 8002978:	f000 fb32 	bl	8002fe0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2222      	movs	r2, #34	; 0x22
 8002980:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2180      	movs	r1, #128	; 0x80
 800298e:	0209      	lsls	r1, r1, #8
 8002990:	430a      	orrs	r2, r1
 8002992:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	496a      	ldr	r1, [pc, #424]	; (8002b48 <I2C_ITSlaveCplt+0x238>)
 80029a0:	400a      	ands	r2, r1
 80029a2:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	0018      	movs	r0, r3
 80029a8:	f000 fa3b 	bl	8002e22 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	0b9b      	lsrs	r3, r3, #14
 80029b0:	001a      	movs	r2, r3
 80029b2:	2301      	movs	r3, #1
 80029b4:	4013      	ands	r3, r2
 80029b6:	d013      	beq.n	80029e0 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4962      	ldr	r1, [pc, #392]	; (8002b4c <I2C_ITSlaveCplt+0x23c>)
 80029c4:	400a      	ands	r2, r1
 80029c6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d020      	beq.n	8002a12 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	b29a      	uxth	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029de:	e018      	b.n	8002a12 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	0bdb      	lsrs	r3, r3, #15
 80029e4:	001a      	movs	r2, r3
 80029e6:	2301      	movs	r3, #1
 80029e8:	4013      	ands	r3, r2
 80029ea:	d012      	beq.n	8002a12 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4956      	ldr	r1, [pc, #344]	; (8002b50 <I2C_ITSlaveCplt+0x240>)
 80029f8:	400a      	ands	r2, r1
 80029fa:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d006      	beq.n	8002a12 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	089b      	lsrs	r3, r3, #2
 8002a16:	001a      	movs	r2, r3
 8002a18:	2301      	movs	r3, #1
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	d020      	beq.n	8002a60 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	2204      	movs	r2, #4
 8002a22:	4393      	bics	r3, r2
 8002a24:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	b2d2      	uxtb	r2, r2
 8002a32:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	1c5a      	adds	r2, r3, #1
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00c      	beq.n	8002a60 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d005      	beq.n	8002a76 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6e:	2204      	movs	r2, #4
 8002a70:	431a      	orrs	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2242      	movs	r2, #66	; 0x42
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d013      	beq.n	8002ab4 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	0011      	movs	r1, r2
 8002a94:	0018      	movs	r0, r3
 8002a96:	f000 f8b9 	bl	8002c0c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2241      	movs	r2, #65	; 0x41
 8002a9e:	5c9b      	ldrb	r3, [r3, r2]
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b28      	cmp	r3, #40	; 0x28
 8002aa4:	d147      	bne.n	8002b36 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	0011      	movs	r1, r2
 8002aac:	0018      	movs	r0, r3
 8002aae:	f000 f853 	bl	8002b58 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002ab2:	e040      	b.n	8002b36 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab8:	4a26      	ldr	r2, [pc, #152]	; (8002b54 <I2C_ITSlaveCplt+0x244>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d016      	beq.n	8002aec <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	f7ff fded 	bl	80026a0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a22      	ldr	r2, [pc, #136]	; (8002b54 <I2C_ITSlaveCplt+0x244>)
 8002aca:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2241      	movs	r2, #65	; 0x41
 8002ad0:	2120      	movs	r1, #32
 8002ad2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2240      	movs	r2, #64	; 0x40
 8002ade:	2100      	movs	r1, #0
 8002ae0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	f7ff f875 	bl	8001bd4 <HAL_I2C_ListenCpltCallback>
}
 8002aea:	e024      	b.n	8002b36 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2241      	movs	r2, #65	; 0x41
 8002af0:	5c9b      	ldrb	r3, [r3, r2]
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b22      	cmp	r3, #34	; 0x22
 8002af6:	d10f      	bne.n	8002b18 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2241      	movs	r2, #65	; 0x41
 8002afc:	2120      	movs	r1, #32
 8002afe:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2240      	movs	r2, #64	; 0x40
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	0018      	movs	r0, r3
 8002b12:	f7ff f847 	bl	8001ba4 <HAL_I2C_SlaveRxCpltCallback>
}
 8002b16:	e00e      	b.n	8002b36 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2241      	movs	r2, #65	; 0x41
 8002b1c:	2120      	movs	r1, #32
 8002b1e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2240      	movs	r2, #64	; 0x40
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	0018      	movs	r0, r3
 8002b32:	f7ff f82f 	bl	8001b94 <HAL_I2C_SlaveTxCpltCallback>
}
 8002b36:	46c0      	nop			; (mov r8, r8)
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	b006      	add	sp, #24
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	46c0      	nop			; (mov r8, r8)
 8002b40:	00008001 	.word	0x00008001
 8002b44:	00008002 	.word	0x00008002
 8002b48:	fe00e800 	.word	0xfe00e800
 8002b4c:	ffffbfff 	.word	0xffffbfff
 8002b50:	ffff7fff 	.word	0xffff7fff
 8002b54:	ffff0000 	.word	0xffff0000

08002b58 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a27      	ldr	r2, [pc, #156]	; (8002c04 <I2C_ITListenCplt+0xac>)
 8002b66:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2241      	movs	r2, #65	; 0x41
 8002b72:	2120      	movs	r1, #32
 8002b74:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2242      	movs	r2, #66	; 0x42
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	089b      	lsrs	r3, r3, #2
 8002b88:	001a      	movs	r2, r3
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	d022      	beq.n	8002bd6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	1c5a      	adds	r2, r3, #1
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d012      	beq.n	8002bd6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bce:	2204      	movs	r2, #4
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002bd6:	4a0c      	ldr	r2, [pc, #48]	; (8002c08 <I2C_ITListenCplt+0xb0>)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	0011      	movs	r1, r2
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f000 f9ff 	bl	8002fe0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2210      	movs	r2, #16
 8002be8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2240      	movs	r2, #64	; 0x40
 8002bee:	2100      	movs	r1, #0
 8002bf0:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	f7fe ffed 	bl	8001bd4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002bfa:	46c0      	nop			; (mov r8, r8)
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	b002      	add	sp, #8
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	46c0      	nop			; (mov r8, r8)
 8002c04:	ffff0000 	.word	0xffff0000
 8002c08:	00008003 	.word	0x00008003

08002c0c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002c16:	200f      	movs	r0, #15
 8002c18:	183b      	adds	r3, r7, r0
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	2141      	movs	r1, #65	; 0x41
 8002c1e:	5c52      	ldrb	r2, [r2, r1]
 8002c20:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2242      	movs	r2, #66	; 0x42
 8002c26:	2100      	movs	r1, #0
 8002c28:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a62      	ldr	r2, [pc, #392]	; (8002db8 <I2C_ITError+0x1ac>)
 8002c2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002c42:	183b      	adds	r3, r7, r0
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	2b28      	cmp	r3, #40	; 0x28
 8002c48:	d007      	beq.n	8002c5a <I2C_ITError+0x4e>
 8002c4a:	183b      	adds	r3, r7, r0
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	2b29      	cmp	r3, #41	; 0x29
 8002c50:	d003      	beq.n	8002c5a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002c52:	183b      	adds	r3, r7, r0
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b2a      	cmp	r3, #42	; 0x2a
 8002c58:	d10c      	bne.n	8002c74 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2103      	movs	r1, #3
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f000 f9be 	bl	8002fe0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2241      	movs	r2, #65	; 0x41
 8002c68:	2128      	movs	r1, #40	; 0x28
 8002c6a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a53      	ldr	r2, [pc, #332]	; (8002dbc <I2C_ITError+0x1b0>)
 8002c70:	635a      	str	r2, [r3, #52]	; 0x34
 8002c72:	e012      	b.n	8002c9a <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002c74:	4a52      	ldr	r2, [pc, #328]	; (8002dc0 <I2C_ITError+0x1b4>)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	0011      	movs	r1, r2
 8002c7a:	0018      	movs	r0, r3
 8002c7c:	f000 f9b0 	bl	8002fe0 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2241      	movs	r2, #65	; 0x41
 8002c84:	5c9b      	ldrb	r3, [r3, r2]
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b60      	cmp	r3, #96	; 0x60
 8002c8a:	d003      	beq.n	8002c94 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2241      	movs	r2, #65	; 0x41
 8002c90:	2120      	movs	r1, #32
 8002c92:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d03b      	beq.n	8002d20 <I2C_ITError+0x114>
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	2b11      	cmp	r3, #17
 8002cac:	d002      	beq.n	8002cb4 <I2C_ITError+0xa8>
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	2b21      	cmp	r3, #33	; 0x21
 8002cb2:	d135      	bne.n	8002d20 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	2380      	movs	r3, #128	; 0x80
 8002cbc:	01db      	lsls	r3, r3, #7
 8002cbe:	401a      	ands	r2, r3
 8002cc0:	2380      	movs	r3, #128	; 0x80
 8002cc2:	01db      	lsls	r3, r3, #7
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d107      	bne.n	8002cd8 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	493c      	ldr	r1, [pc, #240]	; (8002dc4 <I2C_ITError+0x1b8>)
 8002cd4:	400a      	ands	r2, r1
 8002cd6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cdc:	0018      	movs	r0, r3
 8002cde:	f7fe fb91 	bl	8001404 <HAL_DMA_GetState>
 8002ce2:	0003      	movs	r3, r0
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d016      	beq.n	8002d16 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cec:	4a36      	ldr	r2, [pc, #216]	; (8002dc8 <I2C_ITError+0x1bc>)
 8002cee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2240      	movs	r2, #64	; 0x40
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	f7fe fb3c 	bl	800137a <HAL_DMA_Abort_IT>
 8002d02:	1e03      	subs	r3, r0, #0
 8002d04:	d051      	beq.n	8002daa <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d10:	0018      	movs	r0, r3
 8002d12:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002d14:	e049      	b.n	8002daa <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	0018      	movs	r0, r3
 8002d1a:	f000 f859 	bl	8002dd0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002d1e:	e044      	b.n	8002daa <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d03b      	beq.n	8002da0 <I2C_ITError+0x194>
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	2b12      	cmp	r3, #18
 8002d2c:	d002      	beq.n	8002d34 <I2C_ITError+0x128>
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	2b22      	cmp	r3, #34	; 0x22
 8002d32:	d135      	bne.n	8002da0 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	2380      	movs	r3, #128	; 0x80
 8002d3c:	021b      	lsls	r3, r3, #8
 8002d3e:	401a      	ands	r2, r3
 8002d40:	2380      	movs	r3, #128	; 0x80
 8002d42:	021b      	lsls	r3, r3, #8
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d107      	bne.n	8002d58 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	491e      	ldr	r1, [pc, #120]	; (8002dcc <I2C_ITError+0x1c0>)
 8002d54:	400a      	ands	r2, r1
 8002d56:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	f7fe fb51 	bl	8001404 <HAL_DMA_GetState>
 8002d62:	0003      	movs	r3, r0
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d016      	beq.n	8002d96 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d6c:	4a16      	ldr	r2, [pc, #88]	; (8002dc8 <I2C_ITError+0x1bc>)
 8002d6e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2240      	movs	r2, #64	; 0x40
 8002d74:	2100      	movs	r1, #0
 8002d76:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	f7fe fafc 	bl	800137a <HAL_DMA_Abort_IT>
 8002d82:	1e03      	subs	r3, r0, #0
 8002d84:	d013      	beq.n	8002dae <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d90:	0018      	movs	r0, r3
 8002d92:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002d94:	e00b      	b.n	8002dae <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	0018      	movs	r0, r3
 8002d9a:	f000 f819 	bl	8002dd0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002d9e:	e006      	b.n	8002dae <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	0018      	movs	r0, r3
 8002da4:	f000 f814 	bl	8002dd0 <I2C_TreatErrorCallback>
  }
}
 8002da8:	e002      	b.n	8002db0 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	e000      	b.n	8002db0 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002dae:	46c0      	nop			; (mov r8, r8)
}
 8002db0:	46c0      	nop			; (mov r8, r8)
 8002db2:	46bd      	mov	sp, r7
 8002db4:	b004      	add	sp, #16
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	ffff0000 	.word	0xffff0000
 8002dbc:	08001ea9 	.word	0x08001ea9
 8002dc0:	00008003 	.word	0x00008003
 8002dc4:	ffffbfff 	.word	0xffffbfff
 8002dc8:	08002e67 	.word	0x08002e67
 8002dcc:	ffff7fff 	.word	0xffff7fff

08002dd0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2241      	movs	r2, #65	; 0x41
 8002ddc:	5c9b      	ldrb	r3, [r3, r2]
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b60      	cmp	r3, #96	; 0x60
 8002de2:	d10f      	bne.n	8002e04 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2241      	movs	r2, #65	; 0x41
 8002de8:	2120      	movs	r1, #32
 8002dea:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2240      	movs	r2, #64	; 0x40
 8002df6:	2100      	movs	r1, #0
 8002df8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	f7fe ff09 	bl	8001c14 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002e02:	e00a      	b.n	8002e1a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2240      	movs	r2, #64	; 0x40
 8002e0e:	2100      	movs	r1, #0
 8002e10:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	0018      	movs	r0, r3
 8002e16:	f7fe fef5 	bl	8001c04 <HAL_I2C_ErrorCallback>
}
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	b002      	add	sp, #8
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b082      	sub	sp, #8
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	2202      	movs	r2, #2
 8002e32:	4013      	ands	r3, r2
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d103      	bne.n	8002e40 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	2201      	movs	r2, #1
 8002e48:	4013      	ands	r3, r2
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d007      	beq.n	8002e5e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	699a      	ldr	r2, [r3, #24]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2101      	movs	r1, #1
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	619a      	str	r2, [r3, #24]
  }
}
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	46bd      	mov	sp, r7
 8002e62:	b002      	add	sp, #8
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b084      	sub	sp, #16
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e72:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e80:	2200      	movs	r2, #0
 8002e82:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d003      	beq.n	8002e94 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e90:	2200      	movs	r2, #0
 8002e92:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	0018      	movs	r0, r3
 8002e98:	f7ff ff9a 	bl	8002dd0 <I2C_TreatErrorCallback>
}
 8002e9c:	46c0      	nop			; (mov r8, r8)
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	b004      	add	sp, #16
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ea4:	b590      	push	{r4, r7, lr}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	0008      	movs	r0, r1
 8002eae:	0011      	movs	r1, r2
 8002eb0:	607b      	str	r3, [r7, #4]
 8002eb2:	240a      	movs	r4, #10
 8002eb4:	193b      	adds	r3, r7, r4
 8002eb6:	1c02      	adds	r2, r0, #0
 8002eb8:	801a      	strh	r2, [r3, #0]
 8002eba:	2009      	movs	r0, #9
 8002ebc:	183b      	adds	r3, r7, r0
 8002ebe:	1c0a      	adds	r2, r1, #0
 8002ec0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	6a3a      	ldr	r2, [r7, #32]
 8002eca:	0d51      	lsrs	r1, r2, #21
 8002ecc:	2280      	movs	r2, #128	; 0x80
 8002ece:	00d2      	lsls	r2, r2, #3
 8002ed0:	400a      	ands	r2, r1
 8002ed2:	490e      	ldr	r1, [pc, #56]	; (8002f0c <I2C_TransferConfig+0x68>)
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	43d2      	mvns	r2, r2
 8002ed8:	401a      	ands	r2, r3
 8002eda:	0011      	movs	r1, r2
 8002edc:	193b      	adds	r3, r7, r4
 8002ede:	881b      	ldrh	r3, [r3, #0]
 8002ee0:	059b      	lsls	r3, r3, #22
 8002ee2:	0d9a      	lsrs	r2, r3, #22
 8002ee4:	183b      	adds	r3, r7, r0
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	0418      	lsls	r0, r3, #16
 8002eea:	23ff      	movs	r3, #255	; 0xff
 8002eec:	041b      	lsls	r3, r3, #16
 8002eee:	4003      	ands	r3, r0
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	431a      	orrs	r2, r3
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	46bd      	mov	sp, r7
 8002f06:	b005      	add	sp, #20
 8002f08:	bd90      	pop	{r4, r7, pc}
 8002f0a:	46c0      	nop			; (mov r8, r8)
 8002f0c:	03ff63ff 	.word	0x03ff63ff

08002f10 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	000a      	movs	r2, r1
 8002f1a:	1cbb      	adds	r3, r7, #2
 8002f1c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f26:	4b2c      	ldr	r3, [pc, #176]	; (8002fd8 <I2C_Enable_IRQ+0xc8>)
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d004      	beq.n	8002f36 <I2C_Enable_IRQ+0x26>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002f30:	4b2a      	ldr	r3, [pc, #168]	; (8002fdc <I2C_Enable_IRQ+0xcc>)
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d121      	bne.n	8002f7a <I2C_Enable_IRQ+0x6a>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002f36:	1cbb      	adds	r3, r7, #2
 8002f38:	2200      	movs	r2, #0
 8002f3a:	5e9b      	ldrsh	r3, [r3, r2]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	da03      	bge.n	8002f48 <I2C_Enable_IRQ+0x38>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	22b8      	movs	r2, #184	; 0xb8
 8002f44:	4313      	orrs	r3, r2
 8002f46:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002f48:	1cbb      	adds	r3, r7, #2
 8002f4a:	881b      	ldrh	r3, [r3, #0]
 8002f4c:	2b10      	cmp	r3, #16
 8002f4e:	d103      	bne.n	8002f58 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2290      	movs	r2, #144	; 0x90
 8002f54:	4313      	orrs	r3, r2
 8002f56:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002f58:	1cbb      	adds	r3, r7, #2
 8002f5a:	881b      	ldrh	r3, [r3, #0]
 8002f5c:	2b20      	cmp	r3, #32
 8002f5e:	d103      	bne.n	8002f68 <I2C_Enable_IRQ+0x58>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2260      	movs	r2, #96	; 0x60
 8002f64:	4313      	orrs	r3, r2
 8002f66:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002f68:	1cbb      	adds	r3, r7, #2
 8002f6a:	881b      	ldrh	r3, [r3, #0]
 8002f6c:	2b40      	cmp	r3, #64	; 0x40
 8002f6e:	d127      	bne.n	8002fc0 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2240      	movs	r2, #64	; 0x40
 8002f74:	4313      	orrs	r3, r2
 8002f76:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002f78:	e022      	b.n	8002fc0 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002f7a:	1cbb      	adds	r3, r7, #2
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	5e9b      	ldrsh	r3, [r3, r2]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	da03      	bge.n	8002f8c <I2C_Enable_IRQ+0x7c>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	22b8      	movs	r2, #184	; 0xb8
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002f8c:	1cbb      	adds	r3, r7, #2
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	2201      	movs	r2, #1
 8002f92:	4013      	ands	r3, r2
 8002f94:	d003      	beq.n	8002f9e <I2C_Enable_IRQ+0x8e>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	22f2      	movs	r2, #242	; 0xf2
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002f9e:	1cbb      	adds	r3, r7, #2
 8002fa0:	881b      	ldrh	r3, [r3, #0]
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	d003      	beq.n	8002fb0 <I2C_Enable_IRQ+0xa0>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	22f4      	movs	r2, #244	; 0xf4
 8002fac:	4313      	orrs	r3, r2
 8002fae:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002fb0:	1cbb      	adds	r3, r7, #2
 8002fb2:	881b      	ldrh	r3, [r3, #0]
 8002fb4:	2b20      	cmp	r3, #32
 8002fb6:	d103      	bne.n	8002fc0 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6819      	ldr	r1, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	601a      	str	r2, [r3, #0]
}
 8002fd0:	46c0      	nop			; (mov r8, r8)
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	b004      	add	sp, #16
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	080020d1 	.word	0x080020d1
 8002fdc:	080022e9 	.word	0x080022e9

08002fe0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	000a      	movs	r2, r1
 8002fea:	1cbb      	adds	r3, r7, #2
 8002fec:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002ff2:	1cbb      	adds	r3, r7, #2
 8002ff4:	881b      	ldrh	r3, [r3, #0]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	d010      	beq.n	800301e <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2242      	movs	r2, #66	; 0x42
 8003000:	4313      	orrs	r3, r2
 8003002:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2241      	movs	r2, #65	; 0x41
 8003008:	5c9b      	ldrb	r3, [r3, r2]
 800300a:	b2db      	uxtb	r3, r3
 800300c:	001a      	movs	r2, r3
 800300e:	2328      	movs	r3, #40	; 0x28
 8003010:	4013      	ands	r3, r2
 8003012:	2b28      	cmp	r3, #40	; 0x28
 8003014:	d003      	beq.n	800301e <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	22b0      	movs	r2, #176	; 0xb0
 800301a:	4313      	orrs	r3, r2
 800301c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800301e:	1cbb      	adds	r3, r7, #2
 8003020:	881b      	ldrh	r3, [r3, #0]
 8003022:	2202      	movs	r2, #2
 8003024:	4013      	ands	r3, r2
 8003026:	d010      	beq.n	800304a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2244      	movs	r2, #68	; 0x44
 800302c:	4313      	orrs	r3, r2
 800302e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2241      	movs	r2, #65	; 0x41
 8003034:	5c9b      	ldrb	r3, [r3, r2]
 8003036:	b2db      	uxtb	r3, r3
 8003038:	001a      	movs	r2, r3
 800303a:	2328      	movs	r3, #40	; 0x28
 800303c:	4013      	ands	r3, r2
 800303e:	2b28      	cmp	r3, #40	; 0x28
 8003040:	d003      	beq.n	800304a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	22b0      	movs	r2, #176	; 0xb0
 8003046:	4313      	orrs	r3, r2
 8003048:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800304a:	1cbb      	adds	r3, r7, #2
 800304c:	2200      	movs	r2, #0
 800304e:	5e9b      	ldrsh	r3, [r3, r2]
 8003050:	2b00      	cmp	r3, #0
 8003052:	da03      	bge.n	800305c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	22b8      	movs	r2, #184	; 0xb8
 8003058:	4313      	orrs	r3, r2
 800305a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800305c:	1cbb      	adds	r3, r7, #2
 800305e:	881b      	ldrh	r3, [r3, #0]
 8003060:	2b10      	cmp	r3, #16
 8003062:	d103      	bne.n	800306c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2290      	movs	r2, #144	; 0x90
 8003068:	4313      	orrs	r3, r2
 800306a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800306c:	1cbb      	adds	r3, r7, #2
 800306e:	881b      	ldrh	r3, [r3, #0]
 8003070:	2b20      	cmp	r3, #32
 8003072:	d103      	bne.n	800307c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2220      	movs	r2, #32
 8003078:	4313      	orrs	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800307c:	1cbb      	adds	r3, r7, #2
 800307e:	881b      	ldrh	r3, [r3, #0]
 8003080:	2b40      	cmp	r3, #64	; 0x40
 8003082:	d103      	bne.n	800308c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2240      	movs	r2, #64	; 0x40
 8003088:	4313      	orrs	r3, r2
 800308a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	43d9      	mvns	r1, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	400a      	ands	r2, r1
 800309c:	601a      	str	r2, [r3, #0]
}
 800309e:	46c0      	nop			; (mov r8, r8)
 80030a0:	46bd      	mov	sp, r7
 80030a2:	b004      	add	sp, #16
 80030a4:	bd80      	pop	{r7, pc}
	...

080030a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2241      	movs	r2, #65	; 0x41
 80030b6:	5c9b      	ldrb	r3, [r3, r2]
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b20      	cmp	r3, #32
 80030bc:	d138      	bne.n	8003130 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2240      	movs	r2, #64	; 0x40
 80030c2:	5c9b      	ldrb	r3, [r3, r2]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d101      	bne.n	80030cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80030c8:	2302      	movs	r3, #2
 80030ca:	e032      	b.n	8003132 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2240      	movs	r2, #64	; 0x40
 80030d0:	2101      	movs	r1, #1
 80030d2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2241      	movs	r2, #65	; 0x41
 80030d8:	2124      	movs	r1, #36	; 0x24
 80030da:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2101      	movs	r1, #1
 80030e8:	438a      	bics	r2, r1
 80030ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4911      	ldr	r1, [pc, #68]	; (800313c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80030f8:	400a      	ands	r2, r1
 80030fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6819      	ldr	r1, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2101      	movs	r1, #1
 8003118:	430a      	orrs	r2, r1
 800311a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2241      	movs	r2, #65	; 0x41
 8003120:	2120      	movs	r1, #32
 8003122:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2240      	movs	r2, #64	; 0x40
 8003128:	2100      	movs	r1, #0
 800312a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800312c:	2300      	movs	r3, #0
 800312e:	e000      	b.n	8003132 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003130:	2302      	movs	r3, #2
  }
}
 8003132:	0018      	movs	r0, r3
 8003134:	46bd      	mov	sp, r7
 8003136:	b002      	add	sp, #8
 8003138:	bd80      	pop	{r7, pc}
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	ffffefff 	.word	0xffffefff

08003140 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2241      	movs	r2, #65	; 0x41
 800314e:	5c9b      	ldrb	r3, [r3, r2]
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b20      	cmp	r3, #32
 8003154:	d139      	bne.n	80031ca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2240      	movs	r2, #64	; 0x40
 800315a:	5c9b      	ldrb	r3, [r3, r2]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d101      	bne.n	8003164 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003160:	2302      	movs	r3, #2
 8003162:	e033      	b.n	80031cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2240      	movs	r2, #64	; 0x40
 8003168:	2101      	movs	r1, #1
 800316a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2241      	movs	r2, #65	; 0x41
 8003170:	2124      	movs	r1, #36	; 0x24
 8003172:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2101      	movs	r1, #1
 8003180:	438a      	bics	r2, r1
 8003182:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4a11      	ldr	r2, [pc, #68]	; (80031d4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003190:	4013      	ands	r3, r2
 8003192:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	021b      	lsls	r3, r3, #8
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	4313      	orrs	r3, r2
 800319c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2101      	movs	r1, #1
 80031b2:	430a      	orrs	r2, r1
 80031b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2241      	movs	r2, #65	; 0x41
 80031ba:	2120      	movs	r1, #32
 80031bc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2240      	movs	r2, #64	; 0x40
 80031c2:	2100      	movs	r1, #0
 80031c4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80031c6:	2300      	movs	r3, #0
 80031c8:	e000      	b.n	80031cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80031ca:	2302      	movs	r3, #2
  }
}
 80031cc:	0018      	movs	r0, r3
 80031ce:	46bd      	mov	sp, r7
 80031d0:	b004      	add	sp, #16
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	fffff0ff 	.word	0xfffff0ff

080031d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b088      	sub	sp, #32
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d102      	bne.n	80031ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	f000 fb76 	bl	80038d8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2201      	movs	r2, #1
 80031f2:	4013      	ands	r3, r2
 80031f4:	d100      	bne.n	80031f8 <HAL_RCC_OscConfig+0x20>
 80031f6:	e08e      	b.n	8003316 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80031f8:	4bc5      	ldr	r3, [pc, #788]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	220c      	movs	r2, #12
 80031fe:	4013      	ands	r3, r2
 8003200:	2b04      	cmp	r3, #4
 8003202:	d00e      	beq.n	8003222 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003204:	4bc2      	ldr	r3, [pc, #776]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	220c      	movs	r2, #12
 800320a:	4013      	ands	r3, r2
 800320c:	2b08      	cmp	r3, #8
 800320e:	d117      	bne.n	8003240 <HAL_RCC_OscConfig+0x68>
 8003210:	4bbf      	ldr	r3, [pc, #764]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	23c0      	movs	r3, #192	; 0xc0
 8003216:	025b      	lsls	r3, r3, #9
 8003218:	401a      	ands	r2, r3
 800321a:	2380      	movs	r3, #128	; 0x80
 800321c:	025b      	lsls	r3, r3, #9
 800321e:	429a      	cmp	r2, r3
 8003220:	d10e      	bne.n	8003240 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003222:	4bbb      	ldr	r3, [pc, #748]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	2380      	movs	r3, #128	; 0x80
 8003228:	029b      	lsls	r3, r3, #10
 800322a:	4013      	ands	r3, r2
 800322c:	d100      	bne.n	8003230 <HAL_RCC_OscConfig+0x58>
 800322e:	e071      	b.n	8003314 <HAL_RCC_OscConfig+0x13c>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d000      	beq.n	800323a <HAL_RCC_OscConfig+0x62>
 8003238:	e06c      	b.n	8003314 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	f000 fb4c 	bl	80038d8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d107      	bne.n	8003258 <HAL_RCC_OscConfig+0x80>
 8003248:	4bb1      	ldr	r3, [pc, #708]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	4bb0      	ldr	r3, [pc, #704]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 800324e:	2180      	movs	r1, #128	; 0x80
 8003250:	0249      	lsls	r1, r1, #9
 8003252:	430a      	orrs	r2, r1
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	e02f      	b.n	80032b8 <HAL_RCC_OscConfig+0xe0>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10c      	bne.n	800327a <HAL_RCC_OscConfig+0xa2>
 8003260:	4bab      	ldr	r3, [pc, #684]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	4baa      	ldr	r3, [pc, #680]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 8003266:	49ab      	ldr	r1, [pc, #684]	; (8003514 <HAL_RCC_OscConfig+0x33c>)
 8003268:	400a      	ands	r2, r1
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	4ba8      	ldr	r3, [pc, #672]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	4ba7      	ldr	r3, [pc, #668]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 8003272:	49a9      	ldr	r1, [pc, #676]	; (8003518 <HAL_RCC_OscConfig+0x340>)
 8003274:	400a      	ands	r2, r1
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	e01e      	b.n	80032b8 <HAL_RCC_OscConfig+0xe0>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2b05      	cmp	r3, #5
 8003280:	d10e      	bne.n	80032a0 <HAL_RCC_OscConfig+0xc8>
 8003282:	4ba3      	ldr	r3, [pc, #652]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	4ba2      	ldr	r3, [pc, #648]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 8003288:	2180      	movs	r1, #128	; 0x80
 800328a:	02c9      	lsls	r1, r1, #11
 800328c:	430a      	orrs	r2, r1
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	4b9f      	ldr	r3, [pc, #636]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	4b9e      	ldr	r3, [pc, #632]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 8003296:	2180      	movs	r1, #128	; 0x80
 8003298:	0249      	lsls	r1, r1, #9
 800329a:	430a      	orrs	r2, r1
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	e00b      	b.n	80032b8 <HAL_RCC_OscConfig+0xe0>
 80032a0:	4b9b      	ldr	r3, [pc, #620]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	4b9a      	ldr	r3, [pc, #616]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 80032a6:	499b      	ldr	r1, [pc, #620]	; (8003514 <HAL_RCC_OscConfig+0x33c>)
 80032a8:	400a      	ands	r2, r1
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	4b98      	ldr	r3, [pc, #608]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	4b97      	ldr	r3, [pc, #604]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 80032b2:	4999      	ldr	r1, [pc, #612]	; (8003518 <HAL_RCC_OscConfig+0x340>)
 80032b4:	400a      	ands	r2, r1
 80032b6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d014      	beq.n	80032ea <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c0:	f7fd ffa4 	bl	800120c <HAL_GetTick>
 80032c4:	0003      	movs	r3, r0
 80032c6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032ca:	f7fd ff9f 	bl	800120c <HAL_GetTick>
 80032ce:	0002      	movs	r2, r0
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b64      	cmp	r3, #100	; 0x64
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e2fd      	b.n	80038d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032dc:	4b8c      	ldr	r3, [pc, #560]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	2380      	movs	r3, #128	; 0x80
 80032e2:	029b      	lsls	r3, r3, #10
 80032e4:	4013      	ands	r3, r2
 80032e6:	d0f0      	beq.n	80032ca <HAL_RCC_OscConfig+0xf2>
 80032e8:	e015      	b.n	8003316 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ea:	f7fd ff8f 	bl	800120c <HAL_GetTick>
 80032ee:	0003      	movs	r3, r0
 80032f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032f4:	f7fd ff8a 	bl	800120c <HAL_GetTick>
 80032f8:	0002      	movs	r2, r0
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b64      	cmp	r3, #100	; 0x64
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e2e8      	b.n	80038d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003306:	4b82      	ldr	r3, [pc, #520]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	2380      	movs	r3, #128	; 0x80
 800330c:	029b      	lsls	r3, r3, #10
 800330e:	4013      	ands	r3, r2
 8003310:	d1f0      	bne.n	80032f4 <HAL_RCC_OscConfig+0x11c>
 8003312:	e000      	b.n	8003316 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003314:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2202      	movs	r2, #2
 800331c:	4013      	ands	r3, r2
 800331e:	d100      	bne.n	8003322 <HAL_RCC_OscConfig+0x14a>
 8003320:	e06c      	b.n	80033fc <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003322:	4b7b      	ldr	r3, [pc, #492]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	220c      	movs	r2, #12
 8003328:	4013      	ands	r3, r2
 800332a:	d00e      	beq.n	800334a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800332c:	4b78      	ldr	r3, [pc, #480]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	220c      	movs	r2, #12
 8003332:	4013      	ands	r3, r2
 8003334:	2b08      	cmp	r3, #8
 8003336:	d11f      	bne.n	8003378 <HAL_RCC_OscConfig+0x1a0>
 8003338:	4b75      	ldr	r3, [pc, #468]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	23c0      	movs	r3, #192	; 0xc0
 800333e:	025b      	lsls	r3, r3, #9
 8003340:	401a      	ands	r2, r3
 8003342:	2380      	movs	r3, #128	; 0x80
 8003344:	021b      	lsls	r3, r3, #8
 8003346:	429a      	cmp	r2, r3
 8003348:	d116      	bne.n	8003378 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800334a:	4b71      	ldr	r3, [pc, #452]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2202      	movs	r2, #2
 8003350:	4013      	ands	r3, r2
 8003352:	d005      	beq.n	8003360 <HAL_RCC_OscConfig+0x188>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d001      	beq.n	8003360 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e2bb      	b.n	80038d8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003360:	4b6b      	ldr	r3, [pc, #428]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	22f8      	movs	r2, #248	; 0xf8
 8003366:	4393      	bics	r3, r2
 8003368:	0019      	movs	r1, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	00da      	lsls	r2, r3, #3
 8003370:	4b67      	ldr	r3, [pc, #412]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 8003372:	430a      	orrs	r2, r1
 8003374:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003376:	e041      	b.n	80033fc <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d024      	beq.n	80033ca <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003380:	4b63      	ldr	r3, [pc, #396]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	4b62      	ldr	r3, [pc, #392]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 8003386:	2101      	movs	r1, #1
 8003388:	430a      	orrs	r2, r1
 800338a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800338c:	f7fd ff3e 	bl	800120c <HAL_GetTick>
 8003390:	0003      	movs	r3, r0
 8003392:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003394:	e008      	b.n	80033a8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003396:	f7fd ff39 	bl	800120c <HAL_GetTick>
 800339a:	0002      	movs	r2, r0
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d901      	bls.n	80033a8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e297      	b.n	80038d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a8:	4b59      	ldr	r3, [pc, #356]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2202      	movs	r2, #2
 80033ae:	4013      	ands	r3, r2
 80033b0:	d0f1      	beq.n	8003396 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b2:	4b57      	ldr	r3, [pc, #348]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	22f8      	movs	r2, #248	; 0xf8
 80033b8:	4393      	bics	r3, r2
 80033ba:	0019      	movs	r1, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	00da      	lsls	r2, r3, #3
 80033c2:	4b53      	ldr	r3, [pc, #332]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 80033c4:	430a      	orrs	r2, r1
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	e018      	b.n	80033fc <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033ca:	4b51      	ldr	r3, [pc, #324]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	4b50      	ldr	r3, [pc, #320]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 80033d0:	2101      	movs	r1, #1
 80033d2:	438a      	bics	r2, r1
 80033d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d6:	f7fd ff19 	bl	800120c <HAL_GetTick>
 80033da:	0003      	movs	r3, r0
 80033dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033e0:	f7fd ff14 	bl	800120c <HAL_GetTick>
 80033e4:	0002      	movs	r2, r0
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e272      	b.n	80038d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033f2:	4b47      	ldr	r3, [pc, #284]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2202      	movs	r2, #2
 80033f8:	4013      	ands	r3, r2
 80033fa:	d1f1      	bne.n	80033e0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2208      	movs	r2, #8
 8003402:	4013      	ands	r3, r2
 8003404:	d036      	beq.n	8003474 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d019      	beq.n	8003442 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800340e:	4b40      	ldr	r3, [pc, #256]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 8003410:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003412:	4b3f      	ldr	r3, [pc, #252]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 8003414:	2101      	movs	r1, #1
 8003416:	430a      	orrs	r2, r1
 8003418:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800341a:	f7fd fef7 	bl	800120c <HAL_GetTick>
 800341e:	0003      	movs	r3, r0
 8003420:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003424:	f7fd fef2 	bl	800120c <HAL_GetTick>
 8003428:	0002      	movs	r2, r0
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e250      	b.n	80038d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003436:	4b36      	ldr	r3, [pc, #216]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	2202      	movs	r2, #2
 800343c:	4013      	ands	r3, r2
 800343e:	d0f1      	beq.n	8003424 <HAL_RCC_OscConfig+0x24c>
 8003440:	e018      	b.n	8003474 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003442:	4b33      	ldr	r3, [pc, #204]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 8003444:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003446:	4b32      	ldr	r3, [pc, #200]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 8003448:	2101      	movs	r1, #1
 800344a:	438a      	bics	r2, r1
 800344c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800344e:	f7fd fedd 	bl	800120c <HAL_GetTick>
 8003452:	0003      	movs	r3, r0
 8003454:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003458:	f7fd fed8 	bl	800120c <HAL_GetTick>
 800345c:	0002      	movs	r2, r0
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e236      	b.n	80038d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800346a:	4b29      	ldr	r3, [pc, #164]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	2202      	movs	r2, #2
 8003470:	4013      	ands	r3, r2
 8003472:	d1f1      	bne.n	8003458 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2204      	movs	r2, #4
 800347a:	4013      	ands	r3, r2
 800347c:	d100      	bne.n	8003480 <HAL_RCC_OscConfig+0x2a8>
 800347e:	e0b5      	b.n	80035ec <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003480:	201f      	movs	r0, #31
 8003482:	183b      	adds	r3, r7, r0
 8003484:	2200      	movs	r2, #0
 8003486:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003488:	4b21      	ldr	r3, [pc, #132]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 800348a:	69da      	ldr	r2, [r3, #28]
 800348c:	2380      	movs	r3, #128	; 0x80
 800348e:	055b      	lsls	r3, r3, #21
 8003490:	4013      	ands	r3, r2
 8003492:	d110      	bne.n	80034b6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003494:	4b1e      	ldr	r3, [pc, #120]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 8003496:	69da      	ldr	r2, [r3, #28]
 8003498:	4b1d      	ldr	r3, [pc, #116]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 800349a:	2180      	movs	r1, #128	; 0x80
 800349c:	0549      	lsls	r1, r1, #21
 800349e:	430a      	orrs	r2, r1
 80034a0:	61da      	str	r2, [r3, #28]
 80034a2:	4b1b      	ldr	r3, [pc, #108]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 80034a4:	69da      	ldr	r2, [r3, #28]
 80034a6:	2380      	movs	r3, #128	; 0x80
 80034a8:	055b      	lsls	r3, r3, #21
 80034aa:	4013      	ands	r3, r2
 80034ac:	60fb      	str	r3, [r7, #12]
 80034ae:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80034b0:	183b      	adds	r3, r7, r0
 80034b2:	2201      	movs	r2, #1
 80034b4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b6:	4b19      	ldr	r3, [pc, #100]	; (800351c <HAL_RCC_OscConfig+0x344>)
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	2380      	movs	r3, #128	; 0x80
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	4013      	ands	r3, r2
 80034c0:	d11a      	bne.n	80034f8 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034c2:	4b16      	ldr	r3, [pc, #88]	; (800351c <HAL_RCC_OscConfig+0x344>)
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	4b15      	ldr	r3, [pc, #84]	; (800351c <HAL_RCC_OscConfig+0x344>)
 80034c8:	2180      	movs	r1, #128	; 0x80
 80034ca:	0049      	lsls	r1, r1, #1
 80034cc:	430a      	orrs	r2, r1
 80034ce:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034d0:	f7fd fe9c 	bl	800120c <HAL_GetTick>
 80034d4:	0003      	movs	r3, r0
 80034d6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d8:	e008      	b.n	80034ec <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034da:	f7fd fe97 	bl	800120c <HAL_GetTick>
 80034de:	0002      	movs	r2, r0
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b64      	cmp	r3, #100	; 0x64
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e1f5      	b.n	80038d8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ec:	4b0b      	ldr	r3, [pc, #44]	; (800351c <HAL_RCC_OscConfig+0x344>)
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	2380      	movs	r3, #128	; 0x80
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	4013      	ands	r3, r2
 80034f6:	d0f0      	beq.n	80034da <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d10f      	bne.n	8003520 <HAL_RCC_OscConfig+0x348>
 8003500:	4b03      	ldr	r3, [pc, #12]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 8003502:	6a1a      	ldr	r2, [r3, #32]
 8003504:	4b02      	ldr	r3, [pc, #8]	; (8003510 <HAL_RCC_OscConfig+0x338>)
 8003506:	2101      	movs	r1, #1
 8003508:	430a      	orrs	r2, r1
 800350a:	621a      	str	r2, [r3, #32]
 800350c:	e036      	b.n	800357c <HAL_RCC_OscConfig+0x3a4>
 800350e:	46c0      	nop			; (mov r8, r8)
 8003510:	40021000 	.word	0x40021000
 8003514:	fffeffff 	.word	0xfffeffff
 8003518:	fffbffff 	.word	0xfffbffff
 800351c:	40007000 	.word	0x40007000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10c      	bne.n	8003542 <HAL_RCC_OscConfig+0x36a>
 8003528:	4bca      	ldr	r3, [pc, #808]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 800352a:	6a1a      	ldr	r2, [r3, #32]
 800352c:	4bc9      	ldr	r3, [pc, #804]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 800352e:	2101      	movs	r1, #1
 8003530:	438a      	bics	r2, r1
 8003532:	621a      	str	r2, [r3, #32]
 8003534:	4bc7      	ldr	r3, [pc, #796]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 8003536:	6a1a      	ldr	r2, [r3, #32]
 8003538:	4bc6      	ldr	r3, [pc, #792]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 800353a:	2104      	movs	r1, #4
 800353c:	438a      	bics	r2, r1
 800353e:	621a      	str	r2, [r3, #32]
 8003540:	e01c      	b.n	800357c <HAL_RCC_OscConfig+0x3a4>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	2b05      	cmp	r3, #5
 8003548:	d10c      	bne.n	8003564 <HAL_RCC_OscConfig+0x38c>
 800354a:	4bc2      	ldr	r3, [pc, #776]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 800354c:	6a1a      	ldr	r2, [r3, #32]
 800354e:	4bc1      	ldr	r3, [pc, #772]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 8003550:	2104      	movs	r1, #4
 8003552:	430a      	orrs	r2, r1
 8003554:	621a      	str	r2, [r3, #32]
 8003556:	4bbf      	ldr	r3, [pc, #764]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 8003558:	6a1a      	ldr	r2, [r3, #32]
 800355a:	4bbe      	ldr	r3, [pc, #760]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 800355c:	2101      	movs	r1, #1
 800355e:	430a      	orrs	r2, r1
 8003560:	621a      	str	r2, [r3, #32]
 8003562:	e00b      	b.n	800357c <HAL_RCC_OscConfig+0x3a4>
 8003564:	4bbb      	ldr	r3, [pc, #748]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 8003566:	6a1a      	ldr	r2, [r3, #32]
 8003568:	4bba      	ldr	r3, [pc, #744]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 800356a:	2101      	movs	r1, #1
 800356c:	438a      	bics	r2, r1
 800356e:	621a      	str	r2, [r3, #32]
 8003570:	4bb8      	ldr	r3, [pc, #736]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 8003572:	6a1a      	ldr	r2, [r3, #32]
 8003574:	4bb7      	ldr	r3, [pc, #732]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 8003576:	2104      	movs	r1, #4
 8003578:	438a      	bics	r2, r1
 800357a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d014      	beq.n	80035ae <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003584:	f7fd fe42 	bl	800120c <HAL_GetTick>
 8003588:	0003      	movs	r3, r0
 800358a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800358c:	e009      	b.n	80035a2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800358e:	f7fd fe3d 	bl	800120c <HAL_GetTick>
 8003592:	0002      	movs	r2, r0
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	4aaf      	ldr	r2, [pc, #700]	; (8003858 <HAL_RCC_OscConfig+0x680>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e19a      	b.n	80038d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a2:	4bac      	ldr	r3, [pc, #688]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	2202      	movs	r2, #2
 80035a8:	4013      	ands	r3, r2
 80035aa:	d0f0      	beq.n	800358e <HAL_RCC_OscConfig+0x3b6>
 80035ac:	e013      	b.n	80035d6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ae:	f7fd fe2d 	bl	800120c <HAL_GetTick>
 80035b2:	0003      	movs	r3, r0
 80035b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035b6:	e009      	b.n	80035cc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035b8:	f7fd fe28 	bl	800120c <HAL_GetTick>
 80035bc:	0002      	movs	r2, r0
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	4aa5      	ldr	r2, [pc, #660]	; (8003858 <HAL_RCC_OscConfig+0x680>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d901      	bls.n	80035cc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e185      	b.n	80038d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035cc:	4ba1      	ldr	r3, [pc, #644]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	2202      	movs	r2, #2
 80035d2:	4013      	ands	r3, r2
 80035d4:	d1f0      	bne.n	80035b8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035d6:	231f      	movs	r3, #31
 80035d8:	18fb      	adds	r3, r7, r3
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d105      	bne.n	80035ec <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035e0:	4b9c      	ldr	r3, [pc, #624]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 80035e2:	69da      	ldr	r2, [r3, #28]
 80035e4:	4b9b      	ldr	r3, [pc, #620]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 80035e6:	499d      	ldr	r1, [pc, #628]	; (800385c <HAL_RCC_OscConfig+0x684>)
 80035e8:	400a      	ands	r2, r1
 80035ea:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2210      	movs	r2, #16
 80035f2:	4013      	ands	r3, r2
 80035f4:	d063      	beq.n	80036be <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d12a      	bne.n	8003654 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80035fe:	4b95      	ldr	r3, [pc, #596]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 8003600:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003602:	4b94      	ldr	r3, [pc, #592]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 8003604:	2104      	movs	r1, #4
 8003606:	430a      	orrs	r2, r1
 8003608:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800360a:	4b92      	ldr	r3, [pc, #584]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 800360c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800360e:	4b91      	ldr	r3, [pc, #580]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 8003610:	2101      	movs	r1, #1
 8003612:	430a      	orrs	r2, r1
 8003614:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003616:	f7fd fdf9 	bl	800120c <HAL_GetTick>
 800361a:	0003      	movs	r3, r0
 800361c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003620:	f7fd fdf4 	bl	800120c <HAL_GetTick>
 8003624:	0002      	movs	r2, r0
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e152      	b.n	80038d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003632:	4b88      	ldr	r3, [pc, #544]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 8003634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003636:	2202      	movs	r2, #2
 8003638:	4013      	ands	r3, r2
 800363a:	d0f1      	beq.n	8003620 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800363c:	4b85      	ldr	r3, [pc, #532]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 800363e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003640:	22f8      	movs	r2, #248	; 0xf8
 8003642:	4393      	bics	r3, r2
 8003644:	0019      	movs	r1, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	00da      	lsls	r2, r3, #3
 800364c:	4b81      	ldr	r3, [pc, #516]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 800364e:	430a      	orrs	r2, r1
 8003650:	635a      	str	r2, [r3, #52]	; 0x34
 8003652:	e034      	b.n	80036be <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	3305      	adds	r3, #5
 800365a:	d111      	bne.n	8003680 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800365c:	4b7d      	ldr	r3, [pc, #500]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 800365e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003660:	4b7c      	ldr	r3, [pc, #496]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 8003662:	2104      	movs	r1, #4
 8003664:	438a      	bics	r2, r1
 8003666:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003668:	4b7a      	ldr	r3, [pc, #488]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 800366a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800366c:	22f8      	movs	r2, #248	; 0xf8
 800366e:	4393      	bics	r3, r2
 8003670:	0019      	movs	r1, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	00da      	lsls	r2, r3, #3
 8003678:	4b76      	ldr	r3, [pc, #472]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 800367a:	430a      	orrs	r2, r1
 800367c:	635a      	str	r2, [r3, #52]	; 0x34
 800367e:	e01e      	b.n	80036be <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003680:	4b74      	ldr	r3, [pc, #464]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 8003682:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003684:	4b73      	ldr	r3, [pc, #460]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 8003686:	2104      	movs	r1, #4
 8003688:	430a      	orrs	r2, r1
 800368a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800368c:	4b71      	ldr	r3, [pc, #452]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 800368e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003690:	4b70      	ldr	r3, [pc, #448]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 8003692:	2101      	movs	r1, #1
 8003694:	438a      	bics	r2, r1
 8003696:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003698:	f7fd fdb8 	bl	800120c <HAL_GetTick>
 800369c:	0003      	movs	r3, r0
 800369e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80036a0:	e008      	b.n	80036b4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80036a2:	f7fd fdb3 	bl	800120c <HAL_GetTick>
 80036a6:	0002      	movs	r2, r0
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e111      	b.n	80038d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80036b4:	4b67      	ldr	r3, [pc, #412]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 80036b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036b8:	2202      	movs	r2, #2
 80036ba:	4013      	ands	r3, r2
 80036bc:	d1f1      	bne.n	80036a2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2220      	movs	r2, #32
 80036c4:	4013      	ands	r3, r2
 80036c6:	d05c      	beq.n	8003782 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80036c8:	4b62      	ldr	r3, [pc, #392]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	220c      	movs	r2, #12
 80036ce:	4013      	ands	r3, r2
 80036d0:	2b0c      	cmp	r3, #12
 80036d2:	d00e      	beq.n	80036f2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80036d4:	4b5f      	ldr	r3, [pc, #380]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	220c      	movs	r2, #12
 80036da:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80036dc:	2b08      	cmp	r3, #8
 80036de:	d114      	bne.n	800370a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80036e0:	4b5c      	ldr	r3, [pc, #368]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	23c0      	movs	r3, #192	; 0xc0
 80036e6:	025b      	lsls	r3, r3, #9
 80036e8:	401a      	ands	r2, r3
 80036ea:	23c0      	movs	r3, #192	; 0xc0
 80036ec:	025b      	lsls	r3, r3, #9
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d10b      	bne.n	800370a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80036f2:	4b58      	ldr	r3, [pc, #352]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 80036f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036f6:	2380      	movs	r3, #128	; 0x80
 80036f8:	025b      	lsls	r3, r3, #9
 80036fa:	4013      	ands	r3, r2
 80036fc:	d040      	beq.n	8003780 <HAL_RCC_OscConfig+0x5a8>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d03c      	beq.n	8003780 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e0e6      	b.n	80038d8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d01b      	beq.n	800374a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003712:	4b50      	ldr	r3, [pc, #320]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 8003714:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003716:	4b4f      	ldr	r3, [pc, #316]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 8003718:	2180      	movs	r1, #128	; 0x80
 800371a:	0249      	lsls	r1, r1, #9
 800371c:	430a      	orrs	r2, r1
 800371e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003720:	f7fd fd74 	bl	800120c <HAL_GetTick>
 8003724:	0003      	movs	r3, r0
 8003726:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003728:	e008      	b.n	800373c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800372a:	f7fd fd6f 	bl	800120c <HAL_GetTick>
 800372e:	0002      	movs	r2, r0
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e0cd      	b.n	80038d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800373c:	4b45      	ldr	r3, [pc, #276]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 800373e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003740:	2380      	movs	r3, #128	; 0x80
 8003742:	025b      	lsls	r3, r3, #9
 8003744:	4013      	ands	r3, r2
 8003746:	d0f0      	beq.n	800372a <HAL_RCC_OscConfig+0x552>
 8003748:	e01b      	b.n	8003782 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800374a:	4b42      	ldr	r3, [pc, #264]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 800374c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800374e:	4b41      	ldr	r3, [pc, #260]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 8003750:	4943      	ldr	r1, [pc, #268]	; (8003860 <HAL_RCC_OscConfig+0x688>)
 8003752:	400a      	ands	r2, r1
 8003754:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003756:	f7fd fd59 	bl	800120c <HAL_GetTick>
 800375a:	0003      	movs	r3, r0
 800375c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003760:	f7fd fd54 	bl	800120c <HAL_GetTick>
 8003764:	0002      	movs	r2, r0
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e0b2      	b.n	80038d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003772:	4b38      	ldr	r3, [pc, #224]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 8003774:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003776:	2380      	movs	r3, #128	; 0x80
 8003778:	025b      	lsls	r3, r3, #9
 800377a:	4013      	ands	r3, r2
 800377c:	d1f0      	bne.n	8003760 <HAL_RCC_OscConfig+0x588>
 800377e:	e000      	b.n	8003782 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003780:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	2b00      	cmp	r3, #0
 8003788:	d100      	bne.n	800378c <HAL_RCC_OscConfig+0x5b4>
 800378a:	e0a4      	b.n	80038d6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800378c:	4b31      	ldr	r3, [pc, #196]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	220c      	movs	r2, #12
 8003792:	4013      	ands	r3, r2
 8003794:	2b08      	cmp	r3, #8
 8003796:	d100      	bne.n	800379a <HAL_RCC_OscConfig+0x5c2>
 8003798:	e078      	b.n	800388c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d14c      	bne.n	800383c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a2:	4b2c      	ldr	r3, [pc, #176]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	4b2b      	ldr	r3, [pc, #172]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 80037a8:	492e      	ldr	r1, [pc, #184]	; (8003864 <HAL_RCC_OscConfig+0x68c>)
 80037aa:	400a      	ands	r2, r1
 80037ac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ae:	f7fd fd2d 	bl	800120c <HAL_GetTick>
 80037b2:	0003      	movs	r3, r0
 80037b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037b8:	f7fd fd28 	bl	800120c <HAL_GetTick>
 80037bc:	0002      	movs	r2, r0
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e086      	b.n	80038d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037ca:	4b22      	ldr	r3, [pc, #136]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	2380      	movs	r3, #128	; 0x80
 80037d0:	049b      	lsls	r3, r3, #18
 80037d2:	4013      	ands	r3, r2
 80037d4:	d1f0      	bne.n	80037b8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037d6:	4b1f      	ldr	r3, [pc, #124]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 80037d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037da:	220f      	movs	r2, #15
 80037dc:	4393      	bics	r3, r2
 80037de:	0019      	movs	r1, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037e4:	4b1b      	ldr	r3, [pc, #108]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 80037e6:	430a      	orrs	r2, r1
 80037e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80037ea:	4b1a      	ldr	r3, [pc, #104]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	4a1e      	ldr	r2, [pc, #120]	; (8003868 <HAL_RCC_OscConfig+0x690>)
 80037f0:	4013      	ands	r3, r2
 80037f2:	0019      	movs	r1, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fc:	431a      	orrs	r2, r3
 80037fe:	4b15      	ldr	r3, [pc, #84]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 8003800:	430a      	orrs	r2, r1
 8003802:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003804:	4b13      	ldr	r3, [pc, #76]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	4b12      	ldr	r3, [pc, #72]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 800380a:	2180      	movs	r1, #128	; 0x80
 800380c:	0449      	lsls	r1, r1, #17
 800380e:	430a      	orrs	r2, r1
 8003810:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003812:	f7fd fcfb 	bl	800120c <HAL_GetTick>
 8003816:	0003      	movs	r3, r0
 8003818:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800381c:	f7fd fcf6 	bl	800120c <HAL_GetTick>
 8003820:	0002      	movs	r2, r0
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e054      	b.n	80038d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800382e:	4b09      	ldr	r3, [pc, #36]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	2380      	movs	r3, #128	; 0x80
 8003834:	049b      	lsls	r3, r3, #18
 8003836:	4013      	ands	r3, r2
 8003838:	d0f0      	beq.n	800381c <HAL_RCC_OscConfig+0x644>
 800383a:	e04c      	b.n	80038d6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800383c:	4b05      	ldr	r3, [pc, #20]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	4b04      	ldr	r3, [pc, #16]	; (8003854 <HAL_RCC_OscConfig+0x67c>)
 8003842:	4908      	ldr	r1, [pc, #32]	; (8003864 <HAL_RCC_OscConfig+0x68c>)
 8003844:	400a      	ands	r2, r1
 8003846:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003848:	f7fd fce0 	bl	800120c <HAL_GetTick>
 800384c:	0003      	movs	r3, r0
 800384e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003850:	e015      	b.n	800387e <HAL_RCC_OscConfig+0x6a6>
 8003852:	46c0      	nop			; (mov r8, r8)
 8003854:	40021000 	.word	0x40021000
 8003858:	00001388 	.word	0x00001388
 800385c:	efffffff 	.word	0xefffffff
 8003860:	fffeffff 	.word	0xfffeffff
 8003864:	feffffff 	.word	0xfeffffff
 8003868:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800386c:	f7fd fcce 	bl	800120c <HAL_GetTick>
 8003870:	0002      	movs	r2, r0
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e02c      	b.n	80038d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800387e:	4b18      	ldr	r3, [pc, #96]	; (80038e0 <HAL_RCC_OscConfig+0x708>)
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	2380      	movs	r3, #128	; 0x80
 8003884:	049b      	lsls	r3, r3, #18
 8003886:	4013      	ands	r3, r2
 8003888:	d1f0      	bne.n	800386c <HAL_RCC_OscConfig+0x694>
 800388a:	e024      	b.n	80038d6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	2b01      	cmp	r3, #1
 8003892:	d101      	bne.n	8003898 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e01f      	b.n	80038d8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003898:	4b11      	ldr	r3, [pc, #68]	; (80038e0 <HAL_RCC_OscConfig+0x708>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800389e:	4b10      	ldr	r3, [pc, #64]	; (80038e0 <HAL_RCC_OscConfig+0x708>)
 80038a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	23c0      	movs	r3, #192	; 0xc0
 80038a8:	025b      	lsls	r3, r3, #9
 80038aa:	401a      	ands	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d10e      	bne.n	80038d2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	220f      	movs	r2, #15
 80038b8:	401a      	ands	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038be:	429a      	cmp	r2, r3
 80038c0:	d107      	bne.n	80038d2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	23f0      	movs	r3, #240	; 0xf0
 80038c6:	039b      	lsls	r3, r3, #14
 80038c8:	401a      	ands	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d001      	beq.n	80038d6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e000      	b.n	80038d8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	0018      	movs	r0, r3
 80038da:	46bd      	mov	sp, r7
 80038dc:	b008      	add	sp, #32
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40021000 	.word	0x40021000

080038e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e0bf      	b.n	8003a78 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038f8:	4b61      	ldr	r3, [pc, #388]	; (8003a80 <HAL_RCC_ClockConfig+0x19c>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2201      	movs	r2, #1
 80038fe:	4013      	ands	r3, r2
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d911      	bls.n	800392a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003906:	4b5e      	ldr	r3, [pc, #376]	; (8003a80 <HAL_RCC_ClockConfig+0x19c>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2201      	movs	r2, #1
 800390c:	4393      	bics	r3, r2
 800390e:	0019      	movs	r1, r3
 8003910:	4b5b      	ldr	r3, [pc, #364]	; (8003a80 <HAL_RCC_ClockConfig+0x19c>)
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003918:	4b59      	ldr	r3, [pc, #356]	; (8003a80 <HAL_RCC_ClockConfig+0x19c>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2201      	movs	r2, #1
 800391e:	4013      	ands	r3, r2
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	429a      	cmp	r2, r3
 8003924:	d001      	beq.n	800392a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e0a6      	b.n	8003a78 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2202      	movs	r2, #2
 8003930:	4013      	ands	r3, r2
 8003932:	d015      	beq.n	8003960 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2204      	movs	r2, #4
 800393a:	4013      	ands	r3, r2
 800393c:	d006      	beq.n	800394c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800393e:	4b51      	ldr	r3, [pc, #324]	; (8003a84 <HAL_RCC_ClockConfig+0x1a0>)
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	4b50      	ldr	r3, [pc, #320]	; (8003a84 <HAL_RCC_ClockConfig+0x1a0>)
 8003944:	21e0      	movs	r1, #224	; 0xe0
 8003946:	00c9      	lsls	r1, r1, #3
 8003948:	430a      	orrs	r2, r1
 800394a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800394c:	4b4d      	ldr	r3, [pc, #308]	; (8003a84 <HAL_RCC_ClockConfig+0x1a0>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	22f0      	movs	r2, #240	; 0xf0
 8003952:	4393      	bics	r3, r2
 8003954:	0019      	movs	r1, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689a      	ldr	r2, [r3, #8]
 800395a:	4b4a      	ldr	r3, [pc, #296]	; (8003a84 <HAL_RCC_ClockConfig+0x1a0>)
 800395c:	430a      	orrs	r2, r1
 800395e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2201      	movs	r2, #1
 8003966:	4013      	ands	r3, r2
 8003968:	d04c      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d107      	bne.n	8003982 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003972:	4b44      	ldr	r3, [pc, #272]	; (8003a84 <HAL_RCC_ClockConfig+0x1a0>)
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	2380      	movs	r3, #128	; 0x80
 8003978:	029b      	lsls	r3, r3, #10
 800397a:	4013      	ands	r3, r2
 800397c:	d120      	bne.n	80039c0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e07a      	b.n	8003a78 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2b02      	cmp	r3, #2
 8003988:	d107      	bne.n	800399a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800398a:	4b3e      	ldr	r3, [pc, #248]	; (8003a84 <HAL_RCC_ClockConfig+0x1a0>)
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	2380      	movs	r3, #128	; 0x80
 8003990:	049b      	lsls	r3, r3, #18
 8003992:	4013      	ands	r3, r2
 8003994:	d114      	bne.n	80039c0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e06e      	b.n	8003a78 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	2b03      	cmp	r3, #3
 80039a0:	d107      	bne.n	80039b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80039a2:	4b38      	ldr	r3, [pc, #224]	; (8003a84 <HAL_RCC_ClockConfig+0x1a0>)
 80039a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039a6:	2380      	movs	r3, #128	; 0x80
 80039a8:	025b      	lsls	r3, r3, #9
 80039aa:	4013      	ands	r3, r2
 80039ac:	d108      	bne.n	80039c0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e062      	b.n	8003a78 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b2:	4b34      	ldr	r3, [pc, #208]	; (8003a84 <HAL_RCC_ClockConfig+0x1a0>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2202      	movs	r2, #2
 80039b8:	4013      	ands	r3, r2
 80039ba:	d101      	bne.n	80039c0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e05b      	b.n	8003a78 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039c0:	4b30      	ldr	r3, [pc, #192]	; (8003a84 <HAL_RCC_ClockConfig+0x1a0>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	2203      	movs	r2, #3
 80039c6:	4393      	bics	r3, r2
 80039c8:	0019      	movs	r1, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	4b2d      	ldr	r3, [pc, #180]	; (8003a84 <HAL_RCC_ClockConfig+0x1a0>)
 80039d0:	430a      	orrs	r2, r1
 80039d2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039d4:	f7fd fc1a 	bl	800120c <HAL_GetTick>
 80039d8:	0003      	movs	r3, r0
 80039da:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039dc:	e009      	b.n	80039f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039de:	f7fd fc15 	bl	800120c <HAL_GetTick>
 80039e2:	0002      	movs	r2, r0
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	4a27      	ldr	r2, [pc, #156]	; (8003a88 <HAL_RCC_ClockConfig+0x1a4>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e042      	b.n	8003a78 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039f2:	4b24      	ldr	r3, [pc, #144]	; (8003a84 <HAL_RCC_ClockConfig+0x1a0>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	220c      	movs	r2, #12
 80039f8:	401a      	ands	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d1ec      	bne.n	80039de <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a04:	4b1e      	ldr	r3, [pc, #120]	; (8003a80 <HAL_RCC_ClockConfig+0x19c>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d211      	bcs.n	8003a36 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a12:	4b1b      	ldr	r3, [pc, #108]	; (8003a80 <HAL_RCC_ClockConfig+0x19c>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2201      	movs	r2, #1
 8003a18:	4393      	bics	r3, r2
 8003a1a:	0019      	movs	r1, r3
 8003a1c:	4b18      	ldr	r3, [pc, #96]	; (8003a80 <HAL_RCC_ClockConfig+0x19c>)
 8003a1e:	683a      	ldr	r2, [r7, #0]
 8003a20:	430a      	orrs	r2, r1
 8003a22:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a24:	4b16      	ldr	r3, [pc, #88]	; (8003a80 <HAL_RCC_ClockConfig+0x19c>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d001      	beq.n	8003a36 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e020      	b.n	8003a78 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2204      	movs	r2, #4
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	d009      	beq.n	8003a54 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003a40:	4b10      	ldr	r3, [pc, #64]	; (8003a84 <HAL_RCC_ClockConfig+0x1a0>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	4a11      	ldr	r2, [pc, #68]	; (8003a8c <HAL_RCC_ClockConfig+0x1a8>)
 8003a46:	4013      	ands	r3, r2
 8003a48:	0019      	movs	r1, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68da      	ldr	r2, [r3, #12]
 8003a4e:	4b0d      	ldr	r3, [pc, #52]	; (8003a84 <HAL_RCC_ClockConfig+0x1a0>)
 8003a50:	430a      	orrs	r2, r1
 8003a52:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a54:	f000 f820 	bl	8003a98 <HAL_RCC_GetSysClockFreq>
 8003a58:	0001      	movs	r1, r0
 8003a5a:	4b0a      	ldr	r3, [pc, #40]	; (8003a84 <HAL_RCC_ClockConfig+0x1a0>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	091b      	lsrs	r3, r3, #4
 8003a60:	220f      	movs	r2, #15
 8003a62:	4013      	ands	r3, r2
 8003a64:	4a0a      	ldr	r2, [pc, #40]	; (8003a90 <HAL_RCC_ClockConfig+0x1ac>)
 8003a66:	5cd3      	ldrb	r3, [r2, r3]
 8003a68:	000a      	movs	r2, r1
 8003a6a:	40da      	lsrs	r2, r3
 8003a6c:	4b09      	ldr	r3, [pc, #36]	; (8003a94 <HAL_RCC_ClockConfig+0x1b0>)
 8003a6e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003a70:	2003      	movs	r0, #3
 8003a72:	f7fd fa4d 	bl	8000f10 <HAL_InitTick>
  
  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	0018      	movs	r0, r3
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	b004      	add	sp, #16
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40022000 	.word	0x40022000
 8003a84:	40021000 	.word	0x40021000
 8003a88:	00001388 	.word	0x00001388
 8003a8c:	fffff8ff 	.word	0xfffff8ff
 8003a90:	0800885c 	.word	0x0800885c
 8003a94:	20000090 	.word	0x20000090

08003a98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a98:	b590      	push	{r4, r7, lr}
 8003a9a:	b08f      	sub	sp, #60	; 0x3c
 8003a9c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003a9e:	2314      	movs	r3, #20
 8003aa0:	18fb      	adds	r3, r7, r3
 8003aa2:	4a38      	ldr	r2, [pc, #224]	; (8003b84 <HAL_RCC_GetSysClockFreq+0xec>)
 8003aa4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003aa6:	c313      	stmia	r3!, {r0, r1, r4}
 8003aa8:	6812      	ldr	r2, [r2, #0]
 8003aaa:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003aac:	1d3b      	adds	r3, r7, #4
 8003aae:	4a36      	ldr	r2, [pc, #216]	; (8003b88 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003ab0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003ab2:	c313      	stmia	r3!, {r0, r1, r4}
 8003ab4:	6812      	ldr	r2, [r2, #0]
 8003ab6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003abc:	2300      	movs	r3, #0
 8003abe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003acc:	4b2f      	ldr	r3, [pc, #188]	; (8003b8c <HAL_RCC_GetSysClockFreq+0xf4>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad4:	220c      	movs	r2, #12
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	2b0c      	cmp	r3, #12
 8003ada:	d047      	beq.n	8003b6c <HAL_RCC_GetSysClockFreq+0xd4>
 8003adc:	d849      	bhi.n	8003b72 <HAL_RCC_GetSysClockFreq+0xda>
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	d002      	beq.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x50>
 8003ae2:	2b08      	cmp	r3, #8
 8003ae4:	d003      	beq.n	8003aee <HAL_RCC_GetSysClockFreq+0x56>
 8003ae6:	e044      	b.n	8003b72 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ae8:	4b29      	ldr	r3, [pc, #164]	; (8003b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003aea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003aec:	e044      	b.n	8003b78 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af0:	0c9b      	lsrs	r3, r3, #18
 8003af2:	220f      	movs	r2, #15
 8003af4:	4013      	ands	r3, r2
 8003af6:	2214      	movs	r2, #20
 8003af8:	18ba      	adds	r2, r7, r2
 8003afa:	5cd3      	ldrb	r3, [r2, r3]
 8003afc:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003afe:	4b23      	ldr	r3, [pc, #140]	; (8003b8c <HAL_RCC_GetSysClockFreq+0xf4>)
 8003b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b02:	220f      	movs	r2, #15
 8003b04:	4013      	ands	r3, r2
 8003b06:	1d3a      	adds	r2, r7, #4
 8003b08:	5cd3      	ldrb	r3, [r2, r3]
 8003b0a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003b0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b0e:	23c0      	movs	r3, #192	; 0xc0
 8003b10:	025b      	lsls	r3, r3, #9
 8003b12:	401a      	ands	r2, r3
 8003b14:	2380      	movs	r3, #128	; 0x80
 8003b16:	025b      	lsls	r3, r3, #9
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d109      	bne.n	8003b30 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b1e:	481c      	ldr	r0, [pc, #112]	; (8003b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b20:	f7fc fafc 	bl	800011c <__udivsi3>
 8003b24:	0003      	movs	r3, r0
 8003b26:	001a      	movs	r2, r3
 8003b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2a:	4353      	muls	r3, r2
 8003b2c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b2e:	e01a      	b.n	8003b66 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003b30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b32:	23c0      	movs	r3, #192	; 0xc0
 8003b34:	025b      	lsls	r3, r3, #9
 8003b36:	401a      	ands	r2, r3
 8003b38:	23c0      	movs	r3, #192	; 0xc0
 8003b3a:	025b      	lsls	r3, r3, #9
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d109      	bne.n	8003b54 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b42:	4814      	ldr	r0, [pc, #80]	; (8003b94 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003b44:	f7fc faea 	bl	800011c <__udivsi3>
 8003b48:	0003      	movs	r3, r0
 8003b4a:	001a      	movs	r2, r3
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	4353      	muls	r3, r2
 8003b50:	637b      	str	r3, [r7, #52]	; 0x34
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b56:	480e      	ldr	r0, [pc, #56]	; (8003b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b58:	f7fc fae0 	bl	800011c <__udivsi3>
 8003b5c:	0003      	movs	r3, r0
 8003b5e:	001a      	movs	r2, r3
 8003b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b62:	4353      	muls	r3, r2
 8003b64:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b68:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003b6a:	e005      	b.n	8003b78 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003b6c:	4b09      	ldr	r3, [pc, #36]	; (8003b94 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003b6e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003b70:	e002      	b.n	8003b78 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b72:	4b07      	ldr	r3, [pc, #28]	; (8003b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b74:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003b76:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003b7a:	0018      	movs	r0, r3
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	b00f      	add	sp, #60	; 0x3c
 8003b80:	bd90      	pop	{r4, r7, pc}
 8003b82:	46c0      	nop			; (mov r8, r8)
 8003b84:	08008824 	.word	0x08008824
 8003b88:	08008834 	.word	0x08008834
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	007a1200 	.word	0x007a1200
 8003b94:	02dc6c00 	.word	0x02dc6c00

08003b98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b9c:	4b02      	ldr	r3, [pc, #8]	; (8003ba8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
}
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	46c0      	nop			; (mov r8, r8)
 8003ba8:	20000090 	.word	0x20000090

08003bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003bb0:	f7ff fff2 	bl	8003b98 <HAL_RCC_GetHCLKFreq>
 8003bb4:	0001      	movs	r1, r0
 8003bb6:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	0a1b      	lsrs	r3, r3, #8
 8003bbc:	2207      	movs	r2, #7
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	4a04      	ldr	r2, [pc, #16]	; (8003bd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003bc2:	5cd3      	ldrb	r3, [r2, r3]
 8003bc4:	40d9      	lsrs	r1, r3
 8003bc6:	000b      	movs	r3, r1
}    
 8003bc8:	0018      	movs	r0, r3
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	46c0      	nop			; (mov r8, r8)
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	0800886c 	.word	0x0800886c

08003bd8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2207      	movs	r2, #7
 8003be6:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003be8:	4b0e      	ldr	r3, [pc, #56]	; (8003c24 <HAL_RCC_GetClockConfig+0x4c>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	2203      	movs	r2, #3
 8003bee:	401a      	ands	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003bf4:	4b0b      	ldr	r3, [pc, #44]	; (8003c24 <HAL_RCC_GetClockConfig+0x4c>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	22f0      	movs	r2, #240	; 0xf0
 8003bfa:	401a      	ands	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8003c00:	4b08      	ldr	r3, [pc, #32]	; (8003c24 <HAL_RCC_GetClockConfig+0x4c>)
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	23e0      	movs	r3, #224	; 0xe0
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	401a      	ands	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8003c0e:	4b06      	ldr	r3, [pc, #24]	; (8003c28 <HAL_RCC_GetClockConfig+0x50>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2201      	movs	r2, #1
 8003c14:	401a      	ands	r2, r3
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	601a      	str	r2, [r3, #0]
}
 8003c1a:	46c0      	nop			; (mov r8, r8)
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	b002      	add	sp, #8
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	46c0      	nop			; (mov r8, r8)
 8003c24:	40021000 	.word	0x40021000
 8003c28:	40022000 	.word	0x40022000

08003c2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	2380      	movs	r3, #128	; 0x80
 8003c42:	025b      	lsls	r3, r3, #9
 8003c44:	4013      	ands	r3, r2
 8003c46:	d100      	bne.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003c48:	e08e      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003c4a:	2017      	movs	r0, #23
 8003c4c:	183b      	adds	r3, r7, r0
 8003c4e:	2200      	movs	r2, #0
 8003c50:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c52:	4b6e      	ldr	r3, [pc, #440]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003c54:	69da      	ldr	r2, [r3, #28]
 8003c56:	2380      	movs	r3, #128	; 0x80
 8003c58:	055b      	lsls	r3, r3, #21
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	d110      	bne.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c5e:	4b6b      	ldr	r3, [pc, #428]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003c60:	69da      	ldr	r2, [r3, #28]
 8003c62:	4b6a      	ldr	r3, [pc, #424]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003c64:	2180      	movs	r1, #128	; 0x80
 8003c66:	0549      	lsls	r1, r1, #21
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	61da      	str	r2, [r3, #28]
 8003c6c:	4b67      	ldr	r3, [pc, #412]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003c6e:	69da      	ldr	r2, [r3, #28]
 8003c70:	2380      	movs	r3, #128	; 0x80
 8003c72:	055b      	lsls	r3, r3, #21
 8003c74:	4013      	ands	r3, r2
 8003c76:	60bb      	str	r3, [r7, #8]
 8003c78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c7a:	183b      	adds	r3, r7, r0
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c80:	4b63      	ldr	r3, [pc, #396]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	2380      	movs	r3, #128	; 0x80
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	4013      	ands	r3, r2
 8003c8a:	d11a      	bne.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c8c:	4b60      	ldr	r3, [pc, #384]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	4b5f      	ldr	r3, [pc, #380]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003c92:	2180      	movs	r1, #128	; 0x80
 8003c94:	0049      	lsls	r1, r1, #1
 8003c96:	430a      	orrs	r2, r1
 8003c98:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c9a:	f7fd fab7 	bl	800120c <HAL_GetTick>
 8003c9e:	0003      	movs	r3, r0
 8003ca0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ca4:	f7fd fab2 	bl	800120c <HAL_GetTick>
 8003ca8:	0002      	movs	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b64      	cmp	r3, #100	; 0x64
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e0a6      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb6:	4b56      	ldr	r3, [pc, #344]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	2380      	movs	r3, #128	; 0x80
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	d0f0      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cc2:	4b52      	ldr	r3, [pc, #328]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003cc4:	6a1a      	ldr	r2, [r3, #32]
 8003cc6:	23c0      	movs	r3, #192	; 0xc0
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4013      	ands	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d034      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	23c0      	movs	r3, #192	; 0xc0
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4013      	ands	r3, r2
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d02c      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ce4:	4b49      	ldr	r3, [pc, #292]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	4a4a      	ldr	r2, [pc, #296]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003cea:	4013      	ands	r3, r2
 8003cec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cee:	4b47      	ldr	r3, [pc, #284]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003cf0:	6a1a      	ldr	r2, [r3, #32]
 8003cf2:	4b46      	ldr	r3, [pc, #280]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003cf4:	2180      	movs	r1, #128	; 0x80
 8003cf6:	0249      	lsls	r1, r1, #9
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cfc:	4b43      	ldr	r3, [pc, #268]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003cfe:	6a1a      	ldr	r2, [r3, #32]
 8003d00:	4b42      	ldr	r3, [pc, #264]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003d02:	4945      	ldr	r1, [pc, #276]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8003d04:	400a      	ands	r2, r1
 8003d06:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d08:	4b40      	ldr	r3, [pc, #256]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2201      	movs	r2, #1
 8003d12:	4013      	ands	r3, r2
 8003d14:	d013      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d16:	f7fd fa79 	bl	800120c <HAL_GetTick>
 8003d1a:	0003      	movs	r3, r0
 8003d1c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d1e:	e009      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d20:	f7fd fa74 	bl	800120c <HAL_GetTick>
 8003d24:	0002      	movs	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	4a3c      	ldr	r2, [pc, #240]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e067      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d34:	4b35      	ldr	r3, [pc, #212]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	2202      	movs	r2, #2
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	d0f0      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d3e:	4b33      	ldr	r3, [pc, #204]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	4a34      	ldr	r2, [pc, #208]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003d44:	4013      	ands	r3, r2
 8003d46:	0019      	movs	r1, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685a      	ldr	r2, [r3, #4]
 8003d4c:	4b2f      	ldr	r3, [pc, #188]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d52:	2317      	movs	r3, #23
 8003d54:	18fb      	adds	r3, r7, r3
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d105      	bne.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d5c:	4b2b      	ldr	r3, [pc, #172]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003d5e:	69da      	ldr	r2, [r3, #28]
 8003d60:	4b2a      	ldr	r3, [pc, #168]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003d62:	492f      	ldr	r1, [pc, #188]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8003d64:	400a      	ands	r2, r1
 8003d66:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	4013      	ands	r3, r2
 8003d70:	d009      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d72:	4b26      	ldr	r3, [pc, #152]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	2203      	movs	r2, #3
 8003d78:	4393      	bics	r3, r2
 8003d7a:	0019      	movs	r1, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689a      	ldr	r2, [r3, #8]
 8003d80:	4b22      	ldr	r3, [pc, #136]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003d82:	430a      	orrs	r2, r1
 8003d84:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	d009      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d90:	4b1e      	ldr	r3, [pc, #120]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d94:	4a23      	ldr	r2, [pc, #140]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d96:	4013      	ands	r3, r2
 8003d98:	0019      	movs	r1, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68da      	ldr	r2, [r3, #12]
 8003d9e:	4b1b      	ldr	r3, [pc, #108]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003da0:	430a      	orrs	r2, r1
 8003da2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	2380      	movs	r3, #128	; 0x80
 8003daa:	02db      	lsls	r3, r3, #11
 8003dac:	4013      	ands	r3, r2
 8003dae:	d009      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003db0:	4b16      	ldr	r3, [pc, #88]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db4:	4a1c      	ldr	r2, [pc, #112]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003db6:	4013      	ands	r3, r2
 8003db8:	0019      	movs	r1, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	691a      	ldr	r2, [r3, #16]
 8003dbe:	4b13      	ldr	r3, [pc, #76]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	4013      	ands	r3, r2
 8003dcc:	d009      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dce:	4b0f      	ldr	r3, [pc, #60]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd2:	2210      	movs	r2, #16
 8003dd4:	4393      	bics	r3, r2
 8003dd6:	0019      	movs	r1, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	695a      	ldr	r2, [r3, #20]
 8003ddc:	4b0b      	ldr	r3, [pc, #44]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003dde:	430a      	orrs	r2, r1
 8003de0:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	2380      	movs	r3, #128	; 0x80
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	4013      	ands	r3, r2
 8003dec:	d009      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003dee:	4b07      	ldr	r3, [pc, #28]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df2:	2240      	movs	r2, #64	; 0x40
 8003df4:	4393      	bics	r3, r2
 8003df6:	0019      	movs	r1, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	699a      	ldr	r2, [r3, #24]
 8003dfc:	4b03      	ldr	r3, [pc, #12]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	0018      	movs	r0, r3
 8003e06:	46bd      	mov	sp, r7
 8003e08:	b006      	add	sp, #24
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	40007000 	.word	0x40007000
 8003e14:	fffffcff 	.word	0xfffffcff
 8003e18:	fffeffff 	.word	0xfffeffff
 8003e1c:	00001388 	.word	0x00001388
 8003e20:	efffffff 	.word	0xefffffff
 8003e24:	fffcffff 	.word	0xfffcffff
 8003e28:	fff3ffff 	.word	0xfff3ffff

08003e2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e042      	b.n	8003ec4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	223d      	movs	r2, #61	; 0x3d
 8003e42:	5c9b      	ldrb	r3, [r3, r2]
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d107      	bne.n	8003e5a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	223c      	movs	r2, #60	; 0x3c
 8003e4e:	2100      	movs	r1, #0
 8003e50:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	0018      	movs	r0, r3
 8003e56:	f000 f839 	bl	8003ecc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	223d      	movs	r2, #61	; 0x3d
 8003e5e:	2102      	movs	r1, #2
 8003e60:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	3304      	adds	r3, #4
 8003e6a:	0019      	movs	r1, r3
 8003e6c:	0010      	movs	r0, r2
 8003e6e:	f000 f9bd 	bl	80041ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2246      	movs	r2, #70	; 0x46
 8003e76:	2101      	movs	r1, #1
 8003e78:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	223e      	movs	r2, #62	; 0x3e
 8003e7e:	2101      	movs	r1, #1
 8003e80:	5499      	strb	r1, [r3, r2]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	223f      	movs	r2, #63	; 0x3f
 8003e86:	2101      	movs	r1, #1
 8003e88:	5499      	strb	r1, [r3, r2]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2240      	movs	r2, #64	; 0x40
 8003e8e:	2101      	movs	r1, #1
 8003e90:	5499      	strb	r1, [r3, r2]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2241      	movs	r2, #65	; 0x41
 8003e96:	2101      	movs	r1, #1
 8003e98:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2242      	movs	r2, #66	; 0x42
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	5499      	strb	r1, [r3, r2]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2243      	movs	r2, #67	; 0x43
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	5499      	strb	r1, [r3, r2]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2244      	movs	r2, #68	; 0x44
 8003eae:	2101      	movs	r1, #1
 8003eb0:	5499      	strb	r1, [r3, r2]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2245      	movs	r2, #69	; 0x45
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	223d      	movs	r2, #61	; 0x3d
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	b002      	add	sp, #8
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003ed4:	46c0      	nop			; (mov r8, r8)
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	b002      	add	sp, #8
 8003eda:	bd80      	pop	{r7, pc}

08003edc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	223d      	movs	r2, #61	; 0x3d
 8003ee8:	5c9b      	ldrb	r3, [r3, r2]
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d001      	beq.n	8003ef4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e03b      	b.n	8003f6c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	223d      	movs	r2, #61	; 0x3d
 8003ef8:	2102      	movs	r1, #2
 8003efa:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68da      	ldr	r2, [r3, #12]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2101      	movs	r1, #1
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a18      	ldr	r2, [pc, #96]	; (8003f74 <HAL_TIM_Base_Start_IT+0x98>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d00f      	beq.n	8003f36 <HAL_TIM_Base_Start_IT+0x5a>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	2380      	movs	r3, #128	; 0x80
 8003f1c:	05db      	lsls	r3, r3, #23
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d009      	beq.n	8003f36 <HAL_TIM_Base_Start_IT+0x5a>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a14      	ldr	r2, [pc, #80]	; (8003f78 <HAL_TIM_Base_Start_IT+0x9c>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d004      	beq.n	8003f36 <HAL_TIM_Base_Start_IT+0x5a>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a12      	ldr	r2, [pc, #72]	; (8003f7c <HAL_TIM_Base_Start_IT+0xa0>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d111      	bne.n	8003f5a <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	2207      	movs	r2, #7
 8003f3e:	4013      	ands	r3, r2
 8003f40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2b06      	cmp	r3, #6
 8003f46:	d010      	beq.n	8003f6a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2101      	movs	r1, #1
 8003f54:	430a      	orrs	r2, r1
 8003f56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f58:	e007      	b.n	8003f6a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2101      	movs	r1, #1
 8003f66:	430a      	orrs	r2, r1
 8003f68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	0018      	movs	r0, r3
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	b004      	add	sp, #16
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	40012c00 	.word	0x40012c00
 8003f78:	40000400 	.word	0x40000400
 8003f7c:	40014000 	.word	0x40014000

08003f80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	2202      	movs	r2, #2
 8003f90:	4013      	ands	r3, r2
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d124      	bne.n	8003fe0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	2202      	movs	r2, #2
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d11d      	bne.n	8003fe0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2203      	movs	r2, #3
 8003faa:	4252      	negs	r2, r2
 8003fac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	2203      	movs	r2, #3
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	d004      	beq.n	8003fca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	f000 f8fa 	bl	80041bc <HAL_TIM_IC_CaptureCallback>
 8003fc8:	e007      	b.n	8003fda <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	0018      	movs	r0, r3
 8003fce:	f000 f8ed 	bl	80041ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	f000 f8f9 	bl	80041cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	2204      	movs	r2, #4
 8003fe8:	4013      	ands	r3, r2
 8003fea:	2b04      	cmp	r3, #4
 8003fec:	d125      	bne.n	800403a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	2204      	movs	r2, #4
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	2b04      	cmp	r3, #4
 8003ffa:	d11e      	bne.n	800403a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2205      	movs	r2, #5
 8004002:	4252      	negs	r2, r2
 8004004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2202      	movs	r2, #2
 800400a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	699a      	ldr	r2, [r3, #24]
 8004012:	23c0      	movs	r3, #192	; 0xc0
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4013      	ands	r3, r2
 8004018:	d004      	beq.n	8004024 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	0018      	movs	r0, r3
 800401e:	f000 f8cd 	bl	80041bc <HAL_TIM_IC_CaptureCallback>
 8004022:	e007      	b.n	8004034 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	0018      	movs	r0, r3
 8004028:	f000 f8c0 	bl	80041ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	0018      	movs	r0, r3
 8004030:	f000 f8cc 	bl	80041cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	2208      	movs	r2, #8
 8004042:	4013      	ands	r3, r2
 8004044:	2b08      	cmp	r3, #8
 8004046:	d124      	bne.n	8004092 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	2208      	movs	r2, #8
 8004050:	4013      	ands	r3, r2
 8004052:	2b08      	cmp	r3, #8
 8004054:	d11d      	bne.n	8004092 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2209      	movs	r2, #9
 800405c:	4252      	negs	r2, r2
 800405e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2204      	movs	r2, #4
 8004064:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	69db      	ldr	r3, [r3, #28]
 800406c:	2203      	movs	r2, #3
 800406e:	4013      	ands	r3, r2
 8004070:	d004      	beq.n	800407c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	0018      	movs	r0, r3
 8004076:	f000 f8a1 	bl	80041bc <HAL_TIM_IC_CaptureCallback>
 800407a:	e007      	b.n	800408c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	0018      	movs	r0, r3
 8004080:	f000 f894 	bl	80041ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	0018      	movs	r0, r3
 8004088:	f000 f8a0 	bl	80041cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	2210      	movs	r2, #16
 800409a:	4013      	ands	r3, r2
 800409c:	2b10      	cmp	r3, #16
 800409e:	d125      	bne.n	80040ec <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	2210      	movs	r2, #16
 80040a8:	4013      	ands	r3, r2
 80040aa:	2b10      	cmp	r3, #16
 80040ac:	d11e      	bne.n	80040ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2211      	movs	r2, #17
 80040b4:	4252      	negs	r2, r2
 80040b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2208      	movs	r2, #8
 80040bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	69da      	ldr	r2, [r3, #28]
 80040c4:	23c0      	movs	r3, #192	; 0xc0
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4013      	ands	r3, r2
 80040ca:	d004      	beq.n	80040d6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	0018      	movs	r0, r3
 80040d0:	f000 f874 	bl	80041bc <HAL_TIM_IC_CaptureCallback>
 80040d4:	e007      	b.n	80040e6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	0018      	movs	r0, r3
 80040da:	f000 f867 	bl	80041ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	0018      	movs	r0, r3
 80040e2:	f000 f873 	bl	80041cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	2201      	movs	r2, #1
 80040f4:	4013      	ands	r3, r2
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d10f      	bne.n	800411a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	2201      	movs	r2, #1
 8004102:	4013      	ands	r3, r2
 8004104:	2b01      	cmp	r3, #1
 8004106:	d108      	bne.n	800411a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2202      	movs	r2, #2
 800410e:	4252      	negs	r2, r2
 8004110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	0018      	movs	r0, r3
 8004116:	f7fc fe1d 	bl	8000d54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	2280      	movs	r2, #128	; 0x80
 8004122:	4013      	ands	r3, r2
 8004124:	2b80      	cmp	r3, #128	; 0x80
 8004126:	d10f      	bne.n	8004148 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	2280      	movs	r2, #128	; 0x80
 8004130:	4013      	ands	r3, r2
 8004132:	2b80      	cmp	r3, #128	; 0x80
 8004134:	d108      	bne.n	8004148 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2281      	movs	r2, #129	; 0x81
 800413c:	4252      	negs	r2, r2
 800413e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	0018      	movs	r0, r3
 8004144:	f000 f8da 	bl	80042fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	2240      	movs	r2, #64	; 0x40
 8004150:	4013      	ands	r3, r2
 8004152:	2b40      	cmp	r3, #64	; 0x40
 8004154:	d10f      	bne.n	8004176 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	2240      	movs	r2, #64	; 0x40
 800415e:	4013      	ands	r3, r2
 8004160:	2b40      	cmp	r3, #64	; 0x40
 8004162:	d108      	bne.n	8004176 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2241      	movs	r2, #65	; 0x41
 800416a:	4252      	negs	r2, r2
 800416c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	0018      	movs	r0, r3
 8004172:	f000 f833 	bl	80041dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	2220      	movs	r2, #32
 800417e:	4013      	ands	r3, r2
 8004180:	2b20      	cmp	r3, #32
 8004182:	d10f      	bne.n	80041a4 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	2220      	movs	r2, #32
 800418c:	4013      	ands	r3, r2
 800418e:	2b20      	cmp	r3, #32
 8004190:	d108      	bne.n	80041a4 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2221      	movs	r2, #33	; 0x21
 8004198:	4252      	negs	r2, r2
 800419a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	0018      	movs	r0, r3
 80041a0:	f000 f8a4 	bl	80042ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041a4:	46c0      	nop			; (mov r8, r8)
 80041a6:	46bd      	mov	sp, r7
 80041a8:	b002      	add	sp, #8
 80041aa:	bd80      	pop	{r7, pc}

080041ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041b4:	46c0      	nop			; (mov r8, r8)
 80041b6:	46bd      	mov	sp, r7
 80041b8:	b002      	add	sp, #8
 80041ba:	bd80      	pop	{r7, pc}

080041bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041c4:	46c0      	nop			; (mov r8, r8)
 80041c6:	46bd      	mov	sp, r7
 80041c8:	b002      	add	sp, #8
 80041ca:	bd80      	pop	{r7, pc}

080041cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041d4:	46c0      	nop			; (mov r8, r8)
 80041d6:	46bd      	mov	sp, r7
 80041d8:	b002      	add	sp, #8
 80041da:	bd80      	pop	{r7, pc}

080041dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041e4:	46c0      	nop			; (mov r8, r8)
 80041e6:	46bd      	mov	sp, r7
 80041e8:	b002      	add	sp, #8
 80041ea:	bd80      	pop	{r7, pc}

080041ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a34      	ldr	r2, [pc, #208]	; (80042d0 <TIM_Base_SetConfig+0xe4>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d008      	beq.n	8004216 <TIM_Base_SetConfig+0x2a>
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	2380      	movs	r3, #128	; 0x80
 8004208:	05db      	lsls	r3, r3, #23
 800420a:	429a      	cmp	r2, r3
 800420c:	d003      	beq.n	8004216 <TIM_Base_SetConfig+0x2a>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a30      	ldr	r2, [pc, #192]	; (80042d4 <TIM_Base_SetConfig+0xe8>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d108      	bne.n	8004228 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2270      	movs	r2, #112	; 0x70
 800421a:	4393      	bics	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	4313      	orrs	r3, r2
 8004226:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a29      	ldr	r2, [pc, #164]	; (80042d0 <TIM_Base_SetConfig+0xe4>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d018      	beq.n	8004262 <TIM_Base_SetConfig+0x76>
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	2380      	movs	r3, #128	; 0x80
 8004234:	05db      	lsls	r3, r3, #23
 8004236:	429a      	cmp	r2, r3
 8004238:	d013      	beq.n	8004262 <TIM_Base_SetConfig+0x76>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a25      	ldr	r2, [pc, #148]	; (80042d4 <TIM_Base_SetConfig+0xe8>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d00f      	beq.n	8004262 <TIM_Base_SetConfig+0x76>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a24      	ldr	r2, [pc, #144]	; (80042d8 <TIM_Base_SetConfig+0xec>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d00b      	beq.n	8004262 <TIM_Base_SetConfig+0x76>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a23      	ldr	r2, [pc, #140]	; (80042dc <TIM_Base_SetConfig+0xf0>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d007      	beq.n	8004262 <TIM_Base_SetConfig+0x76>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a22      	ldr	r2, [pc, #136]	; (80042e0 <TIM_Base_SetConfig+0xf4>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d003      	beq.n	8004262 <TIM_Base_SetConfig+0x76>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a21      	ldr	r2, [pc, #132]	; (80042e4 <TIM_Base_SetConfig+0xf8>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d108      	bne.n	8004274 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	4a20      	ldr	r2, [pc, #128]	; (80042e8 <TIM_Base_SetConfig+0xfc>)
 8004266:	4013      	ands	r3, r2
 8004268:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	4313      	orrs	r3, r2
 8004272:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2280      	movs	r2, #128	; 0x80
 8004278:	4393      	bics	r3, r2
 800427a:	001a      	movs	r2, r3
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	4313      	orrs	r3, r2
 8004282:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	689a      	ldr	r2, [r3, #8]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a0c      	ldr	r2, [pc, #48]	; (80042d0 <TIM_Base_SetConfig+0xe4>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d00b      	beq.n	80042ba <TIM_Base_SetConfig+0xce>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a0d      	ldr	r2, [pc, #52]	; (80042dc <TIM_Base_SetConfig+0xf0>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d007      	beq.n	80042ba <TIM_Base_SetConfig+0xce>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a0c      	ldr	r2, [pc, #48]	; (80042e0 <TIM_Base_SetConfig+0xf4>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d003      	beq.n	80042ba <TIM_Base_SetConfig+0xce>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a0b      	ldr	r2, [pc, #44]	; (80042e4 <TIM_Base_SetConfig+0xf8>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d103      	bne.n	80042c2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	691a      	ldr	r2, [r3, #16]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	615a      	str	r2, [r3, #20]
}
 80042c8:	46c0      	nop			; (mov r8, r8)
 80042ca:	46bd      	mov	sp, r7
 80042cc:	b004      	add	sp, #16
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	40012c00 	.word	0x40012c00
 80042d4:	40000400 	.word	0x40000400
 80042d8:	40002000 	.word	0x40002000
 80042dc:	40014000 	.word	0x40014000
 80042e0:	40014400 	.word	0x40014400
 80042e4:	40014800 	.word	0x40014800
 80042e8:	fffffcff 	.word	0xfffffcff

080042ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042f4:	46c0      	nop			; (mov r8, r8)
 80042f6:	46bd      	mov	sp, r7
 80042f8:	b002      	add	sp, #8
 80042fa:	bd80      	pop	{r7, pc}

080042fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004304:	46c0      	nop			; (mov r8, r8)
 8004306:	46bd      	mov	sp, r7
 8004308:	b002      	add	sp, #8
 800430a:	bd80      	pop	{r7, pc}

0800430c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e044      	b.n	80043a8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004322:	2b00      	cmp	r3, #0
 8004324:	d107      	bne.n	8004336 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2274      	movs	r2, #116	; 0x74
 800432a:	2100      	movs	r1, #0
 800432c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	0018      	movs	r0, r3
 8004332:	f7fc fda1 	bl	8000e78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2224      	movs	r2, #36	; 0x24
 800433a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2101      	movs	r1, #1
 8004348:	438a      	bics	r2, r1
 800434a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	0018      	movs	r0, r3
 8004350:	f000 f8da 	bl	8004508 <UART_SetConfig>
 8004354:	0003      	movs	r3, r0
 8004356:	2b01      	cmp	r3, #1
 8004358:	d101      	bne.n	800435e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e024      	b.n	80043a8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	0018      	movs	r0, r3
 800436a:	f000 fab5 	bl	80048d8 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	490d      	ldr	r1, [pc, #52]	; (80043b0 <HAL_UART_Init+0xa4>)
 800437a:	400a      	ands	r2, r1
 800437c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689a      	ldr	r2, [r3, #8]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	212a      	movs	r1, #42	; 0x2a
 800438a:	438a      	bics	r2, r1
 800438c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2101      	movs	r1, #1
 800439a:	430a      	orrs	r2, r1
 800439c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	0018      	movs	r0, r3
 80043a2:	f000 fb4d 	bl	8004a40 <UART_CheckIdleState>
 80043a6:	0003      	movs	r3, r0
}
 80043a8:	0018      	movs	r0, r3
 80043aa:	46bd      	mov	sp, r7
 80043ac:	b002      	add	sp, #8
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	ffffb7ff 	.word	0xffffb7ff

080043b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b08a      	sub	sp, #40	; 0x28
 80043b8:	af02      	add	r7, sp, #8
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	603b      	str	r3, [r7, #0]
 80043c0:	1dbb      	adds	r3, r7, #6
 80043c2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043c8:	2b20      	cmp	r3, #32
 80043ca:	d000      	beq.n	80043ce <HAL_UART_Transmit+0x1a>
 80043cc:	e096      	b.n	80044fc <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d003      	beq.n	80043dc <HAL_UART_Transmit+0x28>
 80043d4:	1dbb      	adds	r3, r7, #6
 80043d6:	881b      	ldrh	r3, [r3, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d101      	bne.n	80043e0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e08e      	b.n	80044fe <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	2380      	movs	r3, #128	; 0x80
 80043e6:	015b      	lsls	r3, r3, #5
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d109      	bne.n	8004400 <HAL_UART_Transmit+0x4c>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d105      	bne.n	8004400 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	2201      	movs	r2, #1
 80043f8:	4013      	ands	r3, r2
 80043fa:	d001      	beq.n	8004400 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e07e      	b.n	80044fe <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2274      	movs	r2, #116	; 0x74
 8004404:	5c9b      	ldrb	r3, [r3, r2]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d101      	bne.n	800440e <HAL_UART_Transmit+0x5a>
 800440a:	2302      	movs	r3, #2
 800440c:	e077      	b.n	80044fe <HAL_UART_Transmit+0x14a>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2274      	movs	r2, #116	; 0x74
 8004412:	2101      	movs	r1, #1
 8004414:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2280      	movs	r2, #128	; 0x80
 800441a:	2100      	movs	r1, #0
 800441c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2221      	movs	r2, #33	; 0x21
 8004422:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004424:	f7fc fef2 	bl	800120c <HAL_GetTick>
 8004428:	0003      	movs	r3, r0
 800442a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	1dba      	adds	r2, r7, #6
 8004430:	2150      	movs	r1, #80	; 0x50
 8004432:	8812      	ldrh	r2, [r2, #0]
 8004434:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	1dba      	adds	r2, r7, #6
 800443a:	2152      	movs	r1, #82	; 0x52
 800443c:	8812      	ldrh	r2, [r2, #0]
 800443e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	2380      	movs	r3, #128	; 0x80
 8004446:	015b      	lsls	r3, r3, #5
 8004448:	429a      	cmp	r2, r3
 800444a:	d108      	bne.n	800445e <HAL_UART_Transmit+0xaa>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d104      	bne.n	800445e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8004454:	2300      	movs	r3, #0
 8004456:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	61bb      	str	r3, [r7, #24]
 800445c:	e003      	b.n	8004466 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004462:	2300      	movs	r3, #0
 8004464:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2274      	movs	r2, #116	; 0x74
 800446a:	2100      	movs	r1, #0
 800446c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800446e:	e02d      	b.n	80044cc <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	0013      	movs	r3, r2
 800447a:	2200      	movs	r2, #0
 800447c:	2180      	movs	r1, #128	; 0x80
 800447e:	f000 fb27 	bl	8004ad0 <UART_WaitOnFlagUntilTimeout>
 8004482:	1e03      	subs	r3, r0, #0
 8004484:	d001      	beq.n	800448a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e039      	b.n	80044fe <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10b      	bne.n	80044a8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	881a      	ldrh	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	05d2      	lsls	r2, r2, #23
 800449a:	0dd2      	lsrs	r2, r2, #23
 800449c:	b292      	uxth	r2, r2
 800449e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	3302      	adds	r3, #2
 80044a4:	61bb      	str	r3, [r7, #24]
 80044a6:	e008      	b.n	80044ba <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	781a      	ldrb	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	b292      	uxth	r2, r2
 80044b2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	3301      	adds	r3, #1
 80044b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2252      	movs	r2, #82	; 0x52
 80044be:	5a9b      	ldrh	r3, [r3, r2]
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	3b01      	subs	r3, #1
 80044c4:	b299      	uxth	r1, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2252      	movs	r2, #82	; 0x52
 80044ca:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2252      	movs	r2, #82	; 0x52
 80044d0:	5a9b      	ldrh	r3, [r3, r2]
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1cb      	bne.n	8004470 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	0013      	movs	r3, r2
 80044e2:	2200      	movs	r2, #0
 80044e4:	2140      	movs	r1, #64	; 0x40
 80044e6:	f000 faf3 	bl	8004ad0 <UART_WaitOnFlagUntilTimeout>
 80044ea:	1e03      	subs	r3, r0, #0
 80044ec:	d001      	beq.n	80044f2 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e005      	b.n	80044fe <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2220      	movs	r2, #32
 80044f6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80044f8:	2300      	movs	r3, #0
 80044fa:	e000      	b.n	80044fe <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80044fc:	2302      	movs	r3, #2
  }
}
 80044fe:	0018      	movs	r0, r3
 8004500:	46bd      	mov	sp, r7
 8004502:	b008      	add	sp, #32
 8004504:	bd80      	pop	{r7, pc}
	...

08004508 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b088      	sub	sp, #32
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004510:	231e      	movs	r3, #30
 8004512:	18fb      	adds	r3, r7, r3
 8004514:	2200      	movs	r2, #0
 8004516:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	431a      	orrs	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	431a      	orrs	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	69db      	ldr	r3, [r3, #28]
 800452c:	4313      	orrs	r3, r2
 800452e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4abe      	ldr	r2, [pc, #760]	; (8004830 <UART_SetConfig+0x328>)
 8004538:	4013      	ands	r3, r2
 800453a:	0019      	movs	r1, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	430a      	orrs	r2, r1
 8004544:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	4ab9      	ldr	r2, [pc, #740]	; (8004834 <UART_SetConfig+0x32c>)
 800454e:	4013      	ands	r3, r2
 8004550:	0019      	movs	r1, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68da      	ldr	r2, [r3, #12]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	430a      	orrs	r2, r1
 800455c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	4313      	orrs	r3, r2
 800456c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	4ab0      	ldr	r2, [pc, #704]	; (8004838 <UART_SetConfig+0x330>)
 8004576:	4013      	ands	r3, r2
 8004578:	0019      	movs	r1, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	430a      	orrs	r2, r1
 8004582:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4aac      	ldr	r2, [pc, #688]	; (800483c <UART_SetConfig+0x334>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d127      	bne.n	80045de <UART_SetConfig+0xd6>
 800458e:	4bac      	ldr	r3, [pc, #688]	; (8004840 <UART_SetConfig+0x338>)
 8004590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004592:	2203      	movs	r2, #3
 8004594:	4013      	ands	r3, r2
 8004596:	2b03      	cmp	r3, #3
 8004598:	d00d      	beq.n	80045b6 <UART_SetConfig+0xae>
 800459a:	d81b      	bhi.n	80045d4 <UART_SetConfig+0xcc>
 800459c:	2b02      	cmp	r3, #2
 800459e:	d014      	beq.n	80045ca <UART_SetConfig+0xc2>
 80045a0:	d818      	bhi.n	80045d4 <UART_SetConfig+0xcc>
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d002      	beq.n	80045ac <UART_SetConfig+0xa4>
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d00a      	beq.n	80045c0 <UART_SetConfig+0xb8>
 80045aa:	e013      	b.n	80045d4 <UART_SetConfig+0xcc>
 80045ac:	231f      	movs	r3, #31
 80045ae:	18fb      	adds	r3, r7, r3
 80045b0:	2200      	movs	r2, #0
 80045b2:	701a      	strb	r2, [r3, #0]
 80045b4:	e0bd      	b.n	8004732 <UART_SetConfig+0x22a>
 80045b6:	231f      	movs	r3, #31
 80045b8:	18fb      	adds	r3, r7, r3
 80045ba:	2202      	movs	r2, #2
 80045bc:	701a      	strb	r2, [r3, #0]
 80045be:	e0b8      	b.n	8004732 <UART_SetConfig+0x22a>
 80045c0:	231f      	movs	r3, #31
 80045c2:	18fb      	adds	r3, r7, r3
 80045c4:	2204      	movs	r2, #4
 80045c6:	701a      	strb	r2, [r3, #0]
 80045c8:	e0b3      	b.n	8004732 <UART_SetConfig+0x22a>
 80045ca:	231f      	movs	r3, #31
 80045cc:	18fb      	adds	r3, r7, r3
 80045ce:	2208      	movs	r2, #8
 80045d0:	701a      	strb	r2, [r3, #0]
 80045d2:	e0ae      	b.n	8004732 <UART_SetConfig+0x22a>
 80045d4:	231f      	movs	r3, #31
 80045d6:	18fb      	adds	r3, r7, r3
 80045d8:	2210      	movs	r2, #16
 80045da:	701a      	strb	r2, [r3, #0]
 80045dc:	e0a9      	b.n	8004732 <UART_SetConfig+0x22a>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a98      	ldr	r2, [pc, #608]	; (8004844 <UART_SetConfig+0x33c>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d134      	bne.n	8004652 <UART_SetConfig+0x14a>
 80045e8:	4b95      	ldr	r3, [pc, #596]	; (8004840 <UART_SetConfig+0x338>)
 80045ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045ec:	23c0      	movs	r3, #192	; 0xc0
 80045ee:	029b      	lsls	r3, r3, #10
 80045f0:	4013      	ands	r3, r2
 80045f2:	22c0      	movs	r2, #192	; 0xc0
 80045f4:	0292      	lsls	r2, r2, #10
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d017      	beq.n	800462a <UART_SetConfig+0x122>
 80045fa:	22c0      	movs	r2, #192	; 0xc0
 80045fc:	0292      	lsls	r2, r2, #10
 80045fe:	4293      	cmp	r3, r2
 8004600:	d822      	bhi.n	8004648 <UART_SetConfig+0x140>
 8004602:	2280      	movs	r2, #128	; 0x80
 8004604:	0292      	lsls	r2, r2, #10
 8004606:	4293      	cmp	r3, r2
 8004608:	d019      	beq.n	800463e <UART_SetConfig+0x136>
 800460a:	2280      	movs	r2, #128	; 0x80
 800460c:	0292      	lsls	r2, r2, #10
 800460e:	4293      	cmp	r3, r2
 8004610:	d81a      	bhi.n	8004648 <UART_SetConfig+0x140>
 8004612:	2b00      	cmp	r3, #0
 8004614:	d004      	beq.n	8004620 <UART_SetConfig+0x118>
 8004616:	2280      	movs	r2, #128	; 0x80
 8004618:	0252      	lsls	r2, r2, #9
 800461a:	4293      	cmp	r3, r2
 800461c:	d00a      	beq.n	8004634 <UART_SetConfig+0x12c>
 800461e:	e013      	b.n	8004648 <UART_SetConfig+0x140>
 8004620:	231f      	movs	r3, #31
 8004622:	18fb      	adds	r3, r7, r3
 8004624:	2200      	movs	r2, #0
 8004626:	701a      	strb	r2, [r3, #0]
 8004628:	e083      	b.n	8004732 <UART_SetConfig+0x22a>
 800462a:	231f      	movs	r3, #31
 800462c:	18fb      	adds	r3, r7, r3
 800462e:	2202      	movs	r2, #2
 8004630:	701a      	strb	r2, [r3, #0]
 8004632:	e07e      	b.n	8004732 <UART_SetConfig+0x22a>
 8004634:	231f      	movs	r3, #31
 8004636:	18fb      	adds	r3, r7, r3
 8004638:	2204      	movs	r2, #4
 800463a:	701a      	strb	r2, [r3, #0]
 800463c:	e079      	b.n	8004732 <UART_SetConfig+0x22a>
 800463e:	231f      	movs	r3, #31
 8004640:	18fb      	adds	r3, r7, r3
 8004642:	2208      	movs	r2, #8
 8004644:	701a      	strb	r2, [r3, #0]
 8004646:	e074      	b.n	8004732 <UART_SetConfig+0x22a>
 8004648:	231f      	movs	r3, #31
 800464a:	18fb      	adds	r3, r7, r3
 800464c:	2210      	movs	r2, #16
 800464e:	701a      	strb	r2, [r3, #0]
 8004650:	e06f      	b.n	8004732 <UART_SetConfig+0x22a>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a7c      	ldr	r2, [pc, #496]	; (8004848 <UART_SetConfig+0x340>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d134      	bne.n	80046c6 <UART_SetConfig+0x1be>
 800465c:	4b78      	ldr	r3, [pc, #480]	; (8004840 <UART_SetConfig+0x338>)
 800465e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004660:	23c0      	movs	r3, #192	; 0xc0
 8004662:	031b      	lsls	r3, r3, #12
 8004664:	4013      	ands	r3, r2
 8004666:	22c0      	movs	r2, #192	; 0xc0
 8004668:	0312      	lsls	r2, r2, #12
 800466a:	4293      	cmp	r3, r2
 800466c:	d017      	beq.n	800469e <UART_SetConfig+0x196>
 800466e:	22c0      	movs	r2, #192	; 0xc0
 8004670:	0312      	lsls	r2, r2, #12
 8004672:	4293      	cmp	r3, r2
 8004674:	d822      	bhi.n	80046bc <UART_SetConfig+0x1b4>
 8004676:	2280      	movs	r2, #128	; 0x80
 8004678:	0312      	lsls	r2, r2, #12
 800467a:	4293      	cmp	r3, r2
 800467c:	d019      	beq.n	80046b2 <UART_SetConfig+0x1aa>
 800467e:	2280      	movs	r2, #128	; 0x80
 8004680:	0312      	lsls	r2, r2, #12
 8004682:	4293      	cmp	r3, r2
 8004684:	d81a      	bhi.n	80046bc <UART_SetConfig+0x1b4>
 8004686:	2b00      	cmp	r3, #0
 8004688:	d004      	beq.n	8004694 <UART_SetConfig+0x18c>
 800468a:	2280      	movs	r2, #128	; 0x80
 800468c:	02d2      	lsls	r2, r2, #11
 800468e:	4293      	cmp	r3, r2
 8004690:	d00a      	beq.n	80046a8 <UART_SetConfig+0x1a0>
 8004692:	e013      	b.n	80046bc <UART_SetConfig+0x1b4>
 8004694:	231f      	movs	r3, #31
 8004696:	18fb      	adds	r3, r7, r3
 8004698:	2200      	movs	r2, #0
 800469a:	701a      	strb	r2, [r3, #0]
 800469c:	e049      	b.n	8004732 <UART_SetConfig+0x22a>
 800469e:	231f      	movs	r3, #31
 80046a0:	18fb      	adds	r3, r7, r3
 80046a2:	2202      	movs	r2, #2
 80046a4:	701a      	strb	r2, [r3, #0]
 80046a6:	e044      	b.n	8004732 <UART_SetConfig+0x22a>
 80046a8:	231f      	movs	r3, #31
 80046aa:	18fb      	adds	r3, r7, r3
 80046ac:	2204      	movs	r2, #4
 80046ae:	701a      	strb	r2, [r3, #0]
 80046b0:	e03f      	b.n	8004732 <UART_SetConfig+0x22a>
 80046b2:	231f      	movs	r3, #31
 80046b4:	18fb      	adds	r3, r7, r3
 80046b6:	2208      	movs	r2, #8
 80046b8:	701a      	strb	r2, [r3, #0]
 80046ba:	e03a      	b.n	8004732 <UART_SetConfig+0x22a>
 80046bc:	231f      	movs	r3, #31
 80046be:	18fb      	adds	r3, r7, r3
 80046c0:	2210      	movs	r2, #16
 80046c2:	701a      	strb	r2, [r3, #0]
 80046c4:	e035      	b.n	8004732 <UART_SetConfig+0x22a>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a60      	ldr	r2, [pc, #384]	; (800484c <UART_SetConfig+0x344>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d104      	bne.n	80046da <UART_SetConfig+0x1d2>
 80046d0:	231f      	movs	r3, #31
 80046d2:	18fb      	adds	r3, r7, r3
 80046d4:	2200      	movs	r2, #0
 80046d6:	701a      	strb	r2, [r3, #0]
 80046d8:	e02b      	b.n	8004732 <UART_SetConfig+0x22a>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a5c      	ldr	r2, [pc, #368]	; (8004850 <UART_SetConfig+0x348>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d104      	bne.n	80046ee <UART_SetConfig+0x1e6>
 80046e4:	231f      	movs	r3, #31
 80046e6:	18fb      	adds	r3, r7, r3
 80046e8:	2200      	movs	r2, #0
 80046ea:	701a      	strb	r2, [r3, #0]
 80046ec:	e021      	b.n	8004732 <UART_SetConfig+0x22a>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a58      	ldr	r2, [pc, #352]	; (8004854 <UART_SetConfig+0x34c>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d104      	bne.n	8004702 <UART_SetConfig+0x1fa>
 80046f8:	231f      	movs	r3, #31
 80046fa:	18fb      	adds	r3, r7, r3
 80046fc:	2200      	movs	r2, #0
 80046fe:	701a      	strb	r2, [r3, #0]
 8004700:	e017      	b.n	8004732 <UART_SetConfig+0x22a>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a54      	ldr	r2, [pc, #336]	; (8004858 <UART_SetConfig+0x350>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d104      	bne.n	8004716 <UART_SetConfig+0x20e>
 800470c:	231f      	movs	r3, #31
 800470e:	18fb      	adds	r3, r7, r3
 8004710:	2200      	movs	r2, #0
 8004712:	701a      	strb	r2, [r3, #0]
 8004714:	e00d      	b.n	8004732 <UART_SetConfig+0x22a>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a50      	ldr	r2, [pc, #320]	; (800485c <UART_SetConfig+0x354>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d104      	bne.n	800472a <UART_SetConfig+0x222>
 8004720:	231f      	movs	r3, #31
 8004722:	18fb      	adds	r3, r7, r3
 8004724:	2200      	movs	r2, #0
 8004726:	701a      	strb	r2, [r3, #0]
 8004728:	e003      	b.n	8004732 <UART_SetConfig+0x22a>
 800472a:	231f      	movs	r3, #31
 800472c:	18fb      	adds	r3, r7, r3
 800472e:	2210      	movs	r2, #16
 8004730:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	69da      	ldr	r2, [r3, #28]
 8004736:	2380      	movs	r3, #128	; 0x80
 8004738:	021b      	lsls	r3, r3, #8
 800473a:	429a      	cmp	r2, r3
 800473c:	d15d      	bne.n	80047fa <UART_SetConfig+0x2f2>
  {
    switch (clocksource)
 800473e:	231f      	movs	r3, #31
 8004740:	18fb      	adds	r3, r7, r3
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	2b08      	cmp	r3, #8
 8004746:	d015      	beq.n	8004774 <UART_SetConfig+0x26c>
 8004748:	dc18      	bgt.n	800477c <UART_SetConfig+0x274>
 800474a:	2b04      	cmp	r3, #4
 800474c:	d00d      	beq.n	800476a <UART_SetConfig+0x262>
 800474e:	dc15      	bgt.n	800477c <UART_SetConfig+0x274>
 8004750:	2b00      	cmp	r3, #0
 8004752:	d002      	beq.n	800475a <UART_SetConfig+0x252>
 8004754:	2b02      	cmp	r3, #2
 8004756:	d005      	beq.n	8004764 <UART_SetConfig+0x25c>
 8004758:	e010      	b.n	800477c <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800475a:	f7ff fa27 	bl	8003bac <HAL_RCC_GetPCLK1Freq>
 800475e:	0003      	movs	r3, r0
 8004760:	61bb      	str	r3, [r7, #24]
        break;
 8004762:	e012      	b.n	800478a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004764:	4b3e      	ldr	r3, [pc, #248]	; (8004860 <UART_SetConfig+0x358>)
 8004766:	61bb      	str	r3, [r7, #24]
        break;
 8004768:	e00f      	b.n	800478a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800476a:	f7ff f995 	bl	8003a98 <HAL_RCC_GetSysClockFreq>
 800476e:	0003      	movs	r3, r0
 8004770:	61bb      	str	r3, [r7, #24]
        break;
 8004772:	e00a      	b.n	800478a <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004774:	2380      	movs	r3, #128	; 0x80
 8004776:	021b      	lsls	r3, r3, #8
 8004778:	61bb      	str	r3, [r7, #24]
        break;
 800477a:	e006      	b.n	800478a <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 800477c:	2300      	movs	r3, #0
 800477e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004780:	231e      	movs	r3, #30
 8004782:	18fb      	adds	r3, r7, r3
 8004784:	2201      	movs	r2, #1
 8004786:	701a      	strb	r2, [r3, #0]
        break;
 8004788:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d100      	bne.n	8004792 <UART_SetConfig+0x28a>
 8004790:	e095      	b.n	80048be <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	005a      	lsls	r2, r3, #1
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	085b      	lsrs	r3, r3, #1
 800479c:	18d2      	adds	r2, r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	0019      	movs	r1, r3
 80047a4:	0010      	movs	r0, r2
 80047a6:	f7fb fcb9 	bl	800011c <__udivsi3>
 80047aa:	0003      	movs	r3, r0
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	2b0f      	cmp	r3, #15
 80047b4:	d91c      	bls.n	80047f0 <UART_SetConfig+0x2e8>
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	2380      	movs	r3, #128	; 0x80
 80047ba:	025b      	lsls	r3, r3, #9
 80047bc:	429a      	cmp	r2, r3
 80047be:	d217      	bcs.n	80047f0 <UART_SetConfig+0x2e8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	200e      	movs	r0, #14
 80047c6:	183b      	adds	r3, r7, r0
 80047c8:	210f      	movs	r1, #15
 80047ca:	438a      	bics	r2, r1
 80047cc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	085b      	lsrs	r3, r3, #1
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	2207      	movs	r2, #7
 80047d6:	4013      	ands	r3, r2
 80047d8:	b299      	uxth	r1, r3
 80047da:	183b      	adds	r3, r7, r0
 80047dc:	183a      	adds	r2, r7, r0
 80047de:	8812      	ldrh	r2, [r2, #0]
 80047e0:	430a      	orrs	r2, r1
 80047e2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	183a      	adds	r2, r7, r0
 80047ea:	8812      	ldrh	r2, [r2, #0]
 80047ec:	60da      	str	r2, [r3, #12]
 80047ee:	e066      	b.n	80048be <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 80047f0:	231e      	movs	r3, #30
 80047f2:	18fb      	adds	r3, r7, r3
 80047f4:	2201      	movs	r2, #1
 80047f6:	701a      	strb	r2, [r3, #0]
 80047f8:	e061      	b.n	80048be <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047fa:	231f      	movs	r3, #31
 80047fc:	18fb      	adds	r3, r7, r3
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	2b08      	cmp	r3, #8
 8004802:	d02f      	beq.n	8004864 <UART_SetConfig+0x35c>
 8004804:	dc32      	bgt.n	800486c <UART_SetConfig+0x364>
 8004806:	2b04      	cmp	r3, #4
 8004808:	d00d      	beq.n	8004826 <UART_SetConfig+0x31e>
 800480a:	dc2f      	bgt.n	800486c <UART_SetConfig+0x364>
 800480c:	2b00      	cmp	r3, #0
 800480e:	d002      	beq.n	8004816 <UART_SetConfig+0x30e>
 8004810:	2b02      	cmp	r3, #2
 8004812:	d005      	beq.n	8004820 <UART_SetConfig+0x318>
 8004814:	e02a      	b.n	800486c <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004816:	f7ff f9c9 	bl	8003bac <HAL_RCC_GetPCLK1Freq>
 800481a:	0003      	movs	r3, r0
 800481c:	61bb      	str	r3, [r7, #24]
        break;
 800481e:	e02c      	b.n	800487a <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004820:	4b0f      	ldr	r3, [pc, #60]	; (8004860 <UART_SetConfig+0x358>)
 8004822:	61bb      	str	r3, [r7, #24]
        break;
 8004824:	e029      	b.n	800487a <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004826:	f7ff f937 	bl	8003a98 <HAL_RCC_GetSysClockFreq>
 800482a:	0003      	movs	r3, r0
 800482c:	61bb      	str	r3, [r7, #24]
        break;
 800482e:	e024      	b.n	800487a <UART_SetConfig+0x372>
 8004830:	efff69f3 	.word	0xefff69f3
 8004834:	ffffcfff 	.word	0xffffcfff
 8004838:	fffff4ff 	.word	0xfffff4ff
 800483c:	40013800 	.word	0x40013800
 8004840:	40021000 	.word	0x40021000
 8004844:	40004400 	.word	0x40004400
 8004848:	40004800 	.word	0x40004800
 800484c:	40004c00 	.word	0x40004c00
 8004850:	40005000 	.word	0x40005000
 8004854:	40011400 	.word	0x40011400
 8004858:	40011800 	.word	0x40011800
 800485c:	40011c00 	.word	0x40011c00
 8004860:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004864:	2380      	movs	r3, #128	; 0x80
 8004866:	021b      	lsls	r3, r3, #8
 8004868:	61bb      	str	r3, [r7, #24]
        break;
 800486a:	e006      	b.n	800487a <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 800486c:	2300      	movs	r3, #0
 800486e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004870:	231e      	movs	r3, #30
 8004872:	18fb      	adds	r3, r7, r3
 8004874:	2201      	movs	r2, #1
 8004876:	701a      	strb	r2, [r3, #0]
        break;
 8004878:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d01e      	beq.n	80048be <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	085a      	lsrs	r2, r3, #1
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	18d2      	adds	r2, r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	0019      	movs	r1, r3
 8004890:	0010      	movs	r0, r2
 8004892:	f7fb fc43 	bl	800011c <__udivsi3>
 8004896:	0003      	movs	r3, r0
 8004898:	b29b      	uxth	r3, r3
 800489a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	2b0f      	cmp	r3, #15
 80048a0:	d909      	bls.n	80048b6 <UART_SetConfig+0x3ae>
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	2380      	movs	r3, #128	; 0x80
 80048a6:	025b      	lsls	r3, r3, #9
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d204      	bcs.n	80048b6 <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = usartdiv;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	60da      	str	r2, [r3, #12]
 80048b4:	e003      	b.n	80048be <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 80048b6:	231e      	movs	r3, #30
 80048b8:	18fb      	adds	r3, r7, r3
 80048ba:	2201      	movs	r2, #1
 80048bc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80048ca:	231e      	movs	r3, #30
 80048cc:	18fb      	adds	r3, r7, r3
 80048ce:	781b      	ldrb	r3, [r3, #0]
}
 80048d0:	0018      	movs	r0, r3
 80048d2:	46bd      	mov	sp, r7
 80048d4:	b008      	add	sp, #32
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e4:	2201      	movs	r2, #1
 80048e6:	4013      	ands	r3, r2
 80048e8:	d00b      	beq.n	8004902 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	4a4a      	ldr	r2, [pc, #296]	; (8004a1c <UART_AdvFeatureConfig+0x144>)
 80048f2:	4013      	ands	r3, r2
 80048f4:	0019      	movs	r1, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	430a      	orrs	r2, r1
 8004900:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004906:	2202      	movs	r2, #2
 8004908:	4013      	ands	r3, r2
 800490a:	d00b      	beq.n	8004924 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	4a43      	ldr	r2, [pc, #268]	; (8004a20 <UART_AdvFeatureConfig+0x148>)
 8004914:	4013      	ands	r3, r2
 8004916:	0019      	movs	r1, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004928:	2204      	movs	r2, #4
 800492a:	4013      	ands	r3, r2
 800492c:	d00b      	beq.n	8004946 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	4a3b      	ldr	r2, [pc, #236]	; (8004a24 <UART_AdvFeatureConfig+0x14c>)
 8004936:	4013      	ands	r3, r2
 8004938:	0019      	movs	r1, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	430a      	orrs	r2, r1
 8004944:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	2208      	movs	r2, #8
 800494c:	4013      	ands	r3, r2
 800494e:	d00b      	beq.n	8004968 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	4a34      	ldr	r2, [pc, #208]	; (8004a28 <UART_AdvFeatureConfig+0x150>)
 8004958:	4013      	ands	r3, r2
 800495a:	0019      	movs	r1, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	430a      	orrs	r2, r1
 8004966:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496c:	2210      	movs	r2, #16
 800496e:	4013      	ands	r3, r2
 8004970:	d00b      	beq.n	800498a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	4a2c      	ldr	r2, [pc, #176]	; (8004a2c <UART_AdvFeatureConfig+0x154>)
 800497a:	4013      	ands	r3, r2
 800497c:	0019      	movs	r1, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	2220      	movs	r2, #32
 8004990:	4013      	ands	r3, r2
 8004992:	d00b      	beq.n	80049ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	4a25      	ldr	r2, [pc, #148]	; (8004a30 <UART_AdvFeatureConfig+0x158>)
 800499c:	4013      	ands	r3, r2
 800499e:	0019      	movs	r1, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b0:	2240      	movs	r2, #64	; 0x40
 80049b2:	4013      	ands	r3, r2
 80049b4:	d01d      	beq.n	80049f2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	4a1d      	ldr	r2, [pc, #116]	; (8004a34 <UART_AdvFeatureConfig+0x15c>)
 80049be:	4013      	ands	r3, r2
 80049c0:	0019      	movs	r1, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	430a      	orrs	r2, r1
 80049cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049d2:	2380      	movs	r3, #128	; 0x80
 80049d4:	035b      	lsls	r3, r3, #13
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d10b      	bne.n	80049f2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	4a15      	ldr	r2, [pc, #84]	; (8004a38 <UART_AdvFeatureConfig+0x160>)
 80049e2:	4013      	ands	r3, r2
 80049e4:	0019      	movs	r1, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	2280      	movs	r2, #128	; 0x80
 80049f8:	4013      	ands	r3, r2
 80049fa:	d00b      	beq.n	8004a14 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	4a0e      	ldr	r2, [pc, #56]	; (8004a3c <UART_AdvFeatureConfig+0x164>)
 8004a04:	4013      	ands	r3, r2
 8004a06:	0019      	movs	r1, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	605a      	str	r2, [r3, #4]
  }
}
 8004a14:	46c0      	nop			; (mov r8, r8)
 8004a16:	46bd      	mov	sp, r7
 8004a18:	b002      	add	sp, #8
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	fffdffff 	.word	0xfffdffff
 8004a20:	fffeffff 	.word	0xfffeffff
 8004a24:	fffbffff 	.word	0xfffbffff
 8004a28:	ffff7fff 	.word	0xffff7fff
 8004a2c:	ffffefff 	.word	0xffffefff
 8004a30:	ffffdfff 	.word	0xffffdfff
 8004a34:	ffefffff 	.word	0xffefffff
 8004a38:	ff9fffff 	.word	0xff9fffff
 8004a3c:	fff7ffff 	.word	0xfff7ffff

08004a40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af02      	add	r7, sp, #8
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2280      	movs	r2, #128	; 0x80
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a50:	f7fc fbdc 	bl	800120c <HAL_GetTick>
 8004a54:	0003      	movs	r3, r0
 8004a56:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2208      	movs	r2, #8
 8004a60:	4013      	ands	r3, r2
 8004a62:	2b08      	cmp	r3, #8
 8004a64:	d10c      	bne.n	8004a80 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2280      	movs	r2, #128	; 0x80
 8004a6a:	0391      	lsls	r1, r2, #14
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	4a17      	ldr	r2, [pc, #92]	; (8004acc <UART_CheckIdleState+0x8c>)
 8004a70:	9200      	str	r2, [sp, #0]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f000 f82c 	bl	8004ad0 <UART_WaitOnFlagUntilTimeout>
 8004a78:	1e03      	subs	r3, r0, #0
 8004a7a:	d001      	beq.n	8004a80 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e021      	b.n	8004ac4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2204      	movs	r2, #4
 8004a88:	4013      	ands	r3, r2
 8004a8a:	2b04      	cmp	r3, #4
 8004a8c:	d10c      	bne.n	8004aa8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2280      	movs	r2, #128	; 0x80
 8004a92:	03d1      	lsls	r1, r2, #15
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	4a0d      	ldr	r2, [pc, #52]	; (8004acc <UART_CheckIdleState+0x8c>)
 8004a98:	9200      	str	r2, [sp, #0]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f000 f818 	bl	8004ad0 <UART_WaitOnFlagUntilTimeout>
 8004aa0:	1e03      	subs	r3, r0, #0
 8004aa2:	d001      	beq.n	8004aa8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e00d      	b.n	8004ac4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2220      	movs	r2, #32
 8004ab2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2274      	movs	r2, #116	; 0x74
 8004abe:	2100      	movs	r1, #0
 8004ac0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	0018      	movs	r0, r3
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	b004      	add	sp, #16
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	01ffffff 	.word	0x01ffffff

08004ad0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b094      	sub	sp, #80	; 0x50
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	603b      	str	r3, [r7, #0]
 8004adc:	1dfb      	adds	r3, r7, #7
 8004ade:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ae0:	e0a3      	b.n	8004c2a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ae2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	d100      	bne.n	8004aea <UART_WaitOnFlagUntilTimeout+0x1a>
 8004ae8:	e09f      	b.n	8004c2a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aea:	f7fc fb8f 	bl	800120c <HAL_GetTick>
 8004aee:	0002      	movs	r2, r0
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d302      	bcc.n	8004b00 <UART_WaitOnFlagUntilTimeout+0x30>
 8004afa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d13d      	bne.n	8004b7c <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b00:	f3ef 8310 	mrs	r3, PRIMASK
 8004b04:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b08:	647b      	str	r3, [r7, #68]	; 0x44
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b10:	f383 8810 	msr	PRIMASK, r3
}
 8004b14:	46c0      	nop			; (mov r8, r8)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	494c      	ldr	r1, [pc, #304]	; (8004c54 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004b22:	400a      	ands	r2, r1
 8004b24:	601a      	str	r2, [r3, #0]
 8004b26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b28:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2c:	f383 8810 	msr	PRIMASK, r3
}
 8004b30:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b32:	f3ef 8310 	mrs	r3, PRIMASK
 8004b36:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b3a:	643b      	str	r3, [r7, #64]	; 0x40
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b42:	f383 8810 	msr	PRIMASK, r3
}
 8004b46:	46c0      	nop			; (mov r8, r8)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689a      	ldr	r2, [r3, #8]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2101      	movs	r1, #1
 8004b54:	438a      	bics	r2, r1
 8004b56:	609a      	str	r2, [r3, #8]
 8004b58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b5e:	f383 8810 	msr	PRIMASK, r3
}
 8004b62:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2220      	movs	r2, #32
 8004b68:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2274      	movs	r2, #116	; 0x74
 8004b74:	2100      	movs	r1, #0
 8004b76:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e067      	b.n	8004c4c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2204      	movs	r2, #4
 8004b84:	4013      	ands	r3, r2
 8004b86:	d050      	beq.n	8004c2a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	69da      	ldr	r2, [r3, #28]
 8004b8e:	2380      	movs	r3, #128	; 0x80
 8004b90:	011b      	lsls	r3, r3, #4
 8004b92:	401a      	ands	r2, r3
 8004b94:	2380      	movs	r3, #128	; 0x80
 8004b96:	011b      	lsls	r3, r3, #4
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d146      	bne.n	8004c2a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2280      	movs	r2, #128	; 0x80
 8004ba2:	0112      	lsls	r2, r2, #4
 8004ba4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ba6:	f3ef 8310 	mrs	r3, PRIMASK
 8004baa:	613b      	str	r3, [r7, #16]
  return(result);
 8004bac:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	f383 8810 	msr	PRIMASK, r3
}
 8004bba:	46c0      	nop			; (mov r8, r8)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4923      	ldr	r1, [pc, #140]	; (8004c54 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004bc8:	400a      	ands	r2, r1
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	f383 8810 	msr	PRIMASK, r3
}
 8004bd6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bd8:	f3ef 8310 	mrs	r3, PRIMASK
 8004bdc:	61fb      	str	r3, [r7, #28]
  return(result);
 8004bde:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004be0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004be2:	2301      	movs	r3, #1
 8004be4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004be6:	6a3b      	ldr	r3, [r7, #32]
 8004be8:	f383 8810 	msr	PRIMASK, r3
}
 8004bec:	46c0      	nop			; (mov r8, r8)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	438a      	bics	r2, r1
 8004bfc:	609a      	str	r2, [r3, #8]
 8004bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c00:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c04:	f383 8810 	msr	PRIMASK, r3
}
 8004c08:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2220      	movs	r2, #32
 8004c0e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2220      	movs	r2, #32
 8004c14:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2280      	movs	r2, #128	; 0x80
 8004c1a:	2120      	movs	r1, #32
 8004c1c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2274      	movs	r2, #116	; 0x74
 8004c22:	2100      	movs	r1, #0
 8004c24:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e010      	b.n	8004c4c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	69db      	ldr	r3, [r3, #28]
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	4013      	ands	r3, r2
 8004c34:	68ba      	ldr	r2, [r7, #8]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	425a      	negs	r2, r3
 8004c3a:	4153      	adcs	r3, r2
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	001a      	movs	r2, r3
 8004c40:	1dfb      	adds	r3, r7, #7
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d100      	bne.n	8004c4a <UART_WaitOnFlagUntilTimeout+0x17a>
 8004c48:	e74b      	b.n	8004ae2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	b014      	add	sp, #80	; 0x50
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	fffffe5f 	.word	0xfffffe5f

08004c58 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    EventGroupHandle_t xEventGroupCreate( void )
    {
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
         * TickType_t alignment requirements the cast is safe.  In other cases,
         * where the natural word size of the architecture is less than
         * sizeof( TickType_t ), the TickType_t variables will be accessed in two
         * or more reads operations, and the alignment requirements is only that
         * of each individual read. */
        pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8004c5e:	201c      	movs	r0, #28
 8004c60:	f002 fb1e 	bl	80072a0 <pvPortMalloc>
 8004c64:	0003      	movs	r3, r0
 8004c66:	607b      	str	r3, [r7, #4]

        if( pxEventBits != NULL )
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d007      	beq.n	8004c7e <xEventGroupCreate+0x26>
        {
            pxEventBits->uxEventBits = 0;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]
            vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	3304      	adds	r3, #4
 8004c78:	0018      	movs	r0, r3
 8004c7a:	f000 f943 	bl	8004f04 <vListInitialise>
        else
        {
            traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
        }

        return pxEventBits;
 8004c7e:	687b      	ldr	r3, [r7, #4]
    }
 8004c80:	0018      	movs	r0, r3
 8004c82:	46bd      	mov	sp, r7
 8004c84:	b002      	add	sp, #8
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <xEventGroupWaitBits>:
EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                 const EventBits_t uxBitsToWaitFor,
                                 const BaseType_t xClearOnExit,
                                 const BaseType_t xWaitForAllBits,
                                 TickType_t xTicksToWait )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b08c      	sub	sp, #48	; 0x30
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
 8004c94:	603b      	str	r3, [r7, #0]
    EventGroup_t * pxEventBits = xEventGroup;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	627b      	str	r3, [r7, #36]	; 0x24
    EventBits_t uxReturn, uxControlBits = 0;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	62bb      	str	r3, [r7, #40]	; 0x28
    BaseType_t xWaitConditionMet, xAlreadyYielded;
    BaseType_t xTimeoutOccurred = pdFALSE;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	623b      	str	r3, [r7, #32]

    /* Check the user is not attempting to wait on the bits used by the kernel
     * itself, and that at least one bit is being requested. */
    configASSERT( xEventGroup );
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d101      	bne.n	8004cac <xEventGroupWaitBits+0x24>
 8004ca8:	b672      	cpsid	i
 8004caa:	e7fe      	b.n	8004caa <xEventGroupWaitBits+0x22>
    configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	0e1b      	lsrs	r3, r3, #24
 8004cb0:	061b      	lsls	r3, r3, #24
 8004cb2:	d001      	beq.n	8004cb8 <xEventGroupWaitBits+0x30>
 8004cb4:	b672      	cpsid	i
 8004cb6:	e7fe      	b.n	8004cb6 <xEventGroupWaitBits+0x2e>
    configASSERT( uxBitsToWaitFor != 0 );
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <xEventGroupWaitBits+0x3a>
 8004cbe:	b672      	cpsid	i
 8004cc0:	e7fe      	b.n	8004cc0 <xEventGroupWaitBits+0x38>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cc2:	f001 fcd1 	bl	8006668 <xTaskGetSchedulerState>
 8004cc6:	1e03      	subs	r3, r0, #0
 8004cc8:	d102      	bne.n	8004cd0 <xEventGroupWaitBits+0x48>
 8004cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d101      	bne.n	8004cd4 <xEventGroupWaitBits+0x4c>
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e000      	b.n	8004cd6 <xEventGroupWaitBits+0x4e>
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <xEventGroupWaitBits+0x56>
 8004cda:	b672      	cpsid	i
 8004cdc:	e7fe      	b.n	8004cdc <xEventGroupWaitBits+0x54>
    }
    #endif

    vTaskSuspendAll();
 8004cde:	f000 ff21 	bl	8005b24 <vTaskSuspendAll>
    {
        const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	61fb      	str	r3, [r7, #28]

        /* Check to see if the wait condition is already met or not. */
        xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8004ce8:	683a      	ldr	r2, [r7, #0]
 8004cea:	68b9      	ldr	r1, [r7, #8]
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	0018      	movs	r0, r3
 8004cf0:	f000 f8e9 	bl	8004ec6 <prvTestWaitCondition>
 8004cf4:	0003      	movs	r3, r0
 8004cf6:	61bb      	str	r3, [r7, #24]

        if( xWaitConditionMet != pdFALSE )
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00e      	beq.n	8004d1c <xEventGroupWaitBits+0x94>
        {
            /* The wait condition has already been met so there is no need to
             * block. */
            uxReturn = uxCurrentEventBits;
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	62fb      	str	r3, [r7, #44]	; 0x2c
            xTicksToWait = ( TickType_t ) 0;
 8004d02:	2300      	movs	r3, #0
 8004d04:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Clear the wait bits if requested to do so. */
            if( xClearOnExit != pdFALSE )
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d02a      	beq.n	8004d62 <xEventGroupWaitBits+0xda>
            {
                pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	43d2      	mvns	r2, r2
 8004d14:	401a      	ands	r2, r3
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	601a      	str	r2, [r3, #0]
 8004d1a:	e022      	b.n	8004d62 <xEventGroupWaitBits+0xda>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else if( xTicksToWait == ( TickType_t ) 0 )
 8004d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d104      	bne.n	8004d2c <xEventGroupWaitBits+0xa4>
        {
            /* The wait condition has not been met, but no block time was
             * specified, so just return the current value. */
            uxReturn = uxCurrentEventBits;
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	62fb      	str	r3, [r7, #44]	; 0x2c
            xTimeoutOccurred = pdTRUE;
 8004d26:	2301      	movs	r3, #1
 8004d28:	623b      	str	r3, [r7, #32]
 8004d2a:	e01a      	b.n	8004d62 <xEventGroupWaitBits+0xda>
        {
            /* The task is going to block to wait for its required bits to be
             * set.  uxControlBits are used to remember the specified behaviour of
             * this call to xEventGroupWaitBits() - for use when the event bits
             * unblock the task. */
            if( xClearOnExit != pdFALSE )
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d004      	beq.n	8004d3c <xEventGroupWaitBits+0xb4>
            {
                uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8004d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d34:	2280      	movs	r2, #128	; 0x80
 8004d36:	0452      	lsls	r2, r2, #17
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	62bb      	str	r3, [r7, #40]	; 0x28
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( xWaitForAllBits != pdFALSE )
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d004      	beq.n	8004d4c <xEventGroupWaitBits+0xc4>
            {
                uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8004d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d44:	2280      	movs	r2, #128	; 0x80
 8004d46:	04d2      	lsls	r2, r2, #19
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            /* Store the bits that the calling task is waiting for in the
             * task's event list item so the kernel knows when a match is
             * found.  Then enter the blocked state. */
            vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	1d18      	adds	r0, r3, #4
 8004d50:	68ba      	ldr	r2, [r7, #8]
 8004d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d54:	4313      	orrs	r3, r2
 8004d56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d58:	0019      	movs	r1, r3
 8004d5a:	f001 f96b 	bl	8006034 <vTaskPlaceOnUnorderedEventList>

            /* This is obsolete as it will get set after the task unblocks, but
             * some compilers mistakenly generate a warning about the variable
             * being returned without being set if it is not done. */
            uxReturn = 0;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
        }
    }
    xAlreadyYielded = xTaskResumeAll();
 8004d62:	f000 feeb 	bl	8005b3c <xTaskResumeAll>
 8004d66:	0003      	movs	r3, r0
 8004d68:	617b      	str	r3, [r7, #20]

    if( xTicksToWait != ( TickType_t ) 0 )
 8004d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d02c      	beq.n	8004dca <xEventGroupWaitBits+0x142>
    {
        if( xAlreadyYielded == pdFALSE )
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <xEventGroupWaitBits+0xf2>
        {
            portYIELD_WITHIN_API();
 8004d76:	f002 f9eb 	bl	8007150 <vPortYield>

        /* The task blocked to wait for its required bits to be set - at this
         * point either the required bits were set or the block time expired.  If
         * the required bits were set they will have been stored in the task's
         * event list item, and they should now be retrieved then cleared. */
        uxReturn = uxTaskResetEventItemValue();
 8004d7a:	f001 fd13 	bl	80067a4 <uxTaskResetEventItemValue>
 8004d7e:	0003      	movs	r3, r0
 8004d80:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8004d82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d84:	2380      	movs	r3, #128	; 0x80
 8004d86:	049b      	lsls	r3, r3, #18
 8004d88:	4013      	ands	r3, r2
 8004d8a:	d11a      	bne.n	8004dc2 <xEventGroupWaitBits+0x13a>
        {
            taskENTER_CRITICAL();
 8004d8c:	f002 f9f0 	bl	8007170 <vPortEnterCritical>
            {
                /* The task timed out, just return the current event bit value. */
                uxReturn = pxEventBits->uxEventBits;
 8004d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* It is possible that the event bits were updated between this
                 * task leaving the Blocked state and running again. */
                if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	68b9      	ldr	r1, [r7, #8]
 8004d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9c:	0018      	movs	r0, r3
 8004d9e:	f000 f892 	bl	8004ec6 <prvTestWaitCondition>
 8004da2:	1e03      	subs	r3, r0, #0
 8004da4:	d009      	beq.n	8004dba <xEventGroupWaitBits+0x132>
                {
                    if( xClearOnExit != pdFALSE )
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d006      	beq.n	8004dba <xEventGroupWaitBits+0x132>
                    {
                        pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	43d2      	mvns	r2, r2
 8004db4:	401a      	ands	r2, r3
 8004db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db8:	601a      	str	r2, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                xTimeoutOccurred = pdTRUE;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	623b      	str	r3, [r7, #32]
            }
            taskEXIT_CRITICAL();
 8004dbe:	f002 f9e9 	bl	8007194 <vPortExitCritical>
        {
            /* The task unblocked because the bits were set. */
        }

        /* The task blocked so control bits may have been set. */
        uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc4:	021b      	lsls	r3, r3, #8
 8004dc6:	0a1b      	lsrs	r3, r3, #8
 8004dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

    /* Prevent compiler warnings when trace macros are not used. */
    ( void ) xTimeoutOccurred;

    return uxReturn;
 8004dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004dcc:	0018      	movs	r0, r3
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	b00c      	add	sp, #48	; 0x30
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <xEventGroupSetBits>:
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b08c      	sub	sp, #48	; 0x30
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
    ListItem_t * pxListItem;
    ListItem_t * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8004dde:	2300      	movs	r3, #0
 8004de0:	62bb      	str	r3, [r7, #40]	; 0x28
    EventGroup_t * pxEventBits = xEventGroup;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	623b      	str	r3, [r7, #32]
    BaseType_t xMatchFound = pdFALSE;
 8004de6:	2300      	movs	r3, #0
 8004de8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check the user is not attempting to set the bits used by the kernel
     * itself. */
    configASSERT( xEventGroup );
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d101      	bne.n	8004df4 <xEventGroupSetBits+0x20>
 8004df0:	b672      	cpsid	i
 8004df2:	e7fe      	b.n	8004df2 <xEventGroupSetBits+0x1e>
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	0e1b      	lsrs	r3, r3, #24
 8004df8:	061b      	lsls	r3, r3, #24
 8004dfa:	d001      	beq.n	8004e00 <xEventGroupSetBits+0x2c>
 8004dfc:	b672      	cpsid	i
 8004dfe:	e7fe      	b.n	8004dfe <xEventGroupSetBits+0x2a>

    pxList = &( pxEventBits->xTasksWaitingForBits );
 8004e00:	6a3b      	ldr	r3, [r7, #32]
 8004e02:	3304      	adds	r3, #4
 8004e04:	61fb      	str	r3, [r7, #28]
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	3308      	adds	r3, #8
 8004e0a:	61bb      	str	r3, [r7, #24]
    vTaskSuspendAll();
 8004e0c:	f000 fe8a 	bl	8005b24 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
 8004e16:	6a3b      	ldr	r3, [r7, #32]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	431a      	orrs	r2, r3
 8004e1e:	6a3b      	ldr	r3, [r7, #32]
 8004e20:	601a      	str	r2, [r3, #0]

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
 8004e22:	e03d      	b.n	8004ea0 <xEventGroupSetBits+0xcc>
        {
            pxNext = listGET_NEXT( pxListItem );
 8004e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	617b      	str	r3, [r7, #20]
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8004e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	613b      	str	r3, [r7, #16]
            xMatchFound = pdFALSE;
 8004e30:	2300      	movs	r3, #0
 8004e32:	627b      	str	r3, [r7, #36]	; 0x24

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	0e1b      	lsrs	r3, r3, #24
 8004e38:	061b      	lsls	r3, r3, #24
 8004e3a:	60fb      	str	r3, [r7, #12]
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	021b      	lsls	r3, r3, #8
 8004e40:	0a1b      	lsrs	r3, r3, #8
 8004e42:	613b      	str	r3, [r7, #16]

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	2380      	movs	r3, #128	; 0x80
 8004e48:	04db      	lsls	r3, r3, #19
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	d107      	bne.n	8004e5e <xEventGroupSetBits+0x8a>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8004e4e:	6a3b      	ldr	r3, [r7, #32]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	4013      	ands	r3, r2
 8004e56:	d00b      	beq.n	8004e70 <xEventGroupSetBits+0x9c>
                {
                    xMatchFound = pdTRUE;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e5c:	e008      	b.n	8004e70 <xEventGroupSetBits+0x9c>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8004e5e:	6a3b      	ldr	r3, [r7, #32]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	4013      	ands	r3, r2
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d101      	bne.n	8004e70 <xEventGroupSetBits+0x9c>
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	627b      	str	r3, [r7, #36]	; 0x24
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d012      	beq.n	8004e9c <xEventGroupSetBits+0xc8>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	2380      	movs	r3, #128	; 0x80
 8004e7a:	045b      	lsls	r3, r3, #17
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	d003      	beq.n	8004e88 <xEventGroupSetBits+0xb4>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
 8004e80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	62bb      	str	r3, [r7, #40]	; 0x28
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8004e88:	6a3b      	ldr	r3, [r7, #32]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2280      	movs	r2, #128	; 0x80
 8004e8e:	0492      	lsls	r2, r2, #18
 8004e90:	431a      	orrs	r2, r3
 8004e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e94:	0011      	movs	r1, r2
 8004e96:	0018      	movs	r0, r3
 8004e98:	f001 fa1a 	bl	80062d0 <vTaskRemoveFromUnorderedEventList>
            }

            /* Move onto the next list item.  Note pxListItem->pxNext is not
             * used here as the list item may have been removed from the event list
             * and inserted into the ready/pending reading list. */
            pxListItem = pxNext;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        while( pxListItem != pxListEnd )
 8004ea0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d1bd      	bne.n	8004e24 <xEventGroupSetBits+0x50>
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004ea8:	6a3b      	ldr	r3, [r7, #32]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004eae:	43d2      	mvns	r2, r2
 8004eb0:	401a      	ands	r2, r3
 8004eb2:	6a3b      	ldr	r3, [r7, #32]
 8004eb4:	601a      	str	r2, [r3, #0]
    }
    ( void ) xTaskResumeAll();
 8004eb6:	f000 fe41 	bl	8005b3c <xTaskResumeAll>

    return pxEventBits->uxEventBits;
 8004eba:	6a3b      	ldr	r3, [r7, #32]
 8004ebc:	681b      	ldr	r3, [r3, #0]
}
 8004ebe:	0018      	movs	r0, r3
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	b00c      	add	sp, #48	; 0x30
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
                                        const EventBits_t uxBitsToWaitFor,
                                        const BaseType_t xWaitForAllBits )
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b086      	sub	sp, #24
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	60f8      	str	r0, [r7, #12]
 8004ece:	60b9      	str	r1, [r7, #8]
 8004ed0:	607a      	str	r2, [r7, #4]
    BaseType_t xWaitConditionMet = pdFALSE;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	617b      	str	r3, [r7, #20]

    if( xWaitForAllBits == pdFALSE )
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d106      	bne.n	8004eea <prvTestWaitCondition+0x24>
    {
        /* Task only has to wait for one bit within uxBitsToWaitFor to be
         * set.  Is one already set? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	d00a      	beq.n	8004efa <prvTestWaitCondition+0x34>
        {
            xWaitConditionMet = pdTRUE;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	617b      	str	r3, [r7, #20]
 8004ee8:	e007      	b.n	8004efa <prvTestWaitCondition+0x34>
    }
    else
    {
        /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
         * Are they set already? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	68ba      	ldr	r2, [r7, #8]
 8004eee:	4013      	ands	r3, r2
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d101      	bne.n	8004efa <prvTestWaitCondition+0x34>
        {
            xWaitConditionMet = pdTRUE;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	617b      	str	r3, [r7, #20]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    return xWaitConditionMet;
 8004efa:	697b      	ldr	r3, [r7, #20]
}
 8004efc:	0018      	movs	r0, r3
 8004efe:	46bd      	mov	sp, r7
 8004f00:	b006      	add	sp, #24
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	3308      	adds	r3, #8
 8004f10:	001a      	movs	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	4252      	negs	r2, r2
 8004f1c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	3308      	adds	r3, #8
 8004f22:	001a      	movs	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3308      	adds	r3, #8
 8004f2c:	001a      	movs	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f38:	46c0      	nop			; (mov r8, r8)
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	b002      	add	sp, #8
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f4e:	46c0      	nop			; (mov r8, r8)
 8004f50:	46bd      	mov	sp, r7
 8004f52:	b002      	add	sp, #8
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b084      	sub	sp, #16
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
 8004f5e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	d103      	bne.n	8004f74 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	60fb      	str	r3, [r7, #12]
 8004f72:	e00c      	b.n	8004f8e <vListInsert+0x38>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	3308      	adds	r3, #8
 8004f78:	60fb      	str	r3, [r7, #12]
 8004f7a:	e002      	b.n	8004f82 <vListInsert+0x2c>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	60fb      	str	r3, [r7, #12]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d2f6      	bcs.n	8004f7c <vListInsert+0x26>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	683a      	ldr	r2, [r7, #0]
 8004fa8:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	1c5a      	adds	r2, r3, #1
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	601a      	str	r2, [r3, #0]
}
 8004fba:	46c0      	nop			; (mov r8, r8)
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	b004      	add	sp, #16
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b084      	sub	sp, #16
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	6892      	ldr	r2, [r2, #8]
 8004fd8:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	6852      	ldr	r2, [r2, #4]
 8004fe2:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d103      	bne.n	8004ff6 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689a      	ldr	r2, [r3, #8]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	1e5a      	subs	r2, r3, #1
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
}
 800500a:	0018      	movs	r0, r3
 800500c:	46bd      	mov	sp, r7
 800500e:	b004      	add	sp, #16
 8005010:	bd80      	pop	{r7, pc}

08005012 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8005012:	b5b0      	push	{r4, r5, r7, lr}
 8005014:	b084      	sub	sp, #16
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
 800501a:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800501c:	2301      	movs	r3, #1
 800501e:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <xQueueGenericReset+0x1c>
 800502a:	b672      	cpsid	i
 800502c:	e7fe      	b.n	800502c <xQueueGenericReset+0x1a>

    if( ( pxQueue != NULL ) &&
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d100      	bne.n	8005036 <xQueueGenericReset+0x24>
 8005034:	e06a      	b.n	800510c <xQueueGenericReset+0xfa>
        ( pxQueue->uxLength >= 1U ) &&
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800503a:	2b00      	cmp	r3, #0
 800503c:	d066      	beq.n	800510c <xQueueGenericReset+0xfa>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005046:	2400      	movs	r4, #0
 8005048:	0c15      	lsrs	r5, r2, #16
 800504a:	0c19      	lsrs	r1, r3, #16
 800504c:	b2a8      	uxth	r0, r5
 800504e:	2800      	cmp	r0, #0
 8005050:	d104      	bne.n	800505c <xQueueGenericReset+0x4a>
 8005052:	b288      	uxth	r0, r1
 8005054:	2800      	cmp	r0, #0
 8005056:	d013      	beq.n	8005080 <xQueueGenericReset+0x6e>
 8005058:	1c10      	adds	r0, r2, #0
 800505a:	e004      	b.n	8005066 <xQueueGenericReset+0x54>
 800505c:	b289      	uxth	r1, r1
 800505e:	2900      	cmp	r1, #0
 8005060:	d10d      	bne.n	800507e <xQueueGenericReset+0x6c>
 8005062:	1c29      	adds	r1, r5, #0
 8005064:	1c18      	adds	r0, r3, #0
 8005066:	b292      	uxth	r2, r2
 8005068:	b29b      	uxth	r3, r3
 800506a:	435a      	muls	r2, r3
 800506c:	b283      	uxth	r3, r0
 800506e:	b289      	uxth	r1, r1
 8005070:	434b      	muls	r3, r1
 8005072:	0c12      	lsrs	r2, r2, #16
 8005074:	189b      	adds	r3, r3, r2
 8005076:	141b      	asrs	r3, r3, #16
 8005078:	b29b      	uxth	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d000      	beq.n	8005080 <xQueueGenericReset+0x6e>
 800507e:	2401      	movs	r4, #1
 8005080:	1e23      	subs	r3, r4, #0
        ( pxQueue->uxLength >= 1U ) &&
 8005082:	d143      	bne.n	800510c <xQueueGenericReset+0xfa>
    {
        taskENTER_CRITICAL();
 8005084:	f002 f874 	bl	8007170 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005094:	434b      	muls	r3, r1
 8005096:	18d2      	adds	r2, r2, r3
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	2200      	movs	r2, #0
 80050a0:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b2:	1e59      	subs	r1, r3, #1
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b8:	434b      	muls	r3, r1
 80050ba:	18d2      	adds	r2, r2, r3
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	2244      	movs	r2, #68	; 0x44
 80050c4:	21ff      	movs	r1, #255	; 0xff
 80050c6:	5499      	strb	r1, [r3, r2]
            pxQueue->cTxLock = queueUNLOCKED;
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	2245      	movs	r2, #69	; 0x45
 80050cc:	21ff      	movs	r1, #255	; 0xff
 80050ce:	5499      	strb	r1, [r3, r2]

            if( xNewQueue == pdFALSE )
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10d      	bne.n	80050f2 <xQueueGenericReset+0xe0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d013      	beq.n	8005106 <xQueueGenericReset+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	3310      	adds	r3, #16
 80050e2:	0018      	movs	r0, r3
 80050e4:	f001 f82a 	bl	800613c <xTaskRemoveFromEventList>
 80050e8:	1e03      	subs	r3, r0, #0
 80050ea:	d00c      	beq.n	8005106 <xQueueGenericReset+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80050ec:	f002 f830 	bl	8007150 <vPortYield>
 80050f0:	e009      	b.n	8005106 <xQueueGenericReset+0xf4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	3310      	adds	r3, #16
 80050f6:	0018      	movs	r0, r3
 80050f8:	f7ff ff04 	bl	8004f04 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	3324      	adds	r3, #36	; 0x24
 8005100:	0018      	movs	r0, r3
 8005102:	f7ff feff 	bl	8004f04 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8005106:	f002 f845 	bl	8007194 <vPortExitCritical>
 800510a:	e001      	b.n	8005110 <xQueueGenericReset+0xfe>
    }
    else
    {
        xReturn = pdFAIL;
 800510c:	2300      	movs	r3, #0
 800510e:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d101      	bne.n	800511a <xQueueGenericReset+0x108>
 8005116:	b672      	cpsid	i
 8005118:	e7fe      	b.n	8005118 <xQueueGenericReset+0x106>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800511a:	68fb      	ldr	r3, [r7, #12]
}
 800511c:	0018      	movs	r0, r3
 800511e:	46bd      	mov	sp, r7
 8005120:	b004      	add	sp, #16
 8005122:	bdb0      	pop	{r4, r5, r7, pc}

08005124 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8005124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005126:	b08b      	sub	sp, #44	; 0x2c
 8005128:	af02      	add	r7, sp, #8
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	1dfb      	adds	r3, r7, #7
 8005130:	701a      	strb	r2, [r3, #0]
        Queue_t * pxNewQueue = NULL;
 8005132:	2300      	movs	r3, #0
 8005134:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d047      	beq.n	80051cc <xQueueGenericCreate+0xa8>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800513c:	2000      	movs	r0, #0
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	0c19      	lsrs	r1, r3, #16
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	1c1e      	adds	r6, r3, #0
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	0c1b      	lsrs	r3, r3, #16
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	1c15      	adds	r5, r2, #0
 800514e:	b28a      	uxth	r2, r1
 8005150:	2a00      	cmp	r2, #0
 8005152:	d105      	bne.n	8005160 <xQueueGenericCreate+0x3c>
 8005154:	b29a      	uxth	r2, r3
 8005156:	2a00      	cmp	r2, #0
 8005158:	d013      	beq.n	8005182 <xQueueGenericCreate+0x5e>
 800515a:	1c19      	adds	r1, r3, #0
 800515c:	1c34      	adds	r4, r6, #0
 800515e:	e003      	b.n	8005168 <xQueueGenericCreate+0x44>
 8005160:	b29b      	uxth	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10c      	bne.n	8005180 <xQueueGenericCreate+0x5c>
 8005166:	1c2c      	adds	r4, r5, #0
 8005168:	b2b3      	uxth	r3, r6
 800516a:	b2aa      	uxth	r2, r5
 800516c:	435a      	muls	r2, r3
 800516e:	b2a3      	uxth	r3, r4
 8005170:	b289      	uxth	r1, r1
 8005172:	434b      	muls	r3, r1
 8005174:	0c12      	lsrs	r2, r2, #16
 8005176:	189b      	adds	r3, r3, r2
 8005178:	141b      	asrs	r3, r3, #16
 800517a:	b29b      	uxth	r3, r3
 800517c:	2b00      	cmp	r3, #0
 800517e:	d000      	beq.n	8005182 <xQueueGenericCreate+0x5e>
 8005180:	2001      	movs	r0, #1
 8005182:	1e03      	subs	r3, r0, #0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8005184:	d122      	bne.n	80051cc <xQueueGenericCreate+0xa8>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	4353      	muls	r3, r2
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800518c:	3351      	adds	r3, #81	; 0x51
 800518e:	d81d      	bhi.n	80051cc <xQueueGenericCreate+0xa8>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	68ba      	ldr	r2, [r7, #8]
 8005194:	4353      	muls	r3, r2
 8005196:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	3350      	adds	r3, #80	; 0x50
 800519c:	0018      	movs	r0, r3
 800519e:	f002 f87f 	bl	80072a0 <pvPortMalloc>
 80051a2:	0003      	movs	r3, r0
 80051a4:	61fb      	str	r3, [r7, #28]

            if( pxNewQueue != NULL )
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d014      	beq.n	80051d6 <xQueueGenericCreate+0xb2>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	3350      	adds	r3, #80	; 0x50
 80051b4:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80051b6:	1dfb      	adds	r3, r7, #7
 80051b8:	781c      	ldrb	r4, [r3, #0]
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	68b9      	ldr	r1, [r7, #8]
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	9300      	str	r3, [sp, #0]
 80051c4:	0023      	movs	r3, r4
 80051c6:	f000 f80b 	bl	80051e0 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80051ca:	e004      	b.n	80051d6 <xQueueGenericCreate+0xb2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d101      	bne.n	80051d6 <xQueueGenericCreate+0xb2>
 80051d2:	b672      	cpsid	i
 80051d4:	e7fe      	b.n	80051d4 <xQueueGenericCreate+0xb0>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80051d6:	69fb      	ldr	r3, [r7, #28]
    }
 80051d8:	0018      	movs	r0, r3
 80051da:	46bd      	mov	sp, r7
 80051dc:	b009      	add	sp, #36	; 0x24
 80051de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080051e0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
 80051ec:	001a      	movs	r2, r3
 80051ee:	1cfb      	adds	r3, r7, #3
 80051f0:	701a      	strb	r2, [r3, #0]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d103      	bne.n	8005200 <prvInitialiseNewQueue+0x20>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	601a      	str	r2, [r3, #0]
 80051fe:	e002      	b.n	8005206 <prvInitialiseNewQueue+0x26>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	68ba      	ldr	r2, [r7, #8]
 8005210:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	2101      	movs	r1, #1
 8005216:	0018      	movs	r0, r3
 8005218:	f7ff fefb 	bl	8005012 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	1cfa      	adds	r2, r7, #3
 8005220:	214c      	movs	r1, #76	; 0x4c
 8005222:	7812      	ldrb	r2, [r2, #0]
 8005224:	545a      	strb	r2, [r3, r1]
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8005226:	46c0      	nop			; (mov r8, r8)
 8005228:	46bd      	mov	sp, r7
 800522a:	b004      	add	sp, #16
 800522c:	bd80      	pop	{r7, pc}

0800522e <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800522e:	b590      	push	{r4, r7, lr}
 8005230:	b08b      	sub	sp, #44	; 0x2c
 8005232:	af00      	add	r7, sp, #0
 8005234:	60f8      	str	r0, [r7, #12]
 8005236:	60b9      	str	r1, [r7, #8]
 8005238:	607a      	str	r2, [r7, #4]
 800523a:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 8005240:	6a3b      	ldr	r3, [r7, #32]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <xQueueGenericSendFromISR+0x1c>
 8005246:	b672      	cpsid	i
 8005248:	e7fe      	b.n	8005248 <xQueueGenericSendFromISR+0x1a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d103      	bne.n	8005258 <xQueueGenericSendFromISR+0x2a>
 8005250:	6a3b      	ldr	r3, [r7, #32]
 8005252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005254:	2b00      	cmp	r3, #0
 8005256:	d101      	bne.n	800525c <xQueueGenericSendFromISR+0x2e>
 8005258:	2301      	movs	r3, #1
 800525a:	e000      	b.n	800525e <xQueueGenericSendFromISR+0x30>
 800525c:	2300      	movs	r3, #0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <xQueueGenericSendFromISR+0x38>
 8005262:	b672      	cpsid	i
 8005264:	e7fe      	b.n	8005264 <xQueueGenericSendFromISR+0x36>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	2b02      	cmp	r3, #2
 800526a:	d103      	bne.n	8005274 <xQueueGenericSendFromISR+0x46>
 800526c:	6a3b      	ldr	r3, [r7, #32]
 800526e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005270:	2b01      	cmp	r3, #1
 8005272:	d101      	bne.n	8005278 <xQueueGenericSendFromISR+0x4a>
 8005274:	2301      	movs	r3, #1
 8005276:	e000      	b.n	800527a <xQueueGenericSendFromISR+0x4c>
 8005278:	2300      	movs	r3, #0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <xQueueGenericSendFromISR+0x54>
 800527e:	b672      	cpsid	i
 8005280:	e7fe      	b.n	8005280 <xQueueGenericSendFromISR+0x52>
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005282:	f001 ff9f 	bl	80071c4 <ulSetInterruptMaskFromISR>
 8005286:	0003      	movs	r3, r0
 8005288:	61fb      	str	r3, [r7, #28]
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800528a:	6a3b      	ldr	r3, [r7, #32]
 800528c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800528e:	6a3b      	ldr	r3, [r7, #32]
 8005290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005292:	429a      	cmp	r2, r3
 8005294:	d302      	bcc.n	800529c <xQueueGenericSendFromISR+0x6e>
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2b02      	cmp	r3, #2
 800529a:	d143      	bne.n	8005324 <xQueueGenericSendFromISR+0xf6>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800529c:	241b      	movs	r4, #27
 800529e:	193b      	adds	r3, r7, r4
 80052a0:	6a3a      	ldr	r2, [r7, #32]
 80052a2:	2145      	movs	r1, #69	; 0x45
 80052a4:	5c52      	ldrb	r2, [r2, r1]
 80052a6:	701a      	strb	r2, [r3, #0]
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052a8:	6a3b      	ldr	r3, [r7, #32]
 80052aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ac:	617b      	str	r3, [r7, #20]
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	68b9      	ldr	r1, [r7, #8]
 80052b2:	6a3b      	ldr	r3, [r7, #32]
 80052b4:	0018      	movs	r0, r3
 80052b6:	f000 f8f5 	bl	80054a4 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80052ba:	193b      	adds	r3, r7, r4
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	b25b      	sxtb	r3, r3
 80052c0:	3301      	adds	r3, #1
 80052c2:	d111      	bne.n	80052e8 <xQueueGenericSendFromISR+0xba>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d028      	beq.n	800531e <xQueueGenericSendFromISR+0xf0>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052cc:	6a3b      	ldr	r3, [r7, #32]
 80052ce:	3324      	adds	r3, #36	; 0x24
 80052d0:	0018      	movs	r0, r3
 80052d2:	f000 ff33 	bl	800613c <xTaskRemoveFromEventList>
 80052d6:	1e03      	subs	r3, r0, #0
 80052d8:	d021      	beq.n	800531e <xQueueGenericSendFromISR+0xf0>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d01e      	beq.n	800531e <xQueueGenericSendFromISR+0xf0>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	e01a      	b.n	800531e <xQueueGenericSendFromISR+0xf0>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 80052e8:	f000 fd1e 	bl	8005d28 <uxTaskGetNumberOfTasks>
 80052ec:	0003      	movs	r3, r0
 80052ee:	613b      	str	r3, [r7, #16]
 80052f0:	211b      	movs	r1, #27
 80052f2:	187b      	adds	r3, r7, r1
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	b25b      	sxtb	r3, r3
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d90f      	bls.n	800531e <xQueueGenericSendFromISR+0xf0>
 80052fe:	187b      	adds	r3, r7, r1
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	b25b      	sxtb	r3, r3
 8005304:	2b7f      	cmp	r3, #127	; 0x7f
 8005306:	d101      	bne.n	800530c <xQueueGenericSendFromISR+0xde>
 8005308:	b672      	cpsid	i
 800530a:	e7fe      	b.n	800530a <xQueueGenericSendFromISR+0xdc>
 800530c:	231b      	movs	r3, #27
 800530e:	18fb      	adds	r3, r7, r3
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	3301      	adds	r3, #1
 8005314:	b2db      	uxtb	r3, r3
 8005316:	b259      	sxtb	r1, r3
 8005318:	6a3b      	ldr	r3, [r7, #32]
 800531a:	2245      	movs	r2, #69	; 0x45
 800531c:	5499      	strb	r1, [r3, r2]
            }

            xReturn = pdPASS;
 800531e:	2301      	movs	r3, #1
 8005320:	627b      	str	r3, [r7, #36]	; 0x24
        {
 8005322:	e001      	b.n	8005328 <xQueueGenericSendFromISR+0xfa>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8005324:	2300      	movs	r3, #0
 8005326:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	0018      	movs	r0, r3
 800532c:	f001 ff50 	bl	80071d0 <vClearInterruptMaskFromISR>

    return xReturn;
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005332:	0018      	movs	r0, r3
 8005334:	46bd      	mov	sp, r7
 8005336:	b00b      	add	sp, #44	; 0x2c
 8005338:	bd90      	pop	{r4, r7, pc}

0800533a <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800533a:	b580      	push	{r7, lr}
 800533c:	b08a      	sub	sp, #40	; 0x28
 800533e:	af00      	add	r7, sp, #0
 8005340:	60f8      	str	r0, [r7, #12]
 8005342:	60b9      	str	r1, [r7, #8]
 8005344:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005346:	2300      	movs	r3, #0
 8005348:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800534e:	6a3b      	ldr	r3, [r7, #32]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d101      	bne.n	8005358 <xQueueReceive+0x1e>
 8005354:	b672      	cpsid	i
 8005356:	e7fe      	b.n	8005356 <xQueueReceive+0x1c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d103      	bne.n	8005366 <xQueueReceive+0x2c>
 800535e:	6a3b      	ldr	r3, [r7, #32]
 8005360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005362:	2b00      	cmp	r3, #0
 8005364:	d101      	bne.n	800536a <xQueueReceive+0x30>
 8005366:	2301      	movs	r3, #1
 8005368:	e000      	b.n	800536c <xQueueReceive+0x32>
 800536a:	2300      	movs	r3, #0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d101      	bne.n	8005374 <xQueueReceive+0x3a>
 8005370:	b672      	cpsid	i
 8005372:	e7fe      	b.n	8005372 <xQueueReceive+0x38>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005374:	f001 f978 	bl	8006668 <xTaskGetSchedulerState>
 8005378:	1e03      	subs	r3, r0, #0
 800537a:	d102      	bne.n	8005382 <xQueueReceive+0x48>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <xQueueReceive+0x4c>
 8005382:	2301      	movs	r3, #1
 8005384:	e000      	b.n	8005388 <xQueueReceive+0x4e>
 8005386:	2300      	movs	r3, #0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d101      	bne.n	8005390 <xQueueReceive+0x56>
 800538c:	b672      	cpsid	i
 800538e:	e7fe      	b.n	800538e <xQueueReceive+0x54>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005390:	f001 feee 	bl	8007170 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005394:	6a3b      	ldr	r3, [r7, #32]
 8005396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005398:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d01a      	beq.n	80053d6 <xQueueReceive+0x9c>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	6a3b      	ldr	r3, [r7, #32]
 80053a4:	0011      	movs	r1, r2
 80053a6:	0018      	movs	r0, r3
 80053a8:	f000 f8e7 	bl	800557a <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	1e5a      	subs	r2, r3, #1
 80053b0:	6a3b      	ldr	r3, [r7, #32]
 80053b2:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053b4:	6a3b      	ldr	r3, [r7, #32]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d008      	beq.n	80053ce <xQueueReceive+0x94>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053bc:	6a3b      	ldr	r3, [r7, #32]
 80053be:	3310      	adds	r3, #16
 80053c0:	0018      	movs	r0, r3
 80053c2:	f000 febb 	bl	800613c <xTaskRemoveFromEventList>
 80053c6:	1e03      	subs	r3, r0, #0
 80053c8:	d001      	beq.n	80053ce <xQueueReceive+0x94>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80053ca:	f001 fec1 	bl	8007150 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80053ce:	f001 fee1 	bl	8007194 <vPortExitCritical>
                return pdPASS;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e062      	b.n	800549c <xQueueReceive+0x162>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d103      	bne.n	80053e4 <xQueueReceive+0xaa>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80053dc:	f001 feda 	bl	8007194 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80053e0:	2300      	movs	r3, #0
 80053e2:	e05b      	b.n	800549c <xQueueReceive+0x162>
                }
                else if( xEntryTimeSet == pdFALSE )
 80053e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d106      	bne.n	80053f8 <xQueueReceive+0xbe>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80053ea:	2314      	movs	r3, #20
 80053ec:	18fb      	adds	r3, r7, r3
 80053ee:	0018      	movs	r0, r3
 80053f0:	f001 f81a 	bl	8006428 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80053f4:	2301      	movs	r3, #1
 80053f6:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80053f8:	f001 fecc 	bl	8007194 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80053fc:	f000 fb92 	bl	8005b24 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005400:	f001 feb6 	bl	8007170 <vPortEnterCritical>
 8005404:	6a3b      	ldr	r3, [r7, #32]
 8005406:	2244      	movs	r2, #68	; 0x44
 8005408:	5c9b      	ldrb	r3, [r3, r2]
 800540a:	b25b      	sxtb	r3, r3
 800540c:	3301      	adds	r3, #1
 800540e:	d103      	bne.n	8005418 <xQueueReceive+0xde>
 8005410:	6a3b      	ldr	r3, [r7, #32]
 8005412:	2244      	movs	r2, #68	; 0x44
 8005414:	2100      	movs	r1, #0
 8005416:	5499      	strb	r1, [r3, r2]
 8005418:	6a3b      	ldr	r3, [r7, #32]
 800541a:	2245      	movs	r2, #69	; 0x45
 800541c:	5c9b      	ldrb	r3, [r3, r2]
 800541e:	b25b      	sxtb	r3, r3
 8005420:	3301      	adds	r3, #1
 8005422:	d103      	bne.n	800542c <xQueueReceive+0xf2>
 8005424:	6a3b      	ldr	r3, [r7, #32]
 8005426:	2245      	movs	r2, #69	; 0x45
 8005428:	2100      	movs	r1, #0
 800542a:	5499      	strb	r1, [r3, r2]
 800542c:	f001 feb2 	bl	8007194 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005430:	1d3a      	adds	r2, r7, #4
 8005432:	2314      	movs	r3, #20
 8005434:	18fb      	adds	r3, r7, r3
 8005436:	0011      	movs	r1, r2
 8005438:	0018      	movs	r0, r3
 800543a:	f001 f809 	bl	8006450 <xTaskCheckForTimeOut>
 800543e:	1e03      	subs	r3, r0, #0
 8005440:	d11e      	bne.n	8005480 <xQueueReceive+0x146>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005442:	6a3b      	ldr	r3, [r7, #32]
 8005444:	0018      	movs	r0, r3
 8005446:	f000 f91c 	bl	8005682 <prvIsQueueEmpty>
 800544a:	1e03      	subs	r3, r0, #0
 800544c:	d011      	beq.n	8005472 <xQueueReceive+0x138>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800544e:	6a3b      	ldr	r3, [r7, #32]
 8005450:	3324      	adds	r3, #36	; 0x24
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	0011      	movs	r1, r2
 8005456:	0018      	movs	r0, r3
 8005458:	f000 fdce 	bl	8005ff8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800545c:	6a3b      	ldr	r3, [r7, #32]
 800545e:	0018      	movs	r0, r3
 8005460:	f000 f8b1 	bl	80055c6 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8005464:	f000 fb6a 	bl	8005b3c <xTaskResumeAll>
 8005468:	1e03      	subs	r3, r0, #0
 800546a:	d191      	bne.n	8005390 <xQueueReceive+0x56>
                {
                    portYIELD_WITHIN_API();
 800546c:	f001 fe70 	bl	8007150 <vPortYield>
 8005470:	e78e      	b.n	8005390 <xQueueReceive+0x56>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8005472:	6a3b      	ldr	r3, [r7, #32]
 8005474:	0018      	movs	r0, r3
 8005476:	f000 f8a6 	bl	80055c6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800547a:	f000 fb5f 	bl	8005b3c <xTaskResumeAll>
 800547e:	e787      	b.n	8005390 <xQueueReceive+0x56>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8005480:	6a3b      	ldr	r3, [r7, #32]
 8005482:	0018      	movs	r0, r3
 8005484:	f000 f89f 	bl	80055c6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005488:	f000 fb58 	bl	8005b3c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800548c:	6a3b      	ldr	r3, [r7, #32]
 800548e:	0018      	movs	r0, r3
 8005490:	f000 f8f7 	bl	8005682 <prvIsQueueEmpty>
 8005494:	1e03      	subs	r3, r0, #0
 8005496:	d100      	bne.n	800549a <xQueueReceive+0x160>
 8005498:	e77a      	b.n	8005390 <xQueueReceive+0x56>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800549a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800549c:	0018      	movs	r0, r3
 800549e:	46bd      	mov	sp, r7
 80054a0:	b00a      	add	sp, #40	; 0x28
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80054b0:	2300      	movs	r3, #0
 80054b2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10e      	bne.n	80054e0 <prvCopyDataToQueue+0x3c>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d14e      	bne.n	8005568 <prvCopyDataToQueue+0xc4>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	0018      	movs	r0, r3
 80054d0:	f001 f8e6 	bl	80066a0 <xTaskPriorityDisinherit>
 80054d4:	0003      	movs	r3, r0
 80054d6:	617b      	str	r3, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	609a      	str	r2, [r3, #8]
 80054de:	e043      	b.n	8005568 <prvCopyDataToQueue+0xc4>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d119      	bne.n	800551a <prvCopyDataToQueue+0x76>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6858      	ldr	r0, [r3, #4]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	0019      	movs	r1, r3
 80054f2:	f002 f89f 	bl	8007634 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	685a      	ldr	r2, [r3, #4]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fe:	18d2      	adds	r2, r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	685a      	ldr	r2, [r3, #4]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	429a      	cmp	r2, r3
 800550e:	d32b      	bcc.n	8005568 <prvCopyDataToQueue+0xc4>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	605a      	str	r2, [r3, #4]
 8005518:	e026      	b.n	8005568 <prvCopyDataToQueue+0xc4>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	68d8      	ldr	r0, [r3, #12]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	0019      	movs	r1, r3
 8005526:	f002 f885 	bl	8007634 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	68da      	ldr	r2, [r3, #12]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005532:	425b      	negs	r3, r3
 8005534:	18d2      	adds	r2, r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	68da      	ldr	r2, [r3, #12]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	429a      	cmp	r2, r3
 8005544:	d207      	bcs.n	8005556 <prvCopyDataToQueue+0xb2>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	689a      	ldr	r2, [r3, #8]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554e:	425b      	negs	r3, r3
 8005550:	18d2      	adds	r2, r2, r3
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2b02      	cmp	r3, #2
 800555a:	d105      	bne.n	8005568 <prvCopyDataToQueue+0xc4>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d002      	beq.n	8005568 <prvCopyDataToQueue+0xc4>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	3b01      	subs	r3, #1
 8005566:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	1c5a      	adds	r2, r3, #1
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8005570:	697b      	ldr	r3, [r7, #20]
}
 8005572:	0018      	movs	r0, r3
 8005574:	46bd      	mov	sp, r7
 8005576:	b006      	add	sp, #24
 8005578:	bd80      	pop	{r7, pc}

0800557a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b082      	sub	sp, #8
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
 8005582:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005588:	2b00      	cmp	r3, #0
 800558a:	d018      	beq.n	80055be <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	68da      	ldr	r2, [r3, #12]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005594:	18d2      	adds	r2, r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	68da      	ldr	r2, [r3, #12]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d303      	bcc.n	80055ae <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	68d9      	ldr	r1, [r3, #12]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	0018      	movs	r0, r3
 80055ba:	f002 f83b 	bl	8007634 <memcpy>
    }
}
 80055be:	46c0      	nop			; (mov r8, r8)
 80055c0:	46bd      	mov	sp, r7
 80055c2:	b002      	add	sp, #8
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b084      	sub	sp, #16
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80055ce:	f001 fdcf 	bl	8007170 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80055d2:	230f      	movs	r3, #15
 80055d4:	18fb      	adds	r3, r7, r3
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	2145      	movs	r1, #69	; 0x45
 80055da:	5c52      	ldrb	r2, [r2, r1]
 80055dc:	701a      	strb	r2, [r3, #0]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80055de:	e013      	b.n	8005608 <prvUnlockQueue+0x42>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d016      	beq.n	8005616 <prvUnlockQueue+0x50>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	3324      	adds	r3, #36	; 0x24
 80055ec:	0018      	movs	r0, r3
 80055ee:	f000 fda5 	bl	800613c <xTaskRemoveFromEventList>
 80055f2:	1e03      	subs	r3, r0, #0
 80055f4:	d001      	beq.n	80055fa <prvUnlockQueue+0x34>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80055f6:	f000 ff7f 	bl	80064f8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80055fa:	210f      	movs	r1, #15
 80055fc:	187b      	adds	r3, r7, r1
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	3b01      	subs	r3, #1
 8005602:	b2da      	uxtb	r2, r3
 8005604:	187b      	adds	r3, r7, r1
 8005606:	701a      	strb	r2, [r3, #0]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005608:	230f      	movs	r3, #15
 800560a:	18fb      	adds	r3, r7, r3
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	b25b      	sxtb	r3, r3
 8005610:	2b00      	cmp	r3, #0
 8005612:	dce5      	bgt.n	80055e0 <prvUnlockQueue+0x1a>
 8005614:	e000      	b.n	8005618 <prvUnlockQueue+0x52>
                    break;
 8005616:	46c0      	nop			; (mov r8, r8)
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2245      	movs	r2, #69	; 0x45
 800561c:	21ff      	movs	r1, #255	; 0xff
 800561e:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8005620:	f001 fdb8 	bl	8007194 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8005624:	f001 fda4 	bl	8007170 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8005628:	230e      	movs	r3, #14
 800562a:	18fb      	adds	r3, r7, r3
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	2144      	movs	r1, #68	; 0x44
 8005630:	5c52      	ldrb	r2, [r2, r1]
 8005632:	701a      	strb	r2, [r3, #0]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005634:	e013      	b.n	800565e <prvUnlockQueue+0x98>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d016      	beq.n	800566c <prvUnlockQueue+0xa6>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	3310      	adds	r3, #16
 8005642:	0018      	movs	r0, r3
 8005644:	f000 fd7a 	bl	800613c <xTaskRemoveFromEventList>
 8005648:	1e03      	subs	r3, r0, #0
 800564a:	d001      	beq.n	8005650 <prvUnlockQueue+0x8a>
                {
                    vTaskMissedYield();
 800564c:	f000 ff54 	bl	80064f8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8005650:	210e      	movs	r1, #14
 8005652:	187b      	adds	r3, r7, r1
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	3b01      	subs	r3, #1
 8005658:	b2da      	uxtb	r2, r3
 800565a:	187b      	adds	r3, r7, r1
 800565c:	701a      	strb	r2, [r3, #0]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800565e:	230e      	movs	r3, #14
 8005660:	18fb      	adds	r3, r7, r3
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	b25b      	sxtb	r3, r3
 8005666:	2b00      	cmp	r3, #0
 8005668:	dce5      	bgt.n	8005636 <prvUnlockQueue+0x70>
 800566a:	e000      	b.n	800566e <prvUnlockQueue+0xa8>
            }
            else
            {
                break;
 800566c:	46c0      	nop			; (mov r8, r8)
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2244      	movs	r2, #68	; 0x44
 8005672:	21ff      	movs	r1, #255	; 0xff
 8005674:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8005676:	f001 fd8d 	bl	8007194 <vPortExitCritical>
}
 800567a:	46c0      	nop			; (mov r8, r8)
 800567c:	46bd      	mov	sp, r7
 800567e:	b004      	add	sp, #16
 8005680:	bd80      	pop	{r7, pc}

08005682 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b084      	sub	sp, #16
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800568a:	f001 fd71 	bl	8007170 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005692:	2b00      	cmp	r3, #0
 8005694:	d102      	bne.n	800569c <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8005696:	2301      	movs	r3, #1
 8005698:	60fb      	str	r3, [r7, #12]
 800569a:	e001      	b.n	80056a0 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800569c:	2300      	movs	r3, #0
 800569e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80056a0:	f001 fd78 	bl	8007194 <vPortExitCritical>

    return xReturn;
 80056a4:	68fb      	ldr	r3, [r7, #12]
}
 80056a6:	0018      	movs	r0, r3
 80056a8:	46bd      	mov	sp, r7
 80056aa:	b004      	add	sp, #16
 80056ac:	bd80      	pop	{r7, pc}
	...

080056b0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80056ba:	2300      	movs	r3, #0
 80056bc:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d101      	bne.n	80056c8 <vQueueAddToRegistry+0x18>
 80056c4:	b672      	cpsid	i
 80056c6:	e7fe      	b.n	80056c6 <vQueueAddToRegistry+0x16>

        if( pcQueueName != NULL )
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d025      	beq.n	800571a <vQueueAddToRegistry+0x6a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80056ce:	2300      	movs	r3, #0
 80056d0:	60fb      	str	r3, [r7, #12]
 80056d2:	e01f      	b.n	8005714 <vQueueAddToRegistry+0x64>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80056d4:	4a17      	ldr	r2, [pc, #92]	; (8005734 <vQueueAddToRegistry+0x84>)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	00db      	lsls	r3, r3, #3
 80056da:	18d3      	adds	r3, r2, r3
 80056dc:	3304      	adds	r3, #4
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d105      	bne.n	80056f2 <vQueueAddToRegistry+0x42>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	00da      	lsls	r2, r3, #3
 80056ea:	4b12      	ldr	r3, [pc, #72]	; (8005734 <vQueueAddToRegistry+0x84>)
 80056ec:	18d3      	adds	r3, r2, r3
 80056ee:	60bb      	str	r3, [r7, #8]
                    break;
 80056f0:	e013      	b.n	800571a <vQueueAddToRegistry+0x6a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10a      	bne.n	800570e <vQueueAddToRegistry+0x5e>
 80056f8:	4b0e      	ldr	r3, [pc, #56]	; (8005734 <vQueueAddToRegistry+0x84>)
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	00d2      	lsls	r2, r2, #3
 80056fe:	58d3      	ldr	r3, [r2, r3]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d104      	bne.n	800570e <vQueueAddToRegistry+0x5e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	00da      	lsls	r2, r3, #3
 8005708:	4b0a      	ldr	r3, [pc, #40]	; (8005734 <vQueueAddToRegistry+0x84>)
 800570a:	18d3      	adds	r3, r2, r3
 800570c:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	3301      	adds	r3, #1
 8005712:	60fb      	str	r3, [r7, #12]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2b07      	cmp	r3, #7
 8005718:	d9dc      	bls.n	80056d4 <vQueueAddToRegistry+0x24>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d005      	beq.n	800572c <vQueueAddToRegistry+0x7c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	683a      	ldr	r2, [r7, #0]
 8005724:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800572c:	46c0      	nop			; (mov r8, r8)
 800572e:	46bd      	mov	sp, r7
 8005730:	b004      	add	sp, #16
 8005732:	bd80      	pop	{r7, pc}
 8005734:	20000278 	.word	0x20000278

08005738 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8005748:	f001 fd12 	bl	8007170 <vPortEnterCritical>
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	2244      	movs	r2, #68	; 0x44
 8005750:	5c9b      	ldrb	r3, [r3, r2]
 8005752:	b25b      	sxtb	r3, r3
 8005754:	3301      	adds	r3, #1
 8005756:	d103      	bne.n	8005760 <vQueueWaitForMessageRestricted+0x28>
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	2244      	movs	r2, #68	; 0x44
 800575c:	2100      	movs	r1, #0
 800575e:	5499      	strb	r1, [r3, r2]
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	2245      	movs	r2, #69	; 0x45
 8005764:	5c9b      	ldrb	r3, [r3, r2]
 8005766:	b25b      	sxtb	r3, r3
 8005768:	3301      	adds	r3, #1
 800576a:	d103      	bne.n	8005774 <vQueueWaitForMessageRestricted+0x3c>
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	2245      	movs	r2, #69	; 0x45
 8005770:	2100      	movs	r1, #0
 8005772:	5499      	strb	r1, [r3, r2]
 8005774:	f001 fd0e 	bl	8007194 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577c:	2b00      	cmp	r3, #0
 800577e:	d106      	bne.n	800578e <vQueueWaitForMessageRestricted+0x56>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	3324      	adds	r3, #36	; 0x24
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	68b9      	ldr	r1, [r7, #8]
 8005788:	0018      	movs	r0, r3
 800578a:	f000 fc99 	bl	80060c0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	0018      	movs	r0, r3
 8005792:	f7ff ff18 	bl	80055c6 <prvUnlockQueue>
    }
 8005796:	46c0      	nop			; (mov r8, r8)
 8005798:	46bd      	mov	sp, r7
 800579a:	b006      	add	sp, #24
 800579c:	bd80      	pop	{r7, pc}

0800579e <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800579e:	b590      	push	{r4, r7, lr}
 80057a0:	b08d      	sub	sp, #52	; 0x34
 80057a2:	af04      	add	r7, sp, #16
 80057a4:	60f8      	str	r0, [r7, #12]
 80057a6:	60b9      	str	r1, [r7, #8]
 80057a8:	603b      	str	r3, [r7, #0]
 80057aa:	1dbb      	adds	r3, r7, #6
 80057ac:	801a      	strh	r2, [r3, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80057ae:	1dbb      	adds	r3, r7, #6
 80057b0:	881b      	ldrh	r3, [r3, #0]
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	0018      	movs	r0, r3
 80057b6:	f001 fd73 	bl	80072a0 <pvPortMalloc>
 80057ba:	0003      	movs	r3, r0
 80057bc:	617b      	str	r3, [r7, #20]

            if( pxStack != NULL )
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d016      	beq.n	80057f2 <xTaskCreate+0x54>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80057c4:	2064      	movs	r0, #100	; 0x64
 80057c6:	f001 fd6b 	bl	80072a0 <pvPortMalloc>
 80057ca:	0003      	movs	r3, r0
 80057cc:	61fb      	str	r3, [r7, #28]

                if( pxNewTCB != NULL )
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d009      	beq.n	80057e8 <xTaskCreate+0x4a>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	2264      	movs	r2, #100	; 0x64
 80057d8:	2100      	movs	r1, #0
 80057da:	0018      	movs	r0, r3
 80057dc:	f001 ff33 	bl	8007646 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	631a      	str	r2, [r3, #48]	; 0x30
 80057e6:	e006      	b.n	80057f6 <xTaskCreate+0x58>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	0018      	movs	r0, r3
 80057ec:	f001 fe00 	bl	80073f0 <vPortFree>
 80057f0:	e001      	b.n	80057f6 <xTaskCreate+0x58>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80057f2:	2300      	movs	r3, #0
 80057f4:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d016      	beq.n	800582a <xTaskCreate+0x8c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80057fc:	1dbb      	adds	r3, r7, #6
 80057fe:	881a      	ldrh	r2, [r3, #0]
 8005800:	683c      	ldr	r4, [r7, #0]
 8005802:	68b9      	ldr	r1, [r7, #8]
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	2300      	movs	r3, #0
 8005808:	9303      	str	r3, [sp, #12]
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	9302      	str	r3, [sp, #8]
 800580e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005810:	9301      	str	r3, [sp, #4]
 8005812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005814:	9300      	str	r3, [sp, #0]
 8005816:	0023      	movs	r3, r4
 8005818:	f000 f810 	bl	800583c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	0018      	movs	r0, r3
 8005820:	f000 f88c 	bl	800593c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8005824:	2301      	movs	r3, #1
 8005826:	61bb      	str	r3, [r7, #24]
 8005828:	e002      	b.n	8005830 <xTaskCreate+0x92>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800582a:	2301      	movs	r3, #1
 800582c:	425b      	negs	r3, r3
 800582e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8005830:	69bb      	ldr	r3, [r7, #24]
    }
 8005832:	0018      	movs	r0, r3
 8005834:	46bd      	mov	sp, r7
 8005836:	b009      	add	sp, #36	; 0x24
 8005838:	bd90      	pop	{r4, r7, pc}
	...

0800583c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
 8005848:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800584a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	001a      	movs	r2, r3
 8005854:	21a5      	movs	r1, #165	; 0xa5
 8005856:	f001 fef6 	bl	8007646 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800585a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4935      	ldr	r1, [pc, #212]	; (8005938 <prvInitialiseNewTask+0xfc>)
 8005862:	468c      	mov	ip, r1
 8005864:	4463      	add	r3, ip
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	18d3      	adds	r3, r2, r3
 800586a:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	2207      	movs	r2, #7
 8005870:	4393      	bics	r3, r2
 8005872:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	2207      	movs	r2, #7
 8005878:	4013      	ands	r3, r2
 800587a:	d001      	beq.n	8005880 <prvInitialiseNewTask+0x44>
 800587c:	b672      	cpsid	i
 800587e:	e7fe      	b.n	800587e <prvInitialiseNewTask+0x42>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d01f      	beq.n	80058c6 <prvInitialiseNewTask+0x8a>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005886:	2300      	movs	r3, #0
 8005888:	617b      	str	r3, [r7, #20]
 800588a:	e013      	b.n	80058b4 <prvInitialiseNewTask+0x78>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800588c:	68ba      	ldr	r2, [r7, #8]
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	18d3      	adds	r3, r2, r3
 8005892:	7818      	ldrb	r0, [r3, #0]
 8005894:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005896:	2134      	movs	r1, #52	; 0x34
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	18d3      	adds	r3, r2, r3
 800589c:	185b      	adds	r3, r3, r1
 800589e:	1c02      	adds	r2, r0, #0
 80058a0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	18d3      	adds	r3, r2, r3
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d006      	beq.n	80058bc <prvInitialiseNewTask+0x80>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	3301      	adds	r3, #1
 80058b2:	617b      	str	r3, [r7, #20]
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	2b0f      	cmp	r3, #15
 80058b8:	d9e8      	bls.n	800588c <prvInitialiseNewTask+0x50>
 80058ba:	e000      	b.n	80058be <prvInitialiseNewTask+0x82>
            {
                break;
 80058bc:	46c0      	nop			; (mov r8, r8)
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80058be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c0:	2243      	movs	r2, #67	; 0x43
 80058c2:	2100      	movs	r1, #0
 80058c4:	5499      	strb	r1, [r3, r2]
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80058c6:	6a3b      	ldr	r3, [r7, #32]
 80058c8:	2b37      	cmp	r3, #55	; 0x37
 80058ca:	d901      	bls.n	80058d0 <prvInitialiseNewTask+0x94>
 80058cc:	b672      	cpsid	i
 80058ce:	e7fe      	b.n	80058ce <prvInitialiseNewTask+0x92>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80058d0:	6a3b      	ldr	r3, [r7, #32]
 80058d2:	2b37      	cmp	r3, #55	; 0x37
 80058d4:	d901      	bls.n	80058da <prvInitialiseNewTask+0x9e>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80058d6:	2337      	movs	r3, #55	; 0x37
 80058d8:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80058da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058dc:	6a3a      	ldr	r2, [r7, #32]
 80058de:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80058e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e2:	6a3a      	ldr	r2, [r7, #32]
 80058e4:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80058e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e8:	3304      	adds	r3, #4
 80058ea:	0018      	movs	r0, r3
 80058ec:	f7ff fb28 	bl	8004f40 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80058f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f2:	3318      	adds	r3, #24
 80058f4:	0018      	movs	r0, r3
 80058f6:	f7ff fb23 	bl	8004f40 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80058fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058fe:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005900:	6a3b      	ldr	r3, [r7, #32]
 8005902:	2238      	movs	r2, #56	; 0x38
 8005904:	1ad2      	subs	r2, r2, r3
 8005906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005908:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800590a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800590e:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005910:	683a      	ldr	r2, [r7, #0]
 8005912:	68f9      	ldr	r1, [r7, #12]
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	0018      	movs	r0, r3
 8005918:	f001 fb8e 	bl	8007038 <pxPortInitialiseStack>
 800591c:	0002      	movs	r2, r0
 800591e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005920:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8005922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005924:	2b00      	cmp	r3, #0
 8005926:	d002      	beq.n	800592e <prvInitialiseNewTask+0xf2>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800592c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800592e:	46c0      	nop			; (mov r8, r8)
 8005930:	46bd      	mov	sp, r7
 8005932:	b006      	add	sp, #24
 8005934:	bd80      	pop	{r7, pc}
 8005936:	46c0      	nop			; (mov r8, r8)
 8005938:	3fffffff 	.word	0x3fffffff

0800593c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8005944:	f001 fc14 	bl	8007170 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8005948:	4b3d      	ldr	r3, [pc, #244]	; (8005a40 <prvAddNewTaskToReadyList+0x104>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	1c5a      	adds	r2, r3, #1
 800594e:	4b3c      	ldr	r3, [pc, #240]	; (8005a40 <prvAddNewTaskToReadyList+0x104>)
 8005950:	601a      	str	r2, [r3, #0]

        if( pxCurrentTCB == NULL )
 8005952:	4b3c      	ldr	r3, [pc, #240]	; (8005a44 <prvAddNewTaskToReadyList+0x108>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d109      	bne.n	800596e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800595a:	4b3a      	ldr	r3, [pc, #232]	; (8005a44 <prvAddNewTaskToReadyList+0x108>)
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	601a      	str	r2, [r3, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005960:	4b37      	ldr	r3, [pc, #220]	; (8005a40 <prvAddNewTaskToReadyList+0x104>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d110      	bne.n	800598a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8005968:	f000 fde0 	bl	800652c <prvInitialiseTaskLists>
 800596c:	e00d      	b.n	800598a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800596e:	4b36      	ldr	r3, [pc, #216]	; (8005a48 <prvAddNewTaskToReadyList+0x10c>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d109      	bne.n	800598a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005976:	4b33      	ldr	r3, [pc, #204]	; (8005a44 <prvAddNewTaskToReadyList+0x108>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005980:	429a      	cmp	r2, r3
 8005982:	d802      	bhi.n	800598a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005984:	4b2f      	ldr	r3, [pc, #188]	; (8005a44 <prvAddNewTaskToReadyList+0x108>)
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	601a      	str	r2, [r3, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800598a:	4b30      	ldr	r3, [pc, #192]	; (8005a4c <prvAddNewTaskToReadyList+0x110>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	1c5a      	adds	r2, r3, #1
 8005990:	4b2e      	ldr	r3, [pc, #184]	; (8005a4c <prvAddNewTaskToReadyList+0x110>)
 8005992:	601a      	str	r2, [r3, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005994:	4b2d      	ldr	r3, [pc, #180]	; (8005a4c <prvAddNewTaskToReadyList+0x110>)
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	645a      	str	r2, [r3, #68]	; 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059a0:	4b2b      	ldr	r3, [pc, #172]	; (8005a50 <prvAddNewTaskToReadyList+0x114>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d903      	bls.n	80059b0 <prvAddNewTaskToReadyList+0x74>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ac:	4b28      	ldr	r3, [pc, #160]	; (8005a50 <prvAddNewTaskToReadyList+0x114>)
 80059ae:	601a      	str	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b4:	4927      	ldr	r1, [pc, #156]	; (8005a54 <prvAddNewTaskToReadyList+0x118>)
 80059b6:	0013      	movs	r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	189b      	adds	r3, r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	18cb      	adds	r3, r1, r3
 80059c0:	3304      	adds	r3, #4
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	60fb      	str	r3, [r7, #12]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	609a      	str	r2, [r3, #8]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	689a      	ldr	r2, [r3, #8]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	60da      	str	r2, [r3, #12]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	3204      	adds	r2, #4
 80059dc:	605a      	str	r2, [r3, #4]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	1d1a      	adds	r2, r3, #4
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	609a      	str	r2, [r3, #8]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ea:	0013      	movs	r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	189b      	adds	r3, r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	4a18      	ldr	r2, [pc, #96]	; (8005a54 <prvAddNewTaskToReadyList+0x118>)
 80059f4:	189a      	adds	r2, r3, r2
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	615a      	str	r2, [r3, #20]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059fe:	4915      	ldr	r1, [pc, #84]	; (8005a54 <prvAddNewTaskToReadyList+0x118>)
 8005a00:	0013      	movs	r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	189b      	adds	r3, r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	585b      	ldr	r3, [r3, r1]
 8005a0a:	1c58      	adds	r0, r3, #1
 8005a0c:	4911      	ldr	r1, [pc, #68]	; (8005a54 <prvAddNewTaskToReadyList+0x118>)
 8005a0e:	0013      	movs	r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	189b      	adds	r3, r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	5058      	str	r0, [r3, r1]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8005a18:	f001 fbbc 	bl	8007194 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8005a1c:	4b0a      	ldr	r3, [pc, #40]	; (8005a48 <prvAddNewTaskToReadyList+0x10c>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d008      	beq.n	8005a36 <prvAddNewTaskToReadyList+0xfa>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a24:	4b07      	ldr	r3, [pc, #28]	; (8005a44 <prvAddNewTaskToReadyList+0x108>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d201      	bcs.n	8005a36 <prvAddNewTaskToReadyList+0xfa>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8005a32:	f001 fb8d 	bl	8007150 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005a36:	46c0      	nop			; (mov r8, r8)
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	b004      	add	sp, #16
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	46c0      	nop			; (mov r8, r8)
 8005a40:	2000078c 	.word	0x2000078c
 8005a44:	200002b8 	.word	0x200002b8
 8005a48:	20000798 	.word	0x20000798
 8005a4c:	200007a8 	.word	0x200007a8
 8005a50:	20000794 	.word	0x20000794
 8005a54:	200002bc 	.word	0x200002bc

08005a58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8005a60:	2300      	movs	r3, #0
 8005a62:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d010      	beq.n	8005a8c <vTaskDelay+0x34>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8005a6a:	4b0d      	ldr	r3, [pc, #52]	; (8005aa0 <vTaskDelay+0x48>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <vTaskDelay+0x1e>
 8005a72:	b672      	cpsid	i
 8005a74:	e7fe      	b.n	8005a74 <vTaskDelay+0x1c>
            vTaskSuspendAll();
 8005a76:	f000 f855 	bl	8005b24 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2100      	movs	r1, #0
 8005a7e:	0018      	movs	r0, r3
 8005a80:	f000 ffea 	bl	8006a58 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8005a84:	f000 f85a 	bl	8005b3c <xTaskResumeAll>
 8005a88:	0003      	movs	r3, r0
 8005a8a:	60fb      	str	r3, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <vTaskDelay+0x3e>
        {
            portYIELD_WITHIN_API();
 8005a92:	f001 fb5d 	bl	8007150 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8005a96:	46c0      	nop			; (mov r8, r8)
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	b004      	add	sp, #16
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	46c0      	nop			; (mov r8, r8)
 8005aa0:	200007b4 	.word	0x200007b4

08005aa4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8005aaa:	4917      	ldr	r1, [pc, #92]	; (8005b08 <vTaskStartScheduler+0x64>)
 8005aac:	4817      	ldr	r0, [pc, #92]	; (8005b0c <vTaskStartScheduler+0x68>)
 8005aae:	4b18      	ldr	r3, [pc, #96]	; (8005b10 <vTaskStartScheduler+0x6c>)
 8005ab0:	9301      	str	r3, [sp, #4]
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	2280      	movs	r2, #128	; 0x80
 8005aba:	f7ff fe70 	bl	800579e <xTaskCreate>
 8005abe:	0003      	movs	r3, r0
 8005ac0:	607b      	str	r3, [r7, #4]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d103      	bne.n	8005ad0 <vTaskStartScheduler+0x2c>
        {
            xReturn = xTimerCreateTimerTask();
 8005ac8:	f001 f834 	bl	8006b34 <xTimerCreateTimerTask>
 8005acc:	0003      	movs	r3, r0
 8005ace:	607b      	str	r3, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d10d      	bne.n	8005af2 <vTaskStartScheduler+0x4e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 8005ad6:	b672      	cpsid	i
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8005ad8:	4b0e      	ldr	r3, [pc, #56]	; (8005b14 <vTaskStartScheduler+0x70>)
 8005ada:	2201      	movs	r2, #1
 8005adc:	4252      	negs	r2, r2
 8005ade:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005ae0:	4b0d      	ldr	r3, [pc, #52]	; (8005b18 <vTaskStartScheduler+0x74>)
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005ae6:	4b0d      	ldr	r3, [pc, #52]	; (8005b1c <vTaskStartScheduler+0x78>)
 8005ae8:	2200      	movs	r2, #0
 8005aea:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8005aec:	f001 fb0c 	bl	8007108 <xPortStartScheduler>
 8005af0:	e004      	b.n	8005afc <vTaskStartScheduler+0x58>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	3301      	adds	r3, #1
 8005af6:	d101      	bne.n	8005afc <vTaskStartScheduler+0x58>
 8005af8:	b672      	cpsid	i
 8005afa:	e7fe      	b.n	8005afa <vTaskStartScheduler+0x56>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005afc:	4b08      	ldr	r3, [pc, #32]	; (8005b20 <vTaskStartScheduler+0x7c>)
 8005afe:	681b      	ldr	r3, [r3, #0]
}
 8005b00:	46c0      	nop			; (mov r8, r8)
 8005b02:	46bd      	mov	sp, r7
 8005b04:	b002      	add	sp, #8
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	08008844 	.word	0x08008844
 8005b0c:	0800650d 	.word	0x0800650d
 8005b10:	200007b0 	.word	0x200007b0
 8005b14:	200007ac 	.word	0x200007ac
 8005b18:	20000798 	.word	0x20000798
 8005b1c:	20000790 	.word	0x20000790
 8005b20:	2000009c 	.word	0x2000009c

08005b24 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005b28:	4b03      	ldr	r3, [pc, #12]	; (8005b38 <vTaskSuspendAll+0x14>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	1c5a      	adds	r2, r3, #1
 8005b2e:	4b02      	ldr	r3, [pc, #8]	; (8005b38 <vTaskSuspendAll+0x14>)
 8005b30:	601a      	str	r2, [r3, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8005b32:	46c0      	nop			; (mov r8, r8)
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	200007b4 	.word	0x200007b4

08005b3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8005b42:	2300      	movs	r3, #0
 8005b44:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8005b46:	2300      	movs	r3, #0
 8005b48:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8005b4a:	4b68      	ldr	r3, [pc, #416]	; (8005cec <xTaskResumeAll+0x1b0>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d101      	bne.n	8005b56 <xTaskResumeAll+0x1a>
 8005b52:	b672      	cpsid	i
 8005b54:	e7fe      	b.n	8005b54 <xTaskResumeAll+0x18>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8005b56:	f001 fb0b 	bl	8007170 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005b5a:	4b64      	ldr	r3, [pc, #400]	; (8005cec <xTaskResumeAll+0x1b0>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	1e5a      	subs	r2, r3, #1
 8005b60:	4b62      	ldr	r3, [pc, #392]	; (8005cec <xTaskResumeAll+0x1b0>)
 8005b62:	601a      	str	r2, [r3, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b64:	4b61      	ldr	r3, [pc, #388]	; (8005cec <xTaskResumeAll+0x1b0>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d000      	beq.n	8005b6e <xTaskResumeAll+0x32>
 8005b6c:	e0b7      	b.n	8005cde <xTaskResumeAll+0x1a2>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b6e:	4b60      	ldr	r3, [pc, #384]	; (8005cf0 <xTaskResumeAll+0x1b4>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d100      	bne.n	8005b78 <xTaskResumeAll+0x3c>
 8005b76:	e0b2      	b.n	8005cde <xTaskResumeAll+0x1a2>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b78:	e089      	b.n	8005c8e <xTaskResumeAll+0x152>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b7a:	4b5e      	ldr	r3, [pc, #376]	; (8005cf4 <xTaskResumeAll+0x1b8>)
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b86:	60bb      	str	r3, [r7, #8]
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	69db      	ldr	r3, [r3, #28]
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	6a12      	ldr	r2, [r2, #32]
 8005b90:	609a      	str	r2, [r3, #8]
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	69d2      	ldr	r2, [r2, #28]
 8005b9a:	605a      	str	r2, [r3, #4]
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	3318      	adds	r3, #24
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d103      	bne.n	8005bb0 <xTaskResumeAll+0x74>
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	6a1a      	ldr	r2, [r3, #32]
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	605a      	str	r2, [r3, #4]
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	629a      	str	r2, [r3, #40]	; 0x28
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	1e5a      	subs	r2, r3, #1
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	695b      	ldr	r3, [r3, #20]
 8005bc4:	607b      	str	r3, [r7, #4]
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	68d2      	ldr	r2, [r2, #12]
 8005bce:	609a      	str	r2, [r3, #8]
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	6892      	ldr	r2, [r2, #8]
 8005bd8:	605a      	str	r2, [r3, #4]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685a      	ldr	r2, [r3, #4]
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	3304      	adds	r3, #4
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d103      	bne.n	8005bee <xTaskResumeAll+0xb2>
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	68da      	ldr	r2, [r3, #12]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	605a      	str	r2, [r3, #4]
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	615a      	str	r2, [r3, #20]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	1e5a      	subs	r2, r3, #1
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c02:	4b3d      	ldr	r3, [pc, #244]	; (8005cf8 <xTaskResumeAll+0x1bc>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d903      	bls.n	8005c12 <xTaskResumeAll+0xd6>
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c0e:	4b3a      	ldr	r3, [pc, #232]	; (8005cf8 <xTaskResumeAll+0x1bc>)
 8005c10:	601a      	str	r2, [r3, #0]
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c16:	4939      	ldr	r1, [pc, #228]	; (8005cfc <xTaskResumeAll+0x1c0>)
 8005c18:	0013      	movs	r3, r2
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	189b      	adds	r3, r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	18cb      	adds	r3, r1, r3
 8005c22:	3304      	adds	r3, #4
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	603b      	str	r3, [r7, #0]
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	683a      	ldr	r2, [r7, #0]
 8005c2c:	609a      	str	r2, [r3, #8]
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	689a      	ldr	r2, [r3, #8]
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	60da      	str	r2, [r3, #12]
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	3204      	adds	r2, #4
 8005c3e:	605a      	str	r2, [r3, #4]
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	1d1a      	adds	r2, r3, #4
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	609a      	str	r2, [r3, #8]
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c4c:	0013      	movs	r3, r2
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	189b      	adds	r3, r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4a29      	ldr	r2, [pc, #164]	; (8005cfc <xTaskResumeAll+0x1c0>)
 8005c56:	189a      	adds	r2, r3, r2
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	615a      	str	r2, [r3, #20]
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c60:	4926      	ldr	r1, [pc, #152]	; (8005cfc <xTaskResumeAll+0x1c0>)
 8005c62:	0013      	movs	r3, r2
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	189b      	adds	r3, r3, r2
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	585b      	ldr	r3, [r3, r1]
 8005c6c:	1c58      	adds	r0, r3, #1
 8005c6e:	4923      	ldr	r1, [pc, #140]	; (8005cfc <xTaskResumeAll+0x1c0>)
 8005c70:	0013      	movs	r3, r2
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	189b      	adds	r3, r3, r2
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	5058      	str	r0, [r3, r1]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c7e:	4b20      	ldr	r3, [pc, #128]	; (8005d00 <xTaskResumeAll+0x1c4>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d302      	bcc.n	8005c8e <xTaskResumeAll+0x152>
                    {
                        xYieldPending = pdTRUE;
 8005c88:	4b1e      	ldr	r3, [pc, #120]	; (8005d04 <xTaskResumeAll+0x1c8>)
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c8e:	4b19      	ldr	r3, [pc, #100]	; (8005cf4 <xTaskResumeAll+0x1b8>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d000      	beq.n	8005c98 <xTaskResumeAll+0x15c>
 8005c96:	e770      	b.n	8005b7a <xTaskResumeAll+0x3e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d001      	beq.n	8005ca2 <xTaskResumeAll+0x166>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8005c9e:	f000 fcc9 	bl	8006634 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005ca2:	4b19      	ldr	r3, [pc, #100]	; (8005d08 <xTaskResumeAll+0x1cc>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00f      	beq.n	8005cce <xTaskResumeAll+0x192>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8005cae:	f000 f845 	bl	8005d3c <xTaskIncrementTick>
 8005cb2:	1e03      	subs	r3, r0, #0
 8005cb4:	d002      	beq.n	8005cbc <xTaskResumeAll+0x180>
                            {
                                xYieldPending = pdTRUE;
 8005cb6:	4b13      	ldr	r3, [pc, #76]	; (8005d04 <xTaskResumeAll+0x1c8>)
 8005cb8:	2201      	movs	r2, #1
 8005cba:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1f2      	bne.n	8005cae <xTaskResumeAll+0x172>

                        xPendedTicks = 0;
 8005cc8:	4b0f      	ldr	r3, [pc, #60]	; (8005d08 <xTaskResumeAll+0x1cc>)
 8005cca:	2200      	movs	r2, #0
 8005ccc:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8005cce:	4b0d      	ldr	r3, [pc, #52]	; (8005d04 <xTaskResumeAll+0x1c8>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d003      	beq.n	8005cde <xTaskResumeAll+0x1a2>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005cda:	f001 fa39 	bl	8007150 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005cde:	f001 fa59 	bl	8007194 <vPortExitCritical>

    return xAlreadyYielded;
 8005ce2:	693b      	ldr	r3, [r7, #16]
}
 8005ce4:	0018      	movs	r0, r3
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	b006      	add	sp, #24
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	200007b4 	.word	0x200007b4
 8005cf0:	2000078c 	.word	0x2000078c
 8005cf4:	2000074c 	.word	0x2000074c
 8005cf8:	20000794 	.word	0x20000794
 8005cfc:	200002bc 	.word	0x200002bc
 8005d00:	200002b8 	.word	0x200002b8
 8005d04:	200007a0 	.word	0x200007a0
 8005d08:	2000079c 	.word	0x2000079c

08005d0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8005d12:	4b04      	ldr	r3, [pc, #16]	; (8005d24 <xTaskGetTickCount+0x18>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005d18:	687b      	ldr	r3, [r7, #4]
}
 8005d1a:	0018      	movs	r0, r3
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	b002      	add	sp, #8
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	46c0      	nop			; (mov r8, r8)
 8005d24:	20000790 	.word	0x20000790

08005d28 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8005d2c:	4b02      	ldr	r3, [pc, #8]	; (8005d38 <uxTaskGetNumberOfTasks+0x10>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
}
 8005d30:	0018      	movs	r0, r3
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	46c0      	nop			; (mov r8, r8)
 8005d38:	2000078c 	.word	0x2000078c

08005d3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b088      	sub	sp, #32
 8005d40:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005d42:	2300      	movs	r3, #0
 8005d44:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d46:	4b78      	ldr	r3, [pc, #480]	; (8005f28 <xTaskIncrementTick+0x1ec>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d000      	beq.n	8005d50 <xTaskIncrementTick+0x14>
 8005d4e:	e0e0      	b.n	8005f12 <xTaskIncrementTick+0x1d6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d50:	4b76      	ldr	r3, [pc, #472]	; (8005f2c <xTaskIncrementTick+0x1f0>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	3301      	adds	r3, #1
 8005d56:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005d58:	4b74      	ldr	r3, [pc, #464]	; (8005f2c <xTaskIncrementTick+0x1f0>)
 8005d5a:	69ba      	ldr	r2, [r7, #24]
 8005d5c:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d117      	bne.n	8005d94 <xTaskIncrementTick+0x58>
        {
            taskSWITCH_DELAYED_LISTS();
 8005d64:	4b72      	ldr	r3, [pc, #456]	; (8005f30 <xTaskIncrementTick+0x1f4>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d001      	beq.n	8005d72 <xTaskIncrementTick+0x36>
 8005d6e:	b672      	cpsid	i
 8005d70:	e7fe      	b.n	8005d70 <xTaskIncrementTick+0x34>
 8005d72:	4b6f      	ldr	r3, [pc, #444]	; (8005f30 <xTaskIncrementTick+0x1f4>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	617b      	str	r3, [r7, #20]
 8005d78:	4b6e      	ldr	r3, [pc, #440]	; (8005f34 <xTaskIncrementTick+0x1f8>)
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	4b6c      	ldr	r3, [pc, #432]	; (8005f30 <xTaskIncrementTick+0x1f4>)
 8005d7e:	601a      	str	r2, [r3, #0]
 8005d80:	4b6c      	ldr	r3, [pc, #432]	; (8005f34 <xTaskIncrementTick+0x1f8>)
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	601a      	str	r2, [r3, #0]
 8005d86:	4b6c      	ldr	r3, [pc, #432]	; (8005f38 <xTaskIncrementTick+0x1fc>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	1c5a      	adds	r2, r3, #1
 8005d8c:	4b6a      	ldr	r3, [pc, #424]	; (8005f38 <xTaskIncrementTick+0x1fc>)
 8005d8e:	601a      	str	r2, [r3, #0]
 8005d90:	f000 fc50 	bl	8006634 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005d94:	4b69      	ldr	r3, [pc, #420]	; (8005f3c <xTaskIncrementTick+0x200>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	69ba      	ldr	r2, [r7, #24]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d200      	bcs.n	8005da0 <xTaskIncrementTick+0x64>
 8005d9e:	e0a4      	b.n	8005eea <xTaskIncrementTick+0x1ae>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005da0:	4b63      	ldr	r3, [pc, #396]	; (8005f30 <xTaskIncrementTick+0x1f4>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d104      	bne.n	8005db4 <xTaskIncrementTick+0x78>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005daa:	4b64      	ldr	r3, [pc, #400]	; (8005f3c <xTaskIncrementTick+0x200>)
 8005dac:	2201      	movs	r2, #1
 8005dae:	4252      	negs	r2, r2
 8005db0:	601a      	str	r2, [r3, #0]
                    break;
 8005db2:	e09a      	b.n	8005eea <xTaskIncrementTick+0x1ae>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005db4:	4b5e      	ldr	r3, [pc, #376]	; (8005f30 <xTaskIncrementTick+0x1f4>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8005dc4:	69ba      	ldr	r2, [r7, #24]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d203      	bcs.n	8005dd4 <xTaskIncrementTick+0x98>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005dcc:	4b5b      	ldr	r3, [pc, #364]	; (8005f3c <xTaskIncrementTick+0x200>)
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8005dd2:	e08a      	b.n	8005eea <xTaskIncrementTick+0x1ae>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	60bb      	str	r3, [r7, #8]
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	68d2      	ldr	r2, [r2, #12]
 8005de2:	609a      	str	r2, [r3, #8]
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	693a      	ldr	r2, [r7, #16]
 8005dea:	6892      	ldr	r2, [r2, #8]
 8005dec:	605a      	str	r2, [r3, #4]
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	685a      	ldr	r2, [r3, #4]
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	3304      	adds	r3, #4
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d103      	bne.n	8005e02 <xTaskIncrementTick+0xc6>
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	68da      	ldr	r2, [r3, #12]
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	605a      	str	r2, [r3, #4]
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	2200      	movs	r2, #0
 8005e06:	615a      	str	r2, [r3, #20]
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	1e5a      	subs	r2, r3, #1
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d01e      	beq.n	8005e58 <xTaskIncrementTick+0x11c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e1e:	607b      	str	r3, [r7, #4]
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	69db      	ldr	r3, [r3, #28]
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	6a12      	ldr	r2, [r2, #32]
 8005e28:	609a      	str	r2, [r3, #8]
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	69d2      	ldr	r2, [r2, #28]
 8005e32:	605a      	str	r2, [r3, #4]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	3318      	adds	r3, #24
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d103      	bne.n	8005e48 <xTaskIncrementTick+0x10c>
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	6a1a      	ldr	r2, [r3, #32]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	605a      	str	r2, [r3, #4]
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	629a      	str	r2, [r3, #40]	; 0x28
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	1e5a      	subs	r2, r3, #1
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e5c:	4b38      	ldr	r3, [pc, #224]	; (8005f40 <xTaskIncrementTick+0x204>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d903      	bls.n	8005e6c <xTaskIncrementTick+0x130>
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e68:	4b35      	ldr	r3, [pc, #212]	; (8005f40 <xTaskIncrementTick+0x204>)
 8005e6a:	601a      	str	r2, [r3, #0]
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e70:	4934      	ldr	r1, [pc, #208]	; (8005f44 <xTaskIncrementTick+0x208>)
 8005e72:	0013      	movs	r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	189b      	adds	r3, r3, r2
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	18cb      	adds	r3, r1, r3
 8005e7c:	3304      	adds	r3, #4
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	603b      	str	r3, [r7, #0]
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	683a      	ldr	r2, [r7, #0]
 8005e86:	609a      	str	r2, [r3, #8]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	689a      	ldr	r2, [r3, #8]
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	60da      	str	r2, [r3, #12]
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	3204      	adds	r2, #4
 8005e98:	605a      	str	r2, [r3, #4]
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	1d1a      	adds	r2, r3, #4
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	609a      	str	r2, [r3, #8]
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ea6:	0013      	movs	r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	189b      	adds	r3, r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	4a25      	ldr	r2, [pc, #148]	; (8005f44 <xTaskIncrementTick+0x208>)
 8005eb0:	189a      	adds	r2, r3, r2
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	615a      	str	r2, [r3, #20]
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eba:	4922      	ldr	r1, [pc, #136]	; (8005f44 <xTaskIncrementTick+0x208>)
 8005ebc:	0013      	movs	r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	189b      	adds	r3, r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	585b      	ldr	r3, [r3, r1]
 8005ec6:	1c58      	adds	r0, r3, #1
 8005ec8:	491e      	ldr	r1, [pc, #120]	; (8005f44 <xTaskIncrementTick+0x208>)
 8005eca:	0013      	movs	r3, r2
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	189b      	adds	r3, r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	5058      	str	r0, [r3, r1]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed8:	4b1b      	ldr	r3, [pc, #108]	; (8005f48 <xTaskIncrementTick+0x20c>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d800      	bhi.n	8005ee4 <xTaskIncrementTick+0x1a8>
 8005ee2:	e75d      	b.n	8005da0 <xTaskIncrementTick+0x64>
                        {
                            xSwitchRequired = pdTRUE;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ee8:	e75a      	b.n	8005da0 <xTaskIncrementTick+0x64>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005eea:	4b17      	ldr	r3, [pc, #92]	; (8005f48 <xTaskIncrementTick+0x20c>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef0:	4914      	ldr	r1, [pc, #80]	; (8005f44 <xTaskIncrementTick+0x208>)
 8005ef2:	0013      	movs	r3, r2
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	189b      	adds	r3, r3, r2
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	585b      	ldr	r3, [r3, r1]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d901      	bls.n	8005f04 <xTaskIncrementTick+0x1c8>
            {
                xSwitchRequired = pdTRUE;
 8005f00:	2301      	movs	r3, #1
 8005f02:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8005f04:	4b11      	ldr	r3, [pc, #68]	; (8005f4c <xTaskIncrementTick+0x210>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d007      	beq.n	8005f1c <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	61fb      	str	r3, [r7, #28]
 8005f10:	e004      	b.n	8005f1c <xTaskIncrementTick+0x1e0>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005f12:	4b0f      	ldr	r3, [pc, #60]	; (8005f50 <xTaskIncrementTick+0x214>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	1c5a      	adds	r2, r3, #1
 8005f18:	4b0d      	ldr	r3, [pc, #52]	; (8005f50 <xTaskIncrementTick+0x214>)
 8005f1a:	601a      	str	r2, [r3, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8005f1c:	69fb      	ldr	r3, [r7, #28]
}
 8005f1e:	0018      	movs	r0, r3
 8005f20:	46bd      	mov	sp, r7
 8005f22:	b008      	add	sp, #32
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	46c0      	nop			; (mov r8, r8)
 8005f28:	200007b4 	.word	0x200007b4
 8005f2c:	20000790 	.word	0x20000790
 8005f30:	20000744 	.word	0x20000744
 8005f34:	20000748 	.word	0x20000748
 8005f38:	200007a4 	.word	0x200007a4
 8005f3c:	200007ac 	.word	0x200007ac
 8005f40:	20000794 	.word	0x20000794
 8005f44:	200002bc 	.word	0x200002bc
 8005f48:	200002b8 	.word	0x200002b8
 8005f4c:	200007a0 	.word	0x200007a0
 8005f50:	2000079c 	.word	0x2000079c

08005f54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f5a:	4b22      	ldr	r3, [pc, #136]	; (8005fe4 <vTaskSwitchContext+0x90>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d003      	beq.n	8005f6a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005f62:	4b21      	ldr	r3, [pc, #132]	; (8005fe8 <vTaskSwitchContext+0x94>)
 8005f64:	2201      	movs	r2, #1
 8005f66:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8005f68:	e037      	b.n	8005fda <vTaskSwitchContext+0x86>
        xYieldPending = pdFALSE;
 8005f6a:	4b1f      	ldr	r3, [pc, #124]	; (8005fe8 <vTaskSwitchContext+0x94>)
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f70:	4b1e      	ldr	r3, [pc, #120]	; (8005fec <vTaskSwitchContext+0x98>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	607b      	str	r3, [r7, #4]
 8005f76:	e007      	b.n	8005f88 <vTaskSwitchContext+0x34>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d101      	bne.n	8005f82 <vTaskSwitchContext+0x2e>
 8005f7e:	b672      	cpsid	i
 8005f80:	e7fe      	b.n	8005f80 <vTaskSwitchContext+0x2c>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	3b01      	subs	r3, #1
 8005f86:	607b      	str	r3, [r7, #4]
 8005f88:	4919      	ldr	r1, [pc, #100]	; (8005ff0 <vTaskSwitchContext+0x9c>)
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	0013      	movs	r3, r2
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	189b      	adds	r3, r3, r2
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	585b      	ldr	r3, [r3, r1]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d0ee      	beq.n	8005f78 <vTaskSwitchContext+0x24>
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	0013      	movs	r3, r2
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	189b      	adds	r3, r3, r2
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	4a12      	ldr	r2, [pc, #72]	; (8005ff0 <vTaskSwitchContext+0x9c>)
 8005fa6:	189b      	adds	r3, r3, r2
 8005fa8:	603b      	str	r3, [r7, #0]
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	685a      	ldr	r2, [r3, #4]
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	605a      	str	r2, [r3, #4]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	685a      	ldr	r2, [r3, #4]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	3308      	adds	r3, #8
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d104      	bne.n	8005fca <vTaskSwitchContext+0x76>
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	685a      	ldr	r2, [r3, #4]
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	605a      	str	r2, [r3, #4]
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	68da      	ldr	r2, [r3, #12]
 8005fd0:	4b08      	ldr	r3, [pc, #32]	; (8005ff4 <vTaskSwitchContext+0xa0>)
 8005fd2:	601a      	str	r2, [r3, #0]
 8005fd4:	4b05      	ldr	r3, [pc, #20]	; (8005fec <vTaskSwitchContext+0x98>)
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	601a      	str	r2, [r3, #0]
}
 8005fda:	46c0      	nop			; (mov r8, r8)
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	b002      	add	sp, #8
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	46c0      	nop			; (mov r8, r8)
 8005fe4:	200007b4 	.word	0x200007b4
 8005fe8:	200007a0 	.word	0x200007a0
 8005fec:	20000794 	.word	0x20000794
 8005ff0:	200002bc 	.word	0x200002bc
 8005ff4:	200002b8 	.word	0x200002b8

08005ff8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d101      	bne.n	800600c <vTaskPlaceOnEventList+0x14>
 8006008:	b672      	cpsid	i
 800600a:	e7fe      	b.n	800600a <vTaskPlaceOnEventList+0x12>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800600c:	4b08      	ldr	r3, [pc, #32]	; (8006030 <vTaskPlaceOnEventList+0x38>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	3318      	adds	r3, #24
 8006012:	001a      	movs	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	0011      	movs	r1, r2
 8006018:	0018      	movs	r0, r3
 800601a:	f7fe ff9c 	bl	8004f56 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	2101      	movs	r1, #1
 8006022:	0018      	movs	r0, r3
 8006024:	f000 fd18 	bl	8006a58 <prvAddCurrentTaskToDelayedList>
}
 8006028:	46c0      	nop			; (mov r8, r8)
 800602a:	46bd      	mov	sp, r7
 800602c:	b002      	add	sp, #8
 800602e:	bd80      	pop	{r7, pc}
 8006030:	200002b8 	.word	0x200002b8

08006034 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait )
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b086      	sub	sp, #24
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]
    configASSERT( pxEventList );
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d101      	bne.n	800604a <vTaskPlaceOnUnorderedEventList+0x16>
 8006046:	b672      	cpsid	i
 8006048:	e7fe      	b.n	8006048 <vTaskPlaceOnUnorderedEventList+0x14>

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event groups implementation. */
    configASSERT( uxSchedulerSuspended != 0 );
 800604a:	4b1b      	ldr	r3, [pc, #108]	; (80060b8 <vTaskPlaceOnUnorderedEventList+0x84>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d101      	bne.n	8006056 <vTaskPlaceOnUnorderedEventList+0x22>
 8006052:	b672      	cpsid	i
 8006054:	e7fe      	b.n	8006054 <vTaskPlaceOnUnorderedEventList+0x20>

    /* Store the item value in the event list item.  It is safe to access the
     * event list item here as interrupts won't access the event list item of a
     * task that is not in the Blocked state. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006056:	4b19      	ldr	r3, [pc, #100]	; (80060bc <vTaskPlaceOnUnorderedEventList+0x88>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68ba      	ldr	r2, [r7, #8]
 800605c:	2180      	movs	r1, #128	; 0x80
 800605e:	0609      	lsls	r1, r1, #24
 8006060:	430a      	orrs	r2, r1
 8006062:	619a      	str	r2, [r3, #24]
    /* Place the event list item of the TCB at the end of the appropriate event
     * list.  It is safe to access the event list here because it is part of an
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	617b      	str	r3, [r7, #20]
 800606a:	4b14      	ldr	r3, [pc, #80]	; (80060bc <vTaskPlaceOnUnorderedEventList+0x88>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	61da      	str	r2, [r3, #28]
 8006072:	4b12      	ldr	r3, [pc, #72]	; (80060bc <vTaskPlaceOnUnorderedEventList+0x88>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	6892      	ldr	r2, [r2, #8]
 800607a:	621a      	str	r2, [r3, #32]
 800607c:	4b0f      	ldr	r3, [pc, #60]	; (80060bc <vTaskPlaceOnUnorderedEventList+0x88>)
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	3218      	adds	r2, #24
 8006086:	605a      	str	r2, [r3, #4]
 8006088:	4b0c      	ldr	r3, [pc, #48]	; (80060bc <vTaskPlaceOnUnorderedEventList+0x88>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	3318      	adds	r3, #24
 800608e:	001a      	movs	r2, r3
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	609a      	str	r2, [r3, #8]
 8006094:	4b09      	ldr	r3, [pc, #36]	; (80060bc <vTaskPlaceOnUnorderedEventList+0x88>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	629a      	str	r2, [r3, #40]	; 0x28
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	1c5a      	adds	r2, r3, #1
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	601a      	str	r2, [r3, #0]

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2101      	movs	r1, #1
 80060aa:	0018      	movs	r0, r3
 80060ac:	f000 fcd4 	bl	8006a58 <prvAddCurrentTaskToDelayedList>
}
 80060b0:	46c0      	nop			; (mov r8, r8)
 80060b2:	46bd      	mov	sp, r7
 80060b4:	b006      	add	sp, #24
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	200007b4 	.word	0x200007b4
 80060bc:	200002b8 	.word	0x200002b8

080060c0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b086      	sub	sp, #24
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d101      	bne.n	80060d6 <vTaskPlaceOnEventListRestricted+0x16>
 80060d2:	b672      	cpsid	i
 80060d4:	e7fe      	b.n	80060d4 <vTaskPlaceOnEventListRestricted+0x14>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	617b      	str	r3, [r7, #20]
 80060dc:	4b16      	ldr	r3, [pc, #88]	; (8006138 <vTaskPlaceOnEventListRestricted+0x78>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	61da      	str	r2, [r3, #28]
 80060e4:	4b14      	ldr	r3, [pc, #80]	; (8006138 <vTaskPlaceOnEventListRestricted+0x78>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	6892      	ldr	r2, [r2, #8]
 80060ec:	621a      	str	r2, [r3, #32]
 80060ee:	4b12      	ldr	r3, [pc, #72]	; (8006138 <vTaskPlaceOnEventListRestricted+0x78>)
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	3218      	adds	r2, #24
 80060f8:	605a      	str	r2, [r3, #4]
 80060fa:	4b0f      	ldr	r3, [pc, #60]	; (8006138 <vTaskPlaceOnEventListRestricted+0x78>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	3318      	adds	r3, #24
 8006100:	001a      	movs	r2, r3
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	609a      	str	r2, [r3, #8]
 8006106:	4b0c      	ldr	r3, [pc, #48]	; (8006138 <vTaskPlaceOnEventListRestricted+0x78>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	629a      	str	r2, [r3, #40]	; 0x28
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	1c5a      	adds	r2, r3, #1
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d002      	beq.n	8006124 <vTaskPlaceOnEventListRestricted+0x64>
        {
            xTicksToWait = portMAX_DELAY;
 800611e:	2301      	movs	r3, #1
 8006120:	425b      	negs	r3, r3
 8006122:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	0011      	movs	r1, r2
 800612a:	0018      	movs	r0, r3
 800612c:	f000 fc94 	bl	8006a58 <prvAddCurrentTaskToDelayedList>
    }
 8006130:	46c0      	nop			; (mov r8, r8)
 8006132:	46bd      	mov	sp, r7
 8006134:	b006      	add	sp, #24
 8006136:	bd80      	pop	{r7, pc}
 8006138:	200002b8 	.word	0x200002b8

0800613c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b088      	sub	sp, #32
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <xTaskRemoveFromEventList+0x1a>
 8006152:	b672      	cpsid	i
 8006154:	e7fe      	b.n	8006154 <xTaskRemoveFromEventList+0x18>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615a:	617b      	str	r3, [r7, #20]
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	69db      	ldr	r3, [r3, #28]
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	6a12      	ldr	r2, [r2, #32]
 8006164:	609a      	str	r2, [r3, #8]
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	69ba      	ldr	r2, [r7, #24]
 800616c:	69d2      	ldr	r2, [r2, #28]
 800616e:	605a      	str	r2, [r3, #4]
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	685a      	ldr	r2, [r3, #4]
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	3318      	adds	r3, #24
 8006178:	429a      	cmp	r2, r3
 800617a:	d103      	bne.n	8006184 <xTaskRemoveFromEventList+0x48>
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	6a1a      	ldr	r2, [r3, #32]
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	605a      	str	r2, [r3, #4]
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	2200      	movs	r2, #0
 8006188:	629a      	str	r2, [r3, #40]	; 0x28
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	1e5a      	subs	r2, r3, #1
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006194:	4b48      	ldr	r3, [pc, #288]	; (80062b8 <xTaskRemoveFromEventList+0x17c>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d15d      	bne.n	8006258 <xTaskRemoveFromEventList+0x11c>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	695b      	ldr	r3, [r3, #20]
 80061a0:	60fb      	str	r3, [r7, #12]
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	69ba      	ldr	r2, [r7, #24]
 80061a8:	68d2      	ldr	r2, [r2, #12]
 80061aa:	609a      	str	r2, [r3, #8]
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	69ba      	ldr	r2, [r7, #24]
 80061b2:	6892      	ldr	r2, [r2, #8]
 80061b4:	605a      	str	r2, [r3, #4]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	685a      	ldr	r2, [r3, #4]
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	3304      	adds	r3, #4
 80061be:	429a      	cmp	r2, r3
 80061c0:	d103      	bne.n	80061ca <xTaskRemoveFromEventList+0x8e>
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	68da      	ldr	r2, [r3, #12]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	605a      	str	r2, [r3, #4]
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	2200      	movs	r2, #0
 80061ce:	615a      	str	r2, [r3, #20]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	1e5a      	subs	r2, r3, #1
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061de:	4b37      	ldr	r3, [pc, #220]	; (80062bc <xTaskRemoveFromEventList+0x180>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d903      	bls.n	80061ee <xTaskRemoveFromEventList+0xb2>
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ea:	4b34      	ldr	r3, [pc, #208]	; (80062bc <xTaskRemoveFromEventList+0x180>)
 80061ec:	601a      	str	r2, [r3, #0]
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f2:	4933      	ldr	r1, [pc, #204]	; (80062c0 <xTaskRemoveFromEventList+0x184>)
 80061f4:	0013      	movs	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	189b      	adds	r3, r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	18cb      	adds	r3, r1, r3
 80061fe:	3304      	adds	r3, #4
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	60bb      	str	r3, [r7, #8]
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	68ba      	ldr	r2, [r7, #8]
 8006208:	609a      	str	r2, [r3, #8]
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	689a      	ldr	r2, [r3, #8]
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	60da      	str	r2, [r3, #12]
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	69ba      	ldr	r2, [r7, #24]
 8006218:	3204      	adds	r2, #4
 800621a:	605a      	str	r2, [r3, #4]
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	1d1a      	adds	r2, r3, #4
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	609a      	str	r2, [r3, #8]
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006228:	0013      	movs	r3, r2
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	189b      	adds	r3, r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	4a23      	ldr	r2, [pc, #140]	; (80062c0 <xTaskRemoveFromEventList+0x184>)
 8006232:	189a      	adds	r2, r3, r2
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	615a      	str	r2, [r3, #20]
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800623c:	4920      	ldr	r1, [pc, #128]	; (80062c0 <xTaskRemoveFromEventList+0x184>)
 800623e:	0013      	movs	r3, r2
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	189b      	adds	r3, r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	585b      	ldr	r3, [r3, r1]
 8006248:	1c58      	adds	r0, r3, #1
 800624a:	491d      	ldr	r1, [pc, #116]	; (80062c0 <xTaskRemoveFromEventList+0x184>)
 800624c:	0013      	movs	r3, r2
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	189b      	adds	r3, r3, r2
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	5058      	str	r0, [r3, r1]
 8006256:	e01b      	b.n	8006290 <xTaskRemoveFromEventList+0x154>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006258:	4b1a      	ldr	r3, [pc, #104]	; (80062c4 <xTaskRemoveFromEventList+0x188>)
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	613b      	str	r3, [r7, #16]
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	61da      	str	r2, [r3, #28]
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	689a      	ldr	r2, [r3, #8]
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	621a      	str	r2, [r3, #32]
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	69ba      	ldr	r2, [r7, #24]
 8006272:	3218      	adds	r2, #24
 8006274:	605a      	str	r2, [r3, #4]
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	3318      	adds	r3, #24
 800627a:	001a      	movs	r2, r3
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	609a      	str	r2, [r3, #8]
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	4a10      	ldr	r2, [pc, #64]	; (80062c4 <xTaskRemoveFromEventList+0x188>)
 8006284:	629a      	str	r2, [r3, #40]	; 0x28
 8006286:	4b0f      	ldr	r3, [pc, #60]	; (80062c4 <xTaskRemoveFromEventList+0x188>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	1c5a      	adds	r2, r3, #1
 800628c:	4b0d      	ldr	r3, [pc, #52]	; (80062c4 <xTaskRemoveFromEventList+0x188>)
 800628e:	601a      	str	r2, [r3, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006294:	4b0c      	ldr	r3, [pc, #48]	; (80062c8 <xTaskRemoveFromEventList+0x18c>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629a:	429a      	cmp	r2, r3
 800629c:	d905      	bls.n	80062aa <xTaskRemoveFromEventList+0x16e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800629e:	2301      	movs	r3, #1
 80062a0:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80062a2:	4b0a      	ldr	r3, [pc, #40]	; (80062cc <xTaskRemoveFromEventList+0x190>)
 80062a4:	2201      	movs	r2, #1
 80062a6:	601a      	str	r2, [r3, #0]
 80062a8:	e001      	b.n	80062ae <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        xReturn = pdFALSE;
 80062aa:	2300      	movs	r3, #0
 80062ac:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 80062ae:	69fb      	ldr	r3, [r7, #28]
}
 80062b0:	0018      	movs	r0, r3
 80062b2:	46bd      	mov	sp, r7
 80062b4:	b008      	add	sp, #32
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	200007b4 	.word	0x200007b4
 80062bc:	20000794 	.word	0x20000794
 80062c0:	200002bc 	.word	0x200002bc
 80062c4:	2000074c 	.word	0x2000074c
 80062c8:	200002b8 	.word	0x200002b8
 80062cc:	200007a0 	.word	0x200007a0

080062d0 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b086      	sub	sp, #24
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
    TCB_t * pxUnblockedTCB;

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != pdFALSE );
 80062da:	4b4e      	ldr	r3, [pc, #312]	; (8006414 <vTaskRemoveFromUnorderedEventList+0x144>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d101      	bne.n	80062e6 <vTaskRemoveFromUnorderedEventList+0x16>
 80062e2:	b672      	cpsid	i
 80062e4:	e7fe      	b.n	80062e4 <vTaskRemoveFromUnorderedEventList+0x14>

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	2280      	movs	r2, #128	; 0x80
 80062ea:	0612      	lsls	r2, r2, #24
 80062ec:	431a      	orrs	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	601a      	str	r2, [r3, #0]

    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	617b      	str	r3, [r7, #20]
    configASSERT( pxUnblockedTCB );
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d101      	bne.n	8006302 <vTaskRemoveFromUnorderedEventList+0x32>
 80062fe:	b672      	cpsid	i
 8006300:	e7fe      	b.n	8006300 <vTaskRemoveFromUnorderedEventList+0x30>
    listREMOVE_ITEM( pxEventListItem );
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	613b      	str	r3, [r7, #16]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	6892      	ldr	r2, [r2, #8]
 8006310:	609a      	str	r2, [r3, #8]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	6852      	ldr	r2, [r2, #4]
 800631a:	605a      	str	r2, [r3, #4]
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	429a      	cmp	r2, r3
 8006324:	d103      	bne.n	800632e <vTaskRemoveFromUnorderedEventList+0x5e>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	689a      	ldr	r2, [r3, #8]
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	605a      	str	r2, [r3, #4]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	611a      	str	r2, [r3, #16]
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	1e5a      	subs	r2, r3, #1
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	601a      	str	r2, [r3, #0]
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	60fb      	str	r3, [r7, #12]
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	697a      	ldr	r2, [r7, #20]
 800634a:	68d2      	ldr	r2, [r2, #12]
 800634c:	609a      	str	r2, [r3, #8]
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	6892      	ldr	r2, [r2, #8]
 8006356:	605a      	str	r2, [r3, #4]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	685a      	ldr	r2, [r3, #4]
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	3304      	adds	r3, #4
 8006360:	429a      	cmp	r2, r3
 8006362:	d103      	bne.n	800636c <vTaskRemoveFromUnorderedEventList+0x9c>
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	68da      	ldr	r2, [r3, #12]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	605a      	str	r2, [r3, #4]
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	2200      	movs	r2, #0
 8006370:	615a      	str	r2, [r3, #20]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	1e5a      	subs	r2, r3, #1
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	601a      	str	r2, [r3, #0]
    prvAddTaskToReadyList( pxUnblockedTCB );
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006380:	4b25      	ldr	r3, [pc, #148]	; (8006418 <vTaskRemoveFromUnorderedEventList+0x148>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	429a      	cmp	r2, r3
 8006386:	d903      	bls.n	8006390 <vTaskRemoveFromUnorderedEventList+0xc0>
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800638c:	4b22      	ldr	r3, [pc, #136]	; (8006418 <vTaskRemoveFromUnorderedEventList+0x148>)
 800638e:	601a      	str	r2, [r3, #0]
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006394:	4921      	ldr	r1, [pc, #132]	; (800641c <vTaskRemoveFromUnorderedEventList+0x14c>)
 8006396:	0013      	movs	r3, r2
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	189b      	adds	r3, r3, r2
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	18cb      	adds	r3, r1, r3
 80063a0:	3304      	adds	r3, #4
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	60bb      	str	r3, [r7, #8]
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	68ba      	ldr	r2, [r7, #8]
 80063aa:	609a      	str	r2, [r3, #8]
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	689a      	ldr	r2, [r3, #8]
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	60da      	str	r2, [r3, #12]
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	3204      	adds	r2, #4
 80063bc:	605a      	str	r2, [r3, #4]
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	1d1a      	adds	r2, r3, #4
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	609a      	str	r2, [r3, #8]
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ca:	0013      	movs	r3, r2
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	189b      	adds	r3, r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	4a12      	ldr	r2, [pc, #72]	; (800641c <vTaskRemoveFromUnorderedEventList+0x14c>)
 80063d4:	189a      	adds	r2, r3, r2
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	615a      	str	r2, [r3, #20]
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063de:	490f      	ldr	r1, [pc, #60]	; (800641c <vTaskRemoveFromUnorderedEventList+0x14c>)
 80063e0:	0013      	movs	r3, r2
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	189b      	adds	r3, r3, r2
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	585b      	ldr	r3, [r3, r1]
 80063ea:	1c58      	adds	r0, r3, #1
 80063ec:	490b      	ldr	r1, [pc, #44]	; (800641c <vTaskRemoveFromUnorderedEventList+0x14c>)
 80063ee:	0013      	movs	r3, r2
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	189b      	adds	r3, r3, r2
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	5058      	str	r0, [r3, r1]

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063fc:	4b08      	ldr	r3, [pc, #32]	; (8006420 <vTaskRemoveFromUnorderedEventList+0x150>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006402:	429a      	cmp	r2, r3
 8006404:	d902      	bls.n	800640c <vTaskRemoveFromUnorderedEventList+0x13c>
    {
        /* The unblocked task has a priority above that of the calling task, so
         * a context switch is required.  This function is called with the
         * scheduler suspended so xYieldPending is set so the context switch
         * occurs immediately that the scheduler is resumed (unsuspended). */
        xYieldPending = pdTRUE;
 8006406:	4b07      	ldr	r3, [pc, #28]	; (8006424 <vTaskRemoveFromUnorderedEventList+0x154>)
 8006408:	2201      	movs	r2, #1
 800640a:	601a      	str	r2, [r3, #0]
    }
}
 800640c:	46c0      	nop			; (mov r8, r8)
 800640e:	46bd      	mov	sp, r7
 8006410:	b006      	add	sp, #24
 8006412:	bd80      	pop	{r7, pc}
 8006414:	200007b4 	.word	0x200007b4
 8006418:	20000794 	.word	0x20000794
 800641c:	200002bc 	.word	0x200002bc
 8006420:	200002b8 	.word	0x200002b8
 8006424:	200007a0 	.word	0x200007a0

08006428 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006430:	4b05      	ldr	r3, [pc, #20]	; (8006448 <vTaskInternalSetTimeOutState+0x20>)
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8006438:	4b04      	ldr	r3, [pc, #16]	; (800644c <vTaskInternalSetTimeOutState+0x24>)
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	605a      	str	r2, [r3, #4]
}
 8006440:	46c0      	nop			; (mov r8, r8)
 8006442:	46bd      	mov	sp, r7
 8006444:	b002      	add	sp, #8
 8006446:	bd80      	pop	{r7, pc}
 8006448:	200007a4 	.word	0x200007a4
 800644c:	20000790 	.word	0x20000790

08006450 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b086      	sub	sp, #24
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d101      	bne.n	8006464 <xTaskCheckForTimeOut+0x14>
 8006460:	b672      	cpsid	i
 8006462:	e7fe      	b.n	8006462 <xTaskCheckForTimeOut+0x12>
    configASSERT( pxTicksToWait );
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <xTaskCheckForTimeOut+0x1e>
 800646a:	b672      	cpsid	i
 800646c:	e7fe      	b.n	800646c <xTaskCheckForTimeOut+0x1c>

    taskENTER_CRITICAL();
 800646e:	f000 fe7f 	bl	8007170 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8006472:	4b1f      	ldr	r3, [pc, #124]	; (80064f0 <xTaskCheckForTimeOut+0xa0>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	3301      	adds	r3, #1
 8006488:	d102      	bne.n	8006490 <xTaskCheckForTimeOut+0x40>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800648a:	2300      	movs	r3, #0
 800648c:	617b      	str	r3, [r7, #20]
 800648e:	e027      	b.n	80064e0 <xTaskCheckForTimeOut+0x90>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	4b17      	ldr	r3, [pc, #92]	; (80064f4 <xTaskCheckForTimeOut+0xa4>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	429a      	cmp	r2, r3
 800649a:	d00a      	beq.n	80064b2 <xTaskCheckForTimeOut+0x62>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	693a      	ldr	r2, [r7, #16]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d305      	bcc.n	80064b2 <xTaskCheckForTimeOut+0x62>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80064a6:	2301      	movs	r3, #1
 80064a8:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	2200      	movs	r2, #0
 80064ae:	601a      	str	r2, [r3, #0]
 80064b0:	e016      	b.n	80064e0 <xTaskCheckForTimeOut+0x90>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d20c      	bcs.n	80064d6 <xTaskCheckForTimeOut+0x86>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	1ad2      	subs	r2, r2, r3
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	0018      	movs	r0, r3
 80064cc:	f7ff ffac 	bl	8006428 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80064d0:	2300      	movs	r3, #0
 80064d2:	617b      	str	r3, [r7, #20]
 80064d4:	e004      	b.n	80064e0 <xTaskCheckForTimeOut+0x90>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	2200      	movs	r2, #0
 80064da:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80064dc:	2301      	movs	r3, #1
 80064de:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 80064e0:	f000 fe58 	bl	8007194 <vPortExitCritical>

    return xReturn;
 80064e4:	697b      	ldr	r3, [r7, #20]
}
 80064e6:	0018      	movs	r0, r3
 80064e8:	46bd      	mov	sp, r7
 80064ea:	b006      	add	sp, #24
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	46c0      	nop			; (mov r8, r8)
 80064f0:	20000790 	.word	0x20000790
 80064f4:	200007a4 	.word	0x200007a4

080064f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80064fc:	4b02      	ldr	r3, [pc, #8]	; (8006508 <vTaskMissedYield+0x10>)
 80064fe:	2201      	movs	r2, #1
 8006500:	601a      	str	r2, [r3, #0]
}
 8006502:	46c0      	nop			; (mov r8, r8)
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	200007a0 	.word	0x200007a0

0800650c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8006514:	f000 f84e 	bl	80065b4 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006518:	4b03      	ldr	r3, [pc, #12]	; (8006528 <prvIdleTask+0x1c>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d9f9      	bls.n	8006514 <prvIdleTask+0x8>
            {
                taskYIELD();
 8006520:	f000 fe16 	bl	8007150 <vPortYield>
        prvCheckTasksWaitingTermination();
 8006524:	e7f6      	b.n	8006514 <prvIdleTask+0x8>
 8006526:	46c0      	nop			; (mov r8, r8)
 8006528:	200002bc 	.word	0x200002bc

0800652c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006532:	2300      	movs	r3, #0
 8006534:	607b      	str	r3, [r7, #4]
 8006536:	e00c      	b.n	8006552 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	0013      	movs	r3, r2
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	189b      	adds	r3, r3, r2
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	4a14      	ldr	r2, [pc, #80]	; (8006594 <prvInitialiseTaskLists+0x68>)
 8006544:	189b      	adds	r3, r3, r2
 8006546:	0018      	movs	r0, r3
 8006548:	f7fe fcdc 	bl	8004f04 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	3301      	adds	r3, #1
 8006550:	607b      	str	r3, [r7, #4]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2b37      	cmp	r3, #55	; 0x37
 8006556:	d9ef      	bls.n	8006538 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8006558:	4b0f      	ldr	r3, [pc, #60]	; (8006598 <prvInitialiseTaskLists+0x6c>)
 800655a:	0018      	movs	r0, r3
 800655c:	f7fe fcd2 	bl	8004f04 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8006560:	4b0e      	ldr	r3, [pc, #56]	; (800659c <prvInitialiseTaskLists+0x70>)
 8006562:	0018      	movs	r0, r3
 8006564:	f7fe fcce 	bl	8004f04 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8006568:	4b0d      	ldr	r3, [pc, #52]	; (80065a0 <prvInitialiseTaskLists+0x74>)
 800656a:	0018      	movs	r0, r3
 800656c:	f7fe fcca 	bl	8004f04 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8006570:	4b0c      	ldr	r3, [pc, #48]	; (80065a4 <prvInitialiseTaskLists+0x78>)
 8006572:	0018      	movs	r0, r3
 8006574:	f7fe fcc6 	bl	8004f04 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8006578:	4b0b      	ldr	r3, [pc, #44]	; (80065a8 <prvInitialiseTaskLists+0x7c>)
 800657a:	0018      	movs	r0, r3
 800657c:	f7fe fcc2 	bl	8004f04 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8006580:	4b0a      	ldr	r3, [pc, #40]	; (80065ac <prvInitialiseTaskLists+0x80>)
 8006582:	4a05      	ldr	r2, [pc, #20]	; (8006598 <prvInitialiseTaskLists+0x6c>)
 8006584:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006586:	4b0a      	ldr	r3, [pc, #40]	; (80065b0 <prvInitialiseTaskLists+0x84>)
 8006588:	4a04      	ldr	r2, [pc, #16]	; (800659c <prvInitialiseTaskLists+0x70>)
 800658a:	601a      	str	r2, [r3, #0]
}
 800658c:	46c0      	nop			; (mov r8, r8)
 800658e:	46bd      	mov	sp, r7
 8006590:	b002      	add	sp, #8
 8006592:	bd80      	pop	{r7, pc}
 8006594:	200002bc 	.word	0x200002bc
 8006598:	2000071c 	.word	0x2000071c
 800659c:	20000730 	.word	0x20000730
 80065a0:	2000074c 	.word	0x2000074c
 80065a4:	20000760 	.word	0x20000760
 80065a8:	20000778 	.word	0x20000778
 80065ac:	20000744 	.word	0x20000744
 80065b0:	20000748 	.word	0x20000748

080065b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065ba:	e01a      	b.n	80065f2 <prvCheckTasksWaitingTermination+0x3e>
        {
            taskENTER_CRITICAL();
 80065bc:	f000 fdd8 	bl	8007170 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065c0:	4b10      	ldr	r3, [pc, #64]	; (8006604 <prvCheckTasksWaitingTermination+0x50>)
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	3304      	adds	r3, #4
 80065cc:	0018      	movs	r0, r3
 80065ce:	f7fe fcf8 	bl	8004fc2 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80065d2:	4b0d      	ldr	r3, [pc, #52]	; (8006608 <prvCheckTasksWaitingTermination+0x54>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	1e5a      	subs	r2, r3, #1
 80065d8:	4b0b      	ldr	r3, [pc, #44]	; (8006608 <prvCheckTasksWaitingTermination+0x54>)
 80065da:	601a      	str	r2, [r3, #0]
                --uxDeletedTasksWaitingCleanUp;
 80065dc:	4b0b      	ldr	r3, [pc, #44]	; (800660c <prvCheckTasksWaitingTermination+0x58>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	1e5a      	subs	r2, r3, #1
 80065e2:	4b0a      	ldr	r3, [pc, #40]	; (800660c <prvCheckTasksWaitingTermination+0x58>)
 80065e4:	601a      	str	r2, [r3, #0]
            }
            taskEXIT_CRITICAL();
 80065e6:	f000 fdd5 	bl	8007194 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	0018      	movs	r0, r3
 80065ee:	f000 f80f 	bl	8006610 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065f2:	4b06      	ldr	r3, [pc, #24]	; (800660c <prvCheckTasksWaitingTermination+0x58>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d1e0      	bne.n	80065bc <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80065fa:	46c0      	nop			; (mov r8, r8)
 80065fc:	46c0      	nop			; (mov r8, r8)
 80065fe:	46bd      	mov	sp, r7
 8006600:	b002      	add	sp, #8
 8006602:	bd80      	pop	{r7, pc}
 8006604:	20000760 	.word	0x20000760
 8006608:	2000078c 	.word	0x2000078c
 800660c:	20000774 	.word	0x20000774

08006610 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661c:	0018      	movs	r0, r3
 800661e:	f000 fee7 	bl	80073f0 <vPortFree>
            vPortFree( pxTCB );
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	0018      	movs	r0, r3
 8006626:	f000 fee3 	bl	80073f0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800662a:	46c0      	nop			; (mov r8, r8)
 800662c:	46bd      	mov	sp, r7
 800662e:	b002      	add	sp, #8
 8006630:	bd80      	pop	{r7, pc}
	...

08006634 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006634:	b580      	push	{r7, lr}
 8006636:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006638:	4b09      	ldr	r3, [pc, #36]	; (8006660 <prvResetNextTaskUnblockTime+0x2c>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d104      	bne.n	800664c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8006642:	4b08      	ldr	r3, [pc, #32]	; (8006664 <prvResetNextTaskUnblockTime+0x30>)
 8006644:	2201      	movs	r2, #1
 8006646:	4252      	negs	r2, r2
 8006648:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800664a:	e005      	b.n	8006658 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800664c:	4b04      	ldr	r3, [pc, #16]	; (8006660 <prvResetNextTaskUnblockTime+0x2c>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	4b03      	ldr	r3, [pc, #12]	; (8006664 <prvResetNextTaskUnblockTime+0x30>)
 8006656:	601a      	str	r2, [r3, #0]
}
 8006658:	46c0      	nop			; (mov r8, r8)
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	46c0      	nop			; (mov r8, r8)
 8006660:	20000744 	.word	0x20000744
 8006664:	200007ac 	.word	0x200007ac

08006668 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800666e:	4b0a      	ldr	r3, [pc, #40]	; (8006698 <xTaskGetSchedulerState+0x30>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d102      	bne.n	800667c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8006676:	2301      	movs	r3, #1
 8006678:	607b      	str	r3, [r7, #4]
 800667a:	e008      	b.n	800668e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800667c:	4b07      	ldr	r3, [pc, #28]	; (800669c <xTaskGetSchedulerState+0x34>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d102      	bne.n	800668a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8006684:	2302      	movs	r3, #2
 8006686:	607b      	str	r3, [r7, #4]
 8006688:	e001      	b.n	800668e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800668a:	2300      	movs	r3, #0
 800668c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800668e:	687b      	ldr	r3, [r7, #4]
    }
 8006690:	0018      	movs	r0, r3
 8006692:	46bd      	mov	sp, r7
 8006694:	b002      	add	sp, #8
 8006696:	bd80      	pop	{r7, pc}
 8006698:	20000798 	.word	0x20000798
 800669c:	200007b4 	.word	0x200007b4

080066a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b086      	sub	sp, #24
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80066ac:	2300      	movs	r3, #0
 80066ae:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d06a      	beq.n	800678c <xTaskPriorityDisinherit+0xec>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80066b6:	4b38      	ldr	r3, [pc, #224]	; (8006798 <xTaskPriorityDisinherit+0xf8>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d001      	beq.n	80066c4 <xTaskPriorityDisinherit+0x24>
 80066c0:	b672      	cpsid	i
 80066c2:	e7fe      	b.n	80066c2 <xTaskPriorityDisinherit+0x22>
            configASSERT( pxTCB->uxMutexesHeld );
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d101      	bne.n	80066d0 <xTaskPriorityDisinherit+0x30>
 80066cc:	b672      	cpsid	i
 80066ce:	e7fe      	b.n	80066ce <xTaskPriorityDisinherit+0x2e>
            ( pxTCB->uxMutexesHeld )--;
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066d4:	1e5a      	subs	r2, r3, #1
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d052      	beq.n	800678c <xTaskPriorityDisinherit+0xec>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d14e      	bne.n	800678c <xTaskPriorityDisinherit+0xec>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	3304      	adds	r3, #4
 80066f2:	0018      	movs	r0, r3
 80066f4:	f7fe fc65 	bl	8004fc2 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006704:	2238      	movs	r2, #56	; 0x38
 8006706:	1ad2      	subs	r2, r2, r3
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006710:	4b22      	ldr	r3, [pc, #136]	; (800679c <xTaskPriorityDisinherit+0xfc>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	429a      	cmp	r2, r3
 8006716:	d903      	bls.n	8006720 <xTaskPriorityDisinherit+0x80>
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800671c:	4b1f      	ldr	r3, [pc, #124]	; (800679c <xTaskPriorityDisinherit+0xfc>)
 800671e:	601a      	str	r2, [r3, #0]
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006724:	491e      	ldr	r1, [pc, #120]	; (80067a0 <xTaskPriorityDisinherit+0x100>)
 8006726:	0013      	movs	r3, r2
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	189b      	adds	r3, r3, r2
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	18cb      	adds	r3, r1, r3
 8006730:	3304      	adds	r3, #4
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	60fb      	str	r3, [r7, #12]
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	609a      	str	r2, [r3, #8]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	689a      	ldr	r2, [r3, #8]
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	60da      	str	r2, [r3, #12]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	3204      	adds	r2, #4
 800674c:	605a      	str	r2, [r3, #4]
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	1d1a      	adds	r2, r3, #4
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	609a      	str	r2, [r3, #8]
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800675a:	0013      	movs	r3, r2
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	189b      	adds	r3, r3, r2
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	4a0f      	ldr	r2, [pc, #60]	; (80067a0 <xTaskPriorityDisinherit+0x100>)
 8006764:	189a      	adds	r2, r3, r2
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	615a      	str	r2, [r3, #20]
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800676e:	490c      	ldr	r1, [pc, #48]	; (80067a0 <xTaskPriorityDisinherit+0x100>)
 8006770:	0013      	movs	r3, r2
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	189b      	adds	r3, r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	585b      	ldr	r3, [r3, r1]
 800677a:	1c58      	adds	r0, r3, #1
 800677c:	4908      	ldr	r1, [pc, #32]	; (80067a0 <xTaskPriorityDisinherit+0x100>)
 800677e:	0013      	movs	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	189b      	adds	r3, r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	5058      	str	r0, [r3, r1]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8006788:	2301      	movs	r3, #1
 800678a:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800678c:	697b      	ldr	r3, [r7, #20]
    }
 800678e:	0018      	movs	r0, r3
 8006790:	46bd      	mov	sp, r7
 8006792:	b006      	add	sp, #24
 8006794:	bd80      	pop	{r7, pc}
 8006796:	46c0      	nop			; (mov r8, r8)
 8006798:	200002b8 	.word	0x200002b8
 800679c:	20000794 	.word	0x20000794
 80067a0:	200002bc 	.word	0x200002bc

080067a4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
    TickType_t uxReturn;

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80067aa:	4b08      	ldr	r3, [pc, #32]	; (80067cc <uxTaskResetEventItemValue+0x28>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	699b      	ldr	r3, [r3, #24]
 80067b0:	607b      	str	r3, [r7, #4]

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067b2:	4b06      	ldr	r3, [pc, #24]	; (80067cc <uxTaskResetEventItemValue+0x28>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b8:	4b04      	ldr	r3, [pc, #16]	; (80067cc <uxTaskResetEventItemValue+0x28>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2138      	movs	r1, #56	; 0x38
 80067be:	1a8a      	subs	r2, r1, r2
 80067c0:	619a      	str	r2, [r3, #24]

    return uxReturn;
 80067c2:	687b      	ldr	r3, [r7, #4]
}
 80067c4:	0018      	movs	r0, r3
 80067c6:	46bd      	mov	sp, r7
 80067c8:	b002      	add	sp, #8
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	200002b8 	.word	0x200002b8

080067d0 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d901      	bls.n	80067e6 <ulTaskGenericNotifyTake+0x16>
 80067e2:	b672      	cpsid	i
 80067e4:	e7fe      	b.n	80067e4 <ulTaskGenericNotifyTake+0x14>

        taskENTER_CRITICAL();
 80067e6:	f000 fcc3 	bl	8007170 <vPortEnterCritical>
        {
            /* Only block if the notification count is not already non-zero. */
            if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 80067ea:	4b29      	ldr	r3, [pc, #164]	; (8006890 <ulTaskGenericNotifyTake+0xc0>)
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	3314      	adds	r3, #20
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	18d3      	adds	r3, r2, r3
 80067f6:	3304      	adds	r3, #4
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d111      	bne.n	8006822 <ulTaskGenericNotifyTake+0x52>
            {
                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80067fe:	4b24      	ldr	r3, [pc, #144]	; (8006890 <ulTaskGenericNotifyTake+0xc0>)
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	2160      	movs	r1, #96	; 0x60
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	18d3      	adds	r3, r2, r3
 8006808:	185b      	adds	r3, r3, r1
 800680a:	2201      	movs	r2, #1
 800680c:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d006      	beq.n	8006822 <ulTaskGenericNotifyTake+0x52>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2101      	movs	r1, #1
 8006818:	0018      	movs	r0, r3
 800681a:	f000 f91d 	bl	8006a58 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800681e:	f000 fc97 	bl	8007150 <vPortYield>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006822:	f000 fcb7 	bl	8007194 <vPortExitCritical>

        taskENTER_CRITICAL();
 8006826:	f000 fca3 	bl	8007170 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWait );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800682a:	4b19      	ldr	r3, [pc, #100]	; (8006890 <ulTaskGenericNotifyTake+0xc0>)
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	3314      	adds	r3, #20
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	18d3      	adds	r3, r2, r3
 8006836:	3304      	adds	r3, #4
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0UL )
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d016      	beq.n	8006870 <ulTaskGenericNotifyTake+0xa0>
            {
                if( xClearCountOnExit != pdFALSE )
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d009      	beq.n	800685c <ulTaskGenericNotifyTake+0x8c>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 8006848:	4b11      	ldr	r3, [pc, #68]	; (8006890 <ulTaskGenericNotifyTake+0xc0>)
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	3314      	adds	r3, #20
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	18d3      	adds	r3, r2, r3
 8006854:	3304      	adds	r3, #4
 8006856:	2200      	movs	r2, #0
 8006858:	601a      	str	r2, [r3, #0]
 800685a:	e009      	b.n	8006870 <ulTaskGenericNotifyTake+0xa0>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 800685c:	4b0c      	ldr	r3, [pc, #48]	; (8006890 <ulTaskGenericNotifyTake+0xc0>)
 800685e:	6819      	ldr	r1, [r3, #0]
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	1e5a      	subs	r2, r3, #1
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	3314      	adds	r3, #20
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	18cb      	adds	r3, r1, r3
 800686c:	3304      	adds	r3, #4
 800686e:	601a      	str	r2, [r3, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8006870:	4b07      	ldr	r3, [pc, #28]	; (8006890 <ulTaskGenericNotifyTake+0xc0>)
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	2160      	movs	r1, #96	; 0x60
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	18d3      	adds	r3, r2, r3
 800687a:	185b      	adds	r3, r3, r1
 800687c:	2200      	movs	r2, #0
 800687e:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8006880:	f000 fc88 	bl	8007194 <vPortExitCritical>

        return ulReturn;
 8006884:	697b      	ldr	r3, [r7, #20]
    }
 8006886:	0018      	movs	r0, r3
 8006888:	46bd      	mov	sp, r7
 800688a:	b006      	add	sp, #24
 800688c:	bd80      	pop	{r7, pc}
 800688e:	46c0      	nop			; (mov r8, r8)
 8006890:	200002b8 	.word	0x200002b8

08006894 <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
 8006894:	b590      	push	{r4, r7, lr}
 8006896:	b08b      	sub	sp, #44	; 0x2c
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	607a      	str	r2, [r7, #4]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d101      	bne.n	80068aa <vTaskGenericNotifyGiveFromISR+0x16>
 80068a6:	b672      	cpsid	i
 80068a8:	e7fe      	b.n	80068a8 <vTaskGenericNotifyGiveFromISR+0x14>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d901      	bls.n	80068b4 <vTaskGenericNotifyGiveFromISR+0x20>
 80068b0:	b672      	cpsid	i
 80068b2:	e7fe      	b.n	80068b2 <vTaskGenericNotifyGiveFromISR+0x1e>
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

        pxTCB = xTaskToNotify;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	627b      	str	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80068b8:	f000 fc84 	bl	80071c4 <ulSetInterruptMaskFromISR>
 80068bc:	0003      	movs	r3, r0
 80068be:	623b      	str	r3, [r7, #32]
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80068c0:	241f      	movs	r4, #31
 80068c2:	193b      	adds	r3, r7, r4
 80068c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068c6:	2060      	movs	r0, #96	; 0x60
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	188a      	adds	r2, r1, r2
 80068cc:	1812      	adds	r2, r2, r0
 80068ce:	7812      	ldrb	r2, [r2, #0]
 80068d0:	701a      	strb	r2, [r3, #0]
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80068d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068d4:	2160      	movs	r1, #96	; 0x60
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	18d3      	adds	r3, r2, r3
 80068da:	185b      	adds	r3, r3, r1
 80068dc:	2202      	movs	r2, #2
 80068de:	701a      	strb	r2, [r3, #0]

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80068e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	3314      	adds	r3, #20
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	18d3      	adds	r3, r2, r3
 80068ea:	3304      	adds	r3, #4
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	1c5a      	adds	r2, r3, #1
 80068f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	3314      	adds	r3, #20
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	18cb      	adds	r3, r1, r3
 80068fa:	3304      	adds	r3, #4
 80068fc:	601a      	str	r2, [r3, #0]

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80068fe:	193b      	adds	r3, r7, r4
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	2b01      	cmp	r3, #1
 8006904:	d000      	beq.n	8006908 <vTaskGenericNotifyGiveFromISR+0x74>
 8006906:	e093      	b.n	8006a30 <vTaskGenericNotifyGiveFromISR+0x19c>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800690c:	2b00      	cmp	r3, #0
 800690e:	d001      	beq.n	8006914 <vTaskGenericNotifyGiveFromISR+0x80>
 8006910:	b672      	cpsid	i
 8006912:	e7fe      	b.n	8006912 <vTaskGenericNotifyGiveFromISR+0x7e>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006914:	4b4a      	ldr	r3, [pc, #296]	; (8006a40 <vTaskGenericNotifyGiveFromISR+0x1ac>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d15d      	bne.n	80069d8 <vTaskGenericNotifyGiveFromISR+0x144>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800691c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691e:	695b      	ldr	r3, [r3, #20]
 8006920:	617b      	str	r3, [r7, #20]
 8006922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006928:	68d2      	ldr	r2, [r2, #12]
 800692a:	609a      	str	r2, [r3, #8]
 800692c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006932:	6892      	ldr	r2, [r2, #8]
 8006934:	605a      	str	r2, [r3, #4]
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	685a      	ldr	r2, [r3, #4]
 800693a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693c:	3304      	adds	r3, #4
 800693e:	429a      	cmp	r2, r3
 8006940:	d103      	bne.n	800694a <vTaskGenericNotifyGiveFromISR+0xb6>
 8006942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006944:	68da      	ldr	r2, [r3, #12]
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	605a      	str	r2, [r3, #4]
 800694a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694c:	2200      	movs	r2, #0
 800694e:	615a      	str	r2, [r3, #20]
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	1e5a      	subs	r2, r3, #1
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800695a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800695e:	4b39      	ldr	r3, [pc, #228]	; (8006a44 <vTaskGenericNotifyGiveFromISR+0x1b0>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	429a      	cmp	r2, r3
 8006964:	d903      	bls.n	800696e <vTaskGenericNotifyGiveFromISR+0xda>
 8006966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800696a:	4b36      	ldr	r3, [pc, #216]	; (8006a44 <vTaskGenericNotifyGiveFromISR+0x1b0>)
 800696c:	601a      	str	r2, [r3, #0]
 800696e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006972:	4935      	ldr	r1, [pc, #212]	; (8006a48 <vTaskGenericNotifyGiveFromISR+0x1b4>)
 8006974:	0013      	movs	r3, r2
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	189b      	adds	r3, r3, r2
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	18cb      	adds	r3, r1, r3
 800697e:	3304      	adds	r3, #4
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	613b      	str	r3, [r7, #16]
 8006984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	609a      	str	r2, [r3, #8]
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	689a      	ldr	r2, [r3, #8]
 800698e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006990:	60da      	str	r2, [r3, #12]
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006998:	3204      	adds	r2, #4
 800699a:	605a      	str	r2, [r3, #4]
 800699c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699e:	1d1a      	adds	r2, r3, #4
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	609a      	str	r2, [r3, #8]
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069a8:	0013      	movs	r3, r2
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	189b      	adds	r3, r3, r2
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	4a25      	ldr	r2, [pc, #148]	; (8006a48 <vTaskGenericNotifyGiveFromISR+0x1b4>)
 80069b2:	189a      	adds	r2, r3, r2
 80069b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b6:	615a      	str	r2, [r3, #20]
 80069b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069bc:	4922      	ldr	r1, [pc, #136]	; (8006a48 <vTaskGenericNotifyGiveFromISR+0x1b4>)
 80069be:	0013      	movs	r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	189b      	adds	r3, r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	585b      	ldr	r3, [r3, r1]
 80069c8:	1c58      	adds	r0, r3, #1
 80069ca:	491f      	ldr	r1, [pc, #124]	; (8006a48 <vTaskGenericNotifyGiveFromISR+0x1b4>)
 80069cc:	0013      	movs	r3, r2
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	189b      	adds	r3, r3, r2
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	5058      	str	r0, [r3, r1]
 80069d6:	e01b      	b.n	8006a10 <vTaskGenericNotifyGiveFromISR+0x17c>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80069d8:	4b1c      	ldr	r3, [pc, #112]	; (8006a4c <vTaskGenericNotifyGiveFromISR+0x1b8>)
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	61bb      	str	r3, [r7, #24]
 80069de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e0:	69ba      	ldr	r2, [r7, #24]
 80069e2:	61da      	str	r2, [r3, #28]
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	689a      	ldr	r2, [r3, #8]
 80069e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ea:	621a      	str	r2, [r3, #32]
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069f2:	3218      	adds	r2, #24
 80069f4:	605a      	str	r2, [r3, #4]
 80069f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f8:	3318      	adds	r3, #24
 80069fa:	001a      	movs	r2, r3
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	609a      	str	r2, [r3, #8]
 8006a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a02:	4a12      	ldr	r2, [pc, #72]	; (8006a4c <vTaskGenericNotifyGiveFromISR+0x1b8>)
 8006a04:	629a      	str	r2, [r3, #40]	; 0x28
 8006a06:	4b11      	ldr	r3, [pc, #68]	; (8006a4c <vTaskGenericNotifyGiveFromISR+0x1b8>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	1c5a      	adds	r2, r3, #1
 8006a0c:	4b0f      	ldr	r3, [pc, #60]	; (8006a4c <vTaskGenericNotifyGiveFromISR+0x1b8>)
 8006a0e:	601a      	str	r2, [r3, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a14:	4b0e      	ldr	r3, [pc, #56]	; (8006a50 <vTaskGenericNotifyGiveFromISR+0x1bc>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d908      	bls.n	8006a30 <vTaskGenericNotifyGiveFromISR+0x19c>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d002      	beq.n	8006a2a <vTaskGenericNotifyGiveFromISR+0x196>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter in an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8006a2a:	4b0a      	ldr	r3, [pc, #40]	; (8006a54 <vTaskGenericNotifyGiveFromISR+0x1c0>)
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	601a      	str	r2, [r3, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8006a30:	6a3b      	ldr	r3, [r7, #32]
 8006a32:	0018      	movs	r0, r3
 8006a34:	f000 fbcc 	bl	80071d0 <vClearInterruptMaskFromISR>
    }
 8006a38:	46c0      	nop			; (mov r8, r8)
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	b00b      	add	sp, #44	; 0x2c
 8006a3e:	bd90      	pop	{r4, r7, pc}
 8006a40:	200007b4 	.word	0x200007b4
 8006a44:	20000794 	.word	0x20000794
 8006a48:	200002bc 	.word	0x200002bc
 8006a4c:	2000074c 	.word	0x2000074c
 8006a50:	200002b8 	.word	0x200002b8
 8006a54:	200007a0 	.word	0x200007a0

08006a58 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b086      	sub	sp, #24
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8006a62:	4b2e      	ldr	r3, [pc, #184]	; (8006b1c <prvAddCurrentTaskToDelayedList+0xc4>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a68:	4b2d      	ldr	r3, [pc, #180]	; (8006b20 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	3304      	adds	r3, #4
 8006a6e:	0018      	movs	r0, r3
 8006a70:	f7fe faa7 	bl	8004fc2 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	3301      	adds	r3, #1
 8006a78:	d124      	bne.n	8006ac4 <prvAddCurrentTaskToDelayedList+0x6c>
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d021      	beq.n	8006ac4 <prvAddCurrentTaskToDelayedList+0x6c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a80:	4b28      	ldr	r3, [pc, #160]	; (8006b24 <prvAddCurrentTaskToDelayedList+0xcc>)
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	613b      	str	r3, [r7, #16]
 8006a86:	4b26      	ldr	r3, [pc, #152]	; (8006b20 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	693a      	ldr	r2, [r7, #16]
 8006a8c:	609a      	str	r2, [r3, #8]
 8006a8e:	4b24      	ldr	r3, [pc, #144]	; (8006b20 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	693a      	ldr	r2, [r7, #16]
 8006a94:	6892      	ldr	r2, [r2, #8]
 8006a96:	60da      	str	r2, [r3, #12]
 8006a98:	4b21      	ldr	r3, [pc, #132]	; (8006b20 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	3204      	adds	r2, #4
 8006aa2:	605a      	str	r2, [r3, #4]
 8006aa4:	4b1e      	ldr	r3, [pc, #120]	; (8006b20 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	1d1a      	adds	r2, r3, #4
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	609a      	str	r2, [r3, #8]
 8006aae:	4b1c      	ldr	r3, [pc, #112]	; (8006b20 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a1c      	ldr	r2, [pc, #112]	; (8006b24 <prvAddCurrentTaskToDelayedList+0xcc>)
 8006ab4:	615a      	str	r2, [r3, #20]
 8006ab6:	4b1b      	ldr	r3, [pc, #108]	; (8006b24 <prvAddCurrentTaskToDelayedList+0xcc>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	1c5a      	adds	r2, r3, #1
 8006abc:	4b19      	ldr	r3, [pc, #100]	; (8006b24 <prvAddCurrentTaskToDelayedList+0xcc>)
 8006abe:	601a      	str	r2, [r3, #0]
 8006ac0:	46c0      	nop			; (mov r8, r8)

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006ac2:	e026      	b.n	8006b12 <prvAddCurrentTaskToDelayedList+0xba>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8006ac4:	697a      	ldr	r2, [r7, #20]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	18d3      	adds	r3, r2, r3
 8006aca:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006acc:	4b14      	ldr	r3, [pc, #80]	; (8006b20 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d209      	bcs.n	8006af0 <prvAddCurrentTaskToDelayedList+0x98>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006adc:	4b12      	ldr	r3, [pc, #72]	; (8006b28 <prvAddCurrentTaskToDelayedList+0xd0>)
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	4b0f      	ldr	r3, [pc, #60]	; (8006b20 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	3304      	adds	r3, #4
 8006ae6:	0019      	movs	r1, r3
 8006ae8:	0010      	movs	r0, r2
 8006aea:	f7fe fa34 	bl	8004f56 <vListInsert>
}
 8006aee:	e010      	b.n	8006b12 <prvAddCurrentTaskToDelayedList+0xba>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006af0:	4b0e      	ldr	r3, [pc, #56]	; (8006b2c <prvAddCurrentTaskToDelayedList+0xd4>)
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	4b0a      	ldr	r3, [pc, #40]	; (8006b20 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	3304      	adds	r3, #4
 8006afa:	0019      	movs	r1, r3
 8006afc:	0010      	movs	r0, r2
 8006afe:	f7fe fa2a 	bl	8004f56 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8006b02:	4b0b      	ldr	r3, [pc, #44]	; (8006b30 <prvAddCurrentTaskToDelayedList+0xd8>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68fa      	ldr	r2, [r7, #12]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d202      	bcs.n	8006b12 <prvAddCurrentTaskToDelayedList+0xba>
                    xNextTaskUnblockTime = xTimeToWake;
 8006b0c:	4b08      	ldr	r3, [pc, #32]	; (8006b30 <prvAddCurrentTaskToDelayedList+0xd8>)
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	601a      	str	r2, [r3, #0]
}
 8006b12:	46c0      	nop			; (mov r8, r8)
 8006b14:	46bd      	mov	sp, r7
 8006b16:	b006      	add	sp, #24
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	46c0      	nop			; (mov r8, r8)
 8006b1c:	20000790 	.word	0x20000790
 8006b20:	200002b8 	.word	0x200002b8
 8006b24:	20000778 	.word	0x20000778
 8006b28:	20000748 	.word	0x20000748
 8006b2c:	20000744 	.word	0x20000744
 8006b30:	200007ac 	.word	0x200007ac

08006b34 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8006b3e:	f000 fa41 	bl	8006fc4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8006b42:	4b0d      	ldr	r3, [pc, #52]	; (8006b78 <xTimerCreateTimerTask+0x44>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00c      	beq.n	8006b64 <xTimerCreateTimerTask+0x30>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8006b4a:	2380      	movs	r3, #128	; 0x80
 8006b4c:	005a      	lsls	r2, r3, #1
 8006b4e:	490b      	ldr	r1, [pc, #44]	; (8006b7c <xTimerCreateTimerTask+0x48>)
 8006b50:	480b      	ldr	r0, [pc, #44]	; (8006b80 <xTimerCreateTimerTask+0x4c>)
 8006b52:	4b0c      	ldr	r3, [pc, #48]	; (8006b84 <xTimerCreateTimerTask+0x50>)
 8006b54:	9301      	str	r3, [sp, #4]
 8006b56:	2302      	movs	r3, #2
 8006b58:	9300      	str	r3, [sp, #0]
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	f7fe fe1f 	bl	800579e <xTaskCreate>
 8006b60:	0003      	movs	r3, r0
 8006b62:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d101      	bne.n	8006b6e <xTimerCreateTimerTask+0x3a>
 8006b6a:	b672      	cpsid	i
 8006b6c:	e7fe      	b.n	8006b6c <xTimerCreateTimerTask+0x38>
        return xReturn;
 8006b6e:	687b      	ldr	r3, [r7, #4]
    }
 8006b70:	0018      	movs	r0, r3
 8006b72:	46bd      	mov	sp, r7
 8006b74:	b002      	add	sp, #8
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	200007e8 	.word	0x200007e8
 8006b7c:	0800884c 	.word	0x0800884c
 8006b80:	08006c31 	.word	0x08006c31
 8006b84:	200007ec 	.word	0x200007ec

08006b88 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006b94:	e009      	b.n	8006baa <prvReloadTimer+0x22>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	68ba      	ldr	r2, [r7, #8]
 8006b9c:	18d3      	adds	r3, r2, r3
 8006b9e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6a1b      	ldr	r3, [r3, #32]
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	0010      	movs	r0, r2
 8006ba8:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	699a      	ldr	r2, [r3, #24]
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	18d1      	adds	r1, r2, r3
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	68f8      	ldr	r0, [r7, #12]
 8006bb8:	f000 f8d8 	bl	8006d6c <prvInsertTimerInActiveList>
 8006bbc:	1e03      	subs	r3, r0, #0
 8006bbe:	d1ea      	bne.n	8006b96 <prvReloadTimer+0xe>
        }
    }
 8006bc0:	46c0      	nop			; (mov r8, r8)
 8006bc2:	46c0      	nop			; (mov r8, r8)
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	b004      	add	sp, #16
 8006bc8:	bd80      	pop	{r7, pc}
	...

08006bcc <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bd6:	4b15      	ldr	r3, [pc, #84]	; (8006c2c <prvProcessExpiredTimer+0x60>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	3304      	adds	r3, #4
 8006be4:	0018      	movs	r0, r3
 8006be6:	f7fe f9ec 	bl	8004fc2 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2228      	movs	r2, #40	; 0x28
 8006bee:	5c9b      	ldrb	r3, [r3, r2]
 8006bf0:	001a      	movs	r2, r3
 8006bf2:	2304      	movs	r3, #4
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	d006      	beq.n	8006c06 <prvProcessExpiredTimer+0x3a>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8006bf8:	683a      	ldr	r2, [r7, #0]
 8006bfa:	6879      	ldr	r1, [r7, #4]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	0018      	movs	r0, r3
 8006c00:	f7ff ffc2 	bl	8006b88 <prvReloadTimer>
 8006c04:	e008      	b.n	8006c18 <prvProcessExpiredTimer+0x4c>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2228      	movs	r2, #40	; 0x28
 8006c0a:	5c9b      	ldrb	r3, [r3, r2]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	4393      	bics	r3, r2
 8006c10:	b2d9      	uxtb	r1, r3
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2228      	movs	r2, #40	; 0x28
 8006c16:	5499      	strb	r1, [r3, r2]
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6a1b      	ldr	r3, [r3, #32]
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	0010      	movs	r0, r2
 8006c20:	4798      	blx	r3
    }
 8006c22:	46c0      	nop			; (mov r8, r8)
 8006c24:	46bd      	mov	sp, r7
 8006c26:	b004      	add	sp, #16
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	46c0      	nop			; (mov r8, r8)
 8006c2c:	200007e0 	.word	0x200007e0

08006c30 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c38:	2308      	movs	r3, #8
 8006c3a:	18fb      	adds	r3, r7, r3
 8006c3c:	0018      	movs	r0, r3
 8006c3e:	f000 f853 	bl	8006ce8 <prvGetNextExpireTime>
 8006c42:	0003      	movs	r3, r0
 8006c44:	60fb      	str	r3, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006c46:	68ba      	ldr	r2, [r7, #8]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	0011      	movs	r1, r2
 8006c4c:	0018      	movs	r0, r3
 8006c4e:	f000 f803 	bl	8006c58 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8006c52:	f000 f8cd 	bl	8006df0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c56:	e7ef      	b.n	8006c38 <prvTimerTask+0x8>

08006c58 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8006c62:	f7fe ff5f 	bl	8005b24 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c66:	2308      	movs	r3, #8
 8006c68:	18fb      	adds	r3, r7, r3
 8006c6a:	0018      	movs	r0, r3
 8006c6c:	f000 f85e 	bl	8006d2c <prvSampleTimeNow>
 8006c70:	0003      	movs	r3, r0
 8006c72:	60fb      	str	r3, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d12b      	bne.n	8006cd2 <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d10c      	bne.n	8006c9a <prvProcessTimerOrBlockTask+0x42>
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d808      	bhi.n	8006c9a <prvProcessTimerOrBlockTask+0x42>
                {
                    ( void ) xTaskResumeAll();
 8006c88:	f7fe ff58 	bl	8005b3c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	0011      	movs	r1, r2
 8006c92:	0018      	movs	r0, r3
 8006c94:	f7ff ff9a 	bl	8006bcc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8006c98:	e01d      	b.n	8006cd6 <prvProcessTimerOrBlockTask+0x7e>
                    if( xListWasEmpty != pdFALSE )
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d008      	beq.n	8006cb2 <prvProcessTimerOrBlockTask+0x5a>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006ca0:	4b0f      	ldr	r3, [pc, #60]	; (8006ce0 <prvProcessTimerOrBlockTask+0x88>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d101      	bne.n	8006cae <prvProcessTimerOrBlockTask+0x56>
 8006caa:	2301      	movs	r3, #1
 8006cac:	e000      	b.n	8006cb0 <prvProcessTimerOrBlockTask+0x58>
 8006cae:	2300      	movs	r3, #0
 8006cb0:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006cb2:	4b0c      	ldr	r3, [pc, #48]	; (8006ce4 <prvProcessTimerOrBlockTask+0x8c>)
 8006cb4:	6818      	ldr	r0, [r3, #0]
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	683a      	ldr	r2, [r7, #0]
 8006cbe:	0019      	movs	r1, r3
 8006cc0:	f7fe fd3a 	bl	8005738 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006cc4:	f7fe ff3a 	bl	8005b3c <xTaskResumeAll>
 8006cc8:	1e03      	subs	r3, r0, #0
 8006cca:	d104      	bne.n	8006cd6 <prvProcessTimerOrBlockTask+0x7e>
                        portYIELD_WITHIN_API();
 8006ccc:	f000 fa40 	bl	8007150 <vPortYield>
    }
 8006cd0:	e001      	b.n	8006cd6 <prvProcessTimerOrBlockTask+0x7e>
                ( void ) xTaskResumeAll();
 8006cd2:	f7fe ff33 	bl	8005b3c <xTaskResumeAll>
    }
 8006cd6:	46c0      	nop			; (mov r8, r8)
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	b004      	add	sp, #16
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	46c0      	nop			; (mov r8, r8)
 8006ce0:	200007e4 	.word	0x200007e4
 8006ce4:	200007e8 	.word	0x200007e8

08006ce8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006cf0:	4b0d      	ldr	r3, [pc, #52]	; (8006d28 <prvGetNextExpireTime+0x40>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d101      	bne.n	8006cfe <prvGetNextExpireTime+0x16>
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	e000      	b.n	8006d00 <prvGetNextExpireTime+0x18>
 8006cfe:	2200      	movs	r2, #0
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d105      	bne.n	8006d18 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d0c:	4b06      	ldr	r3, [pc, #24]	; (8006d28 <prvGetNextExpireTime+0x40>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	60fb      	str	r3, [r7, #12]
 8006d16:	e001      	b.n	8006d1c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
    }
 8006d1e:	0018      	movs	r0, r3
 8006d20:	46bd      	mov	sp, r7
 8006d22:	b004      	add	sp, #16
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	46c0      	nop			; (mov r8, r8)
 8006d28:	200007e0 	.word	0x200007e0

08006d2c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8006d34:	f7fe ffea 	bl	8005d0c <xTaskGetTickCount>
 8006d38:	0003      	movs	r3, r0
 8006d3a:	60fb      	str	r3, [r7, #12]

        if( xTimeNow < xLastTime )
 8006d3c:	4b0a      	ldr	r3, [pc, #40]	; (8006d68 <prvSampleTimeNow+0x3c>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d205      	bcs.n	8006d52 <prvSampleTimeNow+0x26>
        {
            prvSwitchTimerLists();
 8006d46:	f000 f915 	bl	8006f74 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	601a      	str	r2, [r3, #0]
 8006d50:	e002      	b.n	8006d58 <prvSampleTimeNow+0x2c>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8006d58:	4b03      	ldr	r3, [pc, #12]	; (8006d68 <prvSampleTimeNow+0x3c>)
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	601a      	str	r2, [r3, #0]

        return xTimeNow;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
    }
 8006d60:	0018      	movs	r0, r3
 8006d62:	46bd      	mov	sp, r7
 8006d64:	b004      	add	sp, #16
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	200007f0 	.word	0x200007f0

08006d6c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b086      	sub	sp, #24
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	607a      	str	r2, [r7, #4]
 8006d78:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	68ba      	ldr	r2, [r7, #8]
 8006d82:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8006d8a:	68ba      	ldr	r2, [r7, #8]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d812      	bhi.n	8006db8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	1ad2      	subs	r2, r2, r3
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	699b      	ldr	r3, [r3, #24]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d302      	bcc.n	8006da6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006da0:	2301      	movs	r3, #1
 8006da2:	617b      	str	r3, [r7, #20]
 8006da4:	e01b      	b.n	8006dde <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006da6:	4b10      	ldr	r3, [pc, #64]	; (8006de8 <prvInsertTimerInActiveList+0x7c>)
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	3304      	adds	r3, #4
 8006dae:	0019      	movs	r1, r3
 8006db0:	0010      	movs	r0, r2
 8006db2:	f7fe f8d0 	bl	8004f56 <vListInsert>
 8006db6:	e012      	b.n	8006dde <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d206      	bcs.n	8006dce <prvInsertTimerInActiveList+0x62>
 8006dc0:	68ba      	ldr	r2, [r7, #8]
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d302      	bcc.n	8006dce <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	617b      	str	r3, [r7, #20]
 8006dcc:	e007      	b.n	8006dde <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006dce:	4b07      	ldr	r3, [pc, #28]	; (8006dec <prvInsertTimerInActiveList+0x80>)
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	3304      	adds	r3, #4
 8006dd6:	0019      	movs	r1, r3
 8006dd8:	0010      	movs	r0, r2
 8006dda:	f7fe f8bc 	bl	8004f56 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8006dde:	697b      	ldr	r3, [r7, #20]
    }
 8006de0:	0018      	movs	r0, r3
 8006de2:	46bd      	mov	sp, r7
 8006de4:	b006      	add	sp, #24
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	200007e4 	.word	0x200007e4
 8006dec:	200007e0 	.word	0x200007e0

08006df0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b088      	sub	sp, #32
 8006df4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006df6:	e0a9      	b.n	8006f4c <prvProcessReceivedCommands+0x15c>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006df8:	1d3b      	adds	r3, r7, #4
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	da0f      	bge.n	8006e20 <prvProcessReceivedCommands+0x30>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006e00:	1d3b      	adds	r3, r7, #4
 8006e02:	3304      	adds	r3, #4
 8006e04:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d101      	bne.n	8006e10 <prvProcessReceivedCommands+0x20>
 8006e0c:	b672      	cpsid	i
 8006e0e:	e7fe      	b.n	8006e0e <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	6858      	ldr	r0, [r3, #4]
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	0019      	movs	r1, r3
 8006e1e:	4790      	blx	r2
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006e20:	1d3b      	adds	r3, r7, #4
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	da00      	bge.n	8006e2a <prvProcessReceivedCommands+0x3a>
 8006e28:	e08f      	b.n	8006f4a <prvProcessReceivedCommands+0x15a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006e2a:	1d3b      	adds	r3, r7, #4
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	695b      	ldr	r3, [r3, #20]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d004      	beq.n	8006e42 <prvProcessReceivedCommands+0x52>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	3304      	adds	r3, #4
 8006e3c:	0018      	movs	r0, r3
 8006e3e:	f7fe f8c0 	bl	8004fc2 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e42:	003b      	movs	r3, r7
 8006e44:	0018      	movs	r0, r3
 8006e46:	f7ff ff71 	bl	8006d2c <prvSampleTimeNow>
 8006e4a:	0003      	movs	r3, r0
 8006e4c:	617b      	str	r3, [r7, #20]

                switch( xMessage.xMessageID )
 8006e4e:	1d3b      	adds	r3, r7, #4
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2b09      	cmp	r3, #9
 8006e54:	d900      	bls.n	8006e58 <prvProcessReceivedCommands+0x68>
 8006e56:	e079      	b.n	8006f4c <prvProcessReceivedCommands+0x15c>
 8006e58:	009a      	lsls	r2, r3, #2
 8006e5a:	4b44      	ldr	r3, [pc, #272]	; (8006f6c <prvProcessReceivedCommands+0x17c>)
 8006e5c:	18d3      	adds	r3, r2, r3
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	469f      	mov	pc, r3
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	2228      	movs	r2, #40	; 0x28
 8006e66:	5c9b      	ldrb	r3, [r3, r2]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	b2d9      	uxtb	r1, r3
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	2228      	movs	r2, #40	; 0x28
 8006e72:	5499      	strb	r1, [r3, r2]

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006e74:	1d3b      	adds	r3, r7, #4
 8006e76:	685a      	ldr	r2, [r3, #4]
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	699b      	ldr	r3, [r3, #24]
 8006e7c:	18d1      	adds	r1, r2, r3
 8006e7e:	1d3b      	adds	r3, r7, #4
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	697a      	ldr	r2, [r7, #20]
 8006e84:	69b8      	ldr	r0, [r7, #24]
 8006e86:	f7ff ff71 	bl	8006d6c <prvInsertTimerInActiveList>
 8006e8a:	1e03      	subs	r3, r0, #0
 8006e8c:	d05e      	beq.n	8006f4c <prvProcessReceivedCommands+0x15c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	2228      	movs	r2, #40	; 0x28
 8006e92:	5c9b      	ldrb	r3, [r3, r2]
 8006e94:	001a      	movs	r2, r3
 8006e96:	2304      	movs	r3, #4
 8006e98:	4013      	ands	r3, r2
 8006e9a:	d00a      	beq.n	8006eb2 <prvProcessReceivedCommands+0xc2>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8006e9c:	1d3b      	adds	r3, r7, #4
 8006e9e:	685a      	ldr	r2, [r3, #4]
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	699b      	ldr	r3, [r3, #24]
 8006ea4:	18d1      	adds	r1, r2, r3
 8006ea6:	697a      	ldr	r2, [r7, #20]
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	0018      	movs	r0, r3
 8006eac:	f7ff fe6c 	bl	8006b88 <prvReloadTimer>
 8006eb0:	e008      	b.n	8006ec4 <prvProcessReceivedCommands+0xd4>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	2228      	movs	r2, #40	; 0x28
 8006eb6:	5c9b      	ldrb	r3, [r3, r2]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	4393      	bics	r3, r2
 8006ebc:	b2d9      	uxtb	r1, r3
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	2228      	movs	r2, #40	; 0x28
 8006ec2:	5499      	strb	r1, [r3, r2]
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	6a1b      	ldr	r3, [r3, #32]
 8006ec8:	69ba      	ldr	r2, [r7, #24]
 8006eca:	0010      	movs	r0, r2
 8006ecc:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8006ece:	e03d      	b.n	8006f4c <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	2228      	movs	r2, #40	; 0x28
 8006ed4:	5c9b      	ldrb	r3, [r3, r2]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	4393      	bics	r3, r2
 8006eda:	b2d9      	uxtb	r1, r3
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	2228      	movs	r2, #40	; 0x28
 8006ee0:	5499      	strb	r1, [r3, r2]
                        break;
 8006ee2:	e033      	b.n	8006f4c <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	2228      	movs	r2, #40	; 0x28
 8006ee8:	5c9b      	ldrb	r3, [r3, r2]
 8006eea:	2201      	movs	r2, #1
 8006eec:	4313      	orrs	r3, r2
 8006eee:	b2d9      	uxtb	r1, r3
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	2228      	movs	r2, #40	; 0x28
 8006ef4:	5499      	strb	r1, [r3, r2]
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006ef6:	1d3b      	adds	r3, r7, #4
 8006ef8:	685a      	ldr	r2, [r3, #4]
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	699b      	ldr	r3, [r3, #24]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d101      	bne.n	8006f0a <prvProcessReceivedCommands+0x11a>
 8006f06:	b672      	cpsid	i
 8006f08:	e7fe      	b.n	8006f08 <prvProcessReceivedCommands+0x118>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	699a      	ldr	r2, [r3, #24]
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	18d1      	adds	r1, r2, r3
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	697a      	ldr	r2, [r7, #20]
 8006f16:	69b8      	ldr	r0, [r7, #24]
 8006f18:	f7ff ff28 	bl	8006d6c <prvInsertTimerInActiveList>
                        break;
 8006f1c:	e016      	b.n	8006f4c <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	2228      	movs	r2, #40	; 0x28
 8006f22:	5c9b      	ldrb	r3, [r3, r2]
 8006f24:	001a      	movs	r2, r3
 8006f26:	2302      	movs	r3, #2
 8006f28:	4013      	ands	r3, r2
 8006f2a:	d104      	bne.n	8006f36 <prvProcessReceivedCommands+0x146>
                            {
                                vPortFree( pxTimer );
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	0018      	movs	r0, r3
 8006f30:	f000 fa5e 	bl	80073f0 <vPortFree>
 8006f34:	e00a      	b.n	8006f4c <prvProcessReceivedCommands+0x15c>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	2228      	movs	r2, #40	; 0x28
 8006f3a:	5c9b      	ldrb	r3, [r3, r2]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	4393      	bics	r3, r2
 8006f40:	b2d9      	uxtb	r1, r3
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	2228      	movs	r2, #40	; 0x28
 8006f46:	5499      	strb	r1, [r3, r2]
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8006f48:	e000      	b.n	8006f4c <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8006f4a:	46c0      	nop			; (mov r8, r8)
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f4c:	4b08      	ldr	r3, [pc, #32]	; (8006f70 <prvProcessReceivedCommands+0x180>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	1d39      	adds	r1, r7, #4
 8006f52:	2200      	movs	r2, #0
 8006f54:	0018      	movs	r0, r3
 8006f56:	f7fe f9f0 	bl	800533a <xQueueReceive>
 8006f5a:	1e03      	subs	r3, r0, #0
 8006f5c:	d000      	beq.n	8006f60 <prvProcessReceivedCommands+0x170>
 8006f5e:	e74b      	b.n	8006df8 <prvProcessReceivedCommands+0x8>
        }
    }
 8006f60:	46c0      	nop			; (mov r8, r8)
 8006f62:	46c0      	nop			; (mov r8, r8)
 8006f64:	46bd      	mov	sp, r7
 8006f66:	b008      	add	sp, #32
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	46c0      	nop			; (mov r8, r8)
 8006f6c:	08008874 	.word	0x08008874
 8006f70:	200007e8 	.word	0x200007e8

08006f74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006f7a:	e00b      	b.n	8006f94 <prvSwitchTimerLists+0x20>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f7c:	4b0f      	ldr	r3, [pc, #60]	; (8006fbc <prvSwitchTimerLists+0x48>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8006f86:	2301      	movs	r3, #1
 8006f88:	425a      	negs	r2, r3
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	0011      	movs	r1, r2
 8006f8e:	0018      	movs	r0, r3
 8006f90:	f7ff fe1c 	bl	8006bcc <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006f94:	4b09      	ldr	r3, [pc, #36]	; (8006fbc <prvSwitchTimerLists+0x48>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1ee      	bne.n	8006f7c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8006f9e:	4b07      	ldr	r3, [pc, #28]	; (8006fbc <prvSwitchTimerLists+0x48>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8006fa4:	4b06      	ldr	r3, [pc, #24]	; (8006fc0 <prvSwitchTimerLists+0x4c>)
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	4b04      	ldr	r3, [pc, #16]	; (8006fbc <prvSwitchTimerLists+0x48>)
 8006faa:	601a      	str	r2, [r3, #0]
        pxOverflowTimerList = pxTemp;
 8006fac:	4b04      	ldr	r3, [pc, #16]	; (8006fc0 <prvSwitchTimerLists+0x4c>)
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	601a      	str	r2, [r3, #0]
    }
 8006fb2:	46c0      	nop			; (mov r8, r8)
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	b002      	add	sp, #8
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	46c0      	nop			; (mov r8, r8)
 8006fbc:	200007e0 	.word	0x200007e0
 8006fc0:	200007e4 	.word	0x200007e4

08006fc4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006fc8:	f000 f8d2 	bl	8007170 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8006fcc:	4b14      	ldr	r3, [pc, #80]	; (8007020 <prvCheckForValidListAndQueue+0x5c>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d120      	bne.n	8007016 <prvCheckForValidListAndQueue+0x52>
            {
                vListInitialise( &xActiveTimerList1 );
 8006fd4:	4b13      	ldr	r3, [pc, #76]	; (8007024 <prvCheckForValidListAndQueue+0x60>)
 8006fd6:	0018      	movs	r0, r3
 8006fd8:	f7fd ff94 	bl	8004f04 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8006fdc:	4b12      	ldr	r3, [pc, #72]	; (8007028 <prvCheckForValidListAndQueue+0x64>)
 8006fde:	0018      	movs	r0, r3
 8006fe0:	f7fd ff90 	bl	8004f04 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006fe4:	4b11      	ldr	r3, [pc, #68]	; (800702c <prvCheckForValidListAndQueue+0x68>)
 8006fe6:	4a0f      	ldr	r2, [pc, #60]	; (8007024 <prvCheckForValidListAndQueue+0x60>)
 8006fe8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8006fea:	4b11      	ldr	r3, [pc, #68]	; (8007030 <prvCheckForValidListAndQueue+0x6c>)
 8006fec:	4a0e      	ldr	r2, [pc, #56]	; (8007028 <prvCheckForValidListAndQueue+0x64>)
 8006fee:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	2110      	movs	r1, #16
 8006ff4:	200a      	movs	r0, #10
 8006ff6:	f7fe f895 	bl	8005124 <xQueueGenericCreate>
 8006ffa:	0002      	movs	r2, r0
 8006ffc:	4b08      	ldr	r3, [pc, #32]	; (8007020 <prvCheckForValidListAndQueue+0x5c>)
 8006ffe:	601a      	str	r2, [r3, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8007000:	4b07      	ldr	r3, [pc, #28]	; (8007020 <prvCheckForValidListAndQueue+0x5c>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d006      	beq.n	8007016 <prvCheckForValidListAndQueue+0x52>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007008:	4b05      	ldr	r3, [pc, #20]	; (8007020 <prvCheckForValidListAndQueue+0x5c>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a09      	ldr	r2, [pc, #36]	; (8007034 <prvCheckForValidListAndQueue+0x70>)
 800700e:	0011      	movs	r1, r2
 8007010:	0018      	movs	r0, r3
 8007012:	f7fe fb4d 	bl	80056b0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007016:	f000 f8bd 	bl	8007194 <vPortExitCritical>
    }
 800701a:	46c0      	nop			; (mov r8, r8)
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}
 8007020:	200007e8 	.word	0x200007e8
 8007024:	200007b8 	.word	0x200007b8
 8007028:	200007cc 	.word	0x200007cc
 800702c:	200007e0 	.word	0x200007e0
 8007030:	200007e4 	.word	0x200007e4
 8007034:	08008854 	.word	0x08008854

08007038 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	3b04      	subs	r3, #4
 8007048:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2280      	movs	r2, #128	; 0x80
 800704e:	0452      	lsls	r2, r2, #17
 8007050:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	3b04      	subs	r3, #4
 8007056:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 8007058:	68ba      	ldr	r2, [r7, #8]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	3b04      	subs	r3, #4
 8007062:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 8007064:	4a08      	ldr	r2, [pc, #32]	; (8007088 <pxPortInitialiseStack+0x50>)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                       /* R12, R3, R2 and R1. */
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	3b14      	subs	r3, #20
 800706e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                       /* R11..R4. */
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	3b20      	subs	r3, #32
 800707a:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800707c:	68fb      	ldr	r3, [r7, #12]
}
 800707e:	0018      	movs	r0, r3
 8007080:	46bd      	mov	sp, r7
 8007082:	b004      	add	sp, #16
 8007084:	bd80      	pop	{r7, pc}
 8007086:	46c0      	nop			; (mov r8, r8)
 8007088:	0800708d 	.word	0x0800708d

0800708c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8007092:	2300      	movs	r3, #0
 8007094:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8007096:	4b08      	ldr	r3, [pc, #32]	; (80070b8 <prvTaskExitError+0x2c>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	3301      	adds	r3, #1
 800709c:	d001      	beq.n	80070a2 <prvTaskExitError+0x16>
 800709e:	b672      	cpsid	i
 80070a0:	e7fe      	b.n	80070a0 <prvTaskExitError+0x14>
    portDISABLE_INTERRUPTS();
 80070a2:	b672      	cpsid	i

    while( ulDummy == 0 )
 80070a4:	46c0      	nop			; (mov r8, r8)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d0fc      	beq.n	80070a6 <prvTaskExitError+0x1a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80070ac:	46c0      	nop			; (mov r8, r8)
 80070ae:	46c0      	nop			; (mov r8, r8)
 80070b0:	46bd      	mov	sp, r7
 80070b2:	b002      	add	sp, #8
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	46c0      	nop			; (mov r8, r8)
 80070b8:	200000a0 	.word	0x200000a0

080070bc <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	af00      	add	r7, sp, #0
    /* This function is no longer used, but retained for backward
     * compatibility. */
}
 80070c0:	46c0      	nop			; (mov r8, r8)
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
	...

080070d0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
    /* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
     * table offset register that can be used to locate the initial stack value.
     * Not all M0 parts have the application vector table at address 0. */
    __asm volatile (
 80070d0:	4a0b      	ldr	r2, [pc, #44]	; (8007100 <pxCurrentTCBConst2>)
 80070d2:	6813      	ldr	r3, [r2, #0]
 80070d4:	6818      	ldr	r0, [r3, #0]
 80070d6:	3020      	adds	r0, #32
 80070d8:	f380 8809 	msr	PSP, r0
 80070dc:	2002      	movs	r0, #2
 80070de:	f380 8814 	msr	CONTROL, r0
 80070e2:	f3bf 8f6f 	isb	sy
 80070e6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80070e8:	46ae      	mov	lr, r5
 80070ea:	bc08      	pop	{r3}
 80070ec:	bc04      	pop	{r2}
 80070ee:	b662      	cpsie	i
 80070f0:	4718      	bx	r3
 80070f2:	46c0      	nop			; (mov r8, r8)
 80070f4:	46c0      	nop			; (mov r8, r8)
 80070f6:	46c0      	nop			; (mov r8, r8)
 80070f8:	46c0      	nop			; (mov r8, r8)
 80070fa:	46c0      	nop			; (mov r8, r8)
 80070fc:	46c0      	nop			; (mov r8, r8)
 80070fe:	46c0      	nop			; (mov r8, r8)

08007100 <pxCurrentTCBConst2>:
 8007100:	200002b8 	.word	0x200002b8
        "	bx   r3						\n"/* Finally, jump to the user defined task code. */
        "								\n"
        "	.align 4					\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB	  "
        );
}
 8007104:	46c0      	nop			; (mov r8, r8)
 8007106:	46c0      	nop			; (mov r8, r8)

08007108 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007108:	b580      	push	{r7, lr}
 800710a:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800710c:	4b0e      	ldr	r3, [pc, #56]	; (8007148 <xPortStartScheduler+0x40>)
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	4b0d      	ldr	r3, [pc, #52]	; (8007148 <xPortStartScheduler+0x40>)
 8007112:	21ff      	movs	r1, #255	; 0xff
 8007114:	0409      	lsls	r1, r1, #16
 8007116:	430a      	orrs	r2, r1
 8007118:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800711a:	4b0b      	ldr	r3, [pc, #44]	; (8007148 <xPortStartScheduler+0x40>)
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	4b0a      	ldr	r3, [pc, #40]	; (8007148 <xPortStartScheduler+0x40>)
 8007120:	21ff      	movs	r1, #255	; 0xff
 8007122:	0609      	lsls	r1, r1, #24
 8007124:	430a      	orrs	r2, r1
 8007126:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007128:	f000 f898 	bl	800725c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800712c:	4b07      	ldr	r3, [pc, #28]	; (800714c <xPortStartScheduler+0x44>)
 800712e:	2200      	movs	r2, #0
 8007130:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vPortStartFirstTask();
 8007132:	f7ff ffcd 	bl	80070d0 <vPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007136:	f7fe ff0d 	bl	8005f54 <vTaskSwitchContext>
    prvTaskExitError();
 800713a:	f7ff ffa7 	bl	800708c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800713e:	2300      	movs	r3, #0
}
 8007140:	0018      	movs	r0, r3
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	46c0      	nop			; (mov r8, r8)
 8007148:	e000ed20 	.word	0xe000ed20
 800714c:	200000a0 	.word	0x200000a0

08007150 <vPortYield>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8007150:	b580      	push	{r7, lr}
 8007152:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007154:	4b05      	ldr	r3, [pc, #20]	; (800716c <vPortYield+0x1c>)
 8007156:	2280      	movs	r2, #128	; 0x80
 8007158:	0552      	lsls	r2, r2, #21
 800715a:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is completely
     * within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800715c:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8007160:	f3bf 8f6f 	isb	sy
}
 8007164:	46c0      	nop			; (mov r8, r8)
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	46c0      	nop			; (mov r8, r8)
 800716c:	e000ed04 	.word	0xe000ed04

08007170 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007170:	b580      	push	{r7, lr}
 8007172:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8007174:	b672      	cpsid	i
    uxCriticalNesting++;
 8007176:	4b06      	ldr	r3, [pc, #24]	; (8007190 <vPortEnterCritical+0x20>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	1c5a      	adds	r2, r3, #1
 800717c:	4b04      	ldr	r3, [pc, #16]	; (8007190 <vPortEnterCritical+0x20>)
 800717e:	601a      	str	r2, [r3, #0]
    __asm volatile ( "dsb" ::: "memory" );
 8007180:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8007184:	f3bf 8f6f 	isb	sy
}
 8007188:	46c0      	nop			; (mov r8, r8)
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	46c0      	nop			; (mov r8, r8)
 8007190:	200000a0 	.word	0x200000a0

08007194 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007194:	b580      	push	{r7, lr}
 8007196:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8007198:	4b09      	ldr	r3, [pc, #36]	; (80071c0 <vPortExitCritical+0x2c>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d101      	bne.n	80071a4 <vPortExitCritical+0x10>
 80071a0:	b672      	cpsid	i
 80071a2:	e7fe      	b.n	80071a2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 80071a4:	4b06      	ldr	r3, [pc, #24]	; (80071c0 <vPortExitCritical+0x2c>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	1e5a      	subs	r2, r3, #1
 80071aa:	4b05      	ldr	r3, [pc, #20]	; (80071c0 <vPortExitCritical+0x2c>)
 80071ac:	601a      	str	r2, [r3, #0]

    if( uxCriticalNesting == 0 )
 80071ae:	4b04      	ldr	r3, [pc, #16]	; (80071c0 <vPortExitCritical+0x2c>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d100      	bne.n	80071b8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 80071b6:	b662      	cpsie	i
    }
}
 80071b8:	46c0      	nop			; (mov r8, r8)
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	46c0      	nop			; (mov r8, r8)
 80071c0:	200000a0 	.word	0x200000a0

080071c4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 80071c4:	f3ef 8010 	mrs	r0, PRIMASK
 80071c8:	b672      	cpsid	i
 80071ca:	4770      	bx	lr
        " mrs r0, PRIMASK	\n"
        " cpsid i			\n"
        " bx lr				  "
        ::: "memory"
        );
}
 80071cc:	46c0      	nop			; (mov r8, r8)
 80071ce:	0018      	movs	r0, r3

080071d0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 80071d0:	f380 8810 	msr	PRIMASK, r0
 80071d4:	4770      	bx	lr
        " msr PRIMASK, r0	\n"
        " bx lr				  "
        ::: "memory"
        );
}
 80071d6:	46c0      	nop			; (mov r8, r8)
	...

080071e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80071e0:	f3ef 8009 	mrs	r0, PSP
 80071e4:	4b0e      	ldr	r3, [pc, #56]	; (8007220 <pxCurrentTCBConst>)
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	3820      	subs	r0, #32
 80071ea:	6010      	str	r0, [r2, #0]
 80071ec:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80071ee:	4644      	mov	r4, r8
 80071f0:	464d      	mov	r5, r9
 80071f2:	4656      	mov	r6, sl
 80071f4:	465f      	mov	r7, fp
 80071f6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80071f8:	b508      	push	{r3, lr}
 80071fa:	b672      	cpsid	i
 80071fc:	f7fe feaa 	bl	8005f54 <vTaskSwitchContext>
 8007200:	b662      	cpsie	i
 8007202:	bc0c      	pop	{r2, r3}
 8007204:	6811      	ldr	r1, [r2, #0]
 8007206:	6808      	ldr	r0, [r1, #0]
 8007208:	3010      	adds	r0, #16
 800720a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800720c:	46a0      	mov	r8, r4
 800720e:	46a9      	mov	r9, r5
 8007210:	46b2      	mov	sl, r6
 8007212:	46bb      	mov	fp, r7
 8007214:	f380 8809 	msr	PSP, r0
 8007218:	3820      	subs	r0, #32
 800721a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800721c:	4718      	bx	r3
 800721e:	46c0      	nop			; (mov r8, r8)

08007220 <pxCurrentTCBConst>:
 8007220:	200002b8 	.word	0x200002b8
        "	bx r3								\n"
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	  "
    );
}
 8007224:	46c0      	nop			; (mov r8, r8)
 8007226:	46c0      	nop			; (mov r8, r8)

08007228 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800722e:	f7ff ffc9 	bl	80071c4 <ulSetInterruptMaskFromISR>
 8007232:	0003      	movs	r3, r0
 8007234:	607b      	str	r3, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007236:	f7fe fd81 	bl	8005d3c <xTaskIncrementTick>
 800723a:	1e03      	subs	r3, r0, #0
 800723c:	d003      	beq.n	8007246 <SysTick_Handler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800723e:	4b06      	ldr	r3, [pc, #24]	; (8007258 <SysTick_Handler+0x30>)
 8007240:	2280      	movs	r2, #128	; 0x80
 8007242:	0552      	lsls	r2, r2, #21
 8007244:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	0018      	movs	r0, r3
 800724a:	f7ff ffc1 	bl	80071d0 <vClearInterruptMaskFromISR>
}
 800724e:	46c0      	nop			; (mov r8, r8)
 8007250:	46bd      	mov	sp, r7
 8007252:	b002      	add	sp, #8
 8007254:	bd80      	pop	{r7, pc}
 8007256:	46c0      	nop			; (mov r8, r8)
 8007258:	e000ed04 	.word	0xe000ed04

0800725c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800725c:	b580      	push	{r7, lr}
 800725e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007260:	4b0b      	ldr	r3, [pc, #44]	; (8007290 <vPortSetupTimerInterrupt+0x34>)
 8007262:	2200      	movs	r2, #0
 8007264:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007266:	4b0b      	ldr	r3, [pc, #44]	; (8007294 <vPortSetupTimerInterrupt+0x38>)
 8007268:	2200      	movs	r2, #0
 800726a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800726c:	4b0a      	ldr	r3, [pc, #40]	; (8007298 <vPortSetupTimerInterrupt+0x3c>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	22fa      	movs	r2, #250	; 0xfa
 8007272:	0091      	lsls	r1, r2, #2
 8007274:	0018      	movs	r0, r3
 8007276:	f7f8 ff51 	bl	800011c <__udivsi3>
 800727a:	0003      	movs	r3, r0
 800727c:	001a      	movs	r2, r3
 800727e:	4b07      	ldr	r3, [pc, #28]	; (800729c <vPortSetupTimerInterrupt+0x40>)
 8007280:	3a01      	subs	r2, #1
 8007282:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007284:	4b02      	ldr	r3, [pc, #8]	; (8007290 <vPortSetupTimerInterrupt+0x34>)
 8007286:	2207      	movs	r2, #7
 8007288:	601a      	str	r2, [r3, #0]
}
 800728a:	46c0      	nop			; (mov r8, r8)
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	e000e010 	.word	0xe000e010
 8007294:	e000e018 	.word	0xe000e018
 8007298:	20000090 	.word	0x20000090
 800729c:	e000e014 	.word	0xe000e014

080072a0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b088      	sub	sp, #32
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80072a8:	2300      	movs	r3, #0
 80072aa:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80072ac:	f7fe fc3a 	bl	8005b24 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80072b0:	4b4a      	ldr	r3, [pc, #296]	; (80073dc <pvPortMalloc+0x13c>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d101      	bne.n	80072bc <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80072b8:	f000 f8e6 	bl	8007488 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d012      	beq.n	80072e8 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80072c2:	2208      	movs	r2, #8
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2107      	movs	r1, #7
 80072c8:	400b      	ands	r3, r1
 80072ca:	1ad3      	subs	r3, r2, r3
 80072cc:	3308      	adds	r3, #8
 80072ce:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	43db      	mvns	r3, r3
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d804      	bhi.n	80072e4 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	18d3      	adds	r3, r2, r3
 80072e0:	607b      	str	r3, [r7, #4]
 80072e2:	e001      	b.n	80072e8 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80072e4:	2300      	movs	r3, #0
 80072e6:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	db68      	blt.n	80073c0 <pvPortMalloc+0x120>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d065      	beq.n	80073c0 <pvPortMalloc+0x120>
 80072f4:	4b3a      	ldr	r3, [pc, #232]	; (80073e0 <pvPortMalloc+0x140>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d860      	bhi.n	80073c0 <pvPortMalloc+0x120>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80072fe:	4b39      	ldr	r3, [pc, #228]	; (80073e4 <pvPortMalloc+0x144>)
 8007300:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 8007302:	4b38      	ldr	r3, [pc, #224]	; (80073e4 <pvPortMalloc+0x144>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007308:	e004      	b.n	8007314 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	429a      	cmp	r2, r3
 800731c:	d903      	bls.n	8007326 <pvPortMalloc+0x86>
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d1f1      	bne.n	800730a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007326:	4b2d      	ldr	r3, [pc, #180]	; (80073dc <pvPortMalloc+0x13c>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	69fa      	ldr	r2, [r7, #28]
 800732c:	429a      	cmp	r2, r3
 800732e:	d047      	beq.n	80073c0 <pvPortMalloc+0x120>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2208      	movs	r2, #8
 8007336:	189b      	adds	r3, r3, r2
 8007338:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	69bb      	ldr	r3, [r7, #24]
 8007340:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	685a      	ldr	r2, [r3, #4]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	1ad2      	subs	r2, r2, r3
 800734a:	2308      	movs	r3, #8
 800734c:	005b      	lsls	r3, r3, #1
 800734e:	429a      	cmp	r2, r3
 8007350:	d916      	bls.n	8007380 <pvPortMalloc+0xe0>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007352:	69fa      	ldr	r2, [r7, #28]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	18d3      	adds	r3, r2, r3
 8007358:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2207      	movs	r2, #7
 800735e:	4013      	ands	r3, r2
 8007360:	d001      	beq.n	8007366 <pvPortMalloc+0xc6>
 8007362:	b672      	cpsid	i
 8007364:	e7fe      	b.n	8007364 <pvPortMalloc+0xc4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	685a      	ldr	r2, [r3, #4]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	1ad2      	subs	r2, r2, r3
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	0018      	movs	r0, r3
 800737c:	f000 f8de 	bl	800753c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007380:	4b17      	ldr	r3, [pc, #92]	; (80073e0 <pvPortMalloc+0x140>)
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	1ad2      	subs	r2, r2, r3
 800738a:	4b15      	ldr	r3, [pc, #84]	; (80073e0 <pvPortMalloc+0x140>)
 800738c:	601a      	str	r2, [r3, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800738e:	4b14      	ldr	r3, [pc, #80]	; (80073e0 <pvPortMalloc+0x140>)
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	4b15      	ldr	r3, [pc, #84]	; (80073e8 <pvPortMalloc+0x148>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	429a      	cmp	r2, r3
 8007398:	d203      	bcs.n	80073a2 <pvPortMalloc+0x102>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800739a:	4b11      	ldr	r3, [pc, #68]	; (80073e0 <pvPortMalloc+0x140>)
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	4b12      	ldr	r3, [pc, #72]	; (80073e8 <pvPortMalloc+0x148>)
 80073a0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	2280      	movs	r2, #128	; 0x80
 80073a8:	0612      	lsls	r2, r2, #24
 80073aa:	431a      	orrs	r2, r3
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	2200      	movs	r2, #0
 80073b4:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80073b6:	4b0d      	ldr	r3, [pc, #52]	; (80073ec <pvPortMalloc+0x14c>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	1c5a      	adds	r2, r3, #1
 80073bc:	4b0b      	ldr	r3, [pc, #44]	; (80073ec <pvPortMalloc+0x14c>)
 80073be:	601a      	str	r2, [r3, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80073c0:	f7fe fbbc 	bl	8005b3c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	2207      	movs	r2, #7
 80073c8:	4013      	ands	r3, r2
 80073ca:	d001      	beq.n	80073d0 <pvPortMalloc+0x130>
 80073cc:	b672      	cpsid	i
 80073ce:	e7fe      	b.n	80073ce <pvPortMalloc+0x12e>
    return pvReturn;
 80073d0:	697b      	ldr	r3, [r7, #20]
}
 80073d2:	0018      	movs	r0, r3
 80073d4:	46bd      	mov	sp, r7
 80073d6:	b008      	add	sp, #32
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	46c0      	nop			; (mov r8, r8)
 80073dc:	20001ffc 	.word	0x20001ffc
 80073e0:	20002000 	.word	0x20002000
 80073e4:	20001ff4 	.word	0x20001ff4
 80073e8:	20002004 	.word	0x20002004
 80073ec:	20002008 	.word	0x20002008

080073f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d039      	beq.n	8007476 <vPortFree+0x86>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8007402:	2308      	movs	r3, #8
 8007404:	425b      	negs	r3, r3
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	18d3      	adds	r3, r2, r3
 800740a:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	2b00      	cmp	r3, #0
 8007416:	db01      	blt.n	800741c <vPortFree+0x2c>
 8007418:	b672      	cpsid	i
 800741a:	e7fe      	b.n	800741a <vPortFree+0x2a>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d001      	beq.n	8007428 <vPortFree+0x38>
 8007424:	b672      	cpsid	i
 8007426:	e7fe      	b.n	8007426 <vPortFree+0x36>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	0fdb      	lsrs	r3, r3, #31
 800742e:	1c1a      	adds	r2, r3, #0
 8007430:	2301      	movs	r3, #1
 8007432:	4013      	ands	r3, r2
 8007434:	b2db      	uxtb	r3, r3
 8007436:	2b00      	cmp	r3, #0
 8007438:	d01d      	beq.n	8007476 <vPortFree+0x86>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d119      	bne.n	8007476 <vPortFree+0x86>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	005b      	lsls	r3, r3, #1
 8007448:	085a      	lsrs	r2, r3, #1
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800744e:	f7fe fb69 	bl	8005b24 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	685a      	ldr	r2, [r3, #4]
 8007456:	4b0a      	ldr	r3, [pc, #40]	; (8007480 <vPortFree+0x90>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	18d2      	adds	r2, r2, r3
 800745c:	4b08      	ldr	r3, [pc, #32]	; (8007480 <vPortFree+0x90>)
 800745e:	601a      	str	r2, [r3, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	0018      	movs	r0, r3
 8007464:	f000 f86a 	bl	800753c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8007468:	4b06      	ldr	r3, [pc, #24]	; (8007484 <vPortFree+0x94>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	1c5a      	adds	r2, r3, #1
 800746e:	4b05      	ldr	r3, [pc, #20]	; (8007484 <vPortFree+0x94>)
 8007470:	601a      	str	r2, [r3, #0]
                }
                ( void ) xTaskResumeAll();
 8007472:	f7fe fb63 	bl	8005b3c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8007476:	46c0      	nop			; (mov r8, r8)
 8007478:	46bd      	mov	sp, r7
 800747a:	b004      	add	sp, #16
 800747c:	bd80      	pop	{r7, pc}
 800747e:	46c0      	nop			; (mov r8, r8)
 8007480:	20002000 	.word	0x20002000
 8007484:	2000200c 	.word	0x2000200c

08007488 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800748e:	23c0      	movs	r3, #192	; 0xc0
 8007490:	015b      	lsls	r3, r3, #5
 8007492:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8007494:	4b24      	ldr	r3, [pc, #144]	; (8007528 <prvHeapInit+0xa0>)
 8007496:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2207      	movs	r2, #7
 800749c:	4013      	ands	r3, r2
 800749e:	d00c      	beq.n	80074ba <prvHeapInit+0x32>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	3307      	adds	r3, #7
 80074a4:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2207      	movs	r2, #7
 80074aa:	4393      	bics	r3, r2
 80074ac:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80074ae:	68ba      	ldr	r2, [r7, #8]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	1ad2      	subs	r2, r2, r3
 80074b4:	4b1c      	ldr	r3, [pc, #112]	; (8007528 <prvHeapInit+0xa0>)
 80074b6:	18d3      	adds	r3, r2, r3
 80074b8:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80074be:	4b1b      	ldr	r3, [pc, #108]	; (800752c <prvHeapInit+0xa4>)
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	601a      	str	r2, [r3, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80074c4:	4b19      	ldr	r3, [pc, #100]	; (800752c <prvHeapInit+0xa4>)
 80074c6:	2200      	movs	r2, #0
 80074c8:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	68ba      	ldr	r2, [r7, #8]
 80074ce:	18d3      	adds	r3, r2, r3
 80074d0:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80074d2:	2208      	movs	r2, #8
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	1a9b      	subs	r3, r3, r2
 80074d8:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2207      	movs	r2, #7
 80074de:	4393      	bics	r3, r2
 80074e0:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80074e2:	68fa      	ldr	r2, [r7, #12]
 80074e4:	4b12      	ldr	r3, [pc, #72]	; (8007530 <prvHeapInit+0xa8>)
 80074e6:	601a      	str	r2, [r3, #0]
    pxEnd->xBlockSize = 0;
 80074e8:	4b11      	ldr	r3, [pc, #68]	; (8007530 <prvHeapInit+0xa8>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2200      	movs	r2, #0
 80074ee:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80074f0:	4b0f      	ldr	r3, [pc, #60]	; (8007530 <prvHeapInit+0xa8>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2200      	movs	r2, #0
 80074f6:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	68fa      	ldr	r2, [r7, #12]
 8007500:	1ad2      	subs	r2, r2, r3
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007506:	4b0a      	ldr	r3, [pc, #40]	; (8007530 <prvHeapInit+0xa8>)
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	685a      	ldr	r2, [r3, #4]
 8007512:	4b08      	ldr	r3, [pc, #32]	; (8007534 <prvHeapInit+0xac>)
 8007514:	601a      	str	r2, [r3, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	685a      	ldr	r2, [r3, #4]
 800751a:	4b07      	ldr	r3, [pc, #28]	; (8007538 <prvHeapInit+0xb0>)
 800751c:	601a      	str	r2, [r3, #0]
}
 800751e:	46c0      	nop			; (mov r8, r8)
 8007520:	46bd      	mov	sp, r7
 8007522:	b004      	add	sp, #16
 8007524:	bd80      	pop	{r7, pc}
 8007526:	46c0      	nop			; (mov r8, r8)
 8007528:	200007f4 	.word	0x200007f4
 800752c:	20001ff4 	.word	0x20001ff4
 8007530:	20001ffc 	.word	0x20001ffc
 8007534:	20002004 	.word	0x20002004
 8007538:	20002000 	.word	0x20002000

0800753c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007544:	4b27      	ldr	r3, [pc, #156]	; (80075e4 <prvInsertBlockIntoFreeList+0xa8>)
 8007546:	60fb      	str	r3, [r7, #12]
 8007548:	e002      	b.n	8007550 <prvInsertBlockIntoFreeList+0x14>
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	60fb      	str	r3, [r7, #12]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	429a      	cmp	r2, r3
 8007558:	d8f7      	bhi.n	800754a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	68ba      	ldr	r2, [r7, #8]
 8007564:	18d3      	adds	r3, r2, r3
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	429a      	cmp	r2, r3
 800756a:	d108      	bne.n	800757e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	685a      	ldr	r2, [r3, #4]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	18d2      	adds	r2, r2, r3
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	68ba      	ldr	r2, [r7, #8]
 8007588:	18d2      	adds	r2, r2, r3
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	429a      	cmp	r2, r3
 8007590:	d118      	bne.n	80075c4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	4b14      	ldr	r3, [pc, #80]	; (80075e8 <prvInsertBlockIntoFreeList+0xac>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	429a      	cmp	r2, r3
 800759c:	d00d      	beq.n	80075ba <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	685a      	ldr	r2, [r3, #4]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	18d2      	adds	r2, r2, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	601a      	str	r2, [r3, #0]
 80075b8:	e008      	b.n	80075cc <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80075ba:	4b0b      	ldr	r3, [pc, #44]	; (80075e8 <prvInsertBlockIntoFreeList+0xac>)
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	601a      	str	r2, [r3, #0]
 80075c2:	e003      	b.n	80075cc <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80075cc:	68fa      	ldr	r2, [r7, #12]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d002      	beq.n	80075da <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80075da:	46c0      	nop			; (mov r8, r8)
 80075dc:	46bd      	mov	sp, r7
 80075de:	b004      	add	sp, #16
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	46c0      	nop			; (mov r8, r8)
 80075e4:	20001ff4 	.word	0x20001ff4
 80075e8:	20001ffc 	.word	0x20001ffc

080075ec <__libc_init_array>:
 80075ec:	b570      	push	{r4, r5, r6, lr}
 80075ee:	2600      	movs	r6, #0
 80075f0:	4d0c      	ldr	r5, [pc, #48]	; (8007624 <__libc_init_array+0x38>)
 80075f2:	4c0d      	ldr	r4, [pc, #52]	; (8007628 <__libc_init_array+0x3c>)
 80075f4:	1b64      	subs	r4, r4, r5
 80075f6:	10a4      	asrs	r4, r4, #2
 80075f8:	42a6      	cmp	r6, r4
 80075fa:	d109      	bne.n	8007610 <__libc_init_array+0x24>
 80075fc:	2600      	movs	r6, #0
 80075fe:	f001 f88f 	bl	8008720 <_init>
 8007602:	4d0a      	ldr	r5, [pc, #40]	; (800762c <__libc_init_array+0x40>)
 8007604:	4c0a      	ldr	r4, [pc, #40]	; (8007630 <__libc_init_array+0x44>)
 8007606:	1b64      	subs	r4, r4, r5
 8007608:	10a4      	asrs	r4, r4, #2
 800760a:	42a6      	cmp	r6, r4
 800760c:	d105      	bne.n	800761a <__libc_init_array+0x2e>
 800760e:	bd70      	pop	{r4, r5, r6, pc}
 8007610:	00b3      	lsls	r3, r6, #2
 8007612:	58eb      	ldr	r3, [r5, r3]
 8007614:	4798      	blx	r3
 8007616:	3601      	adds	r6, #1
 8007618:	e7ee      	b.n	80075f8 <__libc_init_array+0xc>
 800761a:	00b3      	lsls	r3, r6, #2
 800761c:	58eb      	ldr	r3, [r5, r3]
 800761e:	4798      	blx	r3
 8007620:	3601      	adds	r6, #1
 8007622:	e7f2      	b.n	800760a <__libc_init_array+0x1e>
 8007624:	08008934 	.word	0x08008934
 8007628:	08008934 	.word	0x08008934
 800762c:	08008934 	.word	0x08008934
 8007630:	08008938 	.word	0x08008938

08007634 <memcpy>:
 8007634:	2300      	movs	r3, #0
 8007636:	b510      	push	{r4, lr}
 8007638:	429a      	cmp	r2, r3
 800763a:	d100      	bne.n	800763e <memcpy+0xa>
 800763c:	bd10      	pop	{r4, pc}
 800763e:	5ccc      	ldrb	r4, [r1, r3]
 8007640:	54c4      	strb	r4, [r0, r3]
 8007642:	3301      	adds	r3, #1
 8007644:	e7f8      	b.n	8007638 <memcpy+0x4>

08007646 <memset>:
 8007646:	0003      	movs	r3, r0
 8007648:	1882      	adds	r2, r0, r2
 800764a:	4293      	cmp	r3, r2
 800764c:	d100      	bne.n	8007650 <memset+0xa>
 800764e:	4770      	bx	lr
 8007650:	7019      	strb	r1, [r3, #0]
 8007652:	3301      	adds	r3, #1
 8007654:	e7f9      	b.n	800764a <memset+0x4>
	...

08007658 <iprintf>:
 8007658:	b40f      	push	{r0, r1, r2, r3}
 800765a:	4b0b      	ldr	r3, [pc, #44]	; (8007688 <iprintf+0x30>)
 800765c:	b513      	push	{r0, r1, r4, lr}
 800765e:	681c      	ldr	r4, [r3, #0]
 8007660:	2c00      	cmp	r4, #0
 8007662:	d005      	beq.n	8007670 <iprintf+0x18>
 8007664:	69a3      	ldr	r3, [r4, #24]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d102      	bne.n	8007670 <iprintf+0x18>
 800766a:	0020      	movs	r0, r4
 800766c:	f000 fa86 	bl	8007b7c <__sinit>
 8007670:	ab05      	add	r3, sp, #20
 8007672:	0020      	movs	r0, r4
 8007674:	9a04      	ldr	r2, [sp, #16]
 8007676:	68a1      	ldr	r1, [r4, #8]
 8007678:	9301      	str	r3, [sp, #4]
 800767a:	f000 fc99 	bl	8007fb0 <_vfiprintf_r>
 800767e:	bc16      	pop	{r1, r2, r4}
 8007680:	bc08      	pop	{r3}
 8007682:	b004      	add	sp, #16
 8007684:	4718      	bx	r3
 8007686:	46c0      	nop			; (mov r8, r8)
 8007688:	200000a4 	.word	0x200000a4

0800768c <_puts_r>:
 800768c:	b570      	push	{r4, r5, r6, lr}
 800768e:	0005      	movs	r5, r0
 8007690:	000e      	movs	r6, r1
 8007692:	2800      	cmp	r0, #0
 8007694:	d004      	beq.n	80076a0 <_puts_r+0x14>
 8007696:	6983      	ldr	r3, [r0, #24]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d101      	bne.n	80076a0 <_puts_r+0x14>
 800769c:	f000 fa6e 	bl	8007b7c <__sinit>
 80076a0:	69ab      	ldr	r3, [r5, #24]
 80076a2:	68ac      	ldr	r4, [r5, #8]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d102      	bne.n	80076ae <_puts_r+0x22>
 80076a8:	0028      	movs	r0, r5
 80076aa:	f000 fa67 	bl	8007b7c <__sinit>
 80076ae:	4b2d      	ldr	r3, [pc, #180]	; (8007764 <_puts_r+0xd8>)
 80076b0:	429c      	cmp	r4, r3
 80076b2:	d122      	bne.n	80076fa <_puts_r+0x6e>
 80076b4:	686c      	ldr	r4, [r5, #4]
 80076b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80076b8:	07db      	lsls	r3, r3, #31
 80076ba:	d405      	bmi.n	80076c8 <_puts_r+0x3c>
 80076bc:	89a3      	ldrh	r3, [r4, #12]
 80076be:	059b      	lsls	r3, r3, #22
 80076c0:	d402      	bmi.n	80076c8 <_puts_r+0x3c>
 80076c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076c4:	f000 fafb 	bl	8007cbe <__retarget_lock_acquire_recursive>
 80076c8:	89a3      	ldrh	r3, [r4, #12]
 80076ca:	071b      	lsls	r3, r3, #28
 80076cc:	d502      	bpl.n	80076d4 <_puts_r+0x48>
 80076ce:	6923      	ldr	r3, [r4, #16]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d129      	bne.n	8007728 <_puts_r+0x9c>
 80076d4:	0021      	movs	r1, r4
 80076d6:	0028      	movs	r0, r5
 80076d8:	f000 f8aa 	bl	8007830 <__swsetup_r>
 80076dc:	2800      	cmp	r0, #0
 80076de:	d023      	beq.n	8007728 <_puts_r+0x9c>
 80076e0:	2501      	movs	r5, #1
 80076e2:	426d      	negs	r5, r5
 80076e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80076e6:	07db      	lsls	r3, r3, #31
 80076e8:	d405      	bmi.n	80076f6 <_puts_r+0x6a>
 80076ea:	89a3      	ldrh	r3, [r4, #12]
 80076ec:	059b      	lsls	r3, r3, #22
 80076ee:	d402      	bmi.n	80076f6 <_puts_r+0x6a>
 80076f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076f2:	f000 fae5 	bl	8007cc0 <__retarget_lock_release_recursive>
 80076f6:	0028      	movs	r0, r5
 80076f8:	bd70      	pop	{r4, r5, r6, pc}
 80076fa:	4b1b      	ldr	r3, [pc, #108]	; (8007768 <_puts_r+0xdc>)
 80076fc:	429c      	cmp	r4, r3
 80076fe:	d101      	bne.n	8007704 <_puts_r+0x78>
 8007700:	68ac      	ldr	r4, [r5, #8]
 8007702:	e7d8      	b.n	80076b6 <_puts_r+0x2a>
 8007704:	4b19      	ldr	r3, [pc, #100]	; (800776c <_puts_r+0xe0>)
 8007706:	429c      	cmp	r4, r3
 8007708:	d1d5      	bne.n	80076b6 <_puts_r+0x2a>
 800770a:	68ec      	ldr	r4, [r5, #12]
 800770c:	e7d3      	b.n	80076b6 <_puts_r+0x2a>
 800770e:	3601      	adds	r6, #1
 8007710:	60a3      	str	r3, [r4, #8]
 8007712:	2b00      	cmp	r3, #0
 8007714:	da04      	bge.n	8007720 <_puts_r+0x94>
 8007716:	69a2      	ldr	r2, [r4, #24]
 8007718:	429a      	cmp	r2, r3
 800771a:	dc16      	bgt.n	800774a <_puts_r+0xbe>
 800771c:	290a      	cmp	r1, #10
 800771e:	d014      	beq.n	800774a <_puts_r+0xbe>
 8007720:	6823      	ldr	r3, [r4, #0]
 8007722:	1c5a      	adds	r2, r3, #1
 8007724:	6022      	str	r2, [r4, #0]
 8007726:	7019      	strb	r1, [r3, #0]
 8007728:	68a3      	ldr	r3, [r4, #8]
 800772a:	7831      	ldrb	r1, [r6, #0]
 800772c:	3b01      	subs	r3, #1
 800772e:	2900      	cmp	r1, #0
 8007730:	d1ed      	bne.n	800770e <_puts_r+0x82>
 8007732:	60a3      	str	r3, [r4, #8]
 8007734:	2b00      	cmp	r3, #0
 8007736:	da0f      	bge.n	8007758 <_puts_r+0xcc>
 8007738:	0028      	movs	r0, r5
 800773a:	0022      	movs	r2, r4
 800773c:	310a      	adds	r1, #10
 800773e:	f000 f821 	bl	8007784 <__swbuf_r>
 8007742:	250a      	movs	r5, #10
 8007744:	1c43      	adds	r3, r0, #1
 8007746:	d1cd      	bne.n	80076e4 <_puts_r+0x58>
 8007748:	e7ca      	b.n	80076e0 <_puts_r+0x54>
 800774a:	0022      	movs	r2, r4
 800774c:	0028      	movs	r0, r5
 800774e:	f000 f819 	bl	8007784 <__swbuf_r>
 8007752:	1c43      	adds	r3, r0, #1
 8007754:	d1e8      	bne.n	8007728 <_puts_r+0x9c>
 8007756:	e7c3      	b.n	80076e0 <_puts_r+0x54>
 8007758:	250a      	movs	r5, #10
 800775a:	6823      	ldr	r3, [r4, #0]
 800775c:	1c5a      	adds	r2, r3, #1
 800775e:	6022      	str	r2, [r4, #0]
 8007760:	701d      	strb	r5, [r3, #0]
 8007762:	e7bf      	b.n	80076e4 <_puts_r+0x58>
 8007764:	080088c0 	.word	0x080088c0
 8007768:	080088e0 	.word	0x080088e0
 800776c:	080088a0 	.word	0x080088a0

08007770 <puts>:
 8007770:	b510      	push	{r4, lr}
 8007772:	4b03      	ldr	r3, [pc, #12]	; (8007780 <puts+0x10>)
 8007774:	0001      	movs	r1, r0
 8007776:	6818      	ldr	r0, [r3, #0]
 8007778:	f7ff ff88 	bl	800768c <_puts_r>
 800777c:	bd10      	pop	{r4, pc}
 800777e:	46c0      	nop			; (mov r8, r8)
 8007780:	200000a4 	.word	0x200000a4

08007784 <__swbuf_r>:
 8007784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007786:	0005      	movs	r5, r0
 8007788:	000e      	movs	r6, r1
 800778a:	0014      	movs	r4, r2
 800778c:	2800      	cmp	r0, #0
 800778e:	d004      	beq.n	800779a <__swbuf_r+0x16>
 8007790:	6983      	ldr	r3, [r0, #24]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d101      	bne.n	800779a <__swbuf_r+0x16>
 8007796:	f000 f9f1 	bl	8007b7c <__sinit>
 800779a:	4b22      	ldr	r3, [pc, #136]	; (8007824 <__swbuf_r+0xa0>)
 800779c:	429c      	cmp	r4, r3
 800779e:	d12e      	bne.n	80077fe <__swbuf_r+0x7a>
 80077a0:	686c      	ldr	r4, [r5, #4]
 80077a2:	69a3      	ldr	r3, [r4, #24]
 80077a4:	60a3      	str	r3, [r4, #8]
 80077a6:	89a3      	ldrh	r3, [r4, #12]
 80077a8:	071b      	lsls	r3, r3, #28
 80077aa:	d532      	bpl.n	8007812 <__swbuf_r+0x8e>
 80077ac:	6923      	ldr	r3, [r4, #16]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d02f      	beq.n	8007812 <__swbuf_r+0x8e>
 80077b2:	6823      	ldr	r3, [r4, #0]
 80077b4:	6922      	ldr	r2, [r4, #16]
 80077b6:	b2f7      	uxtb	r7, r6
 80077b8:	1a98      	subs	r0, r3, r2
 80077ba:	6963      	ldr	r3, [r4, #20]
 80077bc:	b2f6      	uxtb	r6, r6
 80077be:	4283      	cmp	r3, r0
 80077c0:	dc05      	bgt.n	80077ce <__swbuf_r+0x4a>
 80077c2:	0021      	movs	r1, r4
 80077c4:	0028      	movs	r0, r5
 80077c6:	f000 f937 	bl	8007a38 <_fflush_r>
 80077ca:	2800      	cmp	r0, #0
 80077cc:	d127      	bne.n	800781e <__swbuf_r+0x9a>
 80077ce:	68a3      	ldr	r3, [r4, #8]
 80077d0:	3001      	adds	r0, #1
 80077d2:	3b01      	subs	r3, #1
 80077d4:	60a3      	str	r3, [r4, #8]
 80077d6:	6823      	ldr	r3, [r4, #0]
 80077d8:	1c5a      	adds	r2, r3, #1
 80077da:	6022      	str	r2, [r4, #0]
 80077dc:	701f      	strb	r7, [r3, #0]
 80077de:	6963      	ldr	r3, [r4, #20]
 80077e0:	4283      	cmp	r3, r0
 80077e2:	d004      	beq.n	80077ee <__swbuf_r+0x6a>
 80077e4:	89a3      	ldrh	r3, [r4, #12]
 80077e6:	07db      	lsls	r3, r3, #31
 80077e8:	d507      	bpl.n	80077fa <__swbuf_r+0x76>
 80077ea:	2e0a      	cmp	r6, #10
 80077ec:	d105      	bne.n	80077fa <__swbuf_r+0x76>
 80077ee:	0021      	movs	r1, r4
 80077f0:	0028      	movs	r0, r5
 80077f2:	f000 f921 	bl	8007a38 <_fflush_r>
 80077f6:	2800      	cmp	r0, #0
 80077f8:	d111      	bne.n	800781e <__swbuf_r+0x9a>
 80077fa:	0030      	movs	r0, r6
 80077fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077fe:	4b0a      	ldr	r3, [pc, #40]	; (8007828 <__swbuf_r+0xa4>)
 8007800:	429c      	cmp	r4, r3
 8007802:	d101      	bne.n	8007808 <__swbuf_r+0x84>
 8007804:	68ac      	ldr	r4, [r5, #8]
 8007806:	e7cc      	b.n	80077a2 <__swbuf_r+0x1e>
 8007808:	4b08      	ldr	r3, [pc, #32]	; (800782c <__swbuf_r+0xa8>)
 800780a:	429c      	cmp	r4, r3
 800780c:	d1c9      	bne.n	80077a2 <__swbuf_r+0x1e>
 800780e:	68ec      	ldr	r4, [r5, #12]
 8007810:	e7c7      	b.n	80077a2 <__swbuf_r+0x1e>
 8007812:	0021      	movs	r1, r4
 8007814:	0028      	movs	r0, r5
 8007816:	f000 f80b 	bl	8007830 <__swsetup_r>
 800781a:	2800      	cmp	r0, #0
 800781c:	d0c9      	beq.n	80077b2 <__swbuf_r+0x2e>
 800781e:	2601      	movs	r6, #1
 8007820:	4276      	negs	r6, r6
 8007822:	e7ea      	b.n	80077fa <__swbuf_r+0x76>
 8007824:	080088c0 	.word	0x080088c0
 8007828:	080088e0 	.word	0x080088e0
 800782c:	080088a0 	.word	0x080088a0

08007830 <__swsetup_r>:
 8007830:	4b37      	ldr	r3, [pc, #220]	; (8007910 <__swsetup_r+0xe0>)
 8007832:	b570      	push	{r4, r5, r6, lr}
 8007834:	681d      	ldr	r5, [r3, #0]
 8007836:	0006      	movs	r6, r0
 8007838:	000c      	movs	r4, r1
 800783a:	2d00      	cmp	r5, #0
 800783c:	d005      	beq.n	800784a <__swsetup_r+0x1a>
 800783e:	69ab      	ldr	r3, [r5, #24]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d102      	bne.n	800784a <__swsetup_r+0x1a>
 8007844:	0028      	movs	r0, r5
 8007846:	f000 f999 	bl	8007b7c <__sinit>
 800784a:	4b32      	ldr	r3, [pc, #200]	; (8007914 <__swsetup_r+0xe4>)
 800784c:	429c      	cmp	r4, r3
 800784e:	d10f      	bne.n	8007870 <__swsetup_r+0x40>
 8007850:	686c      	ldr	r4, [r5, #4]
 8007852:	230c      	movs	r3, #12
 8007854:	5ee2      	ldrsh	r2, [r4, r3]
 8007856:	b293      	uxth	r3, r2
 8007858:	0711      	lsls	r1, r2, #28
 800785a:	d42d      	bmi.n	80078b8 <__swsetup_r+0x88>
 800785c:	06d9      	lsls	r1, r3, #27
 800785e:	d411      	bmi.n	8007884 <__swsetup_r+0x54>
 8007860:	2309      	movs	r3, #9
 8007862:	2001      	movs	r0, #1
 8007864:	6033      	str	r3, [r6, #0]
 8007866:	3337      	adds	r3, #55	; 0x37
 8007868:	4313      	orrs	r3, r2
 800786a:	81a3      	strh	r3, [r4, #12]
 800786c:	4240      	negs	r0, r0
 800786e:	bd70      	pop	{r4, r5, r6, pc}
 8007870:	4b29      	ldr	r3, [pc, #164]	; (8007918 <__swsetup_r+0xe8>)
 8007872:	429c      	cmp	r4, r3
 8007874:	d101      	bne.n	800787a <__swsetup_r+0x4a>
 8007876:	68ac      	ldr	r4, [r5, #8]
 8007878:	e7eb      	b.n	8007852 <__swsetup_r+0x22>
 800787a:	4b28      	ldr	r3, [pc, #160]	; (800791c <__swsetup_r+0xec>)
 800787c:	429c      	cmp	r4, r3
 800787e:	d1e8      	bne.n	8007852 <__swsetup_r+0x22>
 8007880:	68ec      	ldr	r4, [r5, #12]
 8007882:	e7e6      	b.n	8007852 <__swsetup_r+0x22>
 8007884:	075b      	lsls	r3, r3, #29
 8007886:	d513      	bpl.n	80078b0 <__swsetup_r+0x80>
 8007888:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800788a:	2900      	cmp	r1, #0
 800788c:	d008      	beq.n	80078a0 <__swsetup_r+0x70>
 800788e:	0023      	movs	r3, r4
 8007890:	3344      	adds	r3, #68	; 0x44
 8007892:	4299      	cmp	r1, r3
 8007894:	d002      	beq.n	800789c <__swsetup_r+0x6c>
 8007896:	0030      	movs	r0, r6
 8007898:	f000 fa80 	bl	8007d9c <_free_r>
 800789c:	2300      	movs	r3, #0
 800789e:	6363      	str	r3, [r4, #52]	; 0x34
 80078a0:	2224      	movs	r2, #36	; 0x24
 80078a2:	89a3      	ldrh	r3, [r4, #12]
 80078a4:	4393      	bics	r3, r2
 80078a6:	81a3      	strh	r3, [r4, #12]
 80078a8:	2300      	movs	r3, #0
 80078aa:	6063      	str	r3, [r4, #4]
 80078ac:	6923      	ldr	r3, [r4, #16]
 80078ae:	6023      	str	r3, [r4, #0]
 80078b0:	2308      	movs	r3, #8
 80078b2:	89a2      	ldrh	r2, [r4, #12]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	81a3      	strh	r3, [r4, #12]
 80078b8:	6923      	ldr	r3, [r4, #16]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d10b      	bne.n	80078d6 <__swsetup_r+0xa6>
 80078be:	21a0      	movs	r1, #160	; 0xa0
 80078c0:	2280      	movs	r2, #128	; 0x80
 80078c2:	89a3      	ldrh	r3, [r4, #12]
 80078c4:	0089      	lsls	r1, r1, #2
 80078c6:	0092      	lsls	r2, r2, #2
 80078c8:	400b      	ands	r3, r1
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d003      	beq.n	80078d6 <__swsetup_r+0xa6>
 80078ce:	0021      	movs	r1, r4
 80078d0:	0030      	movs	r0, r6
 80078d2:	f000 fa1f 	bl	8007d14 <__smakebuf_r>
 80078d6:	220c      	movs	r2, #12
 80078d8:	5ea3      	ldrsh	r3, [r4, r2]
 80078da:	2001      	movs	r0, #1
 80078dc:	001a      	movs	r2, r3
 80078de:	b299      	uxth	r1, r3
 80078e0:	4002      	ands	r2, r0
 80078e2:	4203      	tst	r3, r0
 80078e4:	d00f      	beq.n	8007906 <__swsetup_r+0xd6>
 80078e6:	2200      	movs	r2, #0
 80078e8:	60a2      	str	r2, [r4, #8]
 80078ea:	6962      	ldr	r2, [r4, #20]
 80078ec:	4252      	negs	r2, r2
 80078ee:	61a2      	str	r2, [r4, #24]
 80078f0:	2000      	movs	r0, #0
 80078f2:	6922      	ldr	r2, [r4, #16]
 80078f4:	4282      	cmp	r2, r0
 80078f6:	d1ba      	bne.n	800786e <__swsetup_r+0x3e>
 80078f8:	060a      	lsls	r2, r1, #24
 80078fa:	d5b8      	bpl.n	800786e <__swsetup_r+0x3e>
 80078fc:	2240      	movs	r2, #64	; 0x40
 80078fe:	4313      	orrs	r3, r2
 8007900:	81a3      	strh	r3, [r4, #12]
 8007902:	3801      	subs	r0, #1
 8007904:	e7b3      	b.n	800786e <__swsetup_r+0x3e>
 8007906:	0788      	lsls	r0, r1, #30
 8007908:	d400      	bmi.n	800790c <__swsetup_r+0xdc>
 800790a:	6962      	ldr	r2, [r4, #20]
 800790c:	60a2      	str	r2, [r4, #8]
 800790e:	e7ef      	b.n	80078f0 <__swsetup_r+0xc0>
 8007910:	200000a4 	.word	0x200000a4
 8007914:	080088c0 	.word	0x080088c0
 8007918:	080088e0 	.word	0x080088e0
 800791c:	080088a0 	.word	0x080088a0

08007920 <__sflush_r>:
 8007920:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007922:	898b      	ldrh	r3, [r1, #12]
 8007924:	0005      	movs	r5, r0
 8007926:	000c      	movs	r4, r1
 8007928:	071a      	lsls	r2, r3, #28
 800792a:	d45f      	bmi.n	80079ec <__sflush_r+0xcc>
 800792c:	684a      	ldr	r2, [r1, #4]
 800792e:	2a00      	cmp	r2, #0
 8007930:	dc04      	bgt.n	800793c <__sflush_r+0x1c>
 8007932:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8007934:	2a00      	cmp	r2, #0
 8007936:	dc01      	bgt.n	800793c <__sflush_r+0x1c>
 8007938:	2000      	movs	r0, #0
 800793a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800793c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800793e:	2f00      	cmp	r7, #0
 8007940:	d0fa      	beq.n	8007938 <__sflush_r+0x18>
 8007942:	2200      	movs	r2, #0
 8007944:	2180      	movs	r1, #128	; 0x80
 8007946:	682e      	ldr	r6, [r5, #0]
 8007948:	602a      	str	r2, [r5, #0]
 800794a:	001a      	movs	r2, r3
 800794c:	0149      	lsls	r1, r1, #5
 800794e:	400a      	ands	r2, r1
 8007950:	420b      	tst	r3, r1
 8007952:	d034      	beq.n	80079be <__sflush_r+0x9e>
 8007954:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007956:	89a3      	ldrh	r3, [r4, #12]
 8007958:	075b      	lsls	r3, r3, #29
 800795a:	d506      	bpl.n	800796a <__sflush_r+0x4a>
 800795c:	6863      	ldr	r3, [r4, #4]
 800795e:	1ac0      	subs	r0, r0, r3
 8007960:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007962:	2b00      	cmp	r3, #0
 8007964:	d001      	beq.n	800796a <__sflush_r+0x4a>
 8007966:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007968:	1ac0      	subs	r0, r0, r3
 800796a:	0002      	movs	r2, r0
 800796c:	6a21      	ldr	r1, [r4, #32]
 800796e:	2300      	movs	r3, #0
 8007970:	0028      	movs	r0, r5
 8007972:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007974:	47b8      	blx	r7
 8007976:	89a1      	ldrh	r1, [r4, #12]
 8007978:	1c43      	adds	r3, r0, #1
 800797a:	d106      	bne.n	800798a <__sflush_r+0x6a>
 800797c:	682b      	ldr	r3, [r5, #0]
 800797e:	2b1d      	cmp	r3, #29
 8007980:	d831      	bhi.n	80079e6 <__sflush_r+0xc6>
 8007982:	4a2c      	ldr	r2, [pc, #176]	; (8007a34 <__sflush_r+0x114>)
 8007984:	40da      	lsrs	r2, r3
 8007986:	07d3      	lsls	r3, r2, #31
 8007988:	d52d      	bpl.n	80079e6 <__sflush_r+0xc6>
 800798a:	2300      	movs	r3, #0
 800798c:	6063      	str	r3, [r4, #4]
 800798e:	6923      	ldr	r3, [r4, #16]
 8007990:	6023      	str	r3, [r4, #0]
 8007992:	04cb      	lsls	r3, r1, #19
 8007994:	d505      	bpl.n	80079a2 <__sflush_r+0x82>
 8007996:	1c43      	adds	r3, r0, #1
 8007998:	d102      	bne.n	80079a0 <__sflush_r+0x80>
 800799a:	682b      	ldr	r3, [r5, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d100      	bne.n	80079a2 <__sflush_r+0x82>
 80079a0:	6560      	str	r0, [r4, #84]	; 0x54
 80079a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079a4:	602e      	str	r6, [r5, #0]
 80079a6:	2900      	cmp	r1, #0
 80079a8:	d0c6      	beq.n	8007938 <__sflush_r+0x18>
 80079aa:	0023      	movs	r3, r4
 80079ac:	3344      	adds	r3, #68	; 0x44
 80079ae:	4299      	cmp	r1, r3
 80079b0:	d002      	beq.n	80079b8 <__sflush_r+0x98>
 80079b2:	0028      	movs	r0, r5
 80079b4:	f000 f9f2 	bl	8007d9c <_free_r>
 80079b8:	2000      	movs	r0, #0
 80079ba:	6360      	str	r0, [r4, #52]	; 0x34
 80079bc:	e7bd      	b.n	800793a <__sflush_r+0x1a>
 80079be:	2301      	movs	r3, #1
 80079c0:	0028      	movs	r0, r5
 80079c2:	6a21      	ldr	r1, [r4, #32]
 80079c4:	47b8      	blx	r7
 80079c6:	1c43      	adds	r3, r0, #1
 80079c8:	d1c5      	bne.n	8007956 <__sflush_r+0x36>
 80079ca:	682b      	ldr	r3, [r5, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d0c2      	beq.n	8007956 <__sflush_r+0x36>
 80079d0:	2b1d      	cmp	r3, #29
 80079d2:	d001      	beq.n	80079d8 <__sflush_r+0xb8>
 80079d4:	2b16      	cmp	r3, #22
 80079d6:	d101      	bne.n	80079dc <__sflush_r+0xbc>
 80079d8:	602e      	str	r6, [r5, #0]
 80079da:	e7ad      	b.n	8007938 <__sflush_r+0x18>
 80079dc:	2340      	movs	r3, #64	; 0x40
 80079de:	89a2      	ldrh	r2, [r4, #12]
 80079e0:	4313      	orrs	r3, r2
 80079e2:	81a3      	strh	r3, [r4, #12]
 80079e4:	e7a9      	b.n	800793a <__sflush_r+0x1a>
 80079e6:	2340      	movs	r3, #64	; 0x40
 80079e8:	430b      	orrs	r3, r1
 80079ea:	e7fa      	b.n	80079e2 <__sflush_r+0xc2>
 80079ec:	690f      	ldr	r7, [r1, #16]
 80079ee:	2f00      	cmp	r7, #0
 80079f0:	d0a2      	beq.n	8007938 <__sflush_r+0x18>
 80079f2:	680a      	ldr	r2, [r1, #0]
 80079f4:	600f      	str	r7, [r1, #0]
 80079f6:	1bd2      	subs	r2, r2, r7
 80079f8:	9201      	str	r2, [sp, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	079b      	lsls	r3, r3, #30
 80079fe:	d100      	bne.n	8007a02 <__sflush_r+0xe2>
 8007a00:	694a      	ldr	r2, [r1, #20]
 8007a02:	60a2      	str	r2, [r4, #8]
 8007a04:	9b01      	ldr	r3, [sp, #4]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	dc00      	bgt.n	8007a0c <__sflush_r+0xec>
 8007a0a:	e795      	b.n	8007938 <__sflush_r+0x18>
 8007a0c:	003a      	movs	r2, r7
 8007a0e:	0028      	movs	r0, r5
 8007a10:	9b01      	ldr	r3, [sp, #4]
 8007a12:	6a21      	ldr	r1, [r4, #32]
 8007a14:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007a16:	47b0      	blx	r6
 8007a18:	2800      	cmp	r0, #0
 8007a1a:	dc06      	bgt.n	8007a2a <__sflush_r+0x10a>
 8007a1c:	2340      	movs	r3, #64	; 0x40
 8007a1e:	2001      	movs	r0, #1
 8007a20:	89a2      	ldrh	r2, [r4, #12]
 8007a22:	4240      	negs	r0, r0
 8007a24:	4313      	orrs	r3, r2
 8007a26:	81a3      	strh	r3, [r4, #12]
 8007a28:	e787      	b.n	800793a <__sflush_r+0x1a>
 8007a2a:	9b01      	ldr	r3, [sp, #4]
 8007a2c:	183f      	adds	r7, r7, r0
 8007a2e:	1a1b      	subs	r3, r3, r0
 8007a30:	9301      	str	r3, [sp, #4]
 8007a32:	e7e7      	b.n	8007a04 <__sflush_r+0xe4>
 8007a34:	20400001 	.word	0x20400001

08007a38 <_fflush_r>:
 8007a38:	690b      	ldr	r3, [r1, #16]
 8007a3a:	b570      	push	{r4, r5, r6, lr}
 8007a3c:	0005      	movs	r5, r0
 8007a3e:	000c      	movs	r4, r1
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d102      	bne.n	8007a4a <_fflush_r+0x12>
 8007a44:	2500      	movs	r5, #0
 8007a46:	0028      	movs	r0, r5
 8007a48:	bd70      	pop	{r4, r5, r6, pc}
 8007a4a:	2800      	cmp	r0, #0
 8007a4c:	d004      	beq.n	8007a58 <_fflush_r+0x20>
 8007a4e:	6983      	ldr	r3, [r0, #24]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d101      	bne.n	8007a58 <_fflush_r+0x20>
 8007a54:	f000 f892 	bl	8007b7c <__sinit>
 8007a58:	4b14      	ldr	r3, [pc, #80]	; (8007aac <_fflush_r+0x74>)
 8007a5a:	429c      	cmp	r4, r3
 8007a5c:	d11b      	bne.n	8007a96 <_fflush_r+0x5e>
 8007a5e:	686c      	ldr	r4, [r5, #4]
 8007a60:	220c      	movs	r2, #12
 8007a62:	5ea3      	ldrsh	r3, [r4, r2]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d0ed      	beq.n	8007a44 <_fflush_r+0xc>
 8007a68:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007a6a:	07d2      	lsls	r2, r2, #31
 8007a6c:	d404      	bmi.n	8007a78 <_fflush_r+0x40>
 8007a6e:	059b      	lsls	r3, r3, #22
 8007a70:	d402      	bmi.n	8007a78 <_fflush_r+0x40>
 8007a72:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a74:	f000 f923 	bl	8007cbe <__retarget_lock_acquire_recursive>
 8007a78:	0028      	movs	r0, r5
 8007a7a:	0021      	movs	r1, r4
 8007a7c:	f7ff ff50 	bl	8007920 <__sflush_r>
 8007a80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a82:	0005      	movs	r5, r0
 8007a84:	07db      	lsls	r3, r3, #31
 8007a86:	d4de      	bmi.n	8007a46 <_fflush_r+0xe>
 8007a88:	89a3      	ldrh	r3, [r4, #12]
 8007a8a:	059b      	lsls	r3, r3, #22
 8007a8c:	d4db      	bmi.n	8007a46 <_fflush_r+0xe>
 8007a8e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a90:	f000 f916 	bl	8007cc0 <__retarget_lock_release_recursive>
 8007a94:	e7d7      	b.n	8007a46 <_fflush_r+0xe>
 8007a96:	4b06      	ldr	r3, [pc, #24]	; (8007ab0 <_fflush_r+0x78>)
 8007a98:	429c      	cmp	r4, r3
 8007a9a:	d101      	bne.n	8007aa0 <_fflush_r+0x68>
 8007a9c:	68ac      	ldr	r4, [r5, #8]
 8007a9e:	e7df      	b.n	8007a60 <_fflush_r+0x28>
 8007aa0:	4b04      	ldr	r3, [pc, #16]	; (8007ab4 <_fflush_r+0x7c>)
 8007aa2:	429c      	cmp	r4, r3
 8007aa4:	d1dc      	bne.n	8007a60 <_fflush_r+0x28>
 8007aa6:	68ec      	ldr	r4, [r5, #12]
 8007aa8:	e7da      	b.n	8007a60 <_fflush_r+0x28>
 8007aaa:	46c0      	nop			; (mov r8, r8)
 8007aac:	080088c0 	.word	0x080088c0
 8007ab0:	080088e0 	.word	0x080088e0
 8007ab4:	080088a0 	.word	0x080088a0

08007ab8 <std>:
 8007ab8:	2300      	movs	r3, #0
 8007aba:	b510      	push	{r4, lr}
 8007abc:	0004      	movs	r4, r0
 8007abe:	6003      	str	r3, [r0, #0]
 8007ac0:	6043      	str	r3, [r0, #4]
 8007ac2:	6083      	str	r3, [r0, #8]
 8007ac4:	8181      	strh	r1, [r0, #12]
 8007ac6:	6643      	str	r3, [r0, #100]	; 0x64
 8007ac8:	0019      	movs	r1, r3
 8007aca:	81c2      	strh	r2, [r0, #14]
 8007acc:	6103      	str	r3, [r0, #16]
 8007ace:	6143      	str	r3, [r0, #20]
 8007ad0:	6183      	str	r3, [r0, #24]
 8007ad2:	2208      	movs	r2, #8
 8007ad4:	305c      	adds	r0, #92	; 0x5c
 8007ad6:	f7ff fdb6 	bl	8007646 <memset>
 8007ada:	4b05      	ldr	r3, [pc, #20]	; (8007af0 <std+0x38>)
 8007adc:	6224      	str	r4, [r4, #32]
 8007ade:	6263      	str	r3, [r4, #36]	; 0x24
 8007ae0:	4b04      	ldr	r3, [pc, #16]	; (8007af4 <std+0x3c>)
 8007ae2:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ae4:	4b04      	ldr	r3, [pc, #16]	; (8007af8 <std+0x40>)
 8007ae6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ae8:	4b04      	ldr	r3, [pc, #16]	; (8007afc <std+0x44>)
 8007aea:	6323      	str	r3, [r4, #48]	; 0x30
 8007aec:	bd10      	pop	{r4, pc}
 8007aee:	46c0      	nop			; (mov r8, r8)
 8007af0:	0800854d 	.word	0x0800854d
 8007af4:	08008575 	.word	0x08008575
 8007af8:	080085ad 	.word	0x080085ad
 8007afc:	080085d9 	.word	0x080085d9

08007b00 <_cleanup_r>:
 8007b00:	b510      	push	{r4, lr}
 8007b02:	4902      	ldr	r1, [pc, #8]	; (8007b0c <_cleanup_r+0xc>)
 8007b04:	f000 f8ba 	bl	8007c7c <_fwalk_reent>
 8007b08:	bd10      	pop	{r4, pc}
 8007b0a:	46c0      	nop			; (mov r8, r8)
 8007b0c:	08007a39 	.word	0x08007a39

08007b10 <__sfmoreglue>:
 8007b10:	b570      	push	{r4, r5, r6, lr}
 8007b12:	2568      	movs	r5, #104	; 0x68
 8007b14:	1e4a      	subs	r2, r1, #1
 8007b16:	4355      	muls	r5, r2
 8007b18:	000e      	movs	r6, r1
 8007b1a:	0029      	movs	r1, r5
 8007b1c:	3174      	adds	r1, #116	; 0x74
 8007b1e:	f000 f9a9 	bl	8007e74 <_malloc_r>
 8007b22:	1e04      	subs	r4, r0, #0
 8007b24:	d008      	beq.n	8007b38 <__sfmoreglue+0x28>
 8007b26:	2100      	movs	r1, #0
 8007b28:	002a      	movs	r2, r5
 8007b2a:	6001      	str	r1, [r0, #0]
 8007b2c:	6046      	str	r6, [r0, #4]
 8007b2e:	300c      	adds	r0, #12
 8007b30:	60a0      	str	r0, [r4, #8]
 8007b32:	3268      	adds	r2, #104	; 0x68
 8007b34:	f7ff fd87 	bl	8007646 <memset>
 8007b38:	0020      	movs	r0, r4
 8007b3a:	bd70      	pop	{r4, r5, r6, pc}

08007b3c <__sfp_lock_acquire>:
 8007b3c:	b510      	push	{r4, lr}
 8007b3e:	4802      	ldr	r0, [pc, #8]	; (8007b48 <__sfp_lock_acquire+0xc>)
 8007b40:	f000 f8bd 	bl	8007cbe <__retarget_lock_acquire_recursive>
 8007b44:	bd10      	pop	{r4, pc}
 8007b46:	46c0      	nop			; (mov r8, r8)
 8007b48:	20002011 	.word	0x20002011

08007b4c <__sfp_lock_release>:
 8007b4c:	b510      	push	{r4, lr}
 8007b4e:	4802      	ldr	r0, [pc, #8]	; (8007b58 <__sfp_lock_release+0xc>)
 8007b50:	f000 f8b6 	bl	8007cc0 <__retarget_lock_release_recursive>
 8007b54:	bd10      	pop	{r4, pc}
 8007b56:	46c0      	nop			; (mov r8, r8)
 8007b58:	20002011 	.word	0x20002011

08007b5c <__sinit_lock_acquire>:
 8007b5c:	b510      	push	{r4, lr}
 8007b5e:	4802      	ldr	r0, [pc, #8]	; (8007b68 <__sinit_lock_acquire+0xc>)
 8007b60:	f000 f8ad 	bl	8007cbe <__retarget_lock_acquire_recursive>
 8007b64:	bd10      	pop	{r4, pc}
 8007b66:	46c0      	nop			; (mov r8, r8)
 8007b68:	20002012 	.word	0x20002012

08007b6c <__sinit_lock_release>:
 8007b6c:	b510      	push	{r4, lr}
 8007b6e:	4802      	ldr	r0, [pc, #8]	; (8007b78 <__sinit_lock_release+0xc>)
 8007b70:	f000 f8a6 	bl	8007cc0 <__retarget_lock_release_recursive>
 8007b74:	bd10      	pop	{r4, pc}
 8007b76:	46c0      	nop			; (mov r8, r8)
 8007b78:	20002012 	.word	0x20002012

08007b7c <__sinit>:
 8007b7c:	b513      	push	{r0, r1, r4, lr}
 8007b7e:	0004      	movs	r4, r0
 8007b80:	f7ff ffec 	bl	8007b5c <__sinit_lock_acquire>
 8007b84:	69a3      	ldr	r3, [r4, #24]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d002      	beq.n	8007b90 <__sinit+0x14>
 8007b8a:	f7ff ffef 	bl	8007b6c <__sinit_lock_release>
 8007b8e:	bd13      	pop	{r0, r1, r4, pc}
 8007b90:	64a3      	str	r3, [r4, #72]	; 0x48
 8007b92:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007b94:	6523      	str	r3, [r4, #80]	; 0x50
 8007b96:	4b13      	ldr	r3, [pc, #76]	; (8007be4 <__sinit+0x68>)
 8007b98:	4a13      	ldr	r2, [pc, #76]	; (8007be8 <__sinit+0x6c>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007b9e:	9301      	str	r3, [sp, #4]
 8007ba0:	42a3      	cmp	r3, r4
 8007ba2:	d101      	bne.n	8007ba8 <__sinit+0x2c>
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	61a3      	str	r3, [r4, #24]
 8007ba8:	0020      	movs	r0, r4
 8007baa:	f000 f81f 	bl	8007bec <__sfp>
 8007bae:	6060      	str	r0, [r4, #4]
 8007bb0:	0020      	movs	r0, r4
 8007bb2:	f000 f81b 	bl	8007bec <__sfp>
 8007bb6:	60a0      	str	r0, [r4, #8]
 8007bb8:	0020      	movs	r0, r4
 8007bba:	f000 f817 	bl	8007bec <__sfp>
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	2104      	movs	r1, #4
 8007bc2:	60e0      	str	r0, [r4, #12]
 8007bc4:	6860      	ldr	r0, [r4, #4]
 8007bc6:	f7ff ff77 	bl	8007ab8 <std>
 8007bca:	2201      	movs	r2, #1
 8007bcc:	2109      	movs	r1, #9
 8007bce:	68a0      	ldr	r0, [r4, #8]
 8007bd0:	f7ff ff72 	bl	8007ab8 <std>
 8007bd4:	2202      	movs	r2, #2
 8007bd6:	2112      	movs	r1, #18
 8007bd8:	68e0      	ldr	r0, [r4, #12]
 8007bda:	f7ff ff6d 	bl	8007ab8 <std>
 8007bde:	2301      	movs	r3, #1
 8007be0:	61a3      	str	r3, [r4, #24]
 8007be2:	e7d2      	b.n	8007b8a <__sinit+0xe>
 8007be4:	0800889c 	.word	0x0800889c
 8007be8:	08007b01 	.word	0x08007b01

08007bec <__sfp>:
 8007bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bee:	0007      	movs	r7, r0
 8007bf0:	f7ff ffa4 	bl	8007b3c <__sfp_lock_acquire>
 8007bf4:	4b1f      	ldr	r3, [pc, #124]	; (8007c74 <__sfp+0x88>)
 8007bf6:	681e      	ldr	r6, [r3, #0]
 8007bf8:	69b3      	ldr	r3, [r6, #24]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d102      	bne.n	8007c04 <__sfp+0x18>
 8007bfe:	0030      	movs	r0, r6
 8007c00:	f7ff ffbc 	bl	8007b7c <__sinit>
 8007c04:	3648      	adds	r6, #72	; 0x48
 8007c06:	68b4      	ldr	r4, [r6, #8]
 8007c08:	6873      	ldr	r3, [r6, #4]
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	d504      	bpl.n	8007c18 <__sfp+0x2c>
 8007c0e:	6833      	ldr	r3, [r6, #0]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d022      	beq.n	8007c5a <__sfp+0x6e>
 8007c14:	6836      	ldr	r6, [r6, #0]
 8007c16:	e7f6      	b.n	8007c06 <__sfp+0x1a>
 8007c18:	220c      	movs	r2, #12
 8007c1a:	5ea5      	ldrsh	r5, [r4, r2]
 8007c1c:	2d00      	cmp	r5, #0
 8007c1e:	d11a      	bne.n	8007c56 <__sfp+0x6a>
 8007c20:	0020      	movs	r0, r4
 8007c22:	4b15      	ldr	r3, [pc, #84]	; (8007c78 <__sfp+0x8c>)
 8007c24:	3058      	adds	r0, #88	; 0x58
 8007c26:	60e3      	str	r3, [r4, #12]
 8007c28:	6665      	str	r5, [r4, #100]	; 0x64
 8007c2a:	f000 f847 	bl	8007cbc <__retarget_lock_init_recursive>
 8007c2e:	f7ff ff8d 	bl	8007b4c <__sfp_lock_release>
 8007c32:	0020      	movs	r0, r4
 8007c34:	2208      	movs	r2, #8
 8007c36:	0029      	movs	r1, r5
 8007c38:	6025      	str	r5, [r4, #0]
 8007c3a:	60a5      	str	r5, [r4, #8]
 8007c3c:	6065      	str	r5, [r4, #4]
 8007c3e:	6125      	str	r5, [r4, #16]
 8007c40:	6165      	str	r5, [r4, #20]
 8007c42:	61a5      	str	r5, [r4, #24]
 8007c44:	305c      	adds	r0, #92	; 0x5c
 8007c46:	f7ff fcfe 	bl	8007646 <memset>
 8007c4a:	6365      	str	r5, [r4, #52]	; 0x34
 8007c4c:	63a5      	str	r5, [r4, #56]	; 0x38
 8007c4e:	64a5      	str	r5, [r4, #72]	; 0x48
 8007c50:	64e5      	str	r5, [r4, #76]	; 0x4c
 8007c52:	0020      	movs	r0, r4
 8007c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c56:	3468      	adds	r4, #104	; 0x68
 8007c58:	e7d7      	b.n	8007c0a <__sfp+0x1e>
 8007c5a:	2104      	movs	r1, #4
 8007c5c:	0038      	movs	r0, r7
 8007c5e:	f7ff ff57 	bl	8007b10 <__sfmoreglue>
 8007c62:	1e04      	subs	r4, r0, #0
 8007c64:	6030      	str	r0, [r6, #0]
 8007c66:	d1d5      	bne.n	8007c14 <__sfp+0x28>
 8007c68:	f7ff ff70 	bl	8007b4c <__sfp_lock_release>
 8007c6c:	230c      	movs	r3, #12
 8007c6e:	603b      	str	r3, [r7, #0]
 8007c70:	e7ef      	b.n	8007c52 <__sfp+0x66>
 8007c72:	46c0      	nop			; (mov r8, r8)
 8007c74:	0800889c 	.word	0x0800889c
 8007c78:	ffff0001 	.word	0xffff0001

08007c7c <_fwalk_reent>:
 8007c7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c7e:	0004      	movs	r4, r0
 8007c80:	0006      	movs	r6, r0
 8007c82:	2700      	movs	r7, #0
 8007c84:	9101      	str	r1, [sp, #4]
 8007c86:	3448      	adds	r4, #72	; 0x48
 8007c88:	6863      	ldr	r3, [r4, #4]
 8007c8a:	68a5      	ldr	r5, [r4, #8]
 8007c8c:	9300      	str	r3, [sp, #0]
 8007c8e:	9b00      	ldr	r3, [sp, #0]
 8007c90:	3b01      	subs	r3, #1
 8007c92:	9300      	str	r3, [sp, #0]
 8007c94:	d504      	bpl.n	8007ca0 <_fwalk_reent+0x24>
 8007c96:	6824      	ldr	r4, [r4, #0]
 8007c98:	2c00      	cmp	r4, #0
 8007c9a:	d1f5      	bne.n	8007c88 <_fwalk_reent+0xc>
 8007c9c:	0038      	movs	r0, r7
 8007c9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007ca0:	89ab      	ldrh	r3, [r5, #12]
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d908      	bls.n	8007cb8 <_fwalk_reent+0x3c>
 8007ca6:	220e      	movs	r2, #14
 8007ca8:	5eab      	ldrsh	r3, [r5, r2]
 8007caa:	3301      	adds	r3, #1
 8007cac:	d004      	beq.n	8007cb8 <_fwalk_reent+0x3c>
 8007cae:	0029      	movs	r1, r5
 8007cb0:	0030      	movs	r0, r6
 8007cb2:	9b01      	ldr	r3, [sp, #4]
 8007cb4:	4798      	blx	r3
 8007cb6:	4307      	orrs	r7, r0
 8007cb8:	3568      	adds	r5, #104	; 0x68
 8007cba:	e7e8      	b.n	8007c8e <_fwalk_reent+0x12>

08007cbc <__retarget_lock_init_recursive>:
 8007cbc:	4770      	bx	lr

08007cbe <__retarget_lock_acquire_recursive>:
 8007cbe:	4770      	bx	lr

08007cc0 <__retarget_lock_release_recursive>:
 8007cc0:	4770      	bx	lr
	...

08007cc4 <__swhatbuf_r>:
 8007cc4:	b570      	push	{r4, r5, r6, lr}
 8007cc6:	000e      	movs	r6, r1
 8007cc8:	001d      	movs	r5, r3
 8007cca:	230e      	movs	r3, #14
 8007ccc:	5ec9      	ldrsh	r1, [r1, r3]
 8007cce:	0014      	movs	r4, r2
 8007cd0:	b096      	sub	sp, #88	; 0x58
 8007cd2:	2900      	cmp	r1, #0
 8007cd4:	da08      	bge.n	8007ce8 <__swhatbuf_r+0x24>
 8007cd6:	220c      	movs	r2, #12
 8007cd8:	5eb3      	ldrsh	r3, [r6, r2]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	602a      	str	r2, [r5, #0]
 8007cde:	061b      	lsls	r3, r3, #24
 8007ce0:	d411      	bmi.n	8007d06 <__swhatbuf_r+0x42>
 8007ce2:	2380      	movs	r3, #128	; 0x80
 8007ce4:	00db      	lsls	r3, r3, #3
 8007ce6:	e00f      	b.n	8007d08 <__swhatbuf_r+0x44>
 8007ce8:	466a      	mov	r2, sp
 8007cea:	f000 fca1 	bl	8008630 <_fstat_r>
 8007cee:	2800      	cmp	r0, #0
 8007cf0:	dbf1      	blt.n	8007cd6 <__swhatbuf_r+0x12>
 8007cf2:	23f0      	movs	r3, #240	; 0xf0
 8007cf4:	9901      	ldr	r1, [sp, #4]
 8007cf6:	021b      	lsls	r3, r3, #8
 8007cf8:	4019      	ands	r1, r3
 8007cfa:	4b05      	ldr	r3, [pc, #20]	; (8007d10 <__swhatbuf_r+0x4c>)
 8007cfc:	18c9      	adds	r1, r1, r3
 8007cfe:	424b      	negs	r3, r1
 8007d00:	4159      	adcs	r1, r3
 8007d02:	6029      	str	r1, [r5, #0]
 8007d04:	e7ed      	b.n	8007ce2 <__swhatbuf_r+0x1e>
 8007d06:	2340      	movs	r3, #64	; 0x40
 8007d08:	2000      	movs	r0, #0
 8007d0a:	6023      	str	r3, [r4, #0]
 8007d0c:	b016      	add	sp, #88	; 0x58
 8007d0e:	bd70      	pop	{r4, r5, r6, pc}
 8007d10:	ffffe000 	.word	0xffffe000

08007d14 <__smakebuf_r>:
 8007d14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d16:	2602      	movs	r6, #2
 8007d18:	898b      	ldrh	r3, [r1, #12]
 8007d1a:	0005      	movs	r5, r0
 8007d1c:	000c      	movs	r4, r1
 8007d1e:	4233      	tst	r3, r6
 8007d20:	d006      	beq.n	8007d30 <__smakebuf_r+0x1c>
 8007d22:	0023      	movs	r3, r4
 8007d24:	3347      	adds	r3, #71	; 0x47
 8007d26:	6023      	str	r3, [r4, #0]
 8007d28:	6123      	str	r3, [r4, #16]
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	6163      	str	r3, [r4, #20]
 8007d2e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8007d30:	466a      	mov	r2, sp
 8007d32:	ab01      	add	r3, sp, #4
 8007d34:	f7ff ffc6 	bl	8007cc4 <__swhatbuf_r>
 8007d38:	9900      	ldr	r1, [sp, #0]
 8007d3a:	0007      	movs	r7, r0
 8007d3c:	0028      	movs	r0, r5
 8007d3e:	f000 f899 	bl	8007e74 <_malloc_r>
 8007d42:	2800      	cmp	r0, #0
 8007d44:	d108      	bne.n	8007d58 <__smakebuf_r+0x44>
 8007d46:	220c      	movs	r2, #12
 8007d48:	5ea3      	ldrsh	r3, [r4, r2]
 8007d4a:	059a      	lsls	r2, r3, #22
 8007d4c:	d4ef      	bmi.n	8007d2e <__smakebuf_r+0x1a>
 8007d4e:	2203      	movs	r2, #3
 8007d50:	4393      	bics	r3, r2
 8007d52:	431e      	orrs	r6, r3
 8007d54:	81a6      	strh	r6, [r4, #12]
 8007d56:	e7e4      	b.n	8007d22 <__smakebuf_r+0xe>
 8007d58:	4b0f      	ldr	r3, [pc, #60]	; (8007d98 <__smakebuf_r+0x84>)
 8007d5a:	62ab      	str	r3, [r5, #40]	; 0x28
 8007d5c:	2380      	movs	r3, #128	; 0x80
 8007d5e:	89a2      	ldrh	r2, [r4, #12]
 8007d60:	6020      	str	r0, [r4, #0]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	81a3      	strh	r3, [r4, #12]
 8007d66:	9b00      	ldr	r3, [sp, #0]
 8007d68:	6120      	str	r0, [r4, #16]
 8007d6a:	6163      	str	r3, [r4, #20]
 8007d6c:	9b01      	ldr	r3, [sp, #4]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d00d      	beq.n	8007d8e <__smakebuf_r+0x7a>
 8007d72:	0028      	movs	r0, r5
 8007d74:	230e      	movs	r3, #14
 8007d76:	5ee1      	ldrsh	r1, [r4, r3]
 8007d78:	f000 fc6c 	bl	8008654 <_isatty_r>
 8007d7c:	2800      	cmp	r0, #0
 8007d7e:	d006      	beq.n	8007d8e <__smakebuf_r+0x7a>
 8007d80:	2203      	movs	r2, #3
 8007d82:	89a3      	ldrh	r3, [r4, #12]
 8007d84:	4393      	bics	r3, r2
 8007d86:	001a      	movs	r2, r3
 8007d88:	2301      	movs	r3, #1
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	81a3      	strh	r3, [r4, #12]
 8007d8e:	89a0      	ldrh	r0, [r4, #12]
 8007d90:	4307      	orrs	r7, r0
 8007d92:	81a7      	strh	r7, [r4, #12]
 8007d94:	e7cb      	b.n	8007d2e <__smakebuf_r+0x1a>
 8007d96:	46c0      	nop			; (mov r8, r8)
 8007d98:	08007b01 	.word	0x08007b01

08007d9c <_free_r>:
 8007d9c:	b570      	push	{r4, r5, r6, lr}
 8007d9e:	0005      	movs	r5, r0
 8007da0:	2900      	cmp	r1, #0
 8007da2:	d010      	beq.n	8007dc6 <_free_r+0x2a>
 8007da4:	1f0c      	subs	r4, r1, #4
 8007da6:	6823      	ldr	r3, [r4, #0]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	da00      	bge.n	8007dae <_free_r+0x12>
 8007dac:	18e4      	adds	r4, r4, r3
 8007dae:	0028      	movs	r0, r5
 8007db0:	f000 fc82 	bl	80086b8 <__malloc_lock>
 8007db4:	4a1d      	ldr	r2, [pc, #116]	; (8007e2c <_free_r+0x90>)
 8007db6:	6813      	ldr	r3, [r2, #0]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d105      	bne.n	8007dc8 <_free_r+0x2c>
 8007dbc:	6063      	str	r3, [r4, #4]
 8007dbe:	6014      	str	r4, [r2, #0]
 8007dc0:	0028      	movs	r0, r5
 8007dc2:	f000 fc81 	bl	80086c8 <__malloc_unlock>
 8007dc6:	bd70      	pop	{r4, r5, r6, pc}
 8007dc8:	42a3      	cmp	r3, r4
 8007dca:	d908      	bls.n	8007dde <_free_r+0x42>
 8007dcc:	6821      	ldr	r1, [r4, #0]
 8007dce:	1860      	adds	r0, r4, r1
 8007dd0:	4283      	cmp	r3, r0
 8007dd2:	d1f3      	bne.n	8007dbc <_free_r+0x20>
 8007dd4:	6818      	ldr	r0, [r3, #0]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	1841      	adds	r1, r0, r1
 8007dda:	6021      	str	r1, [r4, #0]
 8007ddc:	e7ee      	b.n	8007dbc <_free_r+0x20>
 8007dde:	001a      	movs	r2, r3
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d001      	beq.n	8007dea <_free_r+0x4e>
 8007de6:	42a3      	cmp	r3, r4
 8007de8:	d9f9      	bls.n	8007dde <_free_r+0x42>
 8007dea:	6811      	ldr	r1, [r2, #0]
 8007dec:	1850      	adds	r0, r2, r1
 8007dee:	42a0      	cmp	r0, r4
 8007df0:	d10b      	bne.n	8007e0a <_free_r+0x6e>
 8007df2:	6820      	ldr	r0, [r4, #0]
 8007df4:	1809      	adds	r1, r1, r0
 8007df6:	1850      	adds	r0, r2, r1
 8007df8:	6011      	str	r1, [r2, #0]
 8007dfa:	4283      	cmp	r3, r0
 8007dfc:	d1e0      	bne.n	8007dc0 <_free_r+0x24>
 8007dfe:	6818      	ldr	r0, [r3, #0]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	1841      	adds	r1, r0, r1
 8007e04:	6011      	str	r1, [r2, #0]
 8007e06:	6053      	str	r3, [r2, #4]
 8007e08:	e7da      	b.n	8007dc0 <_free_r+0x24>
 8007e0a:	42a0      	cmp	r0, r4
 8007e0c:	d902      	bls.n	8007e14 <_free_r+0x78>
 8007e0e:	230c      	movs	r3, #12
 8007e10:	602b      	str	r3, [r5, #0]
 8007e12:	e7d5      	b.n	8007dc0 <_free_r+0x24>
 8007e14:	6821      	ldr	r1, [r4, #0]
 8007e16:	1860      	adds	r0, r4, r1
 8007e18:	4283      	cmp	r3, r0
 8007e1a:	d103      	bne.n	8007e24 <_free_r+0x88>
 8007e1c:	6818      	ldr	r0, [r3, #0]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	1841      	adds	r1, r0, r1
 8007e22:	6021      	str	r1, [r4, #0]
 8007e24:	6063      	str	r3, [r4, #4]
 8007e26:	6054      	str	r4, [r2, #4]
 8007e28:	e7ca      	b.n	8007dc0 <_free_r+0x24>
 8007e2a:	46c0      	nop			; (mov r8, r8)
 8007e2c:	20002014 	.word	0x20002014

08007e30 <sbrk_aligned>:
 8007e30:	b570      	push	{r4, r5, r6, lr}
 8007e32:	4e0f      	ldr	r6, [pc, #60]	; (8007e70 <sbrk_aligned+0x40>)
 8007e34:	000d      	movs	r5, r1
 8007e36:	6831      	ldr	r1, [r6, #0]
 8007e38:	0004      	movs	r4, r0
 8007e3a:	2900      	cmp	r1, #0
 8007e3c:	d102      	bne.n	8007e44 <sbrk_aligned+0x14>
 8007e3e:	f000 fb73 	bl	8008528 <_sbrk_r>
 8007e42:	6030      	str	r0, [r6, #0]
 8007e44:	0029      	movs	r1, r5
 8007e46:	0020      	movs	r0, r4
 8007e48:	f000 fb6e 	bl	8008528 <_sbrk_r>
 8007e4c:	1c43      	adds	r3, r0, #1
 8007e4e:	d00a      	beq.n	8007e66 <sbrk_aligned+0x36>
 8007e50:	2303      	movs	r3, #3
 8007e52:	1cc5      	adds	r5, r0, #3
 8007e54:	439d      	bics	r5, r3
 8007e56:	42a8      	cmp	r0, r5
 8007e58:	d007      	beq.n	8007e6a <sbrk_aligned+0x3a>
 8007e5a:	1a29      	subs	r1, r5, r0
 8007e5c:	0020      	movs	r0, r4
 8007e5e:	f000 fb63 	bl	8008528 <_sbrk_r>
 8007e62:	1c43      	adds	r3, r0, #1
 8007e64:	d101      	bne.n	8007e6a <sbrk_aligned+0x3a>
 8007e66:	2501      	movs	r5, #1
 8007e68:	426d      	negs	r5, r5
 8007e6a:	0028      	movs	r0, r5
 8007e6c:	bd70      	pop	{r4, r5, r6, pc}
 8007e6e:	46c0      	nop			; (mov r8, r8)
 8007e70:	20002018 	.word	0x20002018

08007e74 <_malloc_r>:
 8007e74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e76:	2203      	movs	r2, #3
 8007e78:	1ccb      	adds	r3, r1, #3
 8007e7a:	4393      	bics	r3, r2
 8007e7c:	3308      	adds	r3, #8
 8007e7e:	0006      	movs	r6, r0
 8007e80:	001f      	movs	r7, r3
 8007e82:	2b0c      	cmp	r3, #12
 8007e84:	d232      	bcs.n	8007eec <_malloc_r+0x78>
 8007e86:	270c      	movs	r7, #12
 8007e88:	42b9      	cmp	r1, r7
 8007e8a:	d831      	bhi.n	8007ef0 <_malloc_r+0x7c>
 8007e8c:	0030      	movs	r0, r6
 8007e8e:	f000 fc13 	bl	80086b8 <__malloc_lock>
 8007e92:	4d32      	ldr	r5, [pc, #200]	; (8007f5c <_malloc_r+0xe8>)
 8007e94:	682b      	ldr	r3, [r5, #0]
 8007e96:	001c      	movs	r4, r3
 8007e98:	2c00      	cmp	r4, #0
 8007e9a:	d12e      	bne.n	8007efa <_malloc_r+0x86>
 8007e9c:	0039      	movs	r1, r7
 8007e9e:	0030      	movs	r0, r6
 8007ea0:	f7ff ffc6 	bl	8007e30 <sbrk_aligned>
 8007ea4:	0004      	movs	r4, r0
 8007ea6:	1c43      	adds	r3, r0, #1
 8007ea8:	d11e      	bne.n	8007ee8 <_malloc_r+0x74>
 8007eaa:	682c      	ldr	r4, [r5, #0]
 8007eac:	0025      	movs	r5, r4
 8007eae:	2d00      	cmp	r5, #0
 8007eb0:	d14a      	bne.n	8007f48 <_malloc_r+0xd4>
 8007eb2:	6823      	ldr	r3, [r4, #0]
 8007eb4:	0029      	movs	r1, r5
 8007eb6:	18e3      	adds	r3, r4, r3
 8007eb8:	0030      	movs	r0, r6
 8007eba:	9301      	str	r3, [sp, #4]
 8007ebc:	f000 fb34 	bl	8008528 <_sbrk_r>
 8007ec0:	9b01      	ldr	r3, [sp, #4]
 8007ec2:	4283      	cmp	r3, r0
 8007ec4:	d143      	bne.n	8007f4e <_malloc_r+0xda>
 8007ec6:	6823      	ldr	r3, [r4, #0]
 8007ec8:	3703      	adds	r7, #3
 8007eca:	1aff      	subs	r7, r7, r3
 8007ecc:	2303      	movs	r3, #3
 8007ece:	439f      	bics	r7, r3
 8007ed0:	3708      	adds	r7, #8
 8007ed2:	2f0c      	cmp	r7, #12
 8007ed4:	d200      	bcs.n	8007ed8 <_malloc_r+0x64>
 8007ed6:	270c      	movs	r7, #12
 8007ed8:	0039      	movs	r1, r7
 8007eda:	0030      	movs	r0, r6
 8007edc:	f7ff ffa8 	bl	8007e30 <sbrk_aligned>
 8007ee0:	1c43      	adds	r3, r0, #1
 8007ee2:	d034      	beq.n	8007f4e <_malloc_r+0xda>
 8007ee4:	6823      	ldr	r3, [r4, #0]
 8007ee6:	19df      	adds	r7, r3, r7
 8007ee8:	6027      	str	r7, [r4, #0]
 8007eea:	e013      	b.n	8007f14 <_malloc_r+0xa0>
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	dacb      	bge.n	8007e88 <_malloc_r+0x14>
 8007ef0:	230c      	movs	r3, #12
 8007ef2:	2500      	movs	r5, #0
 8007ef4:	6033      	str	r3, [r6, #0]
 8007ef6:	0028      	movs	r0, r5
 8007ef8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007efa:	6822      	ldr	r2, [r4, #0]
 8007efc:	1bd1      	subs	r1, r2, r7
 8007efe:	d420      	bmi.n	8007f42 <_malloc_r+0xce>
 8007f00:	290b      	cmp	r1, #11
 8007f02:	d917      	bls.n	8007f34 <_malloc_r+0xc0>
 8007f04:	19e2      	adds	r2, r4, r7
 8007f06:	6027      	str	r7, [r4, #0]
 8007f08:	42a3      	cmp	r3, r4
 8007f0a:	d111      	bne.n	8007f30 <_malloc_r+0xbc>
 8007f0c:	602a      	str	r2, [r5, #0]
 8007f0e:	6863      	ldr	r3, [r4, #4]
 8007f10:	6011      	str	r1, [r2, #0]
 8007f12:	6053      	str	r3, [r2, #4]
 8007f14:	0030      	movs	r0, r6
 8007f16:	0025      	movs	r5, r4
 8007f18:	f000 fbd6 	bl	80086c8 <__malloc_unlock>
 8007f1c:	2207      	movs	r2, #7
 8007f1e:	350b      	adds	r5, #11
 8007f20:	1d23      	adds	r3, r4, #4
 8007f22:	4395      	bics	r5, r2
 8007f24:	1aea      	subs	r2, r5, r3
 8007f26:	429d      	cmp	r5, r3
 8007f28:	d0e5      	beq.n	8007ef6 <_malloc_r+0x82>
 8007f2a:	1b5b      	subs	r3, r3, r5
 8007f2c:	50a3      	str	r3, [r4, r2]
 8007f2e:	e7e2      	b.n	8007ef6 <_malloc_r+0x82>
 8007f30:	605a      	str	r2, [r3, #4]
 8007f32:	e7ec      	b.n	8007f0e <_malloc_r+0x9a>
 8007f34:	6862      	ldr	r2, [r4, #4]
 8007f36:	42a3      	cmp	r3, r4
 8007f38:	d101      	bne.n	8007f3e <_malloc_r+0xca>
 8007f3a:	602a      	str	r2, [r5, #0]
 8007f3c:	e7ea      	b.n	8007f14 <_malloc_r+0xa0>
 8007f3e:	605a      	str	r2, [r3, #4]
 8007f40:	e7e8      	b.n	8007f14 <_malloc_r+0xa0>
 8007f42:	0023      	movs	r3, r4
 8007f44:	6864      	ldr	r4, [r4, #4]
 8007f46:	e7a7      	b.n	8007e98 <_malloc_r+0x24>
 8007f48:	002c      	movs	r4, r5
 8007f4a:	686d      	ldr	r5, [r5, #4]
 8007f4c:	e7af      	b.n	8007eae <_malloc_r+0x3a>
 8007f4e:	230c      	movs	r3, #12
 8007f50:	0030      	movs	r0, r6
 8007f52:	6033      	str	r3, [r6, #0]
 8007f54:	f000 fbb8 	bl	80086c8 <__malloc_unlock>
 8007f58:	e7cd      	b.n	8007ef6 <_malloc_r+0x82>
 8007f5a:	46c0      	nop			; (mov r8, r8)
 8007f5c:	20002014 	.word	0x20002014

08007f60 <__sfputc_r>:
 8007f60:	6893      	ldr	r3, [r2, #8]
 8007f62:	b510      	push	{r4, lr}
 8007f64:	3b01      	subs	r3, #1
 8007f66:	6093      	str	r3, [r2, #8]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	da04      	bge.n	8007f76 <__sfputc_r+0x16>
 8007f6c:	6994      	ldr	r4, [r2, #24]
 8007f6e:	42a3      	cmp	r3, r4
 8007f70:	db07      	blt.n	8007f82 <__sfputc_r+0x22>
 8007f72:	290a      	cmp	r1, #10
 8007f74:	d005      	beq.n	8007f82 <__sfputc_r+0x22>
 8007f76:	6813      	ldr	r3, [r2, #0]
 8007f78:	1c58      	adds	r0, r3, #1
 8007f7a:	6010      	str	r0, [r2, #0]
 8007f7c:	7019      	strb	r1, [r3, #0]
 8007f7e:	0008      	movs	r0, r1
 8007f80:	bd10      	pop	{r4, pc}
 8007f82:	f7ff fbff 	bl	8007784 <__swbuf_r>
 8007f86:	0001      	movs	r1, r0
 8007f88:	e7f9      	b.n	8007f7e <__sfputc_r+0x1e>

08007f8a <__sfputs_r>:
 8007f8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f8c:	0006      	movs	r6, r0
 8007f8e:	000f      	movs	r7, r1
 8007f90:	0014      	movs	r4, r2
 8007f92:	18d5      	adds	r5, r2, r3
 8007f94:	42ac      	cmp	r4, r5
 8007f96:	d101      	bne.n	8007f9c <__sfputs_r+0x12>
 8007f98:	2000      	movs	r0, #0
 8007f9a:	e007      	b.n	8007fac <__sfputs_r+0x22>
 8007f9c:	7821      	ldrb	r1, [r4, #0]
 8007f9e:	003a      	movs	r2, r7
 8007fa0:	0030      	movs	r0, r6
 8007fa2:	f7ff ffdd 	bl	8007f60 <__sfputc_r>
 8007fa6:	3401      	adds	r4, #1
 8007fa8:	1c43      	adds	r3, r0, #1
 8007faa:	d1f3      	bne.n	8007f94 <__sfputs_r+0xa>
 8007fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007fb0 <_vfiprintf_r>:
 8007fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fb2:	b0a1      	sub	sp, #132	; 0x84
 8007fb4:	0006      	movs	r6, r0
 8007fb6:	000c      	movs	r4, r1
 8007fb8:	001f      	movs	r7, r3
 8007fba:	9203      	str	r2, [sp, #12]
 8007fbc:	2800      	cmp	r0, #0
 8007fbe:	d004      	beq.n	8007fca <_vfiprintf_r+0x1a>
 8007fc0:	6983      	ldr	r3, [r0, #24]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d101      	bne.n	8007fca <_vfiprintf_r+0x1a>
 8007fc6:	f7ff fdd9 	bl	8007b7c <__sinit>
 8007fca:	4b8e      	ldr	r3, [pc, #568]	; (8008204 <_vfiprintf_r+0x254>)
 8007fcc:	429c      	cmp	r4, r3
 8007fce:	d11c      	bne.n	800800a <_vfiprintf_r+0x5a>
 8007fd0:	6874      	ldr	r4, [r6, #4]
 8007fd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fd4:	07db      	lsls	r3, r3, #31
 8007fd6:	d405      	bmi.n	8007fe4 <_vfiprintf_r+0x34>
 8007fd8:	89a3      	ldrh	r3, [r4, #12]
 8007fda:	059b      	lsls	r3, r3, #22
 8007fdc:	d402      	bmi.n	8007fe4 <_vfiprintf_r+0x34>
 8007fde:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fe0:	f7ff fe6d 	bl	8007cbe <__retarget_lock_acquire_recursive>
 8007fe4:	89a3      	ldrh	r3, [r4, #12]
 8007fe6:	071b      	lsls	r3, r3, #28
 8007fe8:	d502      	bpl.n	8007ff0 <_vfiprintf_r+0x40>
 8007fea:	6923      	ldr	r3, [r4, #16]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d11d      	bne.n	800802c <_vfiprintf_r+0x7c>
 8007ff0:	0021      	movs	r1, r4
 8007ff2:	0030      	movs	r0, r6
 8007ff4:	f7ff fc1c 	bl	8007830 <__swsetup_r>
 8007ff8:	2800      	cmp	r0, #0
 8007ffa:	d017      	beq.n	800802c <_vfiprintf_r+0x7c>
 8007ffc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ffe:	07db      	lsls	r3, r3, #31
 8008000:	d50d      	bpl.n	800801e <_vfiprintf_r+0x6e>
 8008002:	2001      	movs	r0, #1
 8008004:	4240      	negs	r0, r0
 8008006:	b021      	add	sp, #132	; 0x84
 8008008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800800a:	4b7f      	ldr	r3, [pc, #508]	; (8008208 <_vfiprintf_r+0x258>)
 800800c:	429c      	cmp	r4, r3
 800800e:	d101      	bne.n	8008014 <_vfiprintf_r+0x64>
 8008010:	68b4      	ldr	r4, [r6, #8]
 8008012:	e7de      	b.n	8007fd2 <_vfiprintf_r+0x22>
 8008014:	4b7d      	ldr	r3, [pc, #500]	; (800820c <_vfiprintf_r+0x25c>)
 8008016:	429c      	cmp	r4, r3
 8008018:	d1db      	bne.n	8007fd2 <_vfiprintf_r+0x22>
 800801a:	68f4      	ldr	r4, [r6, #12]
 800801c:	e7d9      	b.n	8007fd2 <_vfiprintf_r+0x22>
 800801e:	89a3      	ldrh	r3, [r4, #12]
 8008020:	059b      	lsls	r3, r3, #22
 8008022:	d4ee      	bmi.n	8008002 <_vfiprintf_r+0x52>
 8008024:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008026:	f7ff fe4b 	bl	8007cc0 <__retarget_lock_release_recursive>
 800802a:	e7ea      	b.n	8008002 <_vfiprintf_r+0x52>
 800802c:	2300      	movs	r3, #0
 800802e:	ad08      	add	r5, sp, #32
 8008030:	616b      	str	r3, [r5, #20]
 8008032:	3320      	adds	r3, #32
 8008034:	766b      	strb	r3, [r5, #25]
 8008036:	3310      	adds	r3, #16
 8008038:	76ab      	strb	r3, [r5, #26]
 800803a:	9707      	str	r7, [sp, #28]
 800803c:	9f03      	ldr	r7, [sp, #12]
 800803e:	783b      	ldrb	r3, [r7, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d001      	beq.n	8008048 <_vfiprintf_r+0x98>
 8008044:	2b25      	cmp	r3, #37	; 0x25
 8008046:	d14e      	bne.n	80080e6 <_vfiprintf_r+0x136>
 8008048:	9b03      	ldr	r3, [sp, #12]
 800804a:	1afb      	subs	r3, r7, r3
 800804c:	9305      	str	r3, [sp, #20]
 800804e:	9b03      	ldr	r3, [sp, #12]
 8008050:	429f      	cmp	r7, r3
 8008052:	d00d      	beq.n	8008070 <_vfiprintf_r+0xc0>
 8008054:	9b05      	ldr	r3, [sp, #20]
 8008056:	0021      	movs	r1, r4
 8008058:	0030      	movs	r0, r6
 800805a:	9a03      	ldr	r2, [sp, #12]
 800805c:	f7ff ff95 	bl	8007f8a <__sfputs_r>
 8008060:	1c43      	adds	r3, r0, #1
 8008062:	d100      	bne.n	8008066 <_vfiprintf_r+0xb6>
 8008064:	e0b5      	b.n	80081d2 <_vfiprintf_r+0x222>
 8008066:	696a      	ldr	r2, [r5, #20]
 8008068:	9b05      	ldr	r3, [sp, #20]
 800806a:	4694      	mov	ip, r2
 800806c:	4463      	add	r3, ip
 800806e:	616b      	str	r3, [r5, #20]
 8008070:	783b      	ldrb	r3, [r7, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d100      	bne.n	8008078 <_vfiprintf_r+0xc8>
 8008076:	e0ac      	b.n	80081d2 <_vfiprintf_r+0x222>
 8008078:	2201      	movs	r2, #1
 800807a:	1c7b      	adds	r3, r7, #1
 800807c:	9303      	str	r3, [sp, #12]
 800807e:	2300      	movs	r3, #0
 8008080:	4252      	negs	r2, r2
 8008082:	606a      	str	r2, [r5, #4]
 8008084:	a904      	add	r1, sp, #16
 8008086:	3254      	adds	r2, #84	; 0x54
 8008088:	1852      	adds	r2, r2, r1
 800808a:	602b      	str	r3, [r5, #0]
 800808c:	60eb      	str	r3, [r5, #12]
 800808e:	60ab      	str	r3, [r5, #8]
 8008090:	7013      	strb	r3, [r2, #0]
 8008092:	65ab      	str	r3, [r5, #88]	; 0x58
 8008094:	9b03      	ldr	r3, [sp, #12]
 8008096:	2205      	movs	r2, #5
 8008098:	7819      	ldrb	r1, [r3, #0]
 800809a:	485d      	ldr	r0, [pc, #372]	; (8008210 <_vfiprintf_r+0x260>)
 800809c:	f000 fb00 	bl	80086a0 <memchr>
 80080a0:	9b03      	ldr	r3, [sp, #12]
 80080a2:	1c5f      	adds	r7, r3, #1
 80080a4:	2800      	cmp	r0, #0
 80080a6:	d120      	bne.n	80080ea <_vfiprintf_r+0x13a>
 80080a8:	682a      	ldr	r2, [r5, #0]
 80080aa:	06d3      	lsls	r3, r2, #27
 80080ac:	d504      	bpl.n	80080b8 <_vfiprintf_r+0x108>
 80080ae:	2353      	movs	r3, #83	; 0x53
 80080b0:	a904      	add	r1, sp, #16
 80080b2:	185b      	adds	r3, r3, r1
 80080b4:	2120      	movs	r1, #32
 80080b6:	7019      	strb	r1, [r3, #0]
 80080b8:	0713      	lsls	r3, r2, #28
 80080ba:	d504      	bpl.n	80080c6 <_vfiprintf_r+0x116>
 80080bc:	2353      	movs	r3, #83	; 0x53
 80080be:	a904      	add	r1, sp, #16
 80080c0:	185b      	adds	r3, r3, r1
 80080c2:	212b      	movs	r1, #43	; 0x2b
 80080c4:	7019      	strb	r1, [r3, #0]
 80080c6:	9b03      	ldr	r3, [sp, #12]
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	2b2a      	cmp	r3, #42	; 0x2a
 80080cc:	d016      	beq.n	80080fc <_vfiprintf_r+0x14c>
 80080ce:	2100      	movs	r1, #0
 80080d0:	68eb      	ldr	r3, [r5, #12]
 80080d2:	9f03      	ldr	r7, [sp, #12]
 80080d4:	783a      	ldrb	r2, [r7, #0]
 80080d6:	1c78      	adds	r0, r7, #1
 80080d8:	3a30      	subs	r2, #48	; 0x30
 80080da:	4684      	mov	ip, r0
 80080dc:	2a09      	cmp	r2, #9
 80080de:	d94f      	bls.n	8008180 <_vfiprintf_r+0x1d0>
 80080e0:	2900      	cmp	r1, #0
 80080e2:	d111      	bne.n	8008108 <_vfiprintf_r+0x158>
 80080e4:	e017      	b.n	8008116 <_vfiprintf_r+0x166>
 80080e6:	3701      	adds	r7, #1
 80080e8:	e7a9      	b.n	800803e <_vfiprintf_r+0x8e>
 80080ea:	4b49      	ldr	r3, [pc, #292]	; (8008210 <_vfiprintf_r+0x260>)
 80080ec:	682a      	ldr	r2, [r5, #0]
 80080ee:	1ac0      	subs	r0, r0, r3
 80080f0:	2301      	movs	r3, #1
 80080f2:	4083      	lsls	r3, r0
 80080f4:	4313      	orrs	r3, r2
 80080f6:	602b      	str	r3, [r5, #0]
 80080f8:	9703      	str	r7, [sp, #12]
 80080fa:	e7cb      	b.n	8008094 <_vfiprintf_r+0xe4>
 80080fc:	9b07      	ldr	r3, [sp, #28]
 80080fe:	1d19      	adds	r1, r3, #4
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	9107      	str	r1, [sp, #28]
 8008104:	2b00      	cmp	r3, #0
 8008106:	db01      	blt.n	800810c <_vfiprintf_r+0x15c>
 8008108:	930b      	str	r3, [sp, #44]	; 0x2c
 800810a:	e004      	b.n	8008116 <_vfiprintf_r+0x166>
 800810c:	425b      	negs	r3, r3
 800810e:	60eb      	str	r3, [r5, #12]
 8008110:	2302      	movs	r3, #2
 8008112:	4313      	orrs	r3, r2
 8008114:	602b      	str	r3, [r5, #0]
 8008116:	783b      	ldrb	r3, [r7, #0]
 8008118:	2b2e      	cmp	r3, #46	; 0x2e
 800811a:	d10a      	bne.n	8008132 <_vfiprintf_r+0x182>
 800811c:	787b      	ldrb	r3, [r7, #1]
 800811e:	2b2a      	cmp	r3, #42	; 0x2a
 8008120:	d137      	bne.n	8008192 <_vfiprintf_r+0x1e2>
 8008122:	9b07      	ldr	r3, [sp, #28]
 8008124:	3702      	adds	r7, #2
 8008126:	1d1a      	adds	r2, r3, #4
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	9207      	str	r2, [sp, #28]
 800812c:	2b00      	cmp	r3, #0
 800812e:	db2d      	blt.n	800818c <_vfiprintf_r+0x1dc>
 8008130:	9309      	str	r3, [sp, #36]	; 0x24
 8008132:	2203      	movs	r2, #3
 8008134:	7839      	ldrb	r1, [r7, #0]
 8008136:	4837      	ldr	r0, [pc, #220]	; (8008214 <_vfiprintf_r+0x264>)
 8008138:	f000 fab2 	bl	80086a0 <memchr>
 800813c:	2800      	cmp	r0, #0
 800813e:	d007      	beq.n	8008150 <_vfiprintf_r+0x1a0>
 8008140:	4b34      	ldr	r3, [pc, #208]	; (8008214 <_vfiprintf_r+0x264>)
 8008142:	682a      	ldr	r2, [r5, #0]
 8008144:	1ac0      	subs	r0, r0, r3
 8008146:	2340      	movs	r3, #64	; 0x40
 8008148:	4083      	lsls	r3, r0
 800814a:	4313      	orrs	r3, r2
 800814c:	3701      	adds	r7, #1
 800814e:	602b      	str	r3, [r5, #0]
 8008150:	7839      	ldrb	r1, [r7, #0]
 8008152:	1c7b      	adds	r3, r7, #1
 8008154:	2206      	movs	r2, #6
 8008156:	4830      	ldr	r0, [pc, #192]	; (8008218 <_vfiprintf_r+0x268>)
 8008158:	9303      	str	r3, [sp, #12]
 800815a:	7629      	strb	r1, [r5, #24]
 800815c:	f000 faa0 	bl	80086a0 <memchr>
 8008160:	2800      	cmp	r0, #0
 8008162:	d045      	beq.n	80081f0 <_vfiprintf_r+0x240>
 8008164:	4b2d      	ldr	r3, [pc, #180]	; (800821c <_vfiprintf_r+0x26c>)
 8008166:	2b00      	cmp	r3, #0
 8008168:	d127      	bne.n	80081ba <_vfiprintf_r+0x20a>
 800816a:	2207      	movs	r2, #7
 800816c:	9b07      	ldr	r3, [sp, #28]
 800816e:	3307      	adds	r3, #7
 8008170:	4393      	bics	r3, r2
 8008172:	3308      	adds	r3, #8
 8008174:	9307      	str	r3, [sp, #28]
 8008176:	696b      	ldr	r3, [r5, #20]
 8008178:	9a04      	ldr	r2, [sp, #16]
 800817a:	189b      	adds	r3, r3, r2
 800817c:	616b      	str	r3, [r5, #20]
 800817e:	e75d      	b.n	800803c <_vfiprintf_r+0x8c>
 8008180:	210a      	movs	r1, #10
 8008182:	434b      	muls	r3, r1
 8008184:	4667      	mov	r7, ip
 8008186:	189b      	adds	r3, r3, r2
 8008188:	3909      	subs	r1, #9
 800818a:	e7a3      	b.n	80080d4 <_vfiprintf_r+0x124>
 800818c:	2301      	movs	r3, #1
 800818e:	425b      	negs	r3, r3
 8008190:	e7ce      	b.n	8008130 <_vfiprintf_r+0x180>
 8008192:	2300      	movs	r3, #0
 8008194:	001a      	movs	r2, r3
 8008196:	3701      	adds	r7, #1
 8008198:	606b      	str	r3, [r5, #4]
 800819a:	7839      	ldrb	r1, [r7, #0]
 800819c:	1c78      	adds	r0, r7, #1
 800819e:	3930      	subs	r1, #48	; 0x30
 80081a0:	4684      	mov	ip, r0
 80081a2:	2909      	cmp	r1, #9
 80081a4:	d903      	bls.n	80081ae <_vfiprintf_r+0x1fe>
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d0c3      	beq.n	8008132 <_vfiprintf_r+0x182>
 80081aa:	9209      	str	r2, [sp, #36]	; 0x24
 80081ac:	e7c1      	b.n	8008132 <_vfiprintf_r+0x182>
 80081ae:	230a      	movs	r3, #10
 80081b0:	435a      	muls	r2, r3
 80081b2:	4667      	mov	r7, ip
 80081b4:	1852      	adds	r2, r2, r1
 80081b6:	3b09      	subs	r3, #9
 80081b8:	e7ef      	b.n	800819a <_vfiprintf_r+0x1ea>
 80081ba:	ab07      	add	r3, sp, #28
 80081bc:	9300      	str	r3, [sp, #0]
 80081be:	0022      	movs	r2, r4
 80081c0:	0029      	movs	r1, r5
 80081c2:	0030      	movs	r0, r6
 80081c4:	4b16      	ldr	r3, [pc, #88]	; (8008220 <_vfiprintf_r+0x270>)
 80081c6:	e000      	b.n	80081ca <_vfiprintf_r+0x21a>
 80081c8:	bf00      	nop
 80081ca:	9004      	str	r0, [sp, #16]
 80081cc:	9b04      	ldr	r3, [sp, #16]
 80081ce:	3301      	adds	r3, #1
 80081d0:	d1d1      	bne.n	8008176 <_vfiprintf_r+0x1c6>
 80081d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081d4:	07db      	lsls	r3, r3, #31
 80081d6:	d405      	bmi.n	80081e4 <_vfiprintf_r+0x234>
 80081d8:	89a3      	ldrh	r3, [r4, #12]
 80081da:	059b      	lsls	r3, r3, #22
 80081dc:	d402      	bmi.n	80081e4 <_vfiprintf_r+0x234>
 80081de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081e0:	f7ff fd6e 	bl	8007cc0 <__retarget_lock_release_recursive>
 80081e4:	89a3      	ldrh	r3, [r4, #12]
 80081e6:	065b      	lsls	r3, r3, #25
 80081e8:	d500      	bpl.n	80081ec <_vfiprintf_r+0x23c>
 80081ea:	e70a      	b.n	8008002 <_vfiprintf_r+0x52>
 80081ec:	980d      	ldr	r0, [sp, #52]	; 0x34
 80081ee:	e70a      	b.n	8008006 <_vfiprintf_r+0x56>
 80081f0:	ab07      	add	r3, sp, #28
 80081f2:	9300      	str	r3, [sp, #0]
 80081f4:	0022      	movs	r2, r4
 80081f6:	0029      	movs	r1, r5
 80081f8:	0030      	movs	r0, r6
 80081fa:	4b09      	ldr	r3, [pc, #36]	; (8008220 <_vfiprintf_r+0x270>)
 80081fc:	f000 f882 	bl	8008304 <_printf_i>
 8008200:	e7e3      	b.n	80081ca <_vfiprintf_r+0x21a>
 8008202:	46c0      	nop			; (mov r8, r8)
 8008204:	080088c0 	.word	0x080088c0
 8008208:	080088e0 	.word	0x080088e0
 800820c:	080088a0 	.word	0x080088a0
 8008210:	08008900 	.word	0x08008900
 8008214:	08008906 	.word	0x08008906
 8008218:	0800890a 	.word	0x0800890a
 800821c:	00000000 	.word	0x00000000
 8008220:	08007f8b 	.word	0x08007f8b

08008224 <_printf_common>:
 8008224:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008226:	0015      	movs	r5, r2
 8008228:	9301      	str	r3, [sp, #4]
 800822a:	688a      	ldr	r2, [r1, #8]
 800822c:	690b      	ldr	r3, [r1, #16]
 800822e:	000c      	movs	r4, r1
 8008230:	9000      	str	r0, [sp, #0]
 8008232:	4293      	cmp	r3, r2
 8008234:	da00      	bge.n	8008238 <_printf_common+0x14>
 8008236:	0013      	movs	r3, r2
 8008238:	0022      	movs	r2, r4
 800823a:	602b      	str	r3, [r5, #0]
 800823c:	3243      	adds	r2, #67	; 0x43
 800823e:	7812      	ldrb	r2, [r2, #0]
 8008240:	2a00      	cmp	r2, #0
 8008242:	d001      	beq.n	8008248 <_printf_common+0x24>
 8008244:	3301      	adds	r3, #1
 8008246:	602b      	str	r3, [r5, #0]
 8008248:	6823      	ldr	r3, [r4, #0]
 800824a:	069b      	lsls	r3, r3, #26
 800824c:	d502      	bpl.n	8008254 <_printf_common+0x30>
 800824e:	682b      	ldr	r3, [r5, #0]
 8008250:	3302      	adds	r3, #2
 8008252:	602b      	str	r3, [r5, #0]
 8008254:	6822      	ldr	r2, [r4, #0]
 8008256:	2306      	movs	r3, #6
 8008258:	0017      	movs	r7, r2
 800825a:	401f      	ands	r7, r3
 800825c:	421a      	tst	r2, r3
 800825e:	d027      	beq.n	80082b0 <_printf_common+0x8c>
 8008260:	0023      	movs	r3, r4
 8008262:	3343      	adds	r3, #67	; 0x43
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	1e5a      	subs	r2, r3, #1
 8008268:	4193      	sbcs	r3, r2
 800826a:	6822      	ldr	r2, [r4, #0]
 800826c:	0692      	lsls	r2, r2, #26
 800826e:	d430      	bmi.n	80082d2 <_printf_common+0xae>
 8008270:	0022      	movs	r2, r4
 8008272:	9901      	ldr	r1, [sp, #4]
 8008274:	9800      	ldr	r0, [sp, #0]
 8008276:	9e08      	ldr	r6, [sp, #32]
 8008278:	3243      	adds	r2, #67	; 0x43
 800827a:	47b0      	blx	r6
 800827c:	1c43      	adds	r3, r0, #1
 800827e:	d025      	beq.n	80082cc <_printf_common+0xa8>
 8008280:	2306      	movs	r3, #6
 8008282:	6820      	ldr	r0, [r4, #0]
 8008284:	682a      	ldr	r2, [r5, #0]
 8008286:	68e1      	ldr	r1, [r4, #12]
 8008288:	2500      	movs	r5, #0
 800828a:	4003      	ands	r3, r0
 800828c:	2b04      	cmp	r3, #4
 800828e:	d103      	bne.n	8008298 <_printf_common+0x74>
 8008290:	1a8d      	subs	r5, r1, r2
 8008292:	43eb      	mvns	r3, r5
 8008294:	17db      	asrs	r3, r3, #31
 8008296:	401d      	ands	r5, r3
 8008298:	68a3      	ldr	r3, [r4, #8]
 800829a:	6922      	ldr	r2, [r4, #16]
 800829c:	4293      	cmp	r3, r2
 800829e:	dd01      	ble.n	80082a4 <_printf_common+0x80>
 80082a0:	1a9b      	subs	r3, r3, r2
 80082a2:	18ed      	adds	r5, r5, r3
 80082a4:	2700      	movs	r7, #0
 80082a6:	42bd      	cmp	r5, r7
 80082a8:	d120      	bne.n	80082ec <_printf_common+0xc8>
 80082aa:	2000      	movs	r0, #0
 80082ac:	e010      	b.n	80082d0 <_printf_common+0xac>
 80082ae:	3701      	adds	r7, #1
 80082b0:	68e3      	ldr	r3, [r4, #12]
 80082b2:	682a      	ldr	r2, [r5, #0]
 80082b4:	1a9b      	subs	r3, r3, r2
 80082b6:	42bb      	cmp	r3, r7
 80082b8:	ddd2      	ble.n	8008260 <_printf_common+0x3c>
 80082ba:	0022      	movs	r2, r4
 80082bc:	2301      	movs	r3, #1
 80082be:	9901      	ldr	r1, [sp, #4]
 80082c0:	9800      	ldr	r0, [sp, #0]
 80082c2:	9e08      	ldr	r6, [sp, #32]
 80082c4:	3219      	adds	r2, #25
 80082c6:	47b0      	blx	r6
 80082c8:	1c43      	adds	r3, r0, #1
 80082ca:	d1f0      	bne.n	80082ae <_printf_common+0x8a>
 80082cc:	2001      	movs	r0, #1
 80082ce:	4240      	negs	r0, r0
 80082d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80082d2:	2030      	movs	r0, #48	; 0x30
 80082d4:	18e1      	adds	r1, r4, r3
 80082d6:	3143      	adds	r1, #67	; 0x43
 80082d8:	7008      	strb	r0, [r1, #0]
 80082da:	0021      	movs	r1, r4
 80082dc:	1c5a      	adds	r2, r3, #1
 80082de:	3145      	adds	r1, #69	; 0x45
 80082e0:	7809      	ldrb	r1, [r1, #0]
 80082e2:	18a2      	adds	r2, r4, r2
 80082e4:	3243      	adds	r2, #67	; 0x43
 80082e6:	3302      	adds	r3, #2
 80082e8:	7011      	strb	r1, [r2, #0]
 80082ea:	e7c1      	b.n	8008270 <_printf_common+0x4c>
 80082ec:	0022      	movs	r2, r4
 80082ee:	2301      	movs	r3, #1
 80082f0:	9901      	ldr	r1, [sp, #4]
 80082f2:	9800      	ldr	r0, [sp, #0]
 80082f4:	9e08      	ldr	r6, [sp, #32]
 80082f6:	321a      	adds	r2, #26
 80082f8:	47b0      	blx	r6
 80082fa:	1c43      	adds	r3, r0, #1
 80082fc:	d0e6      	beq.n	80082cc <_printf_common+0xa8>
 80082fe:	3701      	adds	r7, #1
 8008300:	e7d1      	b.n	80082a6 <_printf_common+0x82>
	...

08008304 <_printf_i>:
 8008304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008306:	b08b      	sub	sp, #44	; 0x2c
 8008308:	9206      	str	r2, [sp, #24]
 800830a:	000a      	movs	r2, r1
 800830c:	3243      	adds	r2, #67	; 0x43
 800830e:	9307      	str	r3, [sp, #28]
 8008310:	9005      	str	r0, [sp, #20]
 8008312:	9204      	str	r2, [sp, #16]
 8008314:	7e0a      	ldrb	r2, [r1, #24]
 8008316:	000c      	movs	r4, r1
 8008318:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800831a:	2a78      	cmp	r2, #120	; 0x78
 800831c:	d807      	bhi.n	800832e <_printf_i+0x2a>
 800831e:	2a62      	cmp	r2, #98	; 0x62
 8008320:	d809      	bhi.n	8008336 <_printf_i+0x32>
 8008322:	2a00      	cmp	r2, #0
 8008324:	d100      	bne.n	8008328 <_printf_i+0x24>
 8008326:	e0c1      	b.n	80084ac <_printf_i+0x1a8>
 8008328:	2a58      	cmp	r2, #88	; 0x58
 800832a:	d100      	bne.n	800832e <_printf_i+0x2a>
 800832c:	e08c      	b.n	8008448 <_printf_i+0x144>
 800832e:	0026      	movs	r6, r4
 8008330:	3642      	adds	r6, #66	; 0x42
 8008332:	7032      	strb	r2, [r6, #0]
 8008334:	e022      	b.n	800837c <_printf_i+0x78>
 8008336:	0010      	movs	r0, r2
 8008338:	3863      	subs	r0, #99	; 0x63
 800833a:	2815      	cmp	r0, #21
 800833c:	d8f7      	bhi.n	800832e <_printf_i+0x2a>
 800833e:	f7f7 fee3 	bl	8000108 <__gnu_thumb1_case_shi>
 8008342:	0016      	.short	0x0016
 8008344:	fff6001f 	.word	0xfff6001f
 8008348:	fff6fff6 	.word	0xfff6fff6
 800834c:	001ffff6 	.word	0x001ffff6
 8008350:	fff6fff6 	.word	0xfff6fff6
 8008354:	fff6fff6 	.word	0xfff6fff6
 8008358:	003600a8 	.word	0x003600a8
 800835c:	fff6009a 	.word	0xfff6009a
 8008360:	00b9fff6 	.word	0x00b9fff6
 8008364:	0036fff6 	.word	0x0036fff6
 8008368:	fff6fff6 	.word	0xfff6fff6
 800836c:	009e      	.short	0x009e
 800836e:	0026      	movs	r6, r4
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	3642      	adds	r6, #66	; 0x42
 8008374:	1d11      	adds	r1, r2, #4
 8008376:	6019      	str	r1, [r3, #0]
 8008378:	6813      	ldr	r3, [r2, #0]
 800837a:	7033      	strb	r3, [r6, #0]
 800837c:	2301      	movs	r3, #1
 800837e:	e0a7      	b.n	80084d0 <_printf_i+0x1cc>
 8008380:	6808      	ldr	r0, [r1, #0]
 8008382:	6819      	ldr	r1, [r3, #0]
 8008384:	1d0a      	adds	r2, r1, #4
 8008386:	0605      	lsls	r5, r0, #24
 8008388:	d50b      	bpl.n	80083a2 <_printf_i+0x9e>
 800838a:	680d      	ldr	r5, [r1, #0]
 800838c:	601a      	str	r2, [r3, #0]
 800838e:	2d00      	cmp	r5, #0
 8008390:	da03      	bge.n	800839a <_printf_i+0x96>
 8008392:	232d      	movs	r3, #45	; 0x2d
 8008394:	9a04      	ldr	r2, [sp, #16]
 8008396:	426d      	negs	r5, r5
 8008398:	7013      	strb	r3, [r2, #0]
 800839a:	4b61      	ldr	r3, [pc, #388]	; (8008520 <_printf_i+0x21c>)
 800839c:	270a      	movs	r7, #10
 800839e:	9303      	str	r3, [sp, #12]
 80083a0:	e01b      	b.n	80083da <_printf_i+0xd6>
 80083a2:	680d      	ldr	r5, [r1, #0]
 80083a4:	601a      	str	r2, [r3, #0]
 80083a6:	0641      	lsls	r1, r0, #25
 80083a8:	d5f1      	bpl.n	800838e <_printf_i+0x8a>
 80083aa:	b22d      	sxth	r5, r5
 80083ac:	e7ef      	b.n	800838e <_printf_i+0x8a>
 80083ae:	680d      	ldr	r5, [r1, #0]
 80083b0:	6819      	ldr	r1, [r3, #0]
 80083b2:	1d08      	adds	r0, r1, #4
 80083b4:	6018      	str	r0, [r3, #0]
 80083b6:	062e      	lsls	r6, r5, #24
 80083b8:	d501      	bpl.n	80083be <_printf_i+0xba>
 80083ba:	680d      	ldr	r5, [r1, #0]
 80083bc:	e003      	b.n	80083c6 <_printf_i+0xc2>
 80083be:	066d      	lsls	r5, r5, #25
 80083c0:	d5fb      	bpl.n	80083ba <_printf_i+0xb6>
 80083c2:	680d      	ldr	r5, [r1, #0]
 80083c4:	b2ad      	uxth	r5, r5
 80083c6:	4b56      	ldr	r3, [pc, #344]	; (8008520 <_printf_i+0x21c>)
 80083c8:	2708      	movs	r7, #8
 80083ca:	9303      	str	r3, [sp, #12]
 80083cc:	2a6f      	cmp	r2, #111	; 0x6f
 80083ce:	d000      	beq.n	80083d2 <_printf_i+0xce>
 80083d0:	3702      	adds	r7, #2
 80083d2:	0023      	movs	r3, r4
 80083d4:	2200      	movs	r2, #0
 80083d6:	3343      	adds	r3, #67	; 0x43
 80083d8:	701a      	strb	r2, [r3, #0]
 80083da:	6863      	ldr	r3, [r4, #4]
 80083dc:	60a3      	str	r3, [r4, #8]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	db03      	blt.n	80083ea <_printf_i+0xe6>
 80083e2:	2204      	movs	r2, #4
 80083e4:	6821      	ldr	r1, [r4, #0]
 80083e6:	4391      	bics	r1, r2
 80083e8:	6021      	str	r1, [r4, #0]
 80083ea:	2d00      	cmp	r5, #0
 80083ec:	d102      	bne.n	80083f4 <_printf_i+0xf0>
 80083ee:	9e04      	ldr	r6, [sp, #16]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d00c      	beq.n	800840e <_printf_i+0x10a>
 80083f4:	9e04      	ldr	r6, [sp, #16]
 80083f6:	0028      	movs	r0, r5
 80083f8:	0039      	movs	r1, r7
 80083fa:	f7f7 ff15 	bl	8000228 <__aeabi_uidivmod>
 80083fe:	9b03      	ldr	r3, [sp, #12]
 8008400:	3e01      	subs	r6, #1
 8008402:	5c5b      	ldrb	r3, [r3, r1]
 8008404:	7033      	strb	r3, [r6, #0]
 8008406:	002b      	movs	r3, r5
 8008408:	0005      	movs	r5, r0
 800840a:	429f      	cmp	r7, r3
 800840c:	d9f3      	bls.n	80083f6 <_printf_i+0xf2>
 800840e:	2f08      	cmp	r7, #8
 8008410:	d109      	bne.n	8008426 <_printf_i+0x122>
 8008412:	6823      	ldr	r3, [r4, #0]
 8008414:	07db      	lsls	r3, r3, #31
 8008416:	d506      	bpl.n	8008426 <_printf_i+0x122>
 8008418:	6863      	ldr	r3, [r4, #4]
 800841a:	6922      	ldr	r2, [r4, #16]
 800841c:	4293      	cmp	r3, r2
 800841e:	dc02      	bgt.n	8008426 <_printf_i+0x122>
 8008420:	2330      	movs	r3, #48	; 0x30
 8008422:	3e01      	subs	r6, #1
 8008424:	7033      	strb	r3, [r6, #0]
 8008426:	9b04      	ldr	r3, [sp, #16]
 8008428:	1b9b      	subs	r3, r3, r6
 800842a:	6123      	str	r3, [r4, #16]
 800842c:	9b07      	ldr	r3, [sp, #28]
 800842e:	0021      	movs	r1, r4
 8008430:	9300      	str	r3, [sp, #0]
 8008432:	9805      	ldr	r0, [sp, #20]
 8008434:	9b06      	ldr	r3, [sp, #24]
 8008436:	aa09      	add	r2, sp, #36	; 0x24
 8008438:	f7ff fef4 	bl	8008224 <_printf_common>
 800843c:	1c43      	adds	r3, r0, #1
 800843e:	d14c      	bne.n	80084da <_printf_i+0x1d6>
 8008440:	2001      	movs	r0, #1
 8008442:	4240      	negs	r0, r0
 8008444:	b00b      	add	sp, #44	; 0x2c
 8008446:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008448:	3145      	adds	r1, #69	; 0x45
 800844a:	700a      	strb	r2, [r1, #0]
 800844c:	4a34      	ldr	r2, [pc, #208]	; (8008520 <_printf_i+0x21c>)
 800844e:	9203      	str	r2, [sp, #12]
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	6821      	ldr	r1, [r4, #0]
 8008454:	ca20      	ldmia	r2!, {r5}
 8008456:	601a      	str	r2, [r3, #0]
 8008458:	0608      	lsls	r0, r1, #24
 800845a:	d516      	bpl.n	800848a <_printf_i+0x186>
 800845c:	07cb      	lsls	r3, r1, #31
 800845e:	d502      	bpl.n	8008466 <_printf_i+0x162>
 8008460:	2320      	movs	r3, #32
 8008462:	4319      	orrs	r1, r3
 8008464:	6021      	str	r1, [r4, #0]
 8008466:	2710      	movs	r7, #16
 8008468:	2d00      	cmp	r5, #0
 800846a:	d1b2      	bne.n	80083d2 <_printf_i+0xce>
 800846c:	2320      	movs	r3, #32
 800846e:	6822      	ldr	r2, [r4, #0]
 8008470:	439a      	bics	r2, r3
 8008472:	6022      	str	r2, [r4, #0]
 8008474:	e7ad      	b.n	80083d2 <_printf_i+0xce>
 8008476:	2220      	movs	r2, #32
 8008478:	6809      	ldr	r1, [r1, #0]
 800847a:	430a      	orrs	r2, r1
 800847c:	6022      	str	r2, [r4, #0]
 800847e:	0022      	movs	r2, r4
 8008480:	2178      	movs	r1, #120	; 0x78
 8008482:	3245      	adds	r2, #69	; 0x45
 8008484:	7011      	strb	r1, [r2, #0]
 8008486:	4a27      	ldr	r2, [pc, #156]	; (8008524 <_printf_i+0x220>)
 8008488:	e7e1      	b.n	800844e <_printf_i+0x14a>
 800848a:	0648      	lsls	r0, r1, #25
 800848c:	d5e6      	bpl.n	800845c <_printf_i+0x158>
 800848e:	b2ad      	uxth	r5, r5
 8008490:	e7e4      	b.n	800845c <_printf_i+0x158>
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	680d      	ldr	r5, [r1, #0]
 8008496:	1d10      	adds	r0, r2, #4
 8008498:	6949      	ldr	r1, [r1, #20]
 800849a:	6018      	str	r0, [r3, #0]
 800849c:	6813      	ldr	r3, [r2, #0]
 800849e:	062e      	lsls	r6, r5, #24
 80084a0:	d501      	bpl.n	80084a6 <_printf_i+0x1a2>
 80084a2:	6019      	str	r1, [r3, #0]
 80084a4:	e002      	b.n	80084ac <_printf_i+0x1a8>
 80084a6:	066d      	lsls	r5, r5, #25
 80084a8:	d5fb      	bpl.n	80084a2 <_printf_i+0x19e>
 80084aa:	8019      	strh	r1, [r3, #0]
 80084ac:	2300      	movs	r3, #0
 80084ae:	9e04      	ldr	r6, [sp, #16]
 80084b0:	6123      	str	r3, [r4, #16]
 80084b2:	e7bb      	b.n	800842c <_printf_i+0x128>
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	1d11      	adds	r1, r2, #4
 80084b8:	6019      	str	r1, [r3, #0]
 80084ba:	6816      	ldr	r6, [r2, #0]
 80084bc:	2100      	movs	r1, #0
 80084be:	0030      	movs	r0, r6
 80084c0:	6862      	ldr	r2, [r4, #4]
 80084c2:	f000 f8ed 	bl	80086a0 <memchr>
 80084c6:	2800      	cmp	r0, #0
 80084c8:	d001      	beq.n	80084ce <_printf_i+0x1ca>
 80084ca:	1b80      	subs	r0, r0, r6
 80084cc:	6060      	str	r0, [r4, #4]
 80084ce:	6863      	ldr	r3, [r4, #4]
 80084d0:	6123      	str	r3, [r4, #16]
 80084d2:	2300      	movs	r3, #0
 80084d4:	9a04      	ldr	r2, [sp, #16]
 80084d6:	7013      	strb	r3, [r2, #0]
 80084d8:	e7a8      	b.n	800842c <_printf_i+0x128>
 80084da:	6923      	ldr	r3, [r4, #16]
 80084dc:	0032      	movs	r2, r6
 80084de:	9906      	ldr	r1, [sp, #24]
 80084e0:	9805      	ldr	r0, [sp, #20]
 80084e2:	9d07      	ldr	r5, [sp, #28]
 80084e4:	47a8      	blx	r5
 80084e6:	1c43      	adds	r3, r0, #1
 80084e8:	d0aa      	beq.n	8008440 <_printf_i+0x13c>
 80084ea:	6823      	ldr	r3, [r4, #0]
 80084ec:	079b      	lsls	r3, r3, #30
 80084ee:	d415      	bmi.n	800851c <_printf_i+0x218>
 80084f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084f2:	68e0      	ldr	r0, [r4, #12]
 80084f4:	4298      	cmp	r0, r3
 80084f6:	daa5      	bge.n	8008444 <_printf_i+0x140>
 80084f8:	0018      	movs	r0, r3
 80084fa:	e7a3      	b.n	8008444 <_printf_i+0x140>
 80084fc:	0022      	movs	r2, r4
 80084fe:	2301      	movs	r3, #1
 8008500:	9906      	ldr	r1, [sp, #24]
 8008502:	9805      	ldr	r0, [sp, #20]
 8008504:	9e07      	ldr	r6, [sp, #28]
 8008506:	3219      	adds	r2, #25
 8008508:	47b0      	blx	r6
 800850a:	1c43      	adds	r3, r0, #1
 800850c:	d098      	beq.n	8008440 <_printf_i+0x13c>
 800850e:	3501      	adds	r5, #1
 8008510:	68e3      	ldr	r3, [r4, #12]
 8008512:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008514:	1a9b      	subs	r3, r3, r2
 8008516:	42ab      	cmp	r3, r5
 8008518:	dcf0      	bgt.n	80084fc <_printf_i+0x1f8>
 800851a:	e7e9      	b.n	80084f0 <_printf_i+0x1ec>
 800851c:	2500      	movs	r5, #0
 800851e:	e7f7      	b.n	8008510 <_printf_i+0x20c>
 8008520:	08008911 	.word	0x08008911
 8008524:	08008922 	.word	0x08008922

08008528 <_sbrk_r>:
 8008528:	2300      	movs	r3, #0
 800852a:	b570      	push	{r4, r5, r6, lr}
 800852c:	4d06      	ldr	r5, [pc, #24]	; (8008548 <_sbrk_r+0x20>)
 800852e:	0004      	movs	r4, r0
 8008530:	0008      	movs	r0, r1
 8008532:	602b      	str	r3, [r5, #0]
 8008534:	f000 f8e4 	bl	8008700 <_sbrk>
 8008538:	1c43      	adds	r3, r0, #1
 800853a:	d103      	bne.n	8008544 <_sbrk_r+0x1c>
 800853c:	682b      	ldr	r3, [r5, #0]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d000      	beq.n	8008544 <_sbrk_r+0x1c>
 8008542:	6023      	str	r3, [r4, #0]
 8008544:	bd70      	pop	{r4, r5, r6, pc}
 8008546:	46c0      	nop			; (mov r8, r8)
 8008548:	2000201c 	.word	0x2000201c

0800854c <__sread>:
 800854c:	b570      	push	{r4, r5, r6, lr}
 800854e:	000c      	movs	r4, r1
 8008550:	250e      	movs	r5, #14
 8008552:	5f49      	ldrsh	r1, [r1, r5]
 8008554:	f000 f8c0 	bl	80086d8 <_read_r>
 8008558:	2800      	cmp	r0, #0
 800855a:	db03      	blt.n	8008564 <__sread+0x18>
 800855c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800855e:	181b      	adds	r3, r3, r0
 8008560:	6563      	str	r3, [r4, #84]	; 0x54
 8008562:	bd70      	pop	{r4, r5, r6, pc}
 8008564:	89a3      	ldrh	r3, [r4, #12]
 8008566:	4a02      	ldr	r2, [pc, #8]	; (8008570 <__sread+0x24>)
 8008568:	4013      	ands	r3, r2
 800856a:	81a3      	strh	r3, [r4, #12]
 800856c:	e7f9      	b.n	8008562 <__sread+0x16>
 800856e:	46c0      	nop			; (mov r8, r8)
 8008570:	ffffefff 	.word	0xffffefff

08008574 <__swrite>:
 8008574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008576:	001f      	movs	r7, r3
 8008578:	898b      	ldrh	r3, [r1, #12]
 800857a:	0005      	movs	r5, r0
 800857c:	000c      	movs	r4, r1
 800857e:	0016      	movs	r6, r2
 8008580:	05db      	lsls	r3, r3, #23
 8008582:	d505      	bpl.n	8008590 <__swrite+0x1c>
 8008584:	230e      	movs	r3, #14
 8008586:	5ec9      	ldrsh	r1, [r1, r3]
 8008588:	2200      	movs	r2, #0
 800858a:	2302      	movs	r3, #2
 800858c:	f000 f874 	bl	8008678 <_lseek_r>
 8008590:	89a3      	ldrh	r3, [r4, #12]
 8008592:	4a05      	ldr	r2, [pc, #20]	; (80085a8 <__swrite+0x34>)
 8008594:	0028      	movs	r0, r5
 8008596:	4013      	ands	r3, r2
 8008598:	81a3      	strh	r3, [r4, #12]
 800859a:	0032      	movs	r2, r6
 800859c:	230e      	movs	r3, #14
 800859e:	5ee1      	ldrsh	r1, [r4, r3]
 80085a0:	003b      	movs	r3, r7
 80085a2:	f000 f81f 	bl	80085e4 <_write_r>
 80085a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085a8:	ffffefff 	.word	0xffffefff

080085ac <__sseek>:
 80085ac:	b570      	push	{r4, r5, r6, lr}
 80085ae:	000c      	movs	r4, r1
 80085b0:	250e      	movs	r5, #14
 80085b2:	5f49      	ldrsh	r1, [r1, r5]
 80085b4:	f000 f860 	bl	8008678 <_lseek_r>
 80085b8:	89a3      	ldrh	r3, [r4, #12]
 80085ba:	1c42      	adds	r2, r0, #1
 80085bc:	d103      	bne.n	80085c6 <__sseek+0x1a>
 80085be:	4a05      	ldr	r2, [pc, #20]	; (80085d4 <__sseek+0x28>)
 80085c0:	4013      	ands	r3, r2
 80085c2:	81a3      	strh	r3, [r4, #12]
 80085c4:	bd70      	pop	{r4, r5, r6, pc}
 80085c6:	2280      	movs	r2, #128	; 0x80
 80085c8:	0152      	lsls	r2, r2, #5
 80085ca:	4313      	orrs	r3, r2
 80085cc:	81a3      	strh	r3, [r4, #12]
 80085ce:	6560      	str	r0, [r4, #84]	; 0x54
 80085d0:	e7f8      	b.n	80085c4 <__sseek+0x18>
 80085d2:	46c0      	nop			; (mov r8, r8)
 80085d4:	ffffefff 	.word	0xffffefff

080085d8 <__sclose>:
 80085d8:	b510      	push	{r4, lr}
 80085da:	230e      	movs	r3, #14
 80085dc:	5ec9      	ldrsh	r1, [r1, r3]
 80085de:	f000 f815 	bl	800860c <_close_r>
 80085e2:	bd10      	pop	{r4, pc}

080085e4 <_write_r>:
 80085e4:	b570      	push	{r4, r5, r6, lr}
 80085e6:	0004      	movs	r4, r0
 80085e8:	0008      	movs	r0, r1
 80085ea:	0011      	movs	r1, r2
 80085ec:	001a      	movs	r2, r3
 80085ee:	2300      	movs	r3, #0
 80085f0:	4d05      	ldr	r5, [pc, #20]	; (8008608 <_write_r+0x24>)
 80085f2:	602b      	str	r3, [r5, #0]
 80085f4:	f7f8 fd6d 	bl	80010d2 <_write>
 80085f8:	1c43      	adds	r3, r0, #1
 80085fa:	d103      	bne.n	8008604 <_write_r+0x20>
 80085fc:	682b      	ldr	r3, [r5, #0]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d000      	beq.n	8008604 <_write_r+0x20>
 8008602:	6023      	str	r3, [r4, #0]
 8008604:	bd70      	pop	{r4, r5, r6, pc}
 8008606:	46c0      	nop			; (mov r8, r8)
 8008608:	2000201c 	.word	0x2000201c

0800860c <_close_r>:
 800860c:	2300      	movs	r3, #0
 800860e:	b570      	push	{r4, r5, r6, lr}
 8008610:	4d06      	ldr	r5, [pc, #24]	; (800862c <_close_r+0x20>)
 8008612:	0004      	movs	r4, r0
 8008614:	0008      	movs	r0, r1
 8008616:	602b      	str	r3, [r5, #0]
 8008618:	f7f8 fd77 	bl	800110a <_close>
 800861c:	1c43      	adds	r3, r0, #1
 800861e:	d103      	bne.n	8008628 <_close_r+0x1c>
 8008620:	682b      	ldr	r3, [r5, #0]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d000      	beq.n	8008628 <_close_r+0x1c>
 8008626:	6023      	str	r3, [r4, #0]
 8008628:	bd70      	pop	{r4, r5, r6, pc}
 800862a:	46c0      	nop			; (mov r8, r8)
 800862c:	2000201c 	.word	0x2000201c

08008630 <_fstat_r>:
 8008630:	2300      	movs	r3, #0
 8008632:	b570      	push	{r4, r5, r6, lr}
 8008634:	4d06      	ldr	r5, [pc, #24]	; (8008650 <_fstat_r+0x20>)
 8008636:	0004      	movs	r4, r0
 8008638:	0008      	movs	r0, r1
 800863a:	0011      	movs	r1, r2
 800863c:	602b      	str	r3, [r5, #0]
 800863e:	f7f8 fd6e 	bl	800111e <_fstat>
 8008642:	1c43      	adds	r3, r0, #1
 8008644:	d103      	bne.n	800864e <_fstat_r+0x1e>
 8008646:	682b      	ldr	r3, [r5, #0]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d000      	beq.n	800864e <_fstat_r+0x1e>
 800864c:	6023      	str	r3, [r4, #0]
 800864e:	bd70      	pop	{r4, r5, r6, pc}
 8008650:	2000201c 	.word	0x2000201c

08008654 <_isatty_r>:
 8008654:	2300      	movs	r3, #0
 8008656:	b570      	push	{r4, r5, r6, lr}
 8008658:	4d06      	ldr	r5, [pc, #24]	; (8008674 <_isatty_r+0x20>)
 800865a:	0004      	movs	r4, r0
 800865c:	0008      	movs	r0, r1
 800865e:	602b      	str	r3, [r5, #0]
 8008660:	f7f8 fd6b 	bl	800113a <_isatty>
 8008664:	1c43      	adds	r3, r0, #1
 8008666:	d103      	bne.n	8008670 <_isatty_r+0x1c>
 8008668:	682b      	ldr	r3, [r5, #0]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d000      	beq.n	8008670 <_isatty_r+0x1c>
 800866e:	6023      	str	r3, [r4, #0]
 8008670:	bd70      	pop	{r4, r5, r6, pc}
 8008672:	46c0      	nop			; (mov r8, r8)
 8008674:	2000201c 	.word	0x2000201c

08008678 <_lseek_r>:
 8008678:	b570      	push	{r4, r5, r6, lr}
 800867a:	0004      	movs	r4, r0
 800867c:	0008      	movs	r0, r1
 800867e:	0011      	movs	r1, r2
 8008680:	001a      	movs	r2, r3
 8008682:	2300      	movs	r3, #0
 8008684:	4d05      	ldr	r5, [pc, #20]	; (800869c <_lseek_r+0x24>)
 8008686:	602b      	str	r3, [r5, #0]
 8008688:	f7f8 fd60 	bl	800114c <_lseek>
 800868c:	1c43      	adds	r3, r0, #1
 800868e:	d103      	bne.n	8008698 <_lseek_r+0x20>
 8008690:	682b      	ldr	r3, [r5, #0]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d000      	beq.n	8008698 <_lseek_r+0x20>
 8008696:	6023      	str	r3, [r4, #0]
 8008698:	bd70      	pop	{r4, r5, r6, pc}
 800869a:	46c0      	nop			; (mov r8, r8)
 800869c:	2000201c 	.word	0x2000201c

080086a0 <memchr>:
 80086a0:	b2c9      	uxtb	r1, r1
 80086a2:	1882      	adds	r2, r0, r2
 80086a4:	4290      	cmp	r0, r2
 80086a6:	d101      	bne.n	80086ac <memchr+0xc>
 80086a8:	2000      	movs	r0, #0
 80086aa:	4770      	bx	lr
 80086ac:	7803      	ldrb	r3, [r0, #0]
 80086ae:	428b      	cmp	r3, r1
 80086b0:	d0fb      	beq.n	80086aa <memchr+0xa>
 80086b2:	3001      	adds	r0, #1
 80086b4:	e7f6      	b.n	80086a4 <memchr+0x4>
	...

080086b8 <__malloc_lock>:
 80086b8:	b510      	push	{r4, lr}
 80086ba:	4802      	ldr	r0, [pc, #8]	; (80086c4 <__malloc_lock+0xc>)
 80086bc:	f7ff faff 	bl	8007cbe <__retarget_lock_acquire_recursive>
 80086c0:	bd10      	pop	{r4, pc}
 80086c2:	46c0      	nop			; (mov r8, r8)
 80086c4:	20002010 	.word	0x20002010

080086c8 <__malloc_unlock>:
 80086c8:	b510      	push	{r4, lr}
 80086ca:	4802      	ldr	r0, [pc, #8]	; (80086d4 <__malloc_unlock+0xc>)
 80086cc:	f7ff faf8 	bl	8007cc0 <__retarget_lock_release_recursive>
 80086d0:	bd10      	pop	{r4, pc}
 80086d2:	46c0      	nop			; (mov r8, r8)
 80086d4:	20002010 	.word	0x20002010

080086d8 <_read_r>:
 80086d8:	b570      	push	{r4, r5, r6, lr}
 80086da:	0004      	movs	r4, r0
 80086dc:	0008      	movs	r0, r1
 80086de:	0011      	movs	r1, r2
 80086e0:	001a      	movs	r2, r3
 80086e2:	2300      	movs	r3, #0
 80086e4:	4d05      	ldr	r5, [pc, #20]	; (80086fc <_read_r+0x24>)
 80086e6:	602b      	str	r3, [r5, #0]
 80086e8:	f7f8 fcd6 	bl	8001098 <_read>
 80086ec:	1c43      	adds	r3, r0, #1
 80086ee:	d103      	bne.n	80086f8 <_read_r+0x20>
 80086f0:	682b      	ldr	r3, [r5, #0]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d000      	beq.n	80086f8 <_read_r+0x20>
 80086f6:	6023      	str	r3, [r4, #0]
 80086f8:	bd70      	pop	{r4, r5, r6, pc}
 80086fa:	46c0      	nop			; (mov r8, r8)
 80086fc:	2000201c 	.word	0x2000201c

08008700 <_sbrk>:
 8008700:	4a05      	ldr	r2, [pc, #20]	; (8008718 <_sbrk+0x18>)
 8008702:	0003      	movs	r3, r0
 8008704:	6811      	ldr	r1, [r2, #0]
 8008706:	2900      	cmp	r1, #0
 8008708:	d101      	bne.n	800870e <_sbrk+0xe>
 800870a:	4904      	ldr	r1, [pc, #16]	; (800871c <_sbrk+0x1c>)
 800870c:	6011      	str	r1, [r2, #0]
 800870e:	6810      	ldr	r0, [r2, #0]
 8008710:	18c3      	adds	r3, r0, r3
 8008712:	6013      	str	r3, [r2, #0]
 8008714:	4770      	bx	lr
 8008716:	46c0      	nop			; (mov r8, r8)
 8008718:	20002020 	.word	0x20002020
 800871c:	20002028 	.word	0x20002028

08008720 <_init>:
 8008720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008722:	46c0      	nop			; (mov r8, r8)
 8008724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008726:	bc08      	pop	{r3}
 8008728:	469e      	mov	lr, r3
 800872a:	4770      	bx	lr

0800872c <_fini>:
 800872c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800872e:	46c0      	nop			; (mov r8, r8)
 8008730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008732:	bc08      	pop	{r3}
 8008734:	469e      	mov	lr, r3
 8008736:	4770      	bx	lr
